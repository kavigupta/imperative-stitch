{"pdm_build.py": "import os\nfrom typing import Any, Dict, List\n\nfrom pdm.backend.hooks import Context\n\nTIANGOLO_BUILD_PACKAGE = os.getenv(\"TIANGOLO_BUILD_PACKAGE\", \"fastapi\")\n\n\ndef pdm_build_initialize(context: Context) -> None:\n    metadata = context.config.metadata\n    # Get custom config for the current package, from the env var\n    config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"packages\"][TIANGOLO_BUILD_PACKAGE]\n    project_config: Dict[str, Any] = config[\"project\"]\n    # Get main optional dependencies, extras\n    optional_dependencies: Dict[str, List[str]] = metadata.get(\n        \"optional-dependencies\", {}\n    )\n    # Get custom optional dependencies name to always include in this (non-slim) package\n    include_optional_dependencies: List[str] = config.get(\n        \"include-optional-dependencies\", []\n    )\n    # Override main [project] configs with custom configs for this package\n    for key, value in project_config.items():\n        metadata[key] = value\n    # Get custom build config for the current package\n    build_config: Dict[str, Any] = (\n        config.get(\"tool\", {}).get(\"pdm\", {}).get(\"build\", {})\n    )\n    # Override PDM build config with custom build config for this package\n    for key, value in build_config.items():\n        context.config.build_config[key] = value\n    # Get main dependencies\n    dependencies: List[str] = metadata.get(\"dependencies\", [])\n    # Add optional dependencies to the default dependencies for this (non-slim) package\n    for include_optional in include_optional_dependencies:\n        optional_dependencies_group = optional_dependencies.get(include_optional, [])\n        dependencies.extend(optional_dependencies_group)\n", "fastapi/param_functions.py": "from typing import Any, Callable, Dict, List, Optional, Sequence, Union\n\nfrom fastapi import params\nfrom fastapi._compat import Undefined\nfrom fastapi.openapi.models import Example\nfrom typing_extensions import Annotated, Doc, deprecated\n\n_Unset: Any = Undefined\n\n\ndef Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [FastAPI docs for Path Parameters and Numeric Validations](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import FastAPI, Path\n\n    app = FastAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [FastAPI docs for Header Parameters](https://fastapi.tiangolo.com/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [FastAPI docs for Body - Multiple Parameters](https://fastapi.tiangolo.com/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n\n\ndef Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, FastAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Declare a FastAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, FastAPI will call it for you.\n\n    Read more about it in the\n    [FastAPI docs for Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n\n    app = FastAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)\n\n\ndef Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, FastAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionaly vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Declare a FastAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, FastAPI will call it for you.\n\n    Read more about it in the\n    [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/) and\n    in the\n    [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = FastAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n", "fastapi/exceptions.py": "from typing import Any, Dict, Optional, Sequence, Type, Union\n\nfrom pydantic import BaseModel, create_model\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\nfrom starlette.exceptions import WebSocketException as StarletteWebSocketException\nfrom typing_extensions import Annotated, Doc\n\n\nclass HTTPException(StarletteHTTPException):\n    \"\"\"\n    An HTTP exception you can raise in your own code to show errors to the client.\n\n    This is for client errors, invalid authentication, invalid data, etc. Not for server\n    errors in your code.\n\n    Read more about it in the\n    [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from fastapi import FastAPI, HTTPException\n\n    app = FastAPI()\n\n    items = {\"foo\": \"The Foo Wrestlers\"}\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: str):\n        if item_id not in items:\n            raise HTTPException(status_code=404, detail=\"Item not found\")\n        return {\"item\": items[item_id]}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        status_code: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                HTTP status code to send to the client.\n                \"\"\"\n            ),\n        ],\n        detail: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                Any data to be sent to the client in the `detail` key of the JSON\n                response.\n                \"\"\"\n            ),\n        ] = None,\n        headers: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                Any headers to send to the client in the response.\n                \"\"\"\n            ),\n        ] = None,\n    ) -> None:\n        super().__init__(status_code=status_code, detail=detail, headers=headers)\n\n\nclass WebSocketException(StarletteWebSocketException):\n    \"\"\"\n    A WebSocket exception you can raise in your own code to show errors to the client.\n\n    This is for client errors, invalid authentication, invalid data, etc. Not for server\n    errors in your code.\n\n    Read more about it in the\n    [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import (\n        Cookie,\n        FastAPI,\n        WebSocket,\n        WebSocketException,\n        status,\n    )\n\n    app = FastAPI()\n\n    @app.websocket(\"/items/{item_id}/ws\")\n    async def websocket_endpoint(\n        *,\n        websocket: WebSocket,\n        session: Annotated[str | None, Cookie()] = None,\n        item_id: str,\n    ):\n        if session is None:\n            raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Session cookie is: {session}\")\n            await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        code: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                A closing code from the\n                [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n                \"\"\"\n            ),\n        ],\n        reason: Annotated[\n            Union[str, None],\n            Doc(\n                \"\"\"\n                The reason to close the WebSocket connection.\n\n                It is UTF-8-encoded data. The interpretation of the reason is up to the\n                application, it is not specified by the WebSocket specification.\n\n                It could contain text that could be human-readable or interpretable\n                by the client code, etc.\n                \"\"\"\n            ),\n        ] = None,\n    ) -> None:\n        super().__init__(code=code, reason=reason)\n\n\nRequestErrorModel: Type[BaseModel] = create_model(\"Request\")\nWebSocketErrorModel: Type[BaseModel] = create_model(\"WebSocket\")\n\n\nclass FastAPIError(RuntimeError):\n    \"\"\"\n    A generic, FastAPI-specific error.\n    \"\"\"\n\n\nclass ValidationException(Exception):\n    def __init__(self, errors: Sequence[Any]) -> None:\n        self._errors = errors\n\n    def errors(self) -> Sequence[Any]:\n        return self._errors\n\n\nclass RequestValidationError(ValidationException):\n    def __init__(self, errors: Sequence[Any], *, body: Any = None) -> None:\n        super().__init__(errors)\n        self.body = body\n\n\nclass WebSocketRequestValidationError(ValidationException):\n    pass\n\n\nclass ResponseValidationError(ValidationException):\n    def __init__(self, errors: Sequence[Any], *, body: Any = None) -> None:\n        super().__init__(errors)\n        self.body = body\n\n    def __str__(self) -> str:\n        message = f\"{len(self._errors)} validation errors:\\n\"\n        for err in self._errors:\n            message += f\"  {err}\\n\"\n        return message\n", "fastapi/concurrency.py": "from contextlib import asynccontextmanager as asynccontextmanager\nfrom typing import AsyncGenerator, ContextManager, TypeVar\n\nimport anyio\nfrom anyio import CapacityLimiter\nfrom starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\nfrom starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\nfrom starlette.concurrency import (  # noqa\n    run_until_first_complete as run_until_first_complete,\n)\n\n_T = TypeVar(\"_T\")\n\n\n@asynccontextmanager\nasync def contextmanager_in_threadpool(\n    cm: ContextManager[_T],\n) -> AsyncGenerator[_T, None]:\n    # blocking __exit__ from running waiting on a free thread\n    # can create race conditions/deadlocks if the context manager itself\n    # has its own internal pool (e.g. a database connection pool)\n    # to avoid this we let __exit__ run without a capacity limit\n    # since we're creating a new limiter for each call, any non-zero limit\n    # works (1 is arbitrary)\n    exit_limiter = CapacityLimiter(1)\n    try:\n        yield await run_in_threadpool(cm.__enter__)\n    except Exception as e:\n        ok = bool(\n            await anyio.to_thread.run_sync(\n                cm.__exit__, type(e), e, None, limiter=exit_limiter\n            )\n        )\n        if not ok:\n            raise e\n    else:\n        await anyio.to_thread.run_sync(\n            cm.__exit__, None, None, None, limiter=exit_limiter\n        )\n", "fastapi/routing.py": "import asyncio\nimport dataclasses\nimport email.message\nimport inspect\nimport json\nfrom contextlib import AsyncExitStack\nfrom enum import Enum, IntEnum\nfrom typing import (\n    Any,\n    Callable,\n    Coroutine,\n    Dict,\n    List,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom fastapi import params\nfrom fastapi._compat import (\n    ModelField,\n    Undefined,\n    _get_model_config,\n    _model_dump,\n    _normalize_errors,\n    lenient_issubclass,\n)\nfrom fastapi.datastructures import Default, DefaultPlaceholder\nfrom fastapi.dependencies.models import Dependant\nfrom fastapi.dependencies.utils import (\n    get_body_field,\n    get_dependant,\n    get_parameterless_sub_dependant,\n    get_typed_return_annotation,\n    solve_dependencies,\n)\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import (\n    FastAPIError,\n    RequestValidationError,\n    ResponseValidationError,\n    WebSocketRequestValidationError,\n)\nfrom fastapi.types import DecoratedCallable, IncEx\nfrom fastapi.utils import (\n    create_cloned_field,\n    create_response_field,\n    generate_unique_id,\n    get_value_or_default,\n    is_body_allowed_for_status_code,\n)\nfrom pydantic import BaseModel\nfrom starlette import routing\nfrom starlette.concurrency import run_in_threadpool\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse, Response\nfrom starlette.routing import (\n    BaseRoute,\n    Match,\n    compile_path,\n    get_name,\n    request_response,\n    websocket_session,\n)\nfrom starlette.routing import Mount as Mount  # noqa\nfrom starlette.types import ASGIApp, Lifespan, Scope\nfrom starlette.websockets import WebSocket\nfrom typing_extensions import Annotated, Doc, deprecated\n\n\ndef _prepare_response_content(\n    res: Any,\n    *,\n    exclude_unset: bool,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n) -> Any:\n    if isinstance(res, BaseModel):\n        read_with_orm_mode = getattr(_get_model_config(res), \"read_with_orm_mode\", None)\n        if read_with_orm_mode:\n            # Let from_orm extract the data from this model instead of converting\n            # it now to a dict.\n            # Otherwise, there's no way to extract lazy data that requires attribute\n            # access instead of dict iteration, e.g. lazy relationships.\n            return res\n        return _model_dump(\n            res,\n            by_alias=True,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n        )\n    elif isinstance(res, list):\n        return [\n            _prepare_response_content(\n                item,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n            for item in res\n        ]\n    elif isinstance(res, dict):\n        return {\n            k: _prepare_response_content(\n                v,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n            for k, v in res.items()\n        }\n    elif dataclasses.is_dataclass(res):\n        return dataclasses.asdict(res)\n    return res\n\n\nasync def serialize_response(\n    *,\n    field: Optional[ModelField] = None,\n    response_content: Any,\n    include: Optional[IncEx] = None,\n    exclude: Optional[IncEx] = None,\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        if not hasattr(field, \"serialize\"):\n            # pydantic v1\n            response_content = _prepare_response_content(\n                response_content,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, list):\n            errors.extend(errors_)\n        elif errors_:\n            errors.append(errors_)\n        if errors:\n            raise ResponseValidationError(\n                errors=_normalize_errors(errors), body=response_content\n            )\n\n        if hasattr(field, \"serialize\"):\n            return field.serialize(\n                value,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n        )\n    else:\n        return jsonable_encoder(response_content)\n\n\nasync def run_endpoint_function(\n    *, dependant: Dependant, values: Dict[str, Any], is_coroutine: bool\n) -> Any:\n    # Only called by get_request_handler. Has been split into its own function to\n    # facilitate profiling endpoints, since inner functions are harder to profile.\n    assert dependant.call is not None, \"dependant.call must be a function\"\n\n    if is_coroutine:\n        return await dependant.call(**values)\n    else:\n        return await run_in_threadpool(dependant.call, **values)\n\n\ndef get_request_handler(\n    dependant: Dependant,\n    body_field: Optional[ModelField] = None,\n    status_code: Optional[int] = None,\n    response_class: Union[Type[Response], DefaultPlaceholder] = Default(JSONResponse),\n    response_field: Optional[ModelField] = None,\n    response_model_include: Optional[IncEx] = None,\n    response_model_exclude: Optional[IncEx] = None,\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    response_model_exclude_defaults: bool = False,\n    response_model_exclude_none: bool = False,\n    dependency_overrides_provider: Optional[Any] = None,\n) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(body_field.field_info, params.Form)\n    if isinstance(response_class, DefaultPlaceholder):\n        actual_response_class: Type[Response] = response_class.value\n    else:\n        actual_response_class = response_class\n\n    async def app(request: Request) -> Response:\n        response: Union[Response, None] = None\n        async with AsyncExitStack() as file_stack:\n            try:\n                body: Any = None\n                if body_field:\n                    if is_body_form:\n                        body = await request.form()\n                        file_stack.push_async_callback(body.close)\n                    else:\n                        body_bytes = await request.body()\n                        if body_bytes:\n                            json_body: Any = Undefined\n                            content_type_value = request.headers.get(\"content-type\")\n                            if not content_type_value:\n                                json_body = await request.json()\n                            else:\n                                message = email.message.Message()\n                                message[\"content-type\"] = content_type_value\n                                if message.get_content_maintype() == \"application\":\n                                    subtype = message.get_content_subtype()\n                                    if subtype == \"json\" or subtype.endswith(\"+json\"):\n                                        json_body = await request.json()\n                            if json_body != Undefined:\n                                body = json_body\n                            else:\n                                body = body_bytes\n            except json.JSONDecodeError as e:\n                validation_error = RequestValidationError(\n                    [\n                        {\n                            \"type\": \"json_invalid\",\n                            \"loc\": (\"body\", e.pos),\n                            \"msg\": \"JSON decode error\",\n                            \"input\": {},\n                            \"ctx\": {\"error\": e.msg},\n                        }\n                    ],\n                    body=e.doc,\n                )\n                raise validation_error from e\n            except HTTPException:\n                # If a middleware raises an HTTPException, it should be raised again\n                raise\n            except Exception as e:\n                http_error = HTTPException(\n                    status_code=400, detail=\"There was an error parsing the body\"\n                )\n                raise http_error from e\n            errors: List[Any] = []\n            async with AsyncExitStack() as async_exit_stack:\n                solved_result = await solve_dependencies(\n                    request=request,\n                    dependant=dependant,\n                    body=body,\n                    dependency_overrides_provider=dependency_overrides_provider,\n                    async_exit_stack=async_exit_stack,\n                )\n                values, errors, background_tasks, sub_response, _ = solved_result\n                if not errors:\n                    raw_response = await run_endpoint_function(\n                        dependant=dependant, values=values, is_coroutine=is_coroutine\n                    )\n                    if isinstance(raw_response, Response):\n                        if raw_response.background is None:\n                            raw_response.background = background_tasks\n                        response = raw_response\n                    else:\n                        response_args: Dict[str, Any] = {\"background\": background_tasks}\n                        # If status_code was set, use it, otherwise use the default from the\n                        # response class, in the case of redirect it's 307\n                        current_status_code = (\n                            status_code if status_code else sub_response.status_code\n                        )\n                        if current_status_code is not None:\n                            response_args[\"status_code\"] = current_status_code\n                        if sub_response.status_code:\n                            response_args[\"status_code\"] = sub_response.status_code\n                        content = await serialize_response(\n                            field=response_field,\n                            response_content=raw_response,\n                            include=response_model_include,\n                            exclude=response_model_exclude,\n                            by_alias=response_model_by_alias,\n                            exclude_unset=response_model_exclude_unset,\n                            exclude_defaults=response_model_exclude_defaults,\n                            exclude_none=response_model_exclude_none,\n                            is_coroutine=is_coroutine,\n                        )\n                        response = actual_response_class(content, **response_args)\n                        if not is_body_allowed_for_status_code(response.status_code):\n                            response.body = b\"\"\n                        response.headers.raw.extend(sub_response.headers.raw)\n            if errors:\n                validation_error = RequestValidationError(\n                    _normalize_errors(errors), body=body\n                )\n                raise validation_error\n        if response is None:\n            raise FastAPIError(\n                \"No response object was returned. There's a high chance that the \"\n                \"application code is raising an exception and a dependency with yield \"\n                \"has a block with a bare except, or a block with except Exception, \"\n                \"and is not raising the exception again. Read more about it in the \"\n                \"docs: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except\"\n            )\n        return response\n\n    return app\n\n\ndef get_websocket_app(\n    dependant: Dependant, dependency_overrides_provider: Optional[Any] = None\n) -> Callable[[WebSocket], Coroutine[Any, Any, Any]]:\n    async def app(websocket: WebSocket) -> None:\n        async with AsyncExitStack() as async_exit_stack:\n            # TODO: remove this scope later, after a few releases\n            # This scope fastapi_astack is no longer used by FastAPI, kept for\n            # compatibility, just in case\n            websocket.scope[\"fastapi_astack\"] = async_exit_stack\n            solved_result = await solve_dependencies(\n                request=websocket,\n                dependant=dependant,\n                dependency_overrides_provider=dependency_overrides_provider,\n                async_exit_stack=async_exit_stack,\n            )\n            values, errors, _, _2, _3 = solved_result\n            if errors:\n                raise WebSocketRequestValidationError(_normalize_errors(errors))\n            assert dependant.call is not None, \"dependant.call must be a function\"\n            await dependant.call(**values)\n\n    return app\n\n\nclass APIWebSocketRoute(routing.WebSocketRoute):\n    def __init__(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        name: Optional[str] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        dependency_overrides_provider: Optional[Any] = None,\n    ) -> None:\n        self.path = path\n        self.endpoint = endpoint\n        self.name = get_name(endpoint) if name is None else name\n        self.dependencies = list(dependencies or [])\n        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n        for depends in self.dependencies[::-1]:\n            self.dependant.dependencies.insert(\n                0,\n                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n            )\n\n        self.app = websocket_session(\n            get_websocket_app(\n                dependant=self.dependant,\n                dependency_overrides_provider=dependency_overrides_provider,\n            )\n        )\n\n    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n        match, child_scope = super().matches(scope)\n        if match != Match.NONE:\n            child_scope[\"route\"] = self\n        return match, child_scope\n\n\nclass APIRoute(routing.Route):\n    def __init__(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        name: Optional[str] = None,\n        methods: Optional[Union[Set[str], List[str]]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        dependency_overrides_provider: Optional[Any] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Union[\n            Callable[[\"APIRoute\"], str], DefaultPlaceholder\n        ] = Default(generate_unique_id),\n    ) -> None:\n        self.path = path\n        self.endpoint = endpoint\n        if isinstance(response_model, DefaultPlaceholder):\n            return_annotation = get_typed_return_annotation(endpoint)\n            if lenient_issubclass(return_annotation, Response):\n                response_model = None\n            else:\n                response_model = return_annotation\n        self.response_model = response_model\n        self.summary = summary\n        self.response_description = response_description\n        self.deprecated = deprecated\n        self.operation_id = operation_id\n        self.response_model_include = response_model_include\n        self.response_model_exclude = response_model_exclude\n        self.response_model_by_alias = response_model_by_alias\n        self.response_model_exclude_unset = response_model_exclude_unset\n        self.response_model_exclude_defaults = response_model_exclude_defaults\n        self.response_model_exclude_none = response_model_exclude_none\n        self.include_in_schema = include_in_schema\n        self.response_class = response_class\n        self.dependency_overrides_provider = dependency_overrides_provider\n        self.callbacks = callbacks\n        self.openapi_extra = openapi_extra\n        self.generate_unique_id_function = generate_unique_id_function\n        self.tags = tags or []\n        self.responses = responses or {}\n        self.name = get_name(endpoint) if name is None else name\n        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n        if methods is None:\n            methods = [\"GET\"]\n        self.methods: Set[str] = {method.upper() for method in methods}\n        if isinstance(generate_unique_id_function, DefaultPlaceholder):\n            current_generate_unique_id: Callable[\n                [\"APIRoute\"], str\n            ] = generate_unique_id_function.value\n        else:\n            current_generate_unique_id = generate_unique_id_function\n        self.unique_id = self.operation_id or current_generate_unique_id(self)\n        # normalize enums e.g. http.HTTPStatus\n        if isinstance(status_code, IntEnum):\n            status_code = int(status_code)\n        self.status_code = status_code\n        if self.response_model:\n            assert is_body_allowed_for_status_code(\n                status_code\n            ), f\"Status code {status_code} must not have a response body\"\n            response_name = \"Response_\" + self.unique_id\n            self.response_field = create_response_field(\n                name=response_name,\n                type_=self.response_model,\n                mode=\"serialization\",\n            )\n            # Create a clone of the field, so that a Pydantic submodel is not returned\n            # as is just because it's an instance of a subclass of a more limited class\n            # e.g. UserInDB (containing hashed_password) could be a subclass of User\n            # that doesn't have the hashed_password. But because it's a subclass, it\n            # would pass the validation and be returned as is.\n            # By being a new field, no inheritance will be passed as is. A new model\n            # will always be created.\n            # TODO: remove when deprecating Pydantic v1\n            self.secure_cloned_response_field: Optional[\n                ModelField\n            ] = create_cloned_field(self.response_field)\n        else:\n            self.response_field = None  # type: ignore\n            self.secure_cloned_response_field = None\n        self.dependencies = list(dependencies or [])\n        self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n        # if a \"form feed\" character (page break) is found in the description text,\n        # truncate description text to the content preceding the first \"form feed\"\n        self.description = self.description.split(\"\\f\")[0].strip()\n        response_fields = {}\n        for additional_status_code, response in self.responses.items():\n            assert isinstance(response, dict), \"An additional response must be a dict\"\n            model = response.get(\"model\")\n            if model:\n                assert is_body_allowed_for_status_code(\n                    additional_status_code\n                ), f\"Status code {additional_status_code} must not have a response body\"\n                response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n                response_field = create_response_field(name=response_name, type_=model)\n                response_fields[additional_status_code] = response_field\n        if response_fields:\n            self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n        else:\n            self.response_fields = {}\n\n        assert callable(endpoint), \"An endpoint must be a callable\"\n        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n        for depends in self.dependencies[::-1]:\n            self.dependant.dependencies.insert(\n                0,\n                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n            )\n        self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n        self.app = request_response(self.get_route_handler())\n\n    def get_route_handler(self) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n        return get_request_handler(\n            dependant=self.dependant,\n            body_field=self.body_field,\n            status_code=self.status_code,\n            response_class=self.response_class,\n            response_field=self.secure_cloned_response_field,\n            response_model_include=self.response_model_include,\n            response_model_exclude=self.response_model_exclude,\n            response_model_by_alias=self.response_model_by_alias,\n            response_model_exclude_unset=self.response_model_exclude_unset,\n            response_model_exclude_defaults=self.response_model_exclude_defaults,\n            response_model_exclude_none=self.response_model_exclude_none,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n        )\n\n    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n        match, child_scope = super().matches(scope)\n        if match != Match.NONE:\n            child_scope[\"route\"] = self\n        return match, child_scope\n\n\nclass APIRouter(routing.Router):\n    \"\"\"\n    `APIRouter` class, used to group *path operations*, for example to structure\n    an app in multiple files. It would then be included in the `FastAPI` app, or\n    in another `APIRouter` (ultimately included in the app).\n\n    Read more about it in the\n    [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.get(\"/users/\", tags=[\"users\"])\n    async def read_users():\n        return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `router.get()`, `router.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n                \"\"\"\n            ),\n        ] = True,\n        default: Annotated[\n            Optional[ASGIApp],\n            Doc(\n                \"\"\"\n                Default function handler for this router. Used to handle\n                404 Not Found errors.\n                \"\"\"\n            ),\n        ] = None,\n        dependency_overrides_provider: Annotated[\n            Optional[Any],\n            Doc(\n                \"\"\"\n                Only used internally by FastAPI to handle dependency overrides.\n\n                You shouldn't need to use it. It normally points to the `FastAPI` app\n                object.\n                \"\"\"\n            ),\n        ] = None,\n        route_class: Annotated[\n            Type[APIRoute],\n            Doc(\n                \"\"\"\n                Custom route (*path operation*) class to be used by this router.\n\n                Read more about it in the\n                [FastAPI docs for Custom Request and APIRoute class](https://fastapi.tiangolo.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n                \"\"\"\n            ),\n        ] = APIRoute,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        # the generic to Lifespan[AppType] is the type of the top level application\n        # which the router cannot know statically, so we use typing.Any\n        lifespan: Annotated[\n            Optional[Lifespan[Any]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in this router in the\n                generated OpenAPI.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        super().__init__(\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            default=default,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n        )\n        if prefix:\n            assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n            assert not prefix.endswith(\n                \"/\"\n            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        self.prefix = prefix\n        self.tags: List[Union[str, Enum]] = tags or []\n        self.dependencies = list(dependencies or [])\n        self.deprecated = deprecated\n        self.include_in_schema = include_in_schema\n        self.responses = responses or {}\n        self.callbacks = callbacks or []\n        self.dependency_overrides_provider = dependency_overrides_provider\n        self.route_class = route_class\n        self.default_response_class = default_response_class\n        self.generate_unique_id_function = generate_unique_id_function\n\n    def route(\n        self,\n        path: str,\n        methods: Optional[List[str]] = None,\n        name: Optional[str] = None,\n        include_in_schema: bool = True,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_route(\n                path,\n                func,\n                methods=methods,\n                name=name,\n                include_in_schema=include_in_schema,\n            )\n            return func\n\n        return decorator\n\n    def add_api_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[Union[Set[str], List[str]]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        name: Optional[str] = None,\n        route_class_override: Optional[Type[APIRoute]] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Union[\n            Callable[[APIRoute], str], DefaultPlaceholder\n        ] = Default(generate_unique_id),\n    ) -> None:\n        route_class = route_class_override or self.route_class\n        responses = responses or {}\n        combined_responses = {**self.responses, **responses}\n        current_response_class = get_value_or_default(\n            response_class, self.default_response_class\n        )\n        current_tags = self.tags.copy()\n        if tags:\n            current_tags.extend(tags)\n        current_dependencies = self.dependencies.copy()\n        if dependencies:\n            current_dependencies.extend(dependencies)\n        current_callbacks = self.callbacks.copy()\n        if callbacks:\n            current_callbacks.extend(callbacks)\n        current_generate_unique_id = get_value_or_default(\n            generate_unique_id_function, self.generate_unique_id_function\n        )\n        route = route_class(\n            self.prefix + path,\n            endpoint=endpoint,\n            response_model=response_model,\n            status_code=status_code,\n            tags=current_tags,\n            dependencies=current_dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=combined_responses,\n            deprecated=deprecated or self.deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema and self.include_in_schema,\n            response_class=current_response_class,\n            name=name,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n            callbacks=current_callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=current_generate_unique_id,\n        )\n        self.routes.append(route)\n\n    def api_route(\n        self,\n        path: str,\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include,\n                response_model_exclude=response_model_exclude,\n                response_model_by_alias=response_model_by_alias,\n                response_model_exclude_unset=response_model_exclude_unset,\n                response_model_exclude_defaults=response_model_exclude_defaults,\n                response_model_exclude_none=response_model_exclude_none,\n                include_in_schema=include_in_schema,\n                response_class=response_class,\n                name=name,\n                callbacks=callbacks,\n                openapi_extra=openapi_extra,\n                generate_unique_id_function=generate_unique_id_function,\n            )\n            return func\n\n        return decorator\n\n    def add_api_websocket_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n    ) -> None:\n        current_dependencies = self.dependencies.copy()\n        if dependencies:\n            current_dependencies.extend(dependencies)\n\n        route = APIWebSocketRoute(\n            self.prefix + path,\n            endpoint=endpoint,\n            name=name,\n            dependencies=current_dependencies,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n        )\n        self.routes.append(route)\n\n    def websocket(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                WebSocket path.\n                \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A name for the WebSocket. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        *,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be used for this\n                WebSocket.\n\n                Read more about it in the\n                [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n                \"\"\"\n            ),\n        ] = None,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Decorate a WebSocket function.\n\n        Read more about it in the\n        [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n        **Example**\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI, WebSocket\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            await websocket.accept()\n            while True:\n                data = await websocket.receive_text()\n                await websocket.send_text(f\"Message text was: {data}\")\n\n        app.include_router(router)\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_websocket_route(\n                path, func, name=name, dependencies=dependencies\n            )\n            return func\n\n        return decorator\n\n    def websocket_route(\n        self, path: str, name: Union[str, None] = None\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_websocket_route(path, func, name=name)\n            return func\n\n        return decorator\n\n    def include_router(\n        self,\n        router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include (or not) all the *path operations* in this router in the\n                generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        \"\"\"\n        Include another `APIRouter` in the same current `APIRouter`.\n\n        Read more about it in the\n        [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        internal_router = APIRouter()\n        users_router = APIRouter()\n\n        @users_router.get(\"/users/\")\n        def read_users():\n            return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n        internal_router.include_router(users_router)\n        app.include_router(internal_router)\n        ```\n        \"\"\"\n        if prefix:\n            assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n            assert not prefix.endswith(\n                \"/\"\n            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        else:\n            for r in router.routes:\n                path = getattr(r, \"path\")  # noqa: B009\n                name = getattr(r, \"name\", \"unknown\")\n                if path is not None and not path:\n                    raise FastAPIError(\n                        f\"Prefix and path cannot be both empty (path operation: {name})\"\n                    )\n        if responses is None:\n            responses = {}\n        for route in router.routes:\n            if isinstance(route, APIRoute):\n                combined_responses = {**responses, **route.responses}\n                use_response_class = get_value_or_default(\n                    route.response_class,\n                    router.default_response_class,\n                    default_response_class,\n                    self.default_response_class,\n                )\n                current_tags = []\n                if tags:\n                    current_tags.extend(tags)\n                if route.tags:\n                    current_tags.extend(route.tags)\n                current_dependencies: List[params.Depends] = []\n                if dependencies:\n                    current_dependencies.extend(dependencies)\n                if route.dependencies:\n                    current_dependencies.extend(route.dependencies)\n                current_callbacks = []\n                if callbacks:\n                    current_callbacks.extend(callbacks)\n                if route.callbacks:\n                    current_callbacks.extend(route.callbacks)\n                current_generate_unique_id = get_value_or_default(\n                    route.generate_unique_id_function,\n                    router.generate_unique_id_function,\n                    generate_unique_id_function,\n                    self.generate_unique_id_function,\n                )\n                self.add_api_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    response_model=route.response_model,\n                    status_code=route.status_code,\n                    tags=current_tags,\n                    dependencies=current_dependencies,\n                    summary=route.summary,\n                    description=route.description,\n                    response_description=route.response_description,\n                    responses=combined_responses,\n                    deprecated=route.deprecated or deprecated or self.deprecated,\n                    methods=route.methods,\n                    operation_id=route.operation_id,\n                    response_model_include=route.response_model_include,\n                    response_model_exclude=route.response_model_exclude,\n                    response_model_by_alias=route.response_model_by_alias,\n                    response_model_exclude_unset=route.response_model_exclude_unset,\n                    response_model_exclude_defaults=route.response_model_exclude_defaults,\n                    response_model_exclude_none=route.response_model_exclude_none,\n                    include_in_schema=route.include_in_schema\n                    and self.include_in_schema\n                    and include_in_schema,\n                    response_class=use_response_class,\n                    name=route.name,\n                    route_class_override=type(route),\n                    callbacks=current_callbacks,\n                    openapi_extra=route.openapi_extra,\n                    generate_unique_id_function=current_generate_unique_id,\n                )\n            elif isinstance(route, routing.Route):\n                methods = list(route.methods or [])\n                self.add_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    methods=methods,\n                    include_in_schema=route.include_in_schema,\n                    name=route.name,\n                )\n            elif isinstance(route, APIWebSocketRoute):\n                current_dependencies = []\n                if dependencies:\n                    current_dependencies.extend(dependencies)\n                if route.dependencies:\n                    current_dependencies.extend(route.dependencies)\n                self.add_api_websocket_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    dependencies=current_dependencies,\n                    name=route.name,\n                )\n            elif isinstance(route, routing.WebSocketRoute):\n                self.add_websocket_route(\n                    prefix + route.path, route.endpoint, name=route.name\n                )\n        for handler in router.on_startup:\n            self.add_event_handler(\"startup\", handler)\n        for handler in router.on_shutdown:\n            self.add_event_handler(\"shutdown\", handler)\n\n    def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"GET\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PUT operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.put(\"/items/{item_id}\")\n        def replace_item(item_id: str, item: Item):\n            return {\"message\": \"Item replaced\", \"id\": item_id}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"PUT\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def post(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP POST operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.post(\"/items/\")\n        def create_item(item: Item):\n            return {\"message\": \"Item created\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"POST\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def delete(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP DELETE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.delete(\"/items/{item_id}\")\n        def delete_item(item_id: str):\n            return {\"message\": \"Item deleted\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"DELETE\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def options(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP OPTIONS operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.options(\"/items/\")\n        def get_item_options():\n            return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"OPTIONS\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def head(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP HEAD operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.head(\"/items/\", status_code=204)\n        def get_items_headers(response: Response):\n            response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"HEAD\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def patch(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PATCH operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.patch(\"/items/\")\n        def update_item(item: Item):\n            return {\"message\": \"Item updated in place\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"PATCH\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def trace(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP TRACE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.trace(\"/items/{item_id}\")\n        def trace_item(item_id: str):\n            return None\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"TRACE\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    @deprecated(\n        \"\"\"\n        on_event is deprecated, use lifespan event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n        \"\"\"\n    )\n    def on_event(\n        self,\n        event_type: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The type of event. `startup` or `shutdown`.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add an event handler for the router.\n\n        `on_event` is deprecated, use `lifespan` event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_event_handler(event_type, func)\n            return func\n\n        return decorator\n", "fastapi/utils.py": "import re\nimport warnings\nfrom dataclasses import is_dataclass\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    MutableMapping,\n    Optional,\n    Set,\n    Type,\n    Union,\n    cast,\n)\nfrom weakref import WeakKeyDictionary\n\nimport fastapi\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    BaseConfig,\n    ModelField,\n    PydanticSchemaGenerationError,\n    Undefined,\n    UndefinedType,\n    Validator,\n    lenient_issubclass,\n)\nfrom fastapi.datastructures import DefaultPlaceholder, DefaultType\nfrom pydantic import BaseModel, create_model\nfrom pydantic.fields import FieldInfo\nfrom typing_extensions import Literal\n\nif TYPE_CHECKING:  # pragma: nocover\n    from .routing import APIRoute\n\n# Cache for `create_cloned_field`\n_CLONED_TYPES_CACHE: MutableMapping[\n    Type[BaseModel], Type[BaseModel]\n] = WeakKeyDictionary()\n\n\ndef is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n    if status_code is None:\n        return True\n    # Ref: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#patterned-fields-1\n    if status_code in {\n        \"default\",\n        \"1XX\",\n        \"2XX\",\n        \"3XX\",\n        \"4XX\",\n        \"5XX\",\n    }:\n        return True\n    current_status_code = int(status_code)\n    return not (current_status_code < 200 or current_status_code in {204, 205, 304})\n\n\ndef get_path_param_names(path: str) -> Set[str]:\n    return set(re.findall(\"{(.*?)}\", path))\n\n\ndef create_response_field(\n    name: str,\n    type_: Type[Any],\n    class_validators: Optional[Dict[str, Validator]] = None,\n    default: Optional[Any] = Undefined,\n    required: Union[bool, UndefinedType] = Undefined,\n    model_config: Type[BaseConfig] = BaseConfig,\n    field_info: Optional[FieldInfo] = None,\n    alias: Optional[str] = None,\n    mode: Literal[\"validation\", \"serialization\"] = \"validation\",\n) -> ModelField:\n    \"\"\"\n    Create a new response field. Raises if type_ is invalid.\n    \"\"\"\n    class_validators = class_validators or {}\n    if PYDANTIC_V2:\n        field_info = field_info or FieldInfo(\n            annotation=type_, default=default, alias=alias\n        )\n    else:\n        field_info = field_info or FieldInfo()\n    kwargs = {\"name\": name, \"field_info\": field_info}\n    if PYDANTIC_V2:\n        kwargs.update({\"mode\": mode})\n    else:\n        kwargs.update(\n            {\n                \"type_\": type_,\n                \"class_validators\": class_validators,\n                \"default\": default,\n                \"required\": required,\n                \"model_config\": model_config,\n                \"alias\": alias,\n            }\n        )\n    try:\n        return ModelField(**kwargs)  # type: ignore[arg-type]\n    except (RuntimeError, PydanticSchemaGenerationError):\n        raise fastapi.exceptions.FastAPIError(\n            \"Invalid args for response field! Hint: \"\n            f\"check that {type_} is a valid Pydantic field type. \"\n            \"If you are using a return type annotation that is not a valid Pydantic \"\n            \"field (e.g. Union[Response, dict, None]) you can disable generating the \"\n            \"response model from the type annotation with the path operation decorator \"\n            \"parameter response_model=None. Read more: \"\n            \"https://fastapi.tiangolo.com/tutorial/response-model/\"\n        ) from None\n\n\ndef create_cloned_field(\n    field: ModelField,\n    *,\n    cloned_types: Optional[MutableMapping[Type[BaseModel], Type[BaseModel]]] = None,\n) -> ModelField:\n    if PYDANTIC_V2:\n        return field\n    # cloned_types caches already cloned types to support recursive models and improve\n    # performance by avoiding unnecessary cloning\n    if cloned_types is None:\n        cloned_types = _CLONED_TYPES_CACHE\n\n    original_type = field.type_\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n        original_type = original_type.__pydantic_model__\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = cloned_types.get(original_type)\n        if use_type is None:\n            use_type = create_model(original_type.__name__, __base__=original_type)\n            cloned_types[original_type] = use_type\n            for f in original_type.__fields__.values():\n                use_type.__fields__[f.name] = create_cloned_field(\n                    f, cloned_types=cloned_types\n                )\n    new_field = create_response_field(name=field.name, type_=use_type)\n    new_field.has_alias = field.has_alias  # type: ignore[attr-defined]\n    new_field.alias = field.alias  # type: ignore[misc]\n    new_field.class_validators = field.class_validators  # type: ignore[attr-defined]\n    new_field.default = field.default  # type: ignore[misc]\n    new_field.required = field.required  # type: ignore[misc]\n    new_field.model_config = field.model_config  # type: ignore[attr-defined]\n    new_field.field_info = field.field_info\n    new_field.allow_none = field.allow_none  # type: ignore[attr-defined]\n    new_field.validate_always = field.validate_always  # type: ignore[attr-defined]\n    if field.sub_fields:  # type: ignore[attr-defined]\n        new_field.sub_fields = [  # type: ignore[attr-defined]\n            create_cloned_field(sub_field, cloned_types=cloned_types)\n            for sub_field in field.sub_fields  # type: ignore[attr-defined]\n        ]\n    if field.key_field:  # type: ignore[attr-defined]\n        new_field.key_field = create_cloned_field(  # type: ignore[attr-defined]\n            field.key_field,  # type: ignore[attr-defined]\n            cloned_types=cloned_types,\n        )\n    new_field.validators = field.validators  # type: ignore[attr-defined]\n    new_field.pre_validators = field.pre_validators  # type: ignore[attr-defined]\n    new_field.post_validators = field.post_validators  # type: ignore[attr-defined]\n    new_field.parse_json = field.parse_json  # type: ignore[attr-defined]\n    new_field.shape = field.shape  # type: ignore[attr-defined]\n    new_field.populate_validators()  # type: ignore[attr-defined]\n    return new_field\n\n\ndef generate_operation_id_for_path(\n    *, name: str, path: str, method: str\n) -> str:  # pragma: nocover\n    warnings.warn(\n        \"fastapi.utils.generate_operation_id_for_path() was deprecated, \"\n        \"it is not used internally, and will be removed soon\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    operation_id = f\"{name}{path}\"\n    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n    operation_id = f\"{operation_id}_{method.lower()}\"\n    return operation_id\n\n\ndef generate_unique_id(route: \"APIRoute\") -> str:\n    operation_id = f\"{route.name}{route.path_format}\"\n    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n    assert route.methods\n    operation_id = f\"{operation_id}_{list(route.methods)[0].lower()}\"\n    return operation_id\n\n\ndef deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:\n    for key, value in update_dict.items():\n        if (\n            key in main_dict\n            and isinstance(main_dict[key], dict)\n            and isinstance(value, dict)\n        ):\n            deep_dict_update(main_dict[key], value)\n        elif (\n            key in main_dict\n            and isinstance(main_dict[key], list)\n            and isinstance(update_dict[key], list)\n        ):\n            main_dict[key] = main_dict[key] + update_dict[key]\n        else:\n            main_dict[key] = value\n\n\ndef get_value_or_default(\n    first_item: Union[DefaultPlaceholder, DefaultType],\n    *extra_items: Union[DefaultPlaceholder, DefaultType],\n) -> Union[DefaultPlaceholder, DefaultType]:\n    \"\"\"\n    Pass items or `DefaultPlaceholder`s by descending priority.\n\n    The first one to _not_ be a `DefaultPlaceholder` will be returned.\n\n    Otherwise, the first item (a `DefaultPlaceholder`) will be returned.\n    \"\"\"\n    items = (first_item,) + extra_items\n    for item in items:\n        if not isinstance(item, DefaultPlaceholder):\n            return item\n    return first_item\n", "fastapi/params.py": "import warnings\nfrom enum import Enum\nfrom typing import Any, Callable, Dict, List, Optional, Sequence, Union\n\nfrom fastapi.openapi.models import Example\nfrom pydantic.fields import FieldInfo\nfrom typing_extensions import Annotated, deprecated\n\nfrom ._compat import PYDANTIC_V2, PYDANTIC_VERSION, Undefined\n\n_Unset: Any = Undefined\n\n\nclass ParamTypes(Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\"\n\n\nclass Param(FieldInfo):\n    in_: ParamTypes\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        if example is not _Unset:\n            warnings.warn(\n                \"`example` has been deprecated, please use `examples` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        self.example = example\n        self.include_in_schema = include_in_schema\n        self.openapi_examples = openapi_examples\n        kwargs = dict(\n            default=default,\n            default_factory=default_factory,\n            alias=alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            discriminator=discriminator,\n            multiple_of=multiple_of,\n            allow_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            **extra,\n        )\n        if examples is not None:\n            kwargs[\"examples\"] = examples\n        if regex is not None:\n            warnings.warn(\n                \"`regex` has been deprecated, please use `pattern` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        current_json_schema_extra = json_schema_extra or extra\n        if PYDANTIC_VERSION < \"2.7.0\":\n            self.deprecated = deprecated\n        else:\n            kwargs[\"deprecated\"] = deprecated\n        if PYDANTIC_V2:\n            kwargs.update(\n                {\n                    \"annotation\": annotation,\n                    \"alias_priority\": alias_priority,\n                    \"validation_alias\": validation_alias,\n                    \"serialization_alias\": serialization_alias,\n                    \"strict\": strict,\n                    \"json_schema_extra\": current_json_schema_extra,\n                }\n            )\n            kwargs[\"pattern\"] = pattern or regex\n        else:\n            kwargs[\"regex\"] = pattern or regex\n            kwargs.update(**current_json_schema_extra)\n        use_kwargs = {k: v for k, v in kwargs.items() if v is not _Unset}\n\n        super().__init__(**use_kwargs)\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}({self.default})\"\n\n\nclass Path(Param):\n    in_ = ParamTypes.path\n\n    def __init__(\n        self,\n        default: Any = ...,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        assert default is ..., \"Path parameters cannot have a default value\"\n        self.in_ = self.in_\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )\n\n\nclass Query(Param):\n    in_ = ParamTypes.query\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )\n\n\nclass Header(Param):\n    in_ = ParamTypes.header\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        convert_underscores: bool = True,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        self.convert_underscores = convert_underscores\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )\n\n\nclass Cookie(Param):\n    in_ = ParamTypes.cookie\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )\n\n\nclass Body(FieldInfo):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        embed: bool = False,\n        media_type: str = \"application/json\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        self.embed = embed\n        self.media_type = media_type\n        if example is not _Unset:\n            warnings.warn(\n                \"`example` has been deprecated, please use `examples` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        self.example = example\n        self.include_in_schema = include_in_schema\n        self.openapi_examples = openapi_examples\n        kwargs = dict(\n            default=default,\n            default_factory=default_factory,\n            alias=alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            discriminator=discriminator,\n            multiple_of=multiple_of,\n            allow_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            **extra,\n        )\n        if examples is not None:\n            kwargs[\"examples\"] = examples\n        if regex is not None:\n            warnings.warn(\n                \"`regex` has been depreacated, please use `pattern` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        current_json_schema_extra = json_schema_extra or extra\n        if PYDANTIC_VERSION < \"2.7.0\":\n            self.deprecated = deprecated\n        else:\n            kwargs[\"deprecated\"] = deprecated\n        if PYDANTIC_V2:\n            kwargs.update(\n                {\n                    \"annotation\": annotation,\n                    \"alias_priority\": alias_priority,\n                    \"validation_alias\": validation_alias,\n                    \"serialization_alias\": serialization_alias,\n                    \"strict\": strict,\n                    \"json_schema_extra\": current_json_schema_extra,\n                }\n            )\n            kwargs[\"pattern\"] = pattern or regex\n        else:\n            kwargs[\"regex\"] = pattern or regex\n            kwargs.update(**current_json_schema_extra)\n\n        use_kwargs = {k: v for k, v in kwargs.items() if v is not _Unset}\n\n        super().__init__(**use_kwargs)\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}({self.default})\"\n\n\nclass Form(Body):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        media_type: str = \"application/x-www-form-urlencoded\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            embed=True,\n            media_type=media_type,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )\n\n\nclass File(Form):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        media_type: str = \"multipart/form-data\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        # TODO: update when deprecating Pydantic v1, import these types\n        # validation_alias: str | AliasPath | AliasChoices | None\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            media_type=media_type,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )\n\n\nclass Depends:\n    def __init__(\n        self, dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True\n    ):\n        self.dependency = dependency\n        self.use_cache = use_cache\n\n    def __repr__(self) -> str:\n        attr = getattr(self.dependency, \"__name__\", type(self.dependency).__name__)\n        cache = \"\" if self.use_cache else \", use_cache=False\"\n        return f\"{self.__class__.__name__}({attr}{cache})\"\n\n\nclass Security(Depends):\n    def __init__(\n        self,\n        dependency: Optional[Callable[..., Any]] = None,\n        *,\n        scopes: Optional[Sequence[str]] = None,\n        use_cache: bool = True,\n    ):\n        super().__init__(dependency=dependency, use_cache=use_cache)\n        self.scopes = scopes or []\n", "fastapi/applications.py": "from enum import Enum\nfrom typing import (\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    List,\n    Optional,\n    Sequence,\n    Type,\n    TypeVar,\n    Union,\n)\n\nfrom fastapi import routing\nfrom fastapi.datastructures import Default, DefaultPlaceholder\nfrom fastapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n    websocket_request_validation_exception_handler,\n)\nfrom fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\nfrom fastapi.logger import logger\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom fastapi.openapi.utils import get_openapi\nfrom fastapi.params import Depends\nfrom fastapi.types import DecoratedCallable, IncEx\nfrom fastapi.utils import generate_unique_id\nfrom starlette.applications import Starlette\nfrom starlette.datastructures import State\nfrom starlette.exceptions import HTTPException\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import HTMLResponse, JSONResponse, Response\nfrom starlette.routing import BaseRoute\nfrom starlette.types import ASGIApp, Lifespan, Receive, Scope, Send\nfrom typing_extensions import Annotated, Doc, deprecated\n\nAppType = TypeVar(\"AppType\", bound=\"FastAPI\")\n\n\nclass FastAPI(Starlette):\n    \"\"\"\n    `FastAPI` app class, the main entrypoint to use FastAPI.\n\n    Read more in the\n    [FastAPI docs for First Steps](https://fastapi.tiangolo.com/tutorial/first-steps/).\n\n    ## Example\n\n    ```python\n    from fastapi import FastAPI\n\n    app = FastAPI()\n    ```\n    \"\"\"\n\n    def __init__(\n        self: AppType,\n        *,\n        debug: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Boolean indicating if debug tracebacks should be returned on server\n                errors.\n\n                Read more in the\n                [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n                \"\"\"\n            ),\n        ] = False,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `app.get()`, `app.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        title: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The title of the API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(title=\"ChimichangApp\")\n                ```\n                \"\"\"\n            ),\n        ] = \"FastAPI\",\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A short summary of the API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            str,\n            Doc(\n                '''\n                A description of the API. Supports Markdown (using\n                [CommonMark syntax](https://commonmark.org/)).\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(\n                    description=\"\"\"\n                                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                                ## Items\n\n                                You can **read items**.\n\n                                ## Users\n\n                                You will be able to:\n\n                                * **Create users** (_not implemented_).\n                                * **Read users** (_not implemented_).\n\n                                \"\"\"\n                )\n                ```\n                '''\n            ),\n        ] = \"\",\n        version: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The version of the API.\n\n                **Note** This is the version of your application, not the version of\n                the OpenAPI specification nor the version of FastAPI being used.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(version=\"0.0.1\")\n                ```\n                \"\"\"\n            ),\n        ] = \"0.1.0\",\n        openapi_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The URL where the OpenAPI schema will be served from.\n\n                If you set it to `None`, no OpenAPI schema will be served publicly, and\n                the default automatic endpoints `/docs` and `/redoc` will also be\n                disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#openapi-url).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n                ```\n                \"\"\"\n            ),\n        ] = \"/openapi.json\",\n        openapi_tags: Annotated[\n            Optional[List[Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                A list of tags used by OpenAPI, these are the same `tags` you can set\n                in the *path operations*, like:\n\n                * `@app.get(\"/users/\", tags=[\"users\"])`\n                * `@app.get(\"/items/\", tags=[\"items\"])`\n\n                The order of the tags can be used to specify the order shown in\n                tools like Swagger UI, used in the automatic path `/docs`.\n\n                It's not required to specify all the tags used.\n\n                The tags that are not declared MAY be organized randomly or based\n                on the tools' logic. Each tag name in the list MUST be unique.\n\n                The value of each item is a `dict` containing:\n\n                * `name`: The name of the tag.\n                * `description`: A short description of the tag.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                    text representation.\n                * `externalDocs`: Additional external documentation for this tag. If\n                    provided, it would contain a `dict` with:\n                    * `description`: A short description of the target documentation.\n                        [CommonMark syntax](https://commonmark.org/) MAY be used for\n                        rich text representation.\n                    * `url`: The URL for the target documentation. Value MUST be in\n                        the form of a URL.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-tags).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                tags_metadata = [\n                    {\n                        \"name\": \"users\",\n                        \"description\": \"Operations with users. The **login** logic is also here.\",\n                    },\n                    {\n                        \"name\": \"items\",\n                        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                        \"externalDocs\": {\n                            \"description\": \"Items external docs\",\n                            \"url\": \"https://fastapi.tiangolo.com/\",\n                        },\n                    },\n                ]\n\n                app = FastAPI(openapi_tags=tags_metadata)\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        servers: Annotated[\n            Optional[List[Dict[str, Union[str, Any]]]],\n            Doc(\n                \"\"\"\n                A `list` of `dict`s with connectivity information to a target server.\n\n                You would use it, for example, if your application is served from\n                different domains and you want to use the same Swagger UI in the\n                browser to interact with each of them (instead of having multiple\n                browser tabs open). Or if you want to leave fixed the possible URLs.\n\n                If the servers `list` is not provided, or is an empty `list`, the\n                default value would be a `dict` with a `url` value of `/`.\n\n                Each item in the `list` is a `dict` containing:\n\n                * `url`: A URL to the target host. This URL supports Server Variables\n                and MAY be relative, to indicate that the host location is relative\n                to the location where the OpenAPI document is being served. Variable\n                substitutions will be made when a variable is named in `{`brackets`}`.\n                * `description`: An optional string describing the host designated by\n                the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n                rich text representation.\n                * `variables`: A `dict` between a variable name and its value. The value\n                    is used for substitution in the server's URL template.\n\n                Read more in the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#additional-servers).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(\n                    servers=[\n                        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                    ]\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of global dependencies, they will be applied to each\n                *path operation*, including in sub-routers.\n\n                Read more about it in the\n                [FastAPI docs for Global Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/).\n\n                **Example**\n\n                ```python\n                from fastapi import Depends, FastAPI\n\n                from .dependencies import func_dep_1, func_dep_2\n\n                app = FastAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n                from fastapi.responses import ORJSONResponse\n\n                app = FastAPI(default_response_class=ORJSONResponse)\n                ```\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(redirect_slashes=True)  # the default\n\n                @app.get(\"/items/\")\n                async def read_items():\n                    return [{\"item_id\": \"Foo\"}]\n                ```\n\n                With this app, if a client goes to `/items` (without a trailing slash),\n                they will be automatically redirected with an HTTP status code of 307\n                to `/items/`.\n                \"\"\"\n            ),\n        ] = True,\n        docs_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The path to the automatic interactive API documentation.\n                It is handled in the browser by Swagger UI.\n\n                The default URL is `/docs`. You can disable it by setting it to `None`.\n\n                If `openapi_url` is set to `None`, this will be automatically disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n                ```\n                \"\"\"\n            ),\n        ] = \"/docs\",\n        redoc_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The path to the alternative automatic interactive API documentation\n                provided by ReDoc.\n\n                The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n                If `openapi_url` is set to `None`, this will be automatically disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n                ```\n                \"\"\"\n            ),\n        ] = \"/redoc\",\n        swagger_ui_oauth2_redirect_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The OAuth2 redirect endpoint for the Swagger UI.\n\n                By default it is `/docs/oauth2-redirect`.\n\n                This is only used if you use OAuth2 (with the \"Authorize\" button)\n                with Swagger UI.\n                \"\"\"\n            ),\n        ] = \"/docs/oauth2-redirect\",\n        swagger_ui_init_oauth: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n                Read more about the available configuration options in the\n                [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n                \"\"\"\n            ),\n        ] = None,\n        middleware: Annotated[\n            Optional[Sequence[Middleware]],\n            Doc(\n                \"\"\"\n                List of middleware to be added when creating the application.\n\n                In FastAPI you would normally do this with `app.add_middleware()`\n                instead.\n\n                Read more in the\n                [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n                \"\"\"\n            ),\n        ] = None,\n        exception_handlers: Annotated[\n            Optional[\n                Dict[\n                    Union[int, Type[Exception]],\n                    Callable[[Request, Any], Coroutine[Any, Any, Response]],\n                ]\n            ],\n            Doc(\n                \"\"\"\n                A dictionary with handlers for exceptions.\n\n                In FastAPI, you would normally use the decorator\n                `@app.exception_handler()`.\n\n                Read more in the\n                [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n                \"\"\"\n            ),\n        ] = None,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        lifespan: Annotated[\n            Optional[Lifespan[AppType]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        terms_of_service: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A URL to the Terms of Service for your API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(terms_of_service=\"http://example.com/terms/\")\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        contact: Annotated[\n            Optional[Dict[str, Union[str, Any]]],\n            Doc(\n                \"\"\"\n                A dictionary with the contact information for the exposed API.\n\n                It can contain several fields.\n\n                * `name`: (`str`) The name of the contact person/organization.\n                * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                    the format of a URL.\n                * `email`: (`str`) The email address of the contact person/organization.\n                    MUST be in the format of an email address.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(\n                    contact={\n                        \"name\": \"Deadpoolio the Amazing\",\n                        \"url\": \"http://x-force.example.com/contact/\",\n                        \"email\": \"dp@x-force.example.com\",\n                    }\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        license_info: Annotated[\n            Optional[Dict[str, Union[str, Any]]],\n            Doc(\n                \"\"\"\n                A dictionary with the license information for the exposed API.\n\n                It can contain several fields.\n\n                * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                    license name used for the API.\n                * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                    for the API. The `identifier` field is mutually exclusive of the `url`\n                    field. Available since OpenAPI 3.1.0, FastAPI 0.99.0.\n                * `url`: (`str`) A URL to the license used for the API. This MUST be\n                    the format of a URL.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(\n                    license_info={\n                        \"name\": \"Apache 2.0\",\n                        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                    }\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        openapi_prefix: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                A URL prefix for the OpenAPI URL.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n                follows more closely the ASGI standard, is simpler, and more\n                automatic.\n                \"\"\"\n            ),\n        ] = \"\",\n        root_path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                A path prefix handled by a proxy that is not seen by the application\n                but is seen by external clients, which affects things like Swagger UI.\n\n                Read more about it at the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(root_path=\"/api/v1\")\n                ```\n                \"\"\"\n            ),\n        ] = \"\",\n        root_path_in_servers: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To disable automatically generating the URLs in the `servers` field\n                in the autogenerated OpenAPI using the `root_path`.\n\n                Read more about it in the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(root_path_in_servers=False)\n                ```\n                \"\"\"\n            ),\n        ] = True,\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        webhooks: Annotated[\n            Optional[routing.APIRouter],\n            Doc(\n                \"\"\"\n                Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n                depend on specific *path operations*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Note**: This is available since OpenAPI 3.1.0, FastAPI 0.99.0.\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* as deprecated. You probably don't need it,\n                but it's available.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in the generated OpenAPI.\n                You probably don't need it, but it's available.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        swagger_ui_parameters: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Parameters to configure Swagger UI, the autogenerated interactive API\n                documentation (by default at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs about how to Configure Swagger UI](https://fastapi.tiangolo.com/how-to/configure-swagger-ui/).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        separate_input_output_schemas: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to generate separate OpenAPI schemas for request body and\n                response body when the results would be more precise.\n\n                This is particularly useful when automatically generating clients.\n\n                For example, if you have a model like:\n\n                ```python\n                from pydantic import BaseModel\n\n                class Item(BaseModel):\n                    name: str\n                    tags: list[str] = []\n                ```\n\n                When `Item` is used for input, a request body, `tags` is not required,\n                the client doesn't have to provide it.\n\n                But when using `Item` for output, for a response body, `tags` is always\n                available because it has a default value, even if it's just an empty\n                list. So, the client should be able to always expect it.\n\n                In this case, there would be two different schemas, one for input and\n                another one for output.\n                \"\"\"\n            ),\n        ] = True,\n        **extra: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                Extra keyword arguments to be stored in the app, not used by FastAPI\n                anywhere.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        self.debug = debug\n        self.title = title\n        self.summary = summary\n        self.description = description\n        self.version = version\n        self.terms_of_service = terms_of_service\n        self.contact = contact\n        self.license_info = license_info\n        self.openapi_url = openapi_url\n        self.openapi_tags = openapi_tags\n        self.root_path_in_servers = root_path_in_servers\n        self.docs_url = docs_url\n        self.redoc_url = redoc_url\n        self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n        self.swagger_ui_init_oauth = swagger_ui_init_oauth\n        self.swagger_ui_parameters = swagger_ui_parameters\n        self.servers = servers or []\n        self.separate_input_output_schemas = separate_input_output_schemas\n        self.extra = extra\n        self.openapi_version: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The version string of OpenAPI.\n\n                FastAPI will generate OpenAPI version 3.1.0, and will output that as\n                the OpenAPI version. But some tools, even though they might be\n                compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n                So you could override this value to trick those tools into using\n                the generated OpenAPI. Have in mind that this is a hack. But if you\n                avoid using features added in OpenAPI 3.1.0, it might work for your\n                use case.\n\n                This is not passed as a parameter to the `FastAPI` class to avoid\n                giving the false idea that FastAPI would generate a different OpenAPI\n                schema. It is only available as an attribute.\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI()\n\n                app.openapi_version = \"3.0.2\"\n                ```\n                \"\"\"\n            ),\n        ] = \"3.1.0\"\n        self.openapi_schema: Optional[Dict[str, Any]] = None\n        if self.openapi_url:\n            assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n            assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n        # TODO: remove when discarding the openapi_prefix parameter\n        if openapi_prefix:\n            logger.warning(\n                '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n                \"follows more closely the ASGI standard, is simpler, and more \"\n                \"automatic. Check the docs at \"\n                \"https://fastapi.tiangolo.com/advanced/sub-applications/\"\n            )\n        self.webhooks: Annotated[\n            routing.APIRouter,\n            Doc(\n                \"\"\"\n                The `app.webhooks` attribute is an `APIRouter` with the *path\n                operations* that will be used just for documentation of webhooks.\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                \"\"\"\n            ),\n        ] = webhooks or routing.APIRouter()\n        self.root_path = root_path or openapi_prefix\n        self.state: Annotated[\n            State,\n            Doc(\n                \"\"\"\n                A state object for the application. This is the same object for the\n                entire application, it doesn't change from request to request.\n\n                You normally wouldn't use this in FastAPI, for most of the cases you\n                would instead use FastAPI dependencies.\n\n                This is simply inherited from Starlette.\n\n                Read more about it in the\n                [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n                \"\"\"\n            ),\n        ] = State()\n        self.dependency_overrides: Annotated[\n            Dict[Callable[..., Any], Callable[..., Any]],\n            Doc(\n                \"\"\"\n                A dictionary with overrides for the dependencies.\n\n                Each key is the original dependency callable, and the value is the\n                actual dependency that should be called.\n\n                This is for testing, to replace expensive dependencies with testing\n                versions.\n\n                Read more about it in the\n                [FastAPI docs for Testing Dependencies with Overrides](https://fastapi.tiangolo.com/advanced/testing-dependencies/).\n                \"\"\"\n            ),\n        ] = {}\n        self.router: routing.APIRouter = routing.APIRouter(\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            dependency_overrides_provider=self,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n            default_response_class=default_response_class,\n            dependencies=dependencies,\n            callbacks=callbacks,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            responses=responses,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n        self.exception_handlers: Dict[\n            Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n        ] = {} if exception_handlers is None else dict(exception_handlers)\n        self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n        self.exception_handlers.setdefault(\n            RequestValidationError, request_validation_exception_handler\n        )\n        self.exception_handlers.setdefault(\n            WebSocketRequestValidationError,\n            # Starlette still has incorrect type specification for the handlers\n            websocket_request_validation_exception_handler,  # type: ignore\n        )\n\n        self.user_middleware: List[Middleware] = (\n            [] if middleware is None else list(middleware)\n        )\n        self.middleware_stack: Union[ASGIApp, None] = None\n        self.setup()\n\n    def openapi(self) -> Dict[str, Any]:\n        \"\"\"\n        Generate the OpenAPI schema of the application. This is called by FastAPI\n        internally.\n\n        The first time it is called it stores the result in the attribute\n        `app.openapi_schema`, and next times it is called, it just returns that same\n        result. To avoid the cost of generating the schema every time.\n\n        If you need to modify the generated OpenAPI schema, you could modify it.\n\n        Read more in the\n        [FastAPI docs for OpenAPI](https://fastapi.tiangolo.com/how-to/extending-openapi/).\n        \"\"\"\n        if not self.openapi_schema:\n            self.openapi_schema = get_openapi(\n                title=self.title,\n                version=self.version,\n                openapi_version=self.openapi_version,\n                summary=self.summary,\n                description=self.description,\n                terms_of_service=self.terms_of_service,\n                contact=self.contact,\n                license_info=self.license_info,\n                routes=self.routes,\n                webhooks=self.webhooks.routes,\n                tags=self.openapi_tags,\n                servers=self.servers,\n                separate_input_output_schemas=self.separate_input_output_schemas,\n            )\n        return self.openapi_schema\n\n    def setup(self) -> None:\n        if self.openapi_url:\n            urls = (server_data.get(\"url\") for server_data in self.servers)\n            server_urls = {url for url in urls if url}\n\n            async def openapi(req: Request) -> JSONResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                if root_path not in server_urls:\n                    if root_path and self.root_path_in_servers:\n                        self.servers.insert(0, {\"url\": root_path})\n                        server_urls.add(root_path)\n                return JSONResponse(self.openapi())\n\n            self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        if self.openapi_url and self.docs_url:\n\n            async def swagger_ui_html(req: Request) -> HTMLResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                openapi_url = root_path + self.openapi_url\n                oauth2_redirect_url = self.swagger_ui_oauth2_redirect_url\n                if oauth2_redirect_url:\n                    oauth2_redirect_url = root_path + oauth2_redirect_url\n                return get_swagger_ui_html(\n                    openapi_url=openapi_url,\n                    title=f\"{self.title} - Swagger UI\",\n                    oauth2_redirect_url=oauth2_redirect_url,\n                    init_oauth=self.swagger_ui_init_oauth,\n                    swagger_ui_parameters=self.swagger_ui_parameters,\n                )\n\n            self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n\n            if self.swagger_ui_oauth2_redirect_url:\n\n                async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                    return get_swagger_ui_oauth2_redirect_html()\n\n                self.add_route(\n                    self.swagger_ui_oauth2_redirect_url,\n                    swagger_ui_redirect,\n                    include_in_schema=False,\n                )\n        if self.openapi_url and self.redoc_url:\n\n            async def redoc_html(req: Request) -> HTMLResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                openapi_url = root_path + self.openapi_url\n                return get_redoc_html(\n                    openapi_url=openapi_url, title=f\"{self.title} - ReDoc\"\n                )\n\n            self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n        if self.root_path:\n            scope[\"root_path\"] = self.root_path\n        await super().__call__(scope, receive, send)\n\n    def add_api_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Coroutine[Any, Any, Response]],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> None:\n        self.router.add_api_route(\n            path,\n            endpoint=endpoint,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def api_route(\n        self,\n        path: str,\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.router.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include,\n                response_model_exclude=response_model_exclude,\n                response_model_by_alias=response_model_by_alias,\n                response_model_exclude_unset=response_model_exclude_unset,\n                response_model_exclude_defaults=response_model_exclude_defaults,\n                response_model_exclude_none=response_model_exclude_none,\n                include_in_schema=include_in_schema,\n                response_class=response_class,\n                name=name,\n                openapi_extra=openapi_extra,\n                generate_unique_id_function=generate_unique_id_function,\n            )\n            return func\n\n        return decorator\n\n    def add_api_websocket_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[Sequence[Depends]] = None,\n    ) -> None:\n        self.router.add_api_websocket_route(\n            path,\n            endpoint,\n            name=name,\n            dependencies=dependencies,\n        )\n\n    def websocket(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                WebSocket path.\n                \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A name for the WebSocket. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        *,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be used for this\n                WebSocket.\n\n                Read more about it in the\n                [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n                \"\"\"\n            ),\n        ] = None,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Decorate a WebSocket function.\n\n        Read more about it in the\n        [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n        **Example**\n\n        ```python\n        from fastapi import FastAPI, WebSocket\n\n        app = FastAPI()\n\n        @app.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            await websocket.accept()\n            while True:\n                data = await websocket.receive_text()\n                await websocket.send_text(f\"Message text was: {data}\")\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_websocket_route(\n                path,\n                func,\n                name=name,\n                dependencies=dependencies,\n            )\n            return func\n\n        return decorator\n\n    def include_router(\n        self,\n        router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n                **Example**\n\n                ```python\n                from fastapi import Depends, FastAPI\n\n                from .dependencies import get_token_header\n                from .internal import admin\n\n                app = FastAPI()\n\n                app.include_router(\n                    admin.router,\n                    dependencies=[Depends(get_token_header)],\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all the *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    deprecated=True,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include (or not) all the *path operations* in this router in the\n                generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    include_in_schema=False,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = True,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Default response class to be used for the *path operations* in this\n                router.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n                from fastapi.responses import ORJSONResponse\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    default_response_class=ORJSONResponse,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        \"\"\"\n        Include an `APIRouter` in the same app.\n\n        Read more about it in the\n        [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        from .users import users_router\n\n        app = FastAPI()\n\n        app.include_router(users_router)\n        ```\n        \"\"\"\n        self.router.include_router(\n            router,\n            prefix=prefix,\n            tags=tags,\n            dependencies=dependencies,\n            responses=responses,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            default_response_class=default_response_class,\n            callbacks=callbacks,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n        ```\n        \"\"\"\n        return self.router.get(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PUT operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.put(\"/items/{item_id}\")\n        def replace_item(item_id: str, item: Item):\n            return {\"message\": \"Item replaced\", \"id\": item_id}\n        ```\n        \"\"\"\n        return self.router.put(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def post(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP POST operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.post(\"/items/\")\n        def create_item(item: Item):\n            return {\"message\": \"Item created\"}\n        ```\n        \"\"\"\n        return self.router.post(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def delete(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP DELETE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.delete(\"/items/{item_id}\")\n        def delete_item(item_id: str):\n            return {\"message\": \"Item deleted\"}\n        ```\n        \"\"\"\n        return self.router.delete(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def options(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP OPTIONS operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.options(\"/items/\")\n        def get_item_options():\n            return {\"additions\": [\"Aji\", \"Guacamole\"]}\n        ```\n        \"\"\"\n        return self.router.options(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def head(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP HEAD operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI, Response\n\n        app = FastAPI()\n\n        @app.head(\"/items/\", status_code=204)\n        def get_items_headers(response: Response):\n            response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n        ```\n        \"\"\"\n        return self.router.head(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def patch(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PATCH operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.patch(\"/items/\")\n        def update_item(item: Item):\n            return {\"message\": \"Item updated in place\"}\n        ```\n        \"\"\"\n        return self.router.patch(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def trace(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP TRACE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.put(\"/items/{item_id}\")\n        def trace_item(item_id: str):\n            return None\n        ```\n        \"\"\"\n        return self.router.trace(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def websocket_route(\n        self, path: str, name: Union[str, None] = None\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.router.add_websocket_route(path, func, name=name)\n            return func\n\n        return decorator\n\n    @deprecated(\n        \"\"\"\n        on_event is deprecated, use lifespan event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n        \"\"\"\n    )\n    def on_event(\n        self,\n        event_type: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The type of event. `startup` or `shutdown`.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add an event handler for the application.\n\n        `on_event` is deprecated, use `lifespan` event handlers instead.\n\n        Read more about it in the\n        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).\n        \"\"\"\n        return self.router.on_event(event_type)\n\n    def middleware(\n        self,\n        middleware_type: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The type of middleware. Currently only supports `http`.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a middleware to the application.\n\n        Read more about it in the\n        [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n\n        ## Example\n\n        ```python\n        import time\n\n        from fastapi import FastAPI, Request\n\n        app = FastAPI()\n\n\n        @app.middleware(\"http\")\n        async def add_process_time_header(request: Request, call_next):\n            start_time = time.time()\n            response = await call_next(request)\n            process_time = time.time() - start_time\n            response.headers[\"X-Process-Time\"] = str(process_time)\n            return response\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n            return func\n\n        return decorator\n\n    def exception_handler(\n        self,\n        exc_class_or_status_code: Annotated[\n            Union[int, Type[Exception]],\n            Doc(\n                \"\"\"\n                The Exception class this would handle, or a status code.\n                \"\"\"\n            ),\n        ],\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add an exception handler to the app.\n\n        Read more about it in the\n        [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI, Request\n        from fastapi.responses import JSONResponse\n\n\n        class UnicornException(Exception):\n            def __init__(self, name: str):\n                self.name = name\n\n\n        app = FastAPI()\n\n\n        @app.exception_handler(UnicornException)\n        async def unicorn_exception_handler(request: Request, exc: UnicornException):\n            return JSONResponse(\n                status_code=418,\n                content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n            )\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_exception_handler(exc_class_or_status_code, func)\n            return func\n\n        return decorator\n", "fastapi/background.py": "from typing import Any, Callable\n\nfrom starlette.background import BackgroundTasks as StarletteBackgroundTasks\nfrom typing_extensions import Annotated, Doc, ParamSpec\n\nP = ParamSpec(\"P\")\n\n\nclass BackgroundTasks(StarletteBackgroundTasks):\n    \"\"\"\n    A collection of background tasks that will be called after a response has been\n    sent to the client.\n\n    Read more about it in the\n    [FastAPI docs for Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/).\n\n    ## Example\n\n    ```python\n    from fastapi import BackgroundTasks, FastAPI\n\n    app = FastAPI()\n\n\n    def write_notification(email: str, message=\"\"):\n        with open(\"log.txt\", mode=\"w\") as email_file:\n            content = f\"notification for {email}: {message}\"\n            email_file.write(content)\n\n\n    @app.post(\"/send-notification/{email}\")\n    async def send_notification(email: str, background_tasks: BackgroundTasks):\n        background_tasks.add_task(write_notification, email, message=\"some notification\")\n        return {\"message\": \"Notification sent in the background\"}\n    ```\n    \"\"\"\n\n    def add_task(\n        self,\n        func: Annotated[\n            Callable[P, Any],\n            Doc(\n                \"\"\"\n                The function to call after the response is sent.\n\n                It can be a regular `def` function or an `async def` function.\n                \"\"\"\n            ),\n        ],\n        *args: P.args,\n        **kwargs: P.kwargs,\n    ) -> None:\n        \"\"\"\n        Add a function to be called in the background after the response is sent.\n\n        Read more about it in the\n        [FastAPI docs for Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/).\n        \"\"\"\n        return super().add_task(func, *args, **kwargs)\n", "fastapi/datastructures.py": "from typing import (\n    Any,\n    BinaryIO,\n    Callable,\n    Dict,\n    Iterable,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n)\n\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    CoreSchema,\n    GetJsonSchemaHandler,\n    JsonSchemaValue,\n    with_info_plain_validator_function,\n)\nfrom starlette.datastructures import URL as URL  # noqa: F401\nfrom starlette.datastructures import Address as Address  # noqa: F401\nfrom starlette.datastructures import FormData as FormData  # noqa: F401\nfrom starlette.datastructures import Headers as Headers  # noqa: F401\nfrom starlette.datastructures import QueryParams as QueryParams  # noqa: F401\nfrom starlette.datastructures import State as State  # noqa: F401\nfrom starlette.datastructures import UploadFile as StarletteUploadFile\nfrom typing_extensions import Annotated, Doc\n\n\nclass UploadFile(StarletteUploadFile):\n    \"\"\"\n    A file uploaded in a request.\n\n    Define it as a *path operation function* (or dependency) parameter.\n\n    If you are using a regular `def` function, you can use the `upload_file.file`\n    attribute to access the raw standard Python file (blocking, not async), useful and\n    needed for non-async code.\n\n    Read more about it in the\n    [FastAPI docs for Request Files](https://fastapi.tiangolo.com/tutorial/request-files/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import FastAPI, File, UploadFile\n\n    app = FastAPI()\n\n\n    @app.post(\"/files/\")\n    async def create_file(file: Annotated[bytes, File()]):\n        return {\"file_size\": len(file)}\n\n\n    @app.post(\"/uploadfile/\")\n    async def create_upload_file(file: UploadFile):\n        return {\"filename\": file.filename}\n    ```\n    \"\"\"\n\n    file: Annotated[\n        BinaryIO,\n        Doc(\"The standard Python file object (non-async).\"),\n    ]\n    filename: Annotated[Optional[str], Doc(\"The original file name.\")]\n    size: Annotated[Optional[int], Doc(\"The size of the file in bytes.\")]\n    headers: Annotated[Headers, Doc(\"The headers of the request.\")]\n    content_type: Annotated[\n        Optional[str], Doc(\"The content type of the request, from the headers.\")\n    ]\n\n    async def write(\n        self,\n        data: Annotated[\n            bytes,\n            Doc(\n                \"\"\"\n                The bytes to write to the file.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        \"\"\"\n        Write some bytes to the file.\n\n        You normally wouldn't use this from a file you read in a request.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().write(data)\n\n    async def read(\n        self,\n        size: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                The number of bytes to read from the file.\n                \"\"\"\n            ),\n        ] = -1,\n    ) -> bytes:\n        \"\"\"\n        Read some bytes from the file.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().read(size)\n\n    async def seek(\n        self,\n        offset: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                The position in bytes to seek to in the file.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        \"\"\"\n        Move to a position in the file.\n\n        Any next read or write will be done from that position.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().seek(offset)\n\n    async def close(self) -> None:\n        \"\"\"\n        Close the file.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().close()\n\n    @classmethod\n    def __get_validators__(cls: Type[\"UploadFile\"]) -> Iterable[Callable[..., Any]]:\n        yield cls.validate\n\n    @classmethod\n    def validate(cls: Type[\"UploadFile\"], v: Any) -> Any:\n        if not isinstance(v, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(v)}\")\n        return v\n\n    @classmethod\n    def _validate(cls, __input_value: Any, _: Any) -> \"UploadFile\":\n        if not isinstance(__input_value, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(__input_value)}\")\n        return cast(UploadFile, __input_value)\n\n    if not PYDANTIC_V2:\n\n        @classmethod\n        def __modify_schema__(cls, field_schema: Dict[str, Any]) -> None:\n            field_schema.update({\"type\": \"string\", \"format\": \"binary\"})\n\n    @classmethod\n    def __get_pydantic_json_schema__(\n        cls, core_schema: CoreSchema, handler: GetJsonSchemaHandler\n    ) -> JsonSchemaValue:\n        return {\"type\": \"string\", \"format\": \"binary\"}\n\n    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n    ) -> CoreSchema:\n        return with_info_plain_validator_function(cls._validate)\n\n\nclass DefaultPlaceholder:\n    \"\"\"\n    You shouldn't use this class directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n\n    def __init__(self, value: Any):\n        self.value = value\n\n    def __bool__(self) -> bool:\n        return bool(self.value)\n\n    def __eq__(self, o: object) -> bool:\n        return isinstance(o, DefaultPlaceholder) and o.value == self.value\n\n\nDefaultType = TypeVar(\"DefaultType\")\n\n\ndef Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n    return DefaultPlaceholder(value)  # type: ignore\n", "fastapi/responses.py": "from typing import Any\n\nfrom starlette.responses import FileResponse as FileResponse  # noqa\nfrom starlette.responses import HTMLResponse as HTMLResponse  # noqa\nfrom starlette.responses import JSONResponse as JSONResponse  # noqa\nfrom starlette.responses import PlainTextResponse as PlainTextResponse  # noqa\nfrom starlette.responses import RedirectResponse as RedirectResponse  # noqa\nfrom starlette.responses import Response as Response  # noqa\nfrom starlette.responses import StreamingResponse as StreamingResponse  # noqa\n\ntry:\n    import ujson\nexcept ImportError:  # pragma: nocover\n    ujson = None  # type: ignore\n\n\ntry:\n    import orjson\nexcept ImportError:  # pragma: nocover\n    orjson = None  # type: ignore\n\n\nclass UJSONResponse(JSONResponse):\n    \"\"\"\n    JSON response using the high-performance ujson library to serialize data to JSON.\n\n    Read more about it in the\n    [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).\n    \"\"\"\n\n    def render(self, content: Any) -> bytes:\n        assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n        return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n\n\nclass ORJSONResponse(JSONResponse):\n    \"\"\"\n    JSON response using the high-performance orjson library to serialize data to JSON.\n\n    Read more about it in the\n    [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).\n    \"\"\"\n\n    def render(self, content: Any) -> bytes:\n        assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n        return orjson.dumps(\n            content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n        )\n", "fastapi/types.py": "import types\nfrom enum import Enum\nfrom typing import Any, Callable, Dict, Set, Type, TypeVar, Union\n\nfrom pydantic import BaseModel\n\nDecoratedCallable = TypeVar(\"DecoratedCallable\", bound=Callable[..., Any])\nUnionType = getattr(types, \"UnionType\", Union)\nModelNameMap = Dict[Union[Type[BaseModel], Type[Enum]], str]\nIncEx = Union[Set[int], Set[str], Dict[int, Any], Dict[str, Any]]\n", "fastapi/requests.py": "from starlette.requests import HTTPConnection as HTTPConnection  # noqa: F401\nfrom starlette.requests import Request as Request  # noqa: F401\n", "fastapi/testclient.py": "from starlette.testclient import TestClient as TestClient  # noqa\n", "fastapi/exception_handlers.py": "from fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\nfrom fastapi.utils import is_body_allowed_for_status_code\nfrom fastapi.websockets import WebSocket\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse, Response\nfrom starlette.status import HTTP_422_UNPROCESSABLE_ENTITY, WS_1008_POLICY_VIOLATION\n\n\nasync def http_exception_handler(request: Request, exc: HTTPException) -> Response:\n    headers = getattr(exc, \"headers\", None)\n    if not is_body_allowed_for_status_code(exc.status_code):\n        return Response(status_code=exc.status_code, headers=headers)\n    return JSONResponse(\n        {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n    )\n\n\nasync def request_validation_exception_handler(\n    request: Request, exc: RequestValidationError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\"detail\": jsonable_encoder(exc.errors())},\n    )\n\n\nasync def websocket_request_validation_exception_handler(\n    websocket: WebSocket, exc: WebSocketRequestValidationError\n) -> None:\n    await websocket.close(\n        code=WS_1008_POLICY_VIOLATION, reason=jsonable_encoder(exc.errors())\n    )\n", "fastapi/_compat.py": "from collections import deque\nfrom copy import copy\nfrom dataclasses import dataclass, is_dataclass\nfrom enum import Enum\nfrom typing import (\n    Any,\n    Callable,\n    Deque,\n    Dict,\n    FrozenSet,\n    List,\n    Mapping,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom fastapi.exceptions import RequestErrorModel\nfrom fastapi.types import IncEx, ModelNameMap, UnionType\nfrom pydantic import BaseModel, create_model\nfrom pydantic.version import VERSION as P_VERSION\nfrom starlette.datastructures import UploadFile\nfrom typing_extensions import Annotated, Literal, get_args, get_origin\n\n# Reassign variable to make it reexported for mypy\nPYDANTIC_VERSION = P_VERSION\nPYDANTIC_V2 = PYDANTIC_VERSION.startswith(\"2.\")\n\n\nsequence_annotation_to_type = {\n    Sequence: list,\n    List: list,\n    list: list,\n    Tuple: tuple,\n    tuple: tuple,\n    Set: set,\n    set: set,\n    FrozenSet: frozenset,\n    frozenset: frozenset,\n    Deque: deque,\n    deque: deque,\n}\n\nsequence_types = tuple(sequence_annotation_to_type.keys())\n\nif PYDANTIC_V2:\n    from pydantic import PydanticSchemaGenerationError as PydanticSchemaGenerationError\n    from pydantic import TypeAdapter\n    from pydantic import ValidationError as ValidationError\n    from pydantic._internal._schema_generation_shared import (  # type: ignore[attr-defined]\n        GetJsonSchemaHandler as GetJsonSchemaHandler,\n    )\n    from pydantic._internal._typing_extra import eval_type_lenient\n    from pydantic._internal._utils import lenient_issubclass as lenient_issubclass\n    from pydantic.fields import FieldInfo\n    from pydantic.json_schema import GenerateJsonSchema as GenerateJsonSchema\n    from pydantic.json_schema import JsonSchemaValue as JsonSchemaValue\n    from pydantic_core import CoreSchema as CoreSchema\n    from pydantic_core import PydanticUndefined, PydanticUndefinedType\n    from pydantic_core import Url as Url\n\n    try:\n        from pydantic_core.core_schema import (\n            with_info_plain_validator_function as with_info_plain_validator_function,\n        )\n    except ImportError:  # pragma: no cover\n        from pydantic_core.core_schema import (\n            general_plain_validator_function as with_info_plain_validator_function,  # noqa: F401\n        )\n\n    Required = PydanticUndefined\n    Undefined = PydanticUndefined\n    UndefinedType = PydanticUndefinedType\n    evaluate_forwardref = eval_type_lenient\n    Validator = Any\n\n    class BaseConfig:\n        pass\n\n    class ErrorWrapper(Exception):\n        pass\n\n    @dataclass\n    class ModelField:\n        field_info: FieldInfo\n        name: str\n        mode: Literal[\"validation\", \"serialization\"] = \"validation\"\n\n        @property\n        def alias(self) -> str:\n            a = self.field_info.alias\n            return a if a is not None else self.name\n\n        @property\n        def required(self) -> bool:\n            return self.field_info.is_required()\n\n        @property\n        def default(self) -> Any:\n            return self.get_default()\n\n        @property\n        def type_(self) -> Any:\n            return self.field_info.annotation\n\n        def __post_init__(self) -> None:\n            self._type_adapter: TypeAdapter[Any] = TypeAdapter(\n                Annotated[self.field_info.annotation, self.field_info]\n            )\n\n        def get_default(self) -> Any:\n            if self.field_info.is_required():\n                return Undefined\n            return self.field_info.get_default(call_default_factory=True)\n\n        def validate(\n            self,\n            value: Any,\n            values: Dict[str, Any] = {},  # noqa: B006\n            *,\n            loc: Tuple[Union[int, str], ...] = (),\n        ) -> Tuple[Any, Union[List[Dict[str, Any]], None]]:\n            try:\n                return (\n                    self._type_adapter.validate_python(value, from_attributes=True),\n                    None,\n                )\n            except ValidationError as exc:\n                return None, _regenerate_error_with_loc(\n                    errors=exc.errors(include_url=False), loc_prefix=loc\n                )\n\n        def serialize(\n            self,\n            value: Any,\n            *,\n            mode: Literal[\"json\", \"python\"] = \"json\",\n            include: Union[IncEx, None] = None,\n            exclude: Union[IncEx, None] = None,\n            by_alias: bool = True,\n            exclude_unset: bool = False,\n            exclude_defaults: bool = False,\n            exclude_none: bool = False,\n        ) -> Any:\n            # What calls this code passes a value that already called\n            # self._type_adapter.validate_python(value)\n            return self._type_adapter.dump_python(\n                value,\n                mode=mode,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n\n        def __hash__(self) -> int:\n            # Each ModelField is unique for our purposes, to allow making a dict from\n            # ModelField to its JSON Schema.\n            return id(self)\n\n    def get_annotation_from_field_info(\n        annotation: Any, field_info: FieldInfo, field_name: str\n    ) -> Any:\n        return annotation\n\n    def _normalize_errors(errors: Sequence[Any]) -> List[Dict[str, Any]]:\n        return errors  # type: ignore[return-value]\n\n    def _model_rebuild(model: Type[BaseModel]) -> None:\n        model.model_rebuild()\n\n    def _model_dump(\n        model: BaseModel, mode: Literal[\"json\", \"python\"] = \"json\", **kwargs: Any\n    ) -> Any:\n        return model.model_dump(mode=mode, **kwargs)\n\n    def _get_model_config(model: BaseModel) -> Any:\n        return model.model_config\n\n    def get_schema_from_model_field(\n        *,\n        field: ModelField,\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        field_mapping: Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        separate_input_output_schemas: bool = True,\n    ) -> Dict[str, Any]:\n        override_mode: Union[Literal[\"validation\"], None] = (\n            None if separate_input_output_schemas else \"validation\"\n        )\n        # This expects that GenerateJsonSchema was already used to generate the definitions\n        json_schema = field_mapping[(field, override_mode or field.mode)]\n        if \"$ref\" not in json_schema:\n            # TODO remove when deprecating Pydantic v1\n            # Ref: https://github.com/pydantic/pydantic/blob/d61792cc42c80b13b23e3ffa74bc37ec7c77f7d1/pydantic/schema.py#L207\n            json_schema[\"title\"] = (\n                field.field_info.title or field.alias.title().replace(\"_\", \" \")\n            )\n        return json_schema\n\n    def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n        return {}\n\n    def get_definitions(\n        *,\n        fields: List[ModelField],\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        separate_input_output_schemas: bool = True,\n    ) -> Tuple[\n        Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        Dict[str, Dict[str, Any]],\n    ]:\n        override_mode: Union[Literal[\"validation\"], None] = (\n            None if separate_input_output_schemas else \"validation\"\n        )\n        inputs = [\n            (field, override_mode or field.mode, field._type_adapter.core_schema)\n            for field in fields\n        ]\n        field_mapping, definitions = schema_generator.generate_definitions(\n            inputs=inputs\n        )\n        return field_mapping, definitions  # type: ignore[return-value]\n\n    def is_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        return field_annotation_is_scalar(\n            field.field_info.annotation\n        ) and not isinstance(field.field_info, params.Body)\n\n    def is_sequence_field(field: ModelField) -> bool:\n        return field_annotation_is_sequence(field.field_info.annotation)\n\n    def is_scalar_sequence_field(field: ModelField) -> bool:\n        return field_annotation_is_scalar_sequence(field.field_info.annotation)\n\n    def is_bytes_field(field: ModelField) -> bool:\n        return is_bytes_or_nonable_bytes_annotation(field.type_)\n\n    def is_bytes_sequence_field(field: ModelField) -> bool:\n        return is_bytes_sequence_annotation(field.type_)\n\n    def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n        cls = type(field_info)\n        merged_field_info = cls.from_annotation(annotation)\n        new_field_info = copy(field_info)\n        new_field_info.metadata = merged_field_info.metadata\n        new_field_info.annotation = merged_field_info.annotation\n        return new_field_info\n\n    def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n        origin_type = (\n            get_origin(field.field_info.annotation) or field.field_info.annotation\n        )\n        assert issubclass(origin_type, sequence_types)  # type: ignore[arg-type]\n        return sequence_annotation_to_type[origin_type](value)  # type: ignore[no-any-return]\n\n    def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n        error = ValidationError.from_exception_data(\n            \"Field required\", [{\"type\": \"missing\", \"loc\": loc, \"input\": {}}]\n        ).errors(include_url=False)[0]\n        error[\"input\"] = None\n        return error  # type: ignore[return-value]\n\n    def create_body_model(\n        *, fields: Sequence[ModelField], model_name: str\n    ) -> Type[BaseModel]:\n        field_params = {f.name: (f.field_info.annotation, f.field_info) for f in fields}\n        BodyModel: Type[BaseModel] = create_model(model_name, **field_params)  # type: ignore[call-overload]\n        return BodyModel\n\nelse:\n    from fastapi.openapi.constants import REF_PREFIX as REF_PREFIX\n    from pydantic import AnyUrl as Url  # noqa: F401\n    from pydantic import (  # type: ignore[assignment]\n        BaseConfig as BaseConfig,  # noqa: F401\n    )\n    from pydantic import ValidationError as ValidationError  # noqa: F401\n    from pydantic.class_validators import (  # type: ignore[no-redef]\n        Validator as Validator,  # noqa: F401\n    )\n    from pydantic.error_wrappers import (  # type: ignore[no-redef]\n        ErrorWrapper as ErrorWrapper,  # noqa: F401\n    )\n    from pydantic.errors import MissingError\n    from pydantic.fields import (  # type: ignore[attr-defined]\n        SHAPE_FROZENSET,\n        SHAPE_LIST,\n        SHAPE_SEQUENCE,\n        SHAPE_SET,\n        SHAPE_SINGLETON,\n        SHAPE_TUPLE,\n        SHAPE_TUPLE_ELLIPSIS,\n    )\n    from pydantic.fields import FieldInfo as FieldInfo\n    from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n        ModelField as ModelField,  # noqa: F401\n    )\n    from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n        Required as Required,  # noqa: F401\n    )\n    from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n        Undefined as Undefined,\n    )\n    from pydantic.fields import (  # type: ignore[no-redef, attr-defined]\n        UndefinedType as UndefinedType,  # noqa: F401\n    )\n    from pydantic.schema import (\n        field_schema,\n        get_flat_models_from_fields,\n        get_model_name_map,\n        model_process_schema,\n    )\n    from pydantic.schema import (  # type: ignore[no-redef]  # noqa: F401\n        get_annotation_from_field_info as get_annotation_from_field_info,\n    )\n    from pydantic.typing import (  # type: ignore[no-redef]\n        evaluate_forwardref as evaluate_forwardref,  # noqa: F401\n    )\n    from pydantic.utils import (  # type: ignore[no-redef]\n        lenient_issubclass as lenient_issubclass,  # noqa: F401\n    )\n\n    GetJsonSchemaHandler = Any  # type: ignore[assignment,misc]\n    JsonSchemaValue = Dict[str, Any]  # type: ignore[misc]\n    CoreSchema = Any  # type: ignore[assignment,misc]\n\n    sequence_shapes = {\n        SHAPE_LIST,\n        SHAPE_SET,\n        SHAPE_FROZENSET,\n        SHAPE_TUPLE,\n        SHAPE_SEQUENCE,\n        SHAPE_TUPLE_ELLIPSIS,\n    }\n    sequence_shape_to_type = {\n        SHAPE_LIST: list,\n        SHAPE_SET: set,\n        SHAPE_TUPLE: tuple,\n        SHAPE_SEQUENCE: list,\n        SHAPE_TUPLE_ELLIPSIS: list,\n    }\n\n    @dataclass\n    class GenerateJsonSchema:  # type: ignore[no-redef]\n        ref_template: str\n\n    class PydanticSchemaGenerationError(Exception):  # type: ignore[no-redef]\n        pass\n\n    def with_info_plain_validator_function(  # type: ignore[misc]\n        function: Callable[..., Any],\n        *,\n        ref: Union[str, None] = None,\n        metadata: Any = None,\n        serialization: Any = None,\n    ) -> Any:\n        return {}\n\n    def get_model_definitions(\n        *,\n        flat_models: Set[Union[Type[BaseModel], Type[Enum]]],\n        model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n    ) -> Dict[str, Any]:\n        definitions: Dict[str, Dict[str, Any]] = {}\n        for model in flat_models:\n            m_schema, m_definitions, m_nested_models = model_process_schema(\n                model, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n            )\n            definitions.update(m_definitions)\n            model_name = model_name_map[model]\n            if \"description\" in m_schema:\n                m_schema[\"description\"] = m_schema[\"description\"].split(\"\\f\")[0]\n            definitions[model_name] = m_schema\n        return definitions\n\n    def is_pv1_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        field_info = field.field_info\n        if not (\n            field.shape == SHAPE_SINGLETON  # type: ignore[attr-defined]\n            and not lenient_issubclass(field.type_, BaseModel)\n            and not lenient_issubclass(field.type_, dict)\n            and not field_annotation_is_sequence(field.type_)\n            and not is_dataclass(field.type_)\n            and not isinstance(field_info, params.Body)\n        ):\n            return False\n        if field.sub_fields:  # type: ignore[attr-defined]\n            if not all(\n                is_pv1_scalar_field(f)\n                for f in field.sub_fields  # type: ignore[attr-defined]\n            ):\n                return False\n        return True\n\n    def is_pv1_scalar_sequence_field(field: ModelField) -> bool:\n        if (field.shape in sequence_shapes) and not lenient_issubclass(  # type: ignore[attr-defined]\n            field.type_, BaseModel\n        ):\n            if field.sub_fields is not None:  # type: ignore[attr-defined]\n                for sub_field in field.sub_fields:  # type: ignore[attr-defined]\n                    if not is_pv1_scalar_field(sub_field):\n                        return False\n            return True\n        if _annotation_is_sequence(field.type_):\n            return True\n        return False\n\n    def _normalize_errors(errors: Sequence[Any]) -> List[Dict[str, Any]]:\n        use_errors: List[Any] = []\n        for error in errors:\n            if isinstance(error, ErrorWrapper):\n                new_errors = ValidationError(  # type: ignore[call-arg]\n                    errors=[error], model=RequestErrorModel\n                ).errors()\n                use_errors.extend(new_errors)\n            elif isinstance(error, list):\n                use_errors.extend(_normalize_errors(error))\n            else:\n                use_errors.append(error)\n        return use_errors\n\n    def _model_rebuild(model: Type[BaseModel]) -> None:\n        model.update_forward_refs()\n\n    def _model_dump(\n        model: BaseModel, mode: Literal[\"json\", \"python\"] = \"json\", **kwargs: Any\n    ) -> Any:\n        return model.dict(**kwargs)\n\n    def _get_model_config(model: BaseModel) -> Any:\n        return model.__config__  # type: ignore[attr-defined]\n\n    def get_schema_from_model_field(\n        *,\n        field: ModelField,\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        field_mapping: Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        separate_input_output_schemas: bool = True,\n    ) -> Dict[str, Any]:\n        # This expects that GenerateJsonSchema was already used to generate the definitions\n        return field_schema(  # type: ignore[no-any-return]\n            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n        )[0]\n\n    def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n        models = get_flat_models_from_fields(fields, known_models=set())\n        return get_model_name_map(models)  # type: ignore[no-any-return]\n\n    def get_definitions(\n        *,\n        fields: List[ModelField],\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        separate_input_output_schemas: bool = True,\n    ) -> Tuple[\n        Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        Dict[str, Dict[str, Any]],\n    ]:\n        models = get_flat_models_from_fields(fields, known_models=set())\n        return {}, get_model_definitions(\n            flat_models=models, model_name_map=model_name_map\n        )\n\n    def is_scalar_field(field: ModelField) -> bool:\n        return is_pv1_scalar_field(field)\n\n    def is_sequence_field(field: ModelField) -> bool:\n        return field.shape in sequence_shapes or _annotation_is_sequence(field.type_)  # type: ignore[attr-defined]\n\n    def is_scalar_sequence_field(field: ModelField) -> bool:\n        return is_pv1_scalar_sequence_field(field)\n\n    def is_bytes_field(field: ModelField) -> bool:\n        return lenient_issubclass(field.type_, bytes)\n\n    def is_bytes_sequence_field(field: ModelField) -> bool:\n        return field.shape in sequence_shapes and lenient_issubclass(field.type_, bytes)  # type: ignore[attr-defined]\n\n    def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n        return copy(field_info)\n\n    def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n        return sequence_shape_to_type[field.shape](value)  # type: ignore[no-any-return,attr-defined]\n\n    def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n        missing_field_error = ErrorWrapper(MissingError(), loc=loc)  # type: ignore[call-arg]\n        new_error = ValidationError([missing_field_error], RequestErrorModel)\n        return new_error.errors()[0]  # type: ignore[return-value]\n\n    def create_body_model(\n        *, fields: Sequence[ModelField], model_name: str\n    ) -> Type[BaseModel]:\n        BodyModel = create_model(model_name)\n        for f in fields:\n            BodyModel.__fields__[f.name] = f  # type: ignore[index]\n        return BodyModel\n\n\ndef _regenerate_error_with_loc(\n    *, errors: Sequence[Any], loc_prefix: Tuple[Union[str, int], ...]\n) -> List[Dict[str, Any]]:\n    updated_loc_errors: List[Any] = [\n        {**err, \"loc\": loc_prefix + err.get(\"loc\", ())}\n        for err in _normalize_errors(errors)\n    ]\n\n    return updated_loc_errors\n\n\ndef _annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:\n    if lenient_issubclass(annotation, (str, bytes)):\n        return False\n    return lenient_issubclass(annotation, sequence_types)\n\n\ndef field_annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:\n    return _annotation_is_sequence(annotation) or _annotation_is_sequence(\n        get_origin(annotation)\n    )\n\n\ndef value_is_sequence(value: Any) -> bool:\n    return isinstance(value, sequence_types) and not isinstance(value, (str, bytes))  # type: ignore[arg-type]\n\n\ndef _annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:\n    return (\n        lenient_issubclass(annotation, (BaseModel, Mapping, UploadFile))\n        or _annotation_is_sequence(annotation)\n        or is_dataclass(annotation)\n    )\n\n\ndef field_annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        return any(field_annotation_is_complex(arg) for arg in get_args(annotation))\n\n    return (\n        _annotation_is_complex(annotation)\n        or _annotation_is_complex(origin)\n        or hasattr(origin, \"__pydantic_core_schema__\")\n        or hasattr(origin, \"__get_pydantic_core_schema__\")\n    )\n\n\ndef field_annotation_is_scalar(annotation: Any) -> bool:\n    # handle Ellipsis here to make tuple[int, ...] work nicely\n    return annotation is Ellipsis or not field_annotation_is_complex(annotation)\n\n\ndef field_annotation_is_scalar_sequence(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one_scalar_sequence = False\n        for arg in get_args(annotation):\n            if field_annotation_is_scalar_sequence(arg):\n                at_least_one_scalar_sequence = True\n                continue\n            elif not field_annotation_is_scalar(arg):\n                return False\n        return at_least_one_scalar_sequence\n    return field_annotation_is_sequence(annotation) and all(\n        field_annotation_is_scalar(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )\n\n\ndef is_bytes_or_nonable_bytes_annotation(annotation: Any) -> bool:\n    if lenient_issubclass(annotation, bytes):\n        return True\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if lenient_issubclass(arg, bytes):\n                return True\n    return False\n\n\ndef is_uploadfile_or_nonable_uploadfile_annotation(annotation: Any) -> bool:\n    if lenient_issubclass(annotation, UploadFile):\n        return True\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if lenient_issubclass(arg, UploadFile):\n                return True\n    return False\n\n\ndef is_bytes_sequence_annotation(annotation: Any) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one = False\n        for arg in get_args(annotation):\n            if is_bytes_sequence_annotation(arg):\n                at_least_one = True\n                continue\n        return at_least_one\n    return field_annotation_is_sequence(annotation) and all(\n        is_bytes_or_nonable_bytes_annotation(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )\n\n\ndef is_uploadfile_sequence_annotation(annotation: Any) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one = False\n        for arg in get_args(annotation):\n            if is_uploadfile_sequence_annotation(arg):\n                at_least_one = True\n                continue\n        return at_least_one\n    return field_annotation_is_sequence(annotation) and all(\n        is_uploadfile_or_nonable_uploadfile_annotation(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )\n", "fastapi/staticfiles.py": "from starlette.staticfiles import StaticFiles as StaticFiles  # noqa\n", "fastapi/__init__.py": "\"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n\n__version__ = \"0.111.0\"\n\nfrom starlette import status as status\n\nfrom .applications import FastAPI as FastAPI\nfrom .background import BackgroundTasks as BackgroundTasks\nfrom .datastructures import UploadFile as UploadFile\nfrom .exceptions import HTTPException as HTTPException\nfrom .exceptions import WebSocketException as WebSocketException\nfrom .param_functions import Body as Body\nfrom .param_functions import Cookie as Cookie\nfrom .param_functions import Depends as Depends\nfrom .param_functions import File as File\nfrom .param_functions import Form as Form\nfrom .param_functions import Header as Header\nfrom .param_functions import Path as Path\nfrom .param_functions import Query as Query\nfrom .param_functions import Security as Security\nfrom .requests import Request as Request\nfrom .responses import Response as Response\nfrom .routing import APIRouter as APIRouter\nfrom .websockets import WebSocket as WebSocket\nfrom .websockets import WebSocketDisconnect as WebSocketDisconnect\n", "fastapi/websockets.py": "from starlette.websockets import WebSocket as WebSocket  # noqa\nfrom starlette.websockets import WebSocketDisconnect as WebSocketDisconnect  # noqa\nfrom starlette.websockets import WebSocketState as WebSocketState  # noqa\n", "fastapi/templating.py": "from starlette.templating import Jinja2Templates as Jinja2Templates  # noqa\n", "fastapi/logger.py": "import logging\n\nlogger = logging.getLogger(\"fastapi\")\n", "fastapi/encoders.py": "import dataclasses\nimport datetime\nfrom collections import defaultdict, deque\nfrom decimal import Decimal\nfrom enum import Enum\nfrom ipaddress import (\n    IPv4Address,\n    IPv4Interface,\n    IPv4Network,\n    IPv6Address,\n    IPv6Interface,\n    IPv6Network,\n)\nfrom pathlib import Path, PurePath\nfrom re import Pattern\nfrom types import GeneratorType\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\nfrom uuid import UUID\n\nfrom fastapi.types import IncEx\nfrom pydantic import BaseModel\nfrom pydantic.color import Color\nfrom pydantic.networks import AnyUrl, NameEmail\nfrom pydantic.types import SecretBytes, SecretStr\nfrom typing_extensions import Annotated, Doc\n\nfrom ._compat import PYDANTIC_V2, UndefinedType, Url, _model_dump\n\n\n# Taken from Pydantic v1 as is\ndef isoformat(o: Union[datetime.date, datetime.time]) -> str:\n    return o.isoformat()\n\n\n# Taken from Pydantic v1 as is\n# TODO: pv2 should this return strings instead?\ndef decimal_encoder(dec_value: Decimal) -> Union[int, float]:\n    \"\"\"\n    Encodes a Decimal as int of there's no exponent, otherwise float\n\n    This is useful when we use ConstrainedDecimal to represent Numeric(x,0)\n    where a integer (but not int typed) is used. Encoding this as a float\n    results in failed round-tripping between encode and parse.\n    Our Id type is a prime example of this.\n\n    >>> decimal_encoder(Decimal(\"1.0\"))\n    1.0\n\n    >>> decimal_encoder(Decimal(\"1\"))\n    1\n    \"\"\"\n    if dec_value.as_tuple().exponent >= 0:  # type: ignore[operator]\n        return int(dec_value)\n    else:\n        return float(dec_value)\n\n\nENCODERS_BY_TYPE: Dict[Type[Any], Callable[[Any], Any]] = {\n    bytes: lambda o: o.decode(),\n    Color: str,\n    datetime.date: isoformat,\n    datetime.datetime: isoformat,\n    datetime.time: isoformat,\n    datetime.timedelta: lambda td: td.total_seconds(),\n    Decimal: decimal_encoder,\n    Enum: lambda o: o.value,\n    frozenset: list,\n    deque: list,\n    GeneratorType: list,\n    IPv4Address: str,\n    IPv4Interface: str,\n    IPv4Network: str,\n    IPv6Address: str,\n    IPv6Interface: str,\n    IPv6Network: str,\n    NameEmail: str,\n    Path: str,\n    Pattern: lambda o: o.pattern,\n    SecretBytes: str,\n    SecretStr: str,\n    set: list,\n    UUID: str,\n    Url: str,\n    AnyUrl: str,\n}\n\n\ndef generate_encoders_by_class_tuples(\n    type_encoder_map: Dict[Any, Callable[[Any], Any]],\n) -> Dict[Callable[[Any], Any], Tuple[Any, ...]]:\n    encoders_by_class_tuples: Dict[Callable[[Any], Any], Tuple[Any, ...]] = defaultdict(\n        tuple\n    )\n    for type_, encoder in type_encoder_map.items():\n        encoders_by_class_tuples[encoder] += (type_,)\n    return encoders_by_class_tuples\n\n\nencoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)\n\n\ndef jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by FastAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [FastAPI docs for JSON Compatible Encoder](https://fastapi.tiangolo.com/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n", "fastapi/security/api_key.py": "from typing import Optional\n\nfrom fastapi.openapi.models import APIKey, APIKeyIn\nfrom fastapi.security.base import SecurityBase\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_403_FORBIDDEN\nfrom typing_extensions import Annotated, Doc\n\n\nclass APIKeyBase(SecurityBase):\n    pass\n\n\nclass APIKeyQuery(APIKeyBase):\n    \"\"\"\n    API key authentication using a query parameter.\n\n    This defines the name of the query parameter that should be provided in the request\n    with the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the query parameter automatically and provides it as the\n    dependency result. But it doesn't define how to send that API key to the client.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyQuery\n\n    app = FastAPI()\n\n    query_scheme = APIKeyQuery(name=\"api_key\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(api_key: str = Depends(query_scheme)):\n        return {\"api_key\": api_key}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[\n            str,\n            Doc(\"Query parameter name.\"),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the query parameter is not provided, `APIKeyQuery` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the query parameter is not\n                available, instead of erroring out, the dependency result will be\n                `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a query\n                parameter or in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.query_params.get(self.model.name)\n        if not api_key:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return api_key\n\n\nclass APIKeyHeader(APIKeyBase):\n    \"\"\"\n    API key authentication using a header.\n\n    This defines the name of the header that should be provided in the request with\n    the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the header automatically and provides it as the dependency\n    result. But it doesn't define how to send that key to the client.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyHeader\n\n    app = FastAPI()\n\n    header_scheme = APIKeyHeader(name=\"x-key\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(key: str = Depends(header_scheme)):\n        return {\"key\": key}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[str, Doc(\"Header name.\")],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the header is not provided, `APIKeyHeader` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the header is not available,\n                instead of erroring out, the dependency result will be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a header or\n                in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.headers.get(self.model.name)\n        if not api_key:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return api_key\n\n\nclass APIKeyCookie(APIKeyBase):\n    \"\"\"\n    API key authentication using a cookie.\n\n    This defines the name of the cookie that should be provided in the request with\n    the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the cookie automatically and provides it as the dependency\n    result. But it doesn't define how to set that cookie.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyCookie\n\n    app = FastAPI()\n\n    cookie_scheme = APIKeyCookie(name=\"session\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(session: str = Depends(cookie_scheme)):\n        return {\"session\": session}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[str, Doc(\"Cookie name.\")],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the cookie is not provided, `APIKeyCookie` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the cookie is not available,\n                instead of erroring out, the dependency result will be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a cookie or\n                in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.cookies.get(self.model.name)\n        if not api_key:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return api_key\n", "fastapi/security/http.py": "import binascii\nfrom base64 import b64decode\nfrom typing import Optional\n\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.openapi.models import HTTPBase as HTTPBaseModel\nfrom fastapi.openapi.models import HTTPBearer as HTTPBearerModel\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.utils import get_authorization_scheme_param\nfrom pydantic import BaseModel\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\nfrom typing_extensions import Annotated, Doc\n\n\nclass HTTPBasicCredentials(BaseModel):\n    \"\"\"\n    The HTTP Basic credentials given as the result of using `HTTPBasic` in a\n    dependency.\n\n    Read more about it in the\n    [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).\n    \"\"\"\n\n    username: Annotated[str, Doc(\"The HTTP Basic username.\")]\n    password: Annotated[str, Doc(\"The HTTP Basic password.\")]\n\n\nclass HTTPAuthorizationCredentials(BaseModel):\n    \"\"\"\n    The HTTP authorization credentials in the result of using `HTTPBearer` or\n    `HTTPDigest` in a dependency.\n\n    The HTTP authorization header value is split by the first space.\n\n    The first part is the `scheme`, the second part is the `credentials`.\n\n    For example, in an HTTP Bearer token scheme, the client will send a header\n    like:\n\n    ```\n    Authorization: Bearer deadbeef12346\n    ```\n\n    In this case:\n\n    * `scheme` will have the value `\"Bearer\"`\n    * `credentials` will have the value `\"deadbeef12346\"`\n    \"\"\"\n\n    scheme: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTTP authorization scheme extracted from the header value.\n            \"\"\"\n        ),\n    ]\n    credentials: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTTP authorization credentials extracted from the header value.\n            \"\"\"\n        ),\n    ]\n\n\nclass HTTPBase(SecurityBase):\n    def __init__(\n        self,\n        *,\n        scheme: str,\n        scheme_name: Optional[str] = None,\n        description: Optional[str] = None,\n        auto_error: bool = True,\n    ):\n        self.model = HTTPBaseModel(scheme=scheme, description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n\n\nclass HTTPBasic(HTTPBase):\n    \"\"\"\n    HTTP Basic authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPBasicCredentials` object containing the\n    `username` and the `password`.\n\n    Read more about it in the\n    [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPBasic, HTTPBasicCredentials\n\n    app = FastAPI()\n\n    security = HTTPBasic()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n        return {\"username\": credentials.username, \"password\": credentials.password}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        realm: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                HTTP Basic authentication realm.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Basic authentication is not provided (a\n                header), `HTTPBasic` will automatically cancel the request and send the\n                client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Basic authentication\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in HTTP Basic\n                authentication or in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.realm = realm\n        self.auto_error = auto_error\n\n    async def __call__(  # type: ignore\n        self, request: Request\n    ) -> Optional[HTTPBasicCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if self.realm:\n            unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n        else:\n            unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n        if not authorization or scheme.lower() != \"basic\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers=unauthorized_headers,\n                )\n            else:\n                return None\n        invalid_user_credentials_exc = HTTPException(\n            status_code=HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers=unauthorized_headers,\n        )\n        try:\n            data = b64decode(param).decode(\"ascii\")\n        except (ValueError, UnicodeDecodeError, binascii.Error):\n            raise invalid_user_credentials_exc  # noqa: B904\n        username, separator, password = data.partition(\":\")\n        if not separator:\n            raise invalid_user_credentials_exc\n        return HTTPBasicCredentials(username=username, password=password)\n\n\nclass HTTPBearer(HTTPBase):\n    \"\"\"\n    HTTP Bearer token authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPAuthorizationCredentials` object containing\n    the `scheme` and the `credentials`.\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\n    app = FastAPI()\n\n    security = HTTPBearer()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(\n        credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n    ):\n        return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Bearer token not provided (in an\n                `Authorization` header), `HTTPBearer` will automatically cancel the\n                request and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Bearer token\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in an HTTP\n                Bearer token or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN,\n                    detail=\"Invalid authentication credentials\",\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n\n\nclass HTTPDigest(HTTPBase):\n    \"\"\"\n    HTTP Digest authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPAuthorizationCredentials` object containing\n    the `scheme` and the `credentials`.\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\n    app = FastAPI()\n\n    security = HTTPDigest()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(\n        credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n    ):\n        return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Digest not provided, `HTTPDigest` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Digest is not\n                available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in HTTP\n                Digest or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"digest\":\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN,\n                detail=\"Invalid authentication credentials\",\n            )\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n", "fastapi/security/open_id_connect_url.py": "from typing import Optional\n\nfrom fastapi.openapi.models import OpenIdConnect as OpenIdConnectModel\nfrom fastapi.security.base import SecurityBase\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_403_FORBIDDEN\nfrom typing_extensions import Annotated, Doc\n\n\nclass OpenIdConnect(SecurityBase):\n    \"\"\"\n    OpenID Connect authentication class. An instance of it would be used as a\n    dependency.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        openIdConnectUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n            The OpenID Connect URL.\n            \"\"\"\n            ),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OpenID Connect authentication, it will automatically cancel the request\n                and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OpenID\n                Connect or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = OpenIdConnectModel(\n            openIdConnectUrl=openIdConnectUrl, description=description\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        if not authorization:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return authorization\n", "fastapi/security/utils.py": "from typing import Optional, Tuple\n\n\ndef get_authorization_scheme_param(\n    authorization_header_value: Optional[str],\n) -> Tuple[str, str]:\n    if not authorization_header_value:\n        return \"\", \"\"\n    scheme, _, param = authorization_header_value.partition(\" \")\n    return scheme, param\n", "fastapi/security/base.py": "from fastapi.openapi.models import SecurityBase as SecurityBaseModel\n\n\nclass SecurityBase:\n    model: SecurityBaseModel\n    scheme_name: str\n", "fastapi/security/__init__.py": "from .api_key import APIKeyCookie as APIKeyCookie\nfrom .api_key import APIKeyHeader as APIKeyHeader\nfrom .api_key import APIKeyQuery as APIKeyQuery\nfrom .http import HTTPAuthorizationCredentials as HTTPAuthorizationCredentials\nfrom .http import HTTPBasic as HTTPBasic\nfrom .http import HTTPBasicCredentials as HTTPBasicCredentials\nfrom .http import HTTPBearer as HTTPBearer\nfrom .http import HTTPDigest as HTTPDigest\nfrom .oauth2 import OAuth2 as OAuth2\nfrom .oauth2 import OAuth2AuthorizationCodeBearer as OAuth2AuthorizationCodeBearer\nfrom .oauth2 import OAuth2PasswordBearer as OAuth2PasswordBearer\nfrom .oauth2 import OAuth2PasswordRequestForm as OAuth2PasswordRequestForm\nfrom .oauth2 import OAuth2PasswordRequestFormStrict as OAuth2PasswordRequestFormStrict\nfrom .oauth2 import SecurityScopes as SecurityScopes\nfrom .open_id_connect_url import OpenIdConnect as OpenIdConnect\n", "fastapi/security/oauth2.py": "from typing import Any, Dict, List, Optional, Union, cast\n\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.openapi.models import OAuth2 as OAuth2Model\nfrom fastapi.openapi.models import OAuthFlows as OAuthFlowsModel\nfrom fastapi.param_functions import Form\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.utils import get_authorization_scheme_param\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\n\n# TODO: import from typing when deprecating Python 3.9\nfrom typing_extensions import Annotated, Doc\n\n\nclass OAuth2PasswordRequestForm:\n    \"\"\"\n    This is a dependency class to collect the `username` and `password` as form data\n    for an OAuth2 password flow.\n\n    The OAuth2 specification dictates that for a password flow the data should be\n    collected using form data (instead of JSON) and that it should have the specific\n    fields `username` and `password`.\n\n    All the initialization parameters are extracted from the request.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import OAuth2PasswordRequestForm\n\n    app = FastAPI()\n\n\n    @app.post(\"/login\")\n    def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n        data = {}\n        data[\"scopes\"] = []\n        for scope in form_data.scopes:\n            data[\"scopes\"].append(scope)\n        if form_data.client_id:\n            data[\"client_id\"] = form_data.client_id\n        if form_data.client_secret:\n            data[\"client_secret\"] = form_data.client_secret\n        return data\n    ```\n\n    Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n    You could have custom internal logic to separate it by colon caracters (`:`) or\n    similar, and get the two parts `items` and `read`. Many applications do that to\n    group and organize permissions, you could do it as well in your application, just\n    know that that it is application specific, it's not part of the specification.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        grant_type: Annotated[\n            Union[str, None],\n            Form(pattern=\"password\"),\n            Doc(\n                \"\"\"\n                The OAuth2 spec says it is required and MUST be the fixed string\n                \"password\". Nevertheless, this dependency class is permissive and\n                allows not passing it. If you want to enforce it, use instead the\n                `OAuth2PasswordRequestFormStrict` dependency.\n                \"\"\"\n            ),\n        ] = None,\n        username: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `password` string. The OAuth2 spec requires the exact field name\n                `password\".\n                \"\"\"\n            ),\n        ],\n        scope: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                \"items:read items:write users:read profile openid\"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                \"\"\"\n            ),\n        ] = \"\",\n        client_id: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                \"\"\"\n            ),\n        ] = None,\n        client_secret: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        self.grant_type = grant_type\n        self.username = username\n        self.password = password\n        self.scopes = scope.split()\n        self.client_id = client_id\n        self.client_secret = client_secret\n\n\nclass OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n    \"\"\"\n    This is a dependency class to collect the `username` and `password` as form data\n    for an OAuth2 password flow.\n\n    The OAuth2 specification dictates that for a password flow the data should be\n    collected using form data (instead of JSON) and that it should have the specific\n    fields `username` and `password`.\n\n    All the initialization parameters are extracted from the request.\n\n    The only difference between `OAuth2PasswordRequestFormStrict` and\n    `OAuth2PasswordRequestForm` is that `OAuth2PasswordRequestFormStrict` requires the\n    client to send the form field `grant_type` with the value `\"password\"`, which\n    is required in the OAuth2 specification (it seems that for no particular reason),\n    while for `OAuth2PasswordRequestForm` `grant_type` is optional.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import OAuth2PasswordRequestForm\n\n    app = FastAPI()\n\n\n    @app.post(\"/login\")\n    def login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n        data = {}\n        data[\"scopes\"] = []\n        for scope in form_data.scopes:\n            data[\"scopes\"].append(scope)\n        if form_data.client_id:\n            data[\"client_id\"] = form_data.client_id\n        if form_data.client_secret:\n            data[\"client_secret\"] = form_data.client_secret\n        return data\n    ```\n\n    Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n    You could have custom internal logic to separate it by colon caracters (`:`) or\n    similar, and get the two parts `items` and `read`. Many applications do that to\n    group and organize permissions, you could do it as well in your application, just\n    know that that it is application specific, it's not part of the specification.\n\n\n    grant_type: the OAuth2 spec says it is required and MUST be the fixed string \"password\".\n        This dependency is strict about it. If you want to be permissive, use instead the\n        OAuth2PasswordRequestForm dependency class.\n    username: username string. The OAuth2 spec requires the exact field name \"username\".\n    password: password string. The OAuth2 spec requires the exact field name \"password\".\n    scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.\n        \"items:read items:write users:read profile openid\"\n    client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n        using HTTP Basic auth, as: client_id:client_secret\n    client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n        using HTTP Basic auth, as: client_id:client_secret\n    \"\"\"\n\n    def __init__(\n        self,\n        grant_type: Annotated[\n            str,\n            Form(pattern=\"password\"),\n            Doc(\n                \"\"\"\n                The OAuth2 spec says it is required and MUST be the fixed string\n                \"password\". This dependency is strict about it. If you want to be\n                permissive, use instead the `OAuth2PasswordRequestForm` dependency\n                class.\n                \"\"\"\n            ),\n        ],\n        username: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `password` string. The OAuth2 spec requires the exact field name\n                `password\".\n                \"\"\"\n            ),\n        ],\n        scope: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                \"items:read items:write users:read profile openid\"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                \"\"\"\n            ),\n        ] = \"\",\n        client_id: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                \"\"\"\n            ),\n        ] = None,\n        client_secret: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        super().__init__(\n            grant_type=grant_type,\n            username=username,\n            password=password,\n            scope=scope,\n            client_id=client_id,\n            client_secret=client_secret,\n        )\n\n\nclass OAuth2(SecurityBase):\n    \"\"\"\n    This is the base class for OAuth2 authentication, an instance of it would be used\n    as a dependency. All other OAuth2 classes inherit from it and customize it for\n    each OAuth2 flow.\n\n    You normally would not create a new class inheriting from it but use one of the\n    existing subclasses, and maybe compose them if you want to support multiple flows.\n\n    Read more about it in the\n    [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/).\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        flows: Annotated[\n            Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                The dictionary of OAuth2 flows.\n                \"\"\"\n            ),\n        ] = OAuthFlowsModel(),\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = OAuth2Model(\n            flows=cast(OAuthFlowsModel, flows), description=description\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        if not authorization:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return authorization\n\n\nclass OAuth2PasswordBearer(OAuth2):\n    \"\"\"\n    OAuth2 flow for authentication using a bearer token obtained with a password.\n    An instance of it would be used as a dependency.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n    \"\"\"\n\n    def __init__(\n        self,\n        tokenUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL to obtain the OAuth2 token. This would be the *path operation*\n                that has `OAuth2PasswordRequestForm` as a dependency.\n                \"\"\"\n            ),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        scopes: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        if not scopes:\n            scopes = {}\n        flows = OAuthFlowsModel(\n            password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n        )\n        super().__init__(\n            flows=flows,\n            scheme_name=scheme_name,\n            description=description,\n            auto_error=auto_error,\n        )\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if not authorization or scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                )\n            else:\n                return None\n        return param\n\n\nclass OAuth2AuthorizationCodeBearer(OAuth2):\n    \"\"\"\n    OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code\n    flow. An instance of it would be used as a dependency.\n    \"\"\"\n\n    def __init__(\n        self,\n        authorizationUrl: str,\n        tokenUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL to obtain the OAuth2 token.\n                \"\"\"\n            ),\n        ],\n        refreshUrl: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The URL to refresh the token and obtain a new one.\n                \"\"\"\n            ),\n        ] = None,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        scopes: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        if not scopes:\n            scopes = {}\n        flows = OAuthFlowsModel(\n            authorizationCode=cast(\n                Any,\n                {\n                    \"authorizationUrl\": authorizationUrl,\n                    \"tokenUrl\": tokenUrl,\n                    \"refreshUrl\": refreshUrl,\n                    \"scopes\": scopes,\n                },\n            )\n        )\n        super().__init__(\n            flows=flows,\n            scheme_name=scheme_name,\n            description=description,\n            auto_error=auto_error,\n        )\n\n    async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if not authorization or scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                )\n            else:\n                return None  # pragma: nocover\n        return param\n\n\nclass SecurityScopes:\n    \"\"\"\n    This is a special class that you can define in a parameter in a dependency to\n    obtain the OAuth2 scopes required by all the dependencies in the same chain.\n\n    This way, multiple dependencies can have different scopes, even when used in the\n    same *path operation*. And with this, you can access all the scopes required in\n    all those dependencies in a single place.\n\n    Read more about it in the\n    [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).\n    \"\"\"\n\n    def __init__(\n        self,\n        scopes: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                This will be filled by FastAPI.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        self.scopes: Annotated[\n            List[str],\n            Doc(\n                \"\"\"\n                The list of all the scopes required by dependencies.\n                \"\"\"\n            ),\n        ] = scopes or []\n        self.scope_str: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                All the scopes required by all the dependencies in a single string\n                separated by spaces, as defined in the OAuth2 specification.\n                \"\"\"\n            ),\n        ] = \" \".join(self.scopes)\n", "fastapi/middleware/trustedhost.py": "from starlette.middleware.trustedhost import (  # noqa\n    TrustedHostMiddleware as TrustedHostMiddleware,\n)\n", "fastapi/middleware/cors.py": "from starlette.middleware.cors import CORSMiddleware as CORSMiddleware  # noqa\n", "fastapi/middleware/httpsredirect.py": "from starlette.middleware.httpsredirect import (  # noqa\n    HTTPSRedirectMiddleware as HTTPSRedirectMiddleware,\n)\n", "fastapi/middleware/__init__.py": "from starlette.middleware import Middleware as Middleware\n", "fastapi/middleware/wsgi.py": "from starlette.middleware.wsgi import WSGIMiddleware as WSGIMiddleware  # noqa\n", "fastapi/middleware/gzip.py": "from starlette.middleware.gzip import GZipMiddleware as GZipMiddleware  # noqa\n", "fastapi/dependencies/utils.py": "import inspect\nfrom contextlib import AsyncExitStack, contextmanager\nfrom copy import copy, deepcopy\nfrom typing import (\n    Any,\n    Callable,\n    Coroutine,\n    Dict,\n    ForwardRef,\n    List,\n    Mapping,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n    cast,\n)\n\nimport anyio\nfrom fastapi import params\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    ErrorWrapper,\n    ModelField,\n    Required,\n    Undefined,\n    _regenerate_error_with_loc,\n    copy_field_info,\n    create_body_model,\n    evaluate_forwardref,\n    field_annotation_is_scalar,\n    get_annotation_from_field_info,\n    get_missing_field_error,\n    is_bytes_field,\n    is_bytes_sequence_field,\n    is_scalar_field,\n    is_scalar_sequence_field,\n    is_sequence_field,\n    is_uploadfile_or_nonable_uploadfile_annotation,\n    is_uploadfile_sequence_annotation,\n    lenient_issubclass,\n    sequence_types,\n    serialize_sequence_value,\n    value_is_sequence,\n)\nfrom fastapi.background import BackgroundTasks\nfrom fastapi.concurrency import (\n    asynccontextmanager,\n    contextmanager_in_threadpool,\n)\nfrom fastapi.dependencies.models import Dependant, SecurityRequirement\nfrom fastapi.logger import logger\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.oauth2 import OAuth2, SecurityScopes\nfrom fastapi.security.open_id_connect_url import OpenIdConnect\nfrom fastapi.utils import create_response_field, get_path_param_names\nfrom pydantic.fields import FieldInfo\nfrom starlette.background import BackgroundTasks as StarletteBackgroundTasks\nfrom starlette.concurrency import run_in_threadpool\nfrom starlette.datastructures import FormData, Headers, QueryParams, UploadFile\nfrom starlette.requests import HTTPConnection, Request\nfrom starlette.responses import Response\nfrom starlette.websockets import WebSocket\nfrom typing_extensions import Annotated, get_args, get_origin\n\nmultipart_not_installed_error = (\n    'Form data requires \"python-multipart\" to be installed. \\n'\n    'You can install \"python-multipart\" with: \\n\\n'\n    \"pip install python-multipart\\n\"\n)\nmultipart_incorrect_install_error = (\n    'Form data requires \"python-multipart\" to be installed. '\n    'It seems you installed \"multipart\" instead. \\n'\n    'You can remove \"multipart\" with: \\n\\n'\n    \"pip uninstall multipart\\n\\n\"\n    'And then install \"python-multipart\" with: \\n\\n'\n    \"pip install python-multipart\\n\"\n)\n\n\ndef check_file_field(field: ModelField) -> None:\n    field_info = field.field_info\n    if isinstance(field_info, params.Form):\n        try:\n            # __version__ is available in both multiparts, and can be mocked\n            from multipart import __version__  # type: ignore\n\n            assert __version__\n            try:\n                # parse_options_header is only available in the right multipart\n                from multipart.multipart import parse_options_header  # type: ignore\n\n                assert parse_options_header\n            except ImportError:\n                logger.error(multipart_incorrect_install_error)\n                raise RuntimeError(multipart_incorrect_install_error) from None\n        except ImportError:\n            logger.error(multipart_not_installed_error)\n            raise RuntimeError(multipart_not_installed_error) from None\n\n\ndef get_param_sub_dependant(\n    *,\n    param_name: str,\n    depends: params.Depends,\n    path: str,\n    security_scopes: Optional[List[str]] = None,\n) -> Dependant:\n    assert depends.dependency\n    return get_sub_dependant(\n        depends=depends,\n        dependency=depends.dependency,\n        path=path,\n        name=param_name,\n        security_scopes=security_scopes,\n    )\n\n\ndef get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n    assert callable(\n        depends.dependency\n    ), \"A parameter-less dependency must have a callable dependency\"\n    return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)\n\n\ndef get_sub_dependant(\n    *,\n    depends: params.Depends,\n    dependency: Callable[..., Any],\n    path: str,\n    name: Optional[str] = None,\n    security_scopes: Optional[List[str]] = None,\n) -> Dependant:\n    security_requirement = None\n    security_scopes = security_scopes or []\n    if isinstance(depends, params.Security):\n        dependency_scopes = depends.scopes\n        security_scopes.extend(dependency_scopes)\n    if isinstance(dependency, SecurityBase):\n        use_scopes: List[str] = []\n        if isinstance(dependency, (OAuth2, OpenIdConnect)):\n            use_scopes = security_scopes\n        security_requirement = SecurityRequirement(\n            security_scheme=dependency, scopes=use_scopes\n        )\n    sub_dependant = get_dependant(\n        path=path,\n        call=dependency,\n        name=name,\n        security_scopes=security_scopes,\n        use_cache=depends.use_cache,\n    )\n    if security_requirement:\n        sub_dependant.security_requirements.append(security_requirement)\n    return sub_dependant\n\n\nCacheKey = Tuple[Optional[Callable[..., Any]], Tuple[str, ...]]\n\n\ndef get_flat_dependant(\n    dependant: Dependant,\n    *,\n    skip_repeats: bool = False,\n    visited: Optional[List[CacheKey]] = None,\n) -> Dependant:\n    if visited is None:\n        visited = []\n    visited.append(dependant.cache_key)\n\n    flat_dependant = Dependant(\n        path_params=dependant.path_params.copy(),\n        query_params=dependant.query_params.copy(),\n        header_params=dependant.header_params.copy(),\n        cookie_params=dependant.cookie_params.copy(),\n        body_params=dependant.body_params.copy(),\n        security_schemes=dependant.security_requirements.copy(),\n        use_cache=dependant.use_cache,\n        path=dependant.path,\n    )\n    for sub_dependant in dependant.dependencies:\n        if skip_repeats and sub_dependant.cache_key in visited:\n            continue\n        flat_sub = get_flat_dependant(\n            sub_dependant, skip_repeats=skip_repeats, visited=visited\n        )\n        flat_dependant.path_params.extend(flat_sub.path_params)\n        flat_dependant.query_params.extend(flat_sub.query_params)\n        flat_dependant.header_params.extend(flat_sub.header_params)\n        flat_dependant.cookie_params.extend(flat_sub.cookie_params)\n        flat_dependant.body_params.extend(flat_sub.body_params)\n        flat_dependant.security_requirements.extend(flat_sub.security_requirements)\n    return flat_dependant\n\n\ndef get_flat_params(dependant: Dependant) -> List[ModelField]:\n    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n    return (\n        flat_dependant.path_params\n        + flat_dependant.query_params\n        + flat_dependant.header_params\n        + flat_dependant.cookie_params\n    )\n\n\ndef get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:\n    signature = inspect.signature(call)\n    globalns = getattr(call, \"__globals__\", {})\n    typed_params = [\n        inspect.Parameter(\n            name=param.name,\n            kind=param.kind,\n            default=param.default,\n            annotation=get_typed_annotation(param.annotation, globalns),\n        )\n        for param in signature.parameters.values()\n    ]\n    typed_signature = inspect.Signature(typed_params)\n    return typed_signature\n\n\ndef get_typed_annotation(annotation: Any, globalns: Dict[str, Any]) -> Any:\n    if isinstance(annotation, str):\n        annotation = ForwardRef(annotation)\n        annotation = evaluate_forwardref(annotation, globalns, globalns)\n    return annotation\n\n\ndef get_typed_return_annotation(call: Callable[..., Any]) -> Any:\n    signature = inspect.signature(call)\n    annotation = signature.return_annotation\n\n    if annotation is inspect.Signature.empty:\n        return None\n\n    globalns = getattr(call, \"__globals__\", {})\n    return get_typed_annotation(annotation, globalns)\n\n\ndef get_dependant(\n    *,\n    path: str,\n    call: Callable[..., Any],\n    name: Optional[str] = None,\n    security_scopes: Optional[List[str]] = None,\n    use_cache: bool = True,\n) -> Dependant:\n    path_param_names = get_path_param_names(path)\n    endpoint_signature = get_typed_signature(call)\n    signature_params = endpoint_signature.parameters\n    dependant = Dependant(\n        call=call,\n        name=name,\n        path=path,\n        security_scopes=security_scopes,\n        use_cache=use_cache,\n    )\n    for param_name, param in signature_params.items():\n        is_path_param = param_name in path_param_names\n        type_annotation, depends, param_field = analyze_param(\n            param_name=param_name,\n            annotation=param.annotation,\n            value=param.default,\n            is_path_param=is_path_param,\n        )\n        if depends is not None:\n            sub_dependant = get_param_sub_dependant(\n                param_name=param_name,\n                depends=depends,\n                path=path,\n                security_scopes=security_scopes,\n            )\n            dependant.dependencies.append(sub_dependant)\n            continue\n        if add_non_field_param_to_dependency(\n            param_name=param_name,\n            type_annotation=type_annotation,\n            dependant=dependant,\n        ):\n            assert (\n                param_field is None\n            ), f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n            continue\n        assert param_field is not None\n        if is_body_param(param_field=param_field, is_path_param=is_path_param):\n            dependant.body_params.append(param_field)\n        else:\n            add_param_to_fields(field=param_field, dependant=dependant)\n    return dependant\n\n\ndef add_non_field_param_to_dependency(\n    *, param_name: str, type_annotation: Any, dependant: Dependant\n) -> Optional[bool]:\n    if lenient_issubclass(type_annotation, Request):\n        dependant.request_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, WebSocket):\n        dependant.websocket_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, HTTPConnection):\n        dependant.http_connection_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, Response):\n        dependant.response_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, StarletteBackgroundTasks):\n        dependant.background_tasks_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, SecurityScopes):\n        dependant.security_scopes_param_name = param_name\n        return True\n    return None\n\n\ndef analyze_param(\n    *,\n    param_name: str,\n    annotation: Any,\n    value: Any,\n    is_path_param: bool,\n) -> Tuple[Any, Optional[params.Depends], Optional[ModelField]]:\n    field_info = None\n    depends = None\n    type_annotation: Any = Any\n    use_annotation: Any = Any\n    if annotation is not inspect.Signature.empty:\n        use_annotation = annotation\n        type_annotation = annotation\n    if get_origin(use_annotation) is Annotated:\n        annotated_args = get_args(annotation)\n        type_annotation = annotated_args[0]\n        fastapi_annotations = [\n            arg\n            for arg in annotated_args[1:]\n            if isinstance(arg, (FieldInfo, params.Depends))\n        ]\n        fastapi_specific_annotations = [\n            arg\n            for arg in fastapi_annotations\n            if isinstance(arg, (params.Param, params.Body, params.Depends))\n        ]\n        if fastapi_specific_annotations:\n            fastapi_annotation: Union[\n                FieldInfo, params.Depends, None\n            ] = fastapi_specific_annotations[-1]\n        else:\n            fastapi_annotation = None\n        if isinstance(fastapi_annotation, FieldInfo):\n            # Copy `field_info` because we mutate `field_info.default` below.\n            field_info = copy_field_info(\n                field_info=fastapi_annotation, annotation=use_annotation\n            )\n            assert field_info.default is Undefined or field_info.default is Required, (\n                f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n                f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n            )\n            if value is not inspect.Signature.empty:\n                assert not is_path_param, \"Path parameters cannot have default values\"\n                field_info.default = value\n            else:\n                field_info.default = Required\n        elif isinstance(fastapi_annotation, params.Depends):\n            depends = fastapi_annotation\n\n    if isinstance(value, params.Depends):\n        assert depends is None, (\n            \"Cannot specify `Depends` in `Annotated` and default value\"\n            f\" together for {param_name!r}\"\n        )\n        assert field_info is None, (\n            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n            f\" default value together for {param_name!r}\"\n        )\n        depends = value\n    elif isinstance(value, FieldInfo):\n        assert field_info is None, (\n            \"Cannot specify FastAPI annotations in `Annotated` and default value\"\n            f\" together for {param_name!r}\"\n        )\n        field_info = value\n        if PYDANTIC_V2:\n            field_info.annotation = type_annotation\n\n    if depends is not None and depends.dependency is None:\n        # Copy `depends` before mutating it\n        depends = copy(depends)\n        depends.dependency = type_annotation\n\n    if lenient_issubclass(\n        type_annotation,\n        (\n            Request,\n            WebSocket,\n            HTTPConnection,\n            Response,\n            StarletteBackgroundTasks,\n            SecurityScopes,\n        ),\n    ):\n        assert depends is None, f\"Cannot specify `Depends` for type {type_annotation!r}\"\n        assert (\n            field_info is None\n        ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n    elif field_info is None and depends is None:\n        default_value = value if value is not inspect.Signature.empty else Required\n        if is_path_param:\n            # We might check here that `default_value is Required`, but the fact is that the same\n            # parameter might sometimes be a path parameter and sometimes not. See\n            # `tests/test_infer_param_optionality.py` for an example.\n            field_info = params.Path(annotation=use_annotation)\n        elif is_uploadfile_or_nonable_uploadfile_annotation(\n            type_annotation\n        ) or is_uploadfile_sequence_annotation(type_annotation):\n            field_info = params.File(annotation=use_annotation, default=default_value)\n        elif not field_annotation_is_scalar(annotation=type_annotation):\n            field_info = params.Body(annotation=use_annotation, default=default_value)\n        else:\n            field_info = params.Query(annotation=use_annotation, default=default_value)\n\n    field = None\n    if field_info is not None:\n        if is_path_param:\n            assert isinstance(field_info, params.Path), (\n                f\"Cannot use `{field_info.__class__.__name__}` for path param\"\n                f\" {param_name!r}\"\n            )\n        elif (\n            isinstance(field_info, params.Param)\n            and getattr(field_info, \"in_\", None) is None\n        ):\n            field_info.in_ = params.ParamTypes.query\n        use_annotation_from_field_info = get_annotation_from_field_info(\n            use_annotation,\n            field_info,\n            param_name,\n        )\n        if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n            alias = param_name.replace(\"_\", \"-\")\n        else:\n            alias = field_info.alias or param_name\n        field_info.alias = alias\n        field = create_response_field(\n            name=param_name,\n            type_=use_annotation_from_field_info,\n            default=field_info.default,\n            alias=alias,\n            required=field_info.default in (Required, Undefined),\n            field_info=field_info,\n        )\n\n    return type_annotation, depends, field\n\n\ndef is_body_param(*, param_field: ModelField, is_path_param: bool) -> bool:\n    if is_path_param:\n        assert is_scalar_field(\n            field=param_field\n        ), \"Path params must be of one of the supported types\"\n        return False\n    elif is_scalar_field(field=param_field):\n        return False\n    elif isinstance(\n        param_field.field_info, (params.Query, params.Header)\n    ) and is_scalar_sequence_field(param_field):\n        return False\n    else:\n        assert isinstance(\n            param_field.field_info, params.Body\n        ), f\"Param: {param_field.name} can only be a request body, using Body()\"\n        return True\n\n\ndef add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n    field_info = field.field_info\n    field_info_in = getattr(field_info, \"in_\", None)\n    if field_info_in == params.ParamTypes.path:\n        dependant.path_params.append(field)\n    elif field_info_in == params.ParamTypes.query:\n        dependant.query_params.append(field)\n    elif field_info_in == params.ParamTypes.header:\n        dependant.header_params.append(field)\n    else:\n        assert (\n            field_info_in == params.ParamTypes.cookie\n        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n        dependant.cookie_params.append(field)\n\n\ndef is_coroutine_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isroutine(call):\n        return inspect.iscoroutinefunction(call)\n    if inspect.isclass(call):\n        return False\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.iscoroutinefunction(dunder_call)\n\n\ndef is_async_gen_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isasyncgenfunction(call):\n        return True\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.isasyncgenfunction(dunder_call)\n\n\ndef is_gen_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isgeneratorfunction(call):\n        return True\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.isgeneratorfunction(dunder_call)\n\n\nasync def solve_generator(\n    *, call: Callable[..., Any], stack: AsyncExitStack, sub_values: Dict[str, Any]\n) -> Any:\n    if is_gen_callable(call):\n        cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n    elif is_async_gen_callable(call):\n        cm = asynccontextmanager(call)(**sub_values)\n    return await stack.enter_async_context(cm)\n\n\nasync def solve_dependencies(\n    *,\n    request: Union[Request, WebSocket],\n    dependant: Dependant,\n    body: Optional[Union[Dict[str, Any], FormData]] = None,\n    background_tasks: Optional[StarletteBackgroundTasks] = None,\n    response: Optional[Response] = None,\n    dependency_overrides_provider: Optional[Any] = None,\n    dependency_cache: Optional[Dict[Tuple[Callable[..., Any], Tuple[str]], Any]] = None,\n    async_exit_stack: AsyncExitStack,\n) -> Tuple[\n    Dict[str, Any],\n    List[Any],\n    Optional[StarletteBackgroundTasks],\n    Response,\n    Dict[Tuple[Callable[..., Any], Tuple[str]], Any],\n]:\n    values: Dict[str, Any] = {}\n    errors: List[Any] = []\n    if response is None:\n        response = Response()\n        del response.headers[\"content-length\"]\n        response.status_code = None  # type: ignore\n    dependency_cache = dependency_cache or {}\n    sub_dependant: Dependant\n    for sub_dependant in dependant.dependencies:\n        sub_dependant.call = cast(Callable[..., Any], sub_dependant.call)\n        sub_dependant.cache_key = cast(\n            Tuple[Callable[..., Any], Tuple[str]], sub_dependant.cache_key\n        )\n        call = sub_dependant.call\n        use_sub_dependant = sub_dependant\n        if (\n            dependency_overrides_provider\n            and dependency_overrides_provider.dependency_overrides\n        ):\n            original_call = sub_dependant.call\n            call = getattr(\n                dependency_overrides_provider, \"dependency_overrides\", {}\n            ).get(original_call, original_call)\n            use_path: str = sub_dependant.path  # type: ignore\n            use_sub_dependant = get_dependant(\n                path=use_path,\n                call=call,\n                name=sub_dependant.name,\n                security_scopes=sub_dependant.security_scopes,\n            )\n\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=use_sub_dependant,\n            body=body,\n            background_tasks=background_tasks,\n            response=response,\n            dependency_overrides_provider=dependency_overrides_provider,\n            dependency_cache=dependency_cache,\n            async_exit_stack=async_exit_stack,\n        )\n        (\n            sub_values,\n            sub_errors,\n            background_tasks,\n            _,  # the subdependency returns the same response we have\n            sub_dependency_cache,\n        ) = solved_result\n        dependency_cache.update(sub_dependency_cache)\n        if sub_errors:\n            errors.extend(sub_errors)\n            continue\n        if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n            solved = dependency_cache[sub_dependant.cache_key]\n        elif is_gen_callable(call) or is_async_gen_callable(call):\n            solved = await solve_generator(\n                call=call, stack=async_exit_stack, sub_values=sub_values\n            )\n        elif is_coroutine_callable(call):\n            solved = await call(**sub_values)\n        else:\n            solved = await run_in_threadpool(call, **sub_values)\n        if sub_dependant.name is not None:\n            values[sub_dependant.name] = solved\n        if sub_dependant.cache_key not in dependency_cache:\n            dependency_cache[sub_dependant.cache_key] = solved\n    path_values, path_errors = request_params_to_args(\n        dependant.path_params, request.path_params\n    )\n    query_values, query_errors = request_params_to_args(\n        dependant.query_params, request.query_params\n    )\n    header_values, header_errors = request_params_to_args(\n        dependant.header_params, request.headers\n    )\n    cookie_values, cookie_errors = request_params_to_args(\n        dependant.cookie_params, request.cookies\n    )\n    values.update(path_values)\n    values.update(query_values)\n    values.update(header_values)\n    values.update(cookie_values)\n    errors += path_errors + query_errors + header_errors + cookie_errors\n    if dependant.body_params:\n        (\n            body_values,\n            body_errors,\n        ) = await request_body_to_args(  # body_params checked above\n            required_params=dependant.body_params, received_body=body\n        )\n        values.update(body_values)\n        errors.extend(body_errors)\n    if dependant.http_connection_param_name:\n        values[dependant.http_connection_param_name] = request\n    if dependant.request_param_name and isinstance(request, Request):\n        values[dependant.request_param_name] = request\n    elif dependant.websocket_param_name and isinstance(request, WebSocket):\n        values[dependant.websocket_param_name] = request\n    if dependant.background_tasks_param_name:\n        if background_tasks is None:\n            background_tasks = BackgroundTasks()\n        values[dependant.background_tasks_param_name] = background_tasks\n    if dependant.response_param_name:\n        values[dependant.response_param_name] = response\n    if dependant.security_scopes_param_name:\n        values[dependant.security_scopes_param_name] = SecurityScopes(\n            scopes=dependant.security_scopes\n        )\n    return values, errors, background_tasks, response, dependency_cache\n\n\ndef request_params_to_args(\n    required_params: Sequence[ModelField],\n    received_params: Union[Mapping[str, Any], QueryParams, Headers],\n) -> Tuple[Dict[str, Any], List[Any]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        if is_scalar_sequence_field(field) and isinstance(\n            received_params, (QueryParams, Headers)\n        ):\n            value = received_params.getlist(field.alias) or field.default\n        else:\n            value = received_params.get(field.alias)\n        field_info = field.field_info\n        assert isinstance(\n            field_info, params.Param\n        ), \"Params must be subclasses of Param\"\n        loc = (field_info.in_.value, field.alias)\n        if value is None:\n            if field.required:\n                errors.append(get_missing_field_error(loc=loc))\n            else:\n                values[field.name] = deepcopy(field.default)\n            continue\n        v_, errors_ = field.validate(value, values, loc=loc)\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            new_errors = _regenerate_error_with_loc(errors=errors_, loc_prefix=())\n            errors.extend(new_errors)\n        else:\n            values[field.name] = v_\n    return values, errors\n\n\nasync def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n    values = {}\n    errors: List[Dict[str, Any]] = []\n    if required_params:\n        field = required_params[0]\n        field_info = field.field_info\n        embed = getattr(field_info, \"embed\", None)\n        field_alias_omitted = len(required_params) == 1 and not embed\n        if field_alias_omitted:\n            received_body = {field.alias: received_body}\n\n        for field in required_params:\n            loc: Tuple[str, ...]\n            if field_alias_omitted:\n                loc = (\"body\",)\n            else:\n                loc = (\"body\", field.alias)\n\n            value: Optional[Any] = None\n            if received_body is not None:\n                if (is_sequence_field(field)) and isinstance(received_body, FormData):\n                    value = received_body.getlist(field.alias)\n                else:\n                    try:\n                        value = received_body.get(field.alias)\n                    except AttributeError:\n                        errors.append(get_missing_field_error(loc))\n                        continue\n            if (\n                value is None\n                or (isinstance(field_info, params.Form) and value == \"\")\n                or (\n                    isinstance(field_info, params.Form)\n                    and is_sequence_field(field)\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    errors.append(get_missing_field_error(loc))\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field_info, params.File)\n                and is_bytes_field(field)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                is_bytes_sequence_field(field)\n                and isinstance(field_info, params.File)\n                and value_is_sequence(value)\n            ):\n                # For types\n                assert isinstance(value, sequence_types)  # type: ignore[arg-type]\n                results: List[Union[bytes, str]] = []\n\n                async def process_fn(\n                    fn: Callable[[], Coroutine[Any, Any, Any]],\n                ) -> None:\n                    result = await fn()\n                    results.append(result)  # noqa: B023\n\n                async with anyio.create_task_group() as tg:\n                    for sub_value in value:\n                        tg.start_soon(process_fn, sub_value.read)\n                value = serialize_sequence_value(field=field, value=results)\n\n            v_, errors_ = field.validate(value, values, loc=loc)\n\n            if isinstance(errors_, list):\n                errors.extend(errors_)\n            elif errors_:\n                errors.append(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors\n\n\ndef get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    field_info = first_param.field_info\n    embed = getattr(field_info, \"embed\", None)\n    body_param_names_set = {param.name for param in flat_dependant.body_params}\n    if len(body_param_names_set) == 1 and not embed:\n        check_file_field(first_param)\n        return first_param\n    # If one field requires to embed, all have to be embedded\n    # in case a sub-dependency is evaluated with a single unique body field\n    # That is combined (embedded) with other body fields\n    for param in flat_dependant.body_params:\n        setattr(param.field_info, \"embed\", True)  # noqa: B010\n    model_name = \"Body_\" + name\n    BodyModel = create_body_model(\n        fields=flat_dependant.body_params, model_name=model_name\n    )\n    required = any(True for f in flat_dependant.body_params if f.required)\n    BodyFieldInfo_kwargs: Dict[str, Any] = {\n        \"annotation\": BodyModel,\n        \"alias\": \"body\",\n    }\n    if not required:\n        BodyFieldInfo_kwargs[\"default\"] = None\n    if any(isinstance(f.field_info, params.File) for f in flat_dependant.body_params):\n        BodyFieldInfo: Type[params.Body] = params.File\n    elif any(isinstance(f.field_info, params.Form) for f in flat_dependant.body_params):\n        BodyFieldInfo = params.Form\n    else:\n        BodyFieldInfo = params.Body\n\n        body_param_media_types = [\n            f.field_info.media_type\n            for f in flat_dependant.body_params\n            if isinstance(f.field_info, params.Body)\n        ]\n        if len(set(body_param_media_types)) == 1:\n            BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n    final_field = create_response_field(\n        name=\"body\",\n        type_=BodyModel,\n        required=required,\n        alias=\"body\",\n        field_info=BodyFieldInfo(**BodyFieldInfo_kwargs),\n    )\n    check_file_field(final_field)\n    return final_field\n", "fastapi/dependencies/models.py": "from typing import Any, Callable, List, Optional, Sequence\n\nfrom fastapi._compat import ModelField\nfrom fastapi.security.base import SecurityBase\n\n\nclass SecurityRequirement:\n    def __init__(\n        self, security_scheme: SecurityBase, scopes: Optional[Sequence[str]] = None\n    ):\n        self.security_scheme = security_scheme\n        self.scopes = scopes\n\n\nclass Dependant:\n    def __init__(\n        self,\n        *,\n        path_params: Optional[List[ModelField]] = None,\n        query_params: Optional[List[ModelField]] = None,\n        header_params: Optional[List[ModelField]] = None,\n        cookie_params: Optional[List[ModelField]] = None,\n        body_params: Optional[List[ModelField]] = None,\n        dependencies: Optional[List[\"Dependant\"]] = None,\n        security_schemes: Optional[List[SecurityRequirement]] = None,\n        name: Optional[str] = None,\n        call: Optional[Callable[..., Any]] = None,\n        request_param_name: Optional[str] = None,\n        websocket_param_name: Optional[str] = None,\n        http_connection_param_name: Optional[str] = None,\n        response_param_name: Optional[str] = None,\n        background_tasks_param_name: Optional[str] = None,\n        security_scopes_param_name: Optional[str] = None,\n        security_scopes: Optional[List[str]] = None,\n        use_cache: bool = True,\n        path: Optional[str] = None,\n    ) -> None:\n        self.path_params = path_params or []\n        self.query_params = query_params or []\n        self.header_params = header_params or []\n        self.cookie_params = cookie_params or []\n        self.body_params = body_params or []\n        self.dependencies = dependencies or []\n        self.security_requirements = security_schemes or []\n        self.request_param_name = request_param_name\n        self.websocket_param_name = websocket_param_name\n        self.http_connection_param_name = http_connection_param_name\n        self.response_param_name = response_param_name\n        self.background_tasks_param_name = background_tasks_param_name\n        self.security_scopes = security_scopes\n        self.security_scopes_param_name = security_scopes_param_name\n        self.name = name\n        self.call = call\n        self.use_cache = use_cache\n        # Store the path to be able to re-generate a dependable from it in overrides\n        self.path = path\n        # Save the cache key at creation to optimize performance\n        self.cache_key = (self.call, tuple(sorted(set(self.security_scopes or []))))\n", "fastapi/dependencies/__init__.py": "", "fastapi/openapi/utils.py": "import http.client\nimport inspect\nimport warnings\nfrom typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Type, Union, cast\n\nfrom fastapi import routing\nfrom fastapi._compat import (\n    GenerateJsonSchema,\n    JsonSchemaValue,\n    ModelField,\n    Undefined,\n    get_compat_model_name_map,\n    get_definitions,\n    get_schema_from_model_field,\n    lenient_issubclass,\n)\nfrom fastapi.datastructures import DefaultPlaceholder\nfrom fastapi.dependencies.models import Dependant\nfrom fastapi.dependencies.utils import get_flat_dependant, get_flat_params\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX, REF_TEMPLATE\nfrom fastapi.openapi.models import OpenAPI\nfrom fastapi.params import Body, Param\nfrom fastapi.responses import Response\nfrom fastapi.types import ModelNameMap\nfrom fastapi.utils import (\n    deep_dict_update,\n    generate_operation_id_for_path,\n    is_body_allowed_for_status_code,\n)\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import BaseRoute\nfrom starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\nfrom typing_extensions import Literal\n\nvalidation_error_definition = {\n    \"title\": \"ValidationError\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"loc\": {\n            \"title\": \"Location\",\n            \"type\": \"array\",\n            \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n        },\n        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n    },\n    \"required\": [\"loc\", \"msg\", \"type\"],\n}\n\nvalidation_error_response_definition = {\n    \"title\": \"HTTPValidationError\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"detail\": {\n            \"title\": \"Detail\",\n            \"type\": \"array\",\n            \"items\": {\"$ref\": REF_PREFIX + \"ValidationError\"},\n        }\n    },\n}\n\nstatus_code_ranges: Dict[str, str] = {\n    \"1XX\": \"Information\",\n    \"2XX\": \"Success\",\n    \"3XX\": \"Redirection\",\n    \"4XX\": \"Client Error\",\n    \"5XX\": \"Server Error\",\n    \"DEFAULT\": \"Default Response\",\n}\n\n\ndef get_openapi_security_definitions(\n    flat_dependant: Dependant,\n) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n    security_definitions = {}\n    operation_security = []\n    for security_requirement in flat_dependant.security_requirements:\n        security_definition = jsonable_encoder(\n            security_requirement.security_scheme.model,\n            by_alias=True,\n            exclude_none=True,\n        )\n        security_name = security_requirement.security_scheme.scheme_name\n        security_definitions[security_name] = security_definition\n        operation_security.append({security_name: security_requirement.scopes})\n    return security_definitions, operation_security\n\n\ndef get_openapi_operation_parameters(\n    *,\n    all_route_params: Sequence[ModelField],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> List[Dict[str, Any]]:\n    parameters = []\n    for param in all_route_params:\n        field_info = param.field_info\n        field_info = cast(Param, field_info)\n        if not field_info.include_in_schema:\n            continue\n        param_schema = get_schema_from_model_field(\n            field=param,\n            schema_generator=schema_generator,\n            model_name_map=model_name_map,\n            field_mapping=field_mapping,\n            separate_input_output_schemas=separate_input_output_schemas,\n        )\n        parameter = {\n            \"name\": param.alias,\n            \"in\": field_info.in_.value,\n            \"required\": param.required,\n            \"schema\": param_schema,\n        }\n        if field_info.description:\n            parameter[\"description\"] = field_info.description\n        if field_info.openapi_examples:\n            parameter[\"examples\"] = jsonable_encoder(field_info.openapi_examples)\n        elif field_info.example != Undefined:\n            parameter[\"example\"] = jsonable_encoder(field_info.example)\n        if field_info.deprecated:\n            parameter[\"deprecated\"] = True\n        parameters.append(parameter)\n    return parameters\n\n\ndef get_openapi_operation_request_body(\n    *,\n    body_field: Optional[ModelField],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> Optional[Dict[str, Any]]:\n    if not body_field:\n        return None\n    assert isinstance(body_field, ModelField)\n    body_schema = get_schema_from_model_field(\n        field=body_field,\n        schema_generator=schema_generator,\n        model_name_map=model_name_map,\n        field_mapping=field_mapping,\n        separate_input_output_schemas=separate_input_output_schemas,\n    )\n    field_info = cast(Body, body_field.field_info)\n    request_media_type = field_info.media_type\n    required = body_field.required\n    request_body_oai: Dict[str, Any] = {}\n    if required:\n        request_body_oai[\"required\"] = required\n    request_media_content: Dict[str, Any] = {\"schema\": body_schema}\n    if field_info.openapi_examples:\n        request_media_content[\"examples\"] = jsonable_encoder(\n            field_info.openapi_examples\n        )\n    elif field_info.example != Undefined:\n        request_media_content[\"example\"] = jsonable_encoder(field_info.example)\n    request_body_oai[\"content\"] = {request_media_type: request_media_content}\n    return request_body_oai\n\n\ndef generate_operation_id(\n    *, route: routing.APIRoute, method: str\n) -> str:  # pragma: nocover\n    warnings.warn(\n        \"fastapi.openapi.utils.generate_operation_id() was deprecated, \"\n        \"it is not used internally, and will be removed soon\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    if route.operation_id:\n        return route.operation_id\n    path: str = route.path_format\n    return generate_operation_id_for_path(name=route.name, path=path, method=method)\n\n\ndef generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n    if route.summary:\n        return route.summary\n    return route.name.replace(\"_\", \" \").title()\n\n\ndef get_openapi_operation_metadata(\n    *, route: routing.APIRoute, method: str, operation_ids: Set[str]\n) -> Dict[str, Any]:\n    operation: Dict[str, Any] = {}\n    if route.tags:\n        operation[\"tags\"] = route.tags\n    operation[\"summary\"] = generate_operation_summary(route=route, method=method)\n    if route.description:\n        operation[\"description\"] = route.description\n    operation_id = route.operation_id or route.unique_id\n    if operation_id in operation_ids:\n        message = (\n            f\"Duplicate Operation ID {operation_id} for function \"\n            + f\"{route.endpoint.__name__}\"\n        )\n        file_name = getattr(route.endpoint, \"__globals__\", {}).get(\"__file__\")\n        if file_name:\n            message += f\" at {file_name}\"\n        warnings.warn(message, stacklevel=1)\n    operation_ids.add(operation_id)\n    operation[\"operationId\"] = operation_id\n    if route.deprecated:\n        operation[\"deprecated\"] = route.deprecated\n    return operation\n\n\ndef get_openapi_path(\n    *,\n    route: routing.APIRoute,\n    operation_ids: Set[str],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.methods is not None, \"Methods must be a list\"\n    if isinstance(route.response_class, DefaultPlaceholder):\n        current_response_class: Type[Response] = route.response_class.value\n    else:\n        current_response_class = route.response_class\n    assert current_response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = current_response_class.media_type\n    if route.include_in_schema:\n        for method in route.methods:\n            operation = get_openapi_operation_metadata(\n                route=route, method=method, operation_ids=operation_ids\n            )\n            parameters: List[Dict[str, Any]] = []\n            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n            security_definitions, operation_security = get_openapi_security_definitions(\n                flat_dependant=flat_dependant\n            )\n            if operation_security:\n                operation.setdefault(\"security\", []).extend(operation_security)\n            if security_definitions:\n                security_schemes.update(security_definitions)\n            all_route_params = get_flat_params(route.dependant)\n            operation_parameters = get_openapi_operation_parameters(\n                all_route_params=all_route_params,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            parameters.extend(operation_parameters)\n            if parameters:\n                all_parameters = {\n                    (param[\"in\"], param[\"name\"]): param for param in parameters\n                }\n                required_parameters = {\n                    (param[\"in\"], param[\"name\"]): param\n                    for param in parameters\n                    if param.get(\"required\")\n                }\n                # Make sure required definitions of the same parameter take precedence\n                # over non-required definitions\n                all_parameters.update(required_parameters)\n                operation[\"parameters\"] = list(all_parameters.values())\n            if method in METHODS_WITH_BODY:\n                request_body_oai = get_openapi_operation_request_body(\n                    body_field=route.body_field,\n                    schema_generator=schema_generator,\n                    model_name_map=model_name_map,\n                    field_mapping=field_mapping,\n                    separate_input_output_schemas=separate_input_output_schemas,\n                )\n                if request_body_oai:\n                    operation[\"requestBody\"] = request_body_oai\n            if route.callbacks:\n                callbacks = {}\n                for callback in route.callbacks:\n                    if isinstance(callback, routing.APIRoute):\n                        (\n                            cb_path,\n                            cb_security_schemes,\n                            cb_definitions,\n                        ) = get_openapi_path(\n                            route=callback,\n                            operation_ids=operation_ids,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                        callbacks[callback.name] = {callback.path: cb_path}\n                operation[\"callbacks\"] = callbacks\n            if route.status_code is not None:\n                status_code = str(route.status_code)\n            else:\n                # It would probably make more sense for all response classes to have an\n                # explicit default status_code, and to extract it from them, instead of\n                # doing this inspection tricks, that would probably be in the future\n                # TODO: probably make status_code a default class attribute for all\n                # responses in Starlette\n                response_signature = inspect.signature(current_response_class.__init__)\n                status_code_param = response_signature.parameters.get(\"status_code\")\n                if status_code_param is not None:\n                    if isinstance(status_code_param.default, int):\n                        status_code = str(status_code_param.default)\n            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                \"description\"\n            ] = route.response_description\n            if route_response_media_type and is_body_allowed_for_status_code(\n                route.status_code\n            ):\n                response_schema = {\"type\": \"string\"}\n                if lenient_issubclass(current_response_class, JSONResponse):\n                    if route.response_field:\n                        response_schema = get_schema_from_model_field(\n                            field=route.response_field,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                    else:\n                        response_schema = {}\n                operation.setdefault(\"responses\", {}).setdefault(\n                    status_code, {}\n                ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                    \"schema\"\n                ] = response_schema\n            if route.responses:\n                operation_responses = operation.setdefault(\"responses\", {})\n                for (\n                    additional_status_code,\n                    additional_response,\n                ) in route.responses.items():\n                    process_response = additional_response.copy()\n                    process_response.pop(\"model\", None)\n                    status_code_key = str(additional_status_code).upper()\n                    if status_code_key == \"DEFAULT\":\n                        status_code_key = \"default\"\n                    openapi_response = operation_responses.setdefault(\n                        status_code_key, {}\n                    )\n                    assert isinstance(\n                        process_response, dict\n                    ), \"An additional response must be a dict\"\n                    field = route.response_fields.get(additional_status_code)\n                    additional_field_schema: Optional[Dict[str, Any]] = None\n                    if field:\n                        additional_field_schema = get_schema_from_model_field(\n                            field=field,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                        media_type = route_response_media_type or \"application/json\"\n                        additional_schema = (\n                            process_response.setdefault(\"content\", {})\n                            .setdefault(media_type, {})\n                            .setdefault(\"schema\", {})\n                        )\n                        deep_dict_update(additional_schema, additional_field_schema)\n                    status_text: Optional[str] = status_code_ranges.get(\n                        str(additional_status_code).upper()\n                    ) or http.client.responses.get(int(additional_status_code))\n                    description = (\n                        process_response.get(\"description\")\n                        or openapi_response.get(\"description\")\n                        or status_text\n                        or \"Additional Response\"\n                    )\n                    deep_dict_update(openapi_response, process_response)\n                    openapi_response[\"description\"] = description\n            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n            if (all_route_params or route.body_field) and not any(\n                status in operation[\"responses\"]\n                for status in [http422, \"4XX\", \"default\"]\n            ):\n                operation[\"responses\"][http422] = {\n                    \"description\": \"Validation Error\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\"$ref\": REF_PREFIX + \"HTTPValidationError\"}\n                        }\n                    },\n                }\n                if \"ValidationError\" not in definitions:\n                    definitions.update(\n                        {\n                            \"ValidationError\": validation_error_definition,\n                            \"HTTPValidationError\": validation_error_response_definition,\n                        }\n                    )\n            if route.openapi_extra:\n                deep_dict_update(operation, route.openapi_extra)\n            path[method.lower()] = operation\n    return path, security_schemes, definitions\n\n\ndef get_fields_from_routes(\n    routes: Sequence[BaseRoute],\n) -> List[ModelField]:\n    body_fields_from_routes: List[ModelField] = []\n    responses_from_routes: List[ModelField] = []\n    request_fields_from_routes: List[ModelField] = []\n    callback_flat_models: List[ModelField] = []\n    for route in routes:\n        if getattr(route, \"include_in_schema\", None) and isinstance(\n            route, routing.APIRoute\n        ):\n            if route.body_field:\n                assert isinstance(\n                    route.body_field, ModelField\n                ), \"A request body must be a Pydantic Field\"\n                body_fields_from_routes.append(route.body_field)\n            if route.response_field:\n                responses_from_routes.append(route.response_field)\n            if route.response_fields:\n                responses_from_routes.extend(route.response_fields.values())\n            if route.callbacks:\n                callback_flat_models.extend(get_fields_from_routes(route.callbacks))\n            params = get_flat_params(route.dependant)\n            request_fields_from_routes.extend(params)\n\n    flat_models = callback_flat_models + list(\n        body_fields_from_routes + responses_from_routes + request_fields_from_routes\n    )\n    return flat_models\n\n\ndef get_openapi(\n    *,\n    title: str,\n    version: str,\n    openapi_version: str = \"3.1.0\",\n    summary: Optional[str] = None,\n    description: Optional[str] = None,\n    routes: Sequence[BaseRoute],\n    webhooks: Optional[Sequence[BaseRoute]] = None,\n    tags: Optional[List[Dict[str, Any]]] = None,\n    servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n    terms_of_service: Optional[str] = None,\n    contact: Optional[Dict[str, Union[str, Any]]] = None,\n    license_info: Optional[Dict[str, Union[str, Any]]] = None,\n    separate_input_output_schemas: bool = True,\n) -> Dict[str, Any]:\n    info: Dict[str, Any] = {\"title\": title, \"version\": version}\n    if summary:\n        info[\"summary\"] = summary\n    if description:\n        info[\"description\"] = description\n    if terms_of_service:\n        info[\"termsOfService\"] = terms_of_service\n    if contact:\n        info[\"contact\"] = contact\n    if license_info:\n        info[\"license\"] = license_info\n    output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n    if servers:\n        output[\"servers\"] = servers\n    components: Dict[str, Dict[str, Any]] = {}\n    paths: Dict[str, Dict[str, Any]] = {}\n    webhook_paths: Dict[str, Dict[str, Any]] = {}\n    operation_ids: Set[str] = set()\n    all_fields = get_fields_from_routes(list(routes or []) + list(webhooks or []))\n    model_name_map = get_compat_model_name_map(all_fields)\n    schema_generator = GenerateJsonSchema(ref_template=REF_TEMPLATE)\n    field_mapping, definitions = get_definitions(\n        fields=all_fields,\n        schema_generator=schema_generator,\n        model_name_map=model_name_map,\n        separate_input_output_schemas=separate_input_output_schemas,\n    )\n    for route in routes or []:\n        if isinstance(route, routing.APIRoute):\n            result = get_openapi_path(\n                route=route,\n                operation_ids=operation_ids,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    paths.setdefault(route.path_format, {}).update(path)\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    for webhook in webhooks or []:\n        if isinstance(webhook, routing.APIRoute):\n            result = get_openapi_path(\n                route=webhook,\n                operation_ids=operation_ids,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    webhook_paths.setdefault(webhook.path_format, {}).update(path)\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    if definitions:\n        components[\"schemas\"] = {k: definitions[k] for k in sorted(definitions)}\n    if components:\n        output[\"components\"] = components\n    output[\"paths\"] = paths\n    if webhook_paths:\n        output[\"webhooks\"] = webhook_paths\n    if tags:\n        output[\"tags\"] = tags\n    return jsonable_encoder(OpenAPI(**output), by_alias=True, exclude_none=True)  # type: ignore\n", "fastapi/openapi/docs.py": "import json\nfrom typing import Any, Dict, Optional\n\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import HTMLResponse\nfrom typing_extensions import Annotated, Doc\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n\ndef get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by FastAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `<title>` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://fastapi.tiangolo.com/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by FastAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][fastapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -> HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [FastAPI docs for Configure Swagger UI](https://fastapi.tiangolo.com/how-to/configure-swagger-ui/)\n    and the [FastAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://fastapi.tiangolo.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\">\n    <link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\">\n    <title>{title}</title>\n    </head>\n    <body>\n    <div id=\"swagger-ui\">\n    </div>\n    <script src=\"{swagger_js_url}\"></script>\n    <!-- `SwaggerUIBundle` is now available on the page -->\n    <script>\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    </script>\n    </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by FastAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `<title>` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://fastapi.tiangolo.com/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -> HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [FastAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://fastapi.tiangolo.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <title>{title}</title>\n    <!-- needed for adaptive design -->\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n    \"\"\"\n    html += f\"\"\"\n    <link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\">\n    <!--\n    ReDoc doesn't change outer page styles\n    -->\n    <style>\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    </style>\n    </head>\n    <body>\n    <noscript>\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    </noscript>\n    <redoc spec-url=\"{openapi_url}\"></redoc>\n    <script src=\"{redoc_js_url}\"> </script>\n    </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    <!doctype html>\n    <html lang=\"en-US\">\n    <head>\n        <title>Swagger UI: OAuth2 Redirect</title>\n    </head>\n    <body>\n    <script>\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) && !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    </script>\n    </body>\n    </html>\n        \"\"\"\n    return HTMLResponse(content=html)\n", "fastapi/openapi/models.py": "from enum import Enum\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Set, Type, Union\n\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    CoreSchema,\n    GetJsonSchemaHandler,\n    JsonSchemaValue,\n    _model_rebuild,\n    with_info_plain_validator_function,\n)\nfrom fastapi.logger import logger\nfrom pydantic import AnyUrl, BaseModel, Field\nfrom typing_extensions import Annotated, Literal, TypedDict\nfrom typing_extensions import deprecated as typing_deprecated\n\ntry:\n    import email_validator\n\n    assert email_validator  # make autoflake ignore the unused import\n    from pydantic import EmailStr\nexcept ImportError:  # pragma: no cover\n\n    class EmailStr(str):  # type: ignore\n        @classmethod\n        def __get_validators__(cls) -> Iterable[Callable[..., Any]]:\n            yield cls.validate\n\n        @classmethod\n        def validate(cls, v: Any) -> str:\n            logger.warning(\n                \"email-validator not installed, email fields will be treated as str.\\n\"\n                \"To install, run: pip install email-validator\"\n            )\n            return str(v)\n\n        @classmethod\n        def _validate(cls, __input_value: Any, _: Any) -> str:\n            logger.warning(\n                \"email-validator not installed, email fields will be treated as str.\\n\"\n                \"To install, run: pip install email-validator\"\n            )\n            return str(__input_value)\n\n        @classmethod\n        def __get_pydantic_json_schema__(\n            cls, core_schema: CoreSchema, handler: GetJsonSchemaHandler\n        ) -> JsonSchemaValue:\n            return {\"type\": \"string\", \"format\": \"email\"}\n\n        @classmethod\n        def __get_pydantic_core_schema__(\n            cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n        ) -> CoreSchema:\n            return with_info_plain_validator_function(cls._validate)\n\n\nclass BaseModelWithConfig(BaseModel):\n    if PYDANTIC_V2:\n        model_config = {\"extra\": \"allow\"}\n\n    else:\n\n        class Config:\n            extra = \"allow\"\n\n\nclass Contact(BaseModelWithConfig):\n    name: Optional[str] = None\n    url: Optional[AnyUrl] = None\n    email: Optional[EmailStr] = None\n\n\nclass License(BaseModelWithConfig):\n    name: str\n    identifier: Optional[str] = None\n    url: Optional[AnyUrl] = None\n\n\nclass Info(BaseModelWithConfig):\n    title: str\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    termsOfService: Optional[str] = None\n    contact: Optional[Contact] = None\n    license: Optional[License] = None\n    version: str\n\n\nclass ServerVariable(BaseModelWithConfig):\n    enum: Annotated[Optional[List[str]], Field(min_length=1)] = None\n    default: str\n    description: Optional[str] = None\n\n\nclass Server(BaseModelWithConfig):\n    url: Union[AnyUrl, str]\n    description: Optional[str] = None\n    variables: Optional[Dict[str, ServerVariable]] = None\n\n\nclass Reference(BaseModel):\n    ref: str = Field(alias=\"$ref\")\n\n\nclass Discriminator(BaseModel):\n    propertyName: str\n    mapping: Optional[Dict[str, str]] = None\n\n\nclass XML(BaseModelWithConfig):\n    name: Optional[str] = None\n    namespace: Optional[str] = None\n    prefix: Optional[str] = None\n    attribute: Optional[bool] = None\n    wrapped: Optional[bool] = None\n\n\nclass ExternalDocumentation(BaseModelWithConfig):\n    description: Optional[str] = None\n    url: AnyUrl\n\n\nclass Schema(BaseModelWithConfig):\n    # Ref: JSON Schema 2020-12: https://json-schema.org/draft/2020-12/json-schema-core.html#name-the-json-schema-core-vocabu\n    # Core Vocabulary\n    schema_: Optional[str] = Field(default=None, alias=\"$schema\")\n    vocabulary: Optional[str] = Field(default=None, alias=\"$vocabulary\")\n    id: Optional[str] = Field(default=None, alias=\"$id\")\n    anchor: Optional[str] = Field(default=None, alias=\"$anchor\")\n    dynamicAnchor: Optional[str] = Field(default=None, alias=\"$dynamicAnchor\")\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    dynamicRef: Optional[str] = Field(default=None, alias=\"$dynamicRef\")\n    defs: Optional[Dict[str, \"SchemaOrBool\"]] = Field(default=None, alias=\"$defs\")\n    comment: Optional[str] = Field(default=None, alias=\"$comment\")\n    # Ref: JSON Schema 2020-12: https://json-schema.org/draft/2020-12/json-schema-core.html#name-a-vocabulary-for-applying-s\n    # A Vocabulary for Applying Subschemas\n    allOf: Optional[List[\"SchemaOrBool\"]] = None\n    anyOf: Optional[List[\"SchemaOrBool\"]] = None\n    oneOf: Optional[List[\"SchemaOrBool\"]] = None\n    not_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"not\")\n    if_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"if\")\n    then: Optional[\"SchemaOrBool\"] = None\n    else_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"else\")\n    dependentSchemas: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    prefixItems: Optional[List[\"SchemaOrBool\"]] = None\n    # TODO: uncomment and remove below when deprecating Pydantic v1\n    # It generales a list of schemas for tuples, before prefixItems was available\n    # items: Optional[\"SchemaOrBool\"] = None\n    items: Optional[Union[\"SchemaOrBool\", List[\"SchemaOrBool\"]]] = None\n    contains: Optional[\"SchemaOrBool\"] = None\n    properties: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    patternProperties: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    additionalProperties: Optional[\"SchemaOrBool\"] = None\n    propertyNames: Optional[\"SchemaOrBool\"] = None\n    unevaluatedItems: Optional[\"SchemaOrBool\"] = None\n    unevaluatedProperties: Optional[\"SchemaOrBool\"] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-structural\n    # A Vocabulary for Structural Validation\n    type: Optional[str] = None\n    enum: Optional[List[Any]] = None\n    const: Optional[Any] = None\n    multipleOf: Optional[float] = Field(default=None, gt=0)\n    maximum: Optional[float] = None\n    exclusiveMaximum: Optional[float] = None\n    minimum: Optional[float] = None\n    exclusiveMinimum: Optional[float] = None\n    maxLength: Optional[int] = Field(default=None, ge=0)\n    minLength: Optional[int] = Field(default=None, ge=0)\n    pattern: Optional[str] = None\n    maxItems: Optional[int] = Field(default=None, ge=0)\n    minItems: Optional[int] = Field(default=None, ge=0)\n    uniqueItems: Optional[bool] = None\n    maxContains: Optional[int] = Field(default=None, ge=0)\n    minContains: Optional[int] = Field(default=None, ge=0)\n    maxProperties: Optional[int] = Field(default=None, ge=0)\n    minProperties: Optional[int] = Field(default=None, ge=0)\n    required: Optional[List[str]] = None\n    dependentRequired: Optional[Dict[str, Set[str]]] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-vocabularies-for-semantic-c\n    # Vocabularies for Semantic Content With \"format\"\n    format: Optional[str] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-the-conten\n    # A Vocabulary for the Contents of String-Encoded Data\n    contentEncoding: Optional[str] = None\n    contentMediaType: Optional[str] = None\n    contentSchema: Optional[\"SchemaOrBool\"] = None\n    # Ref: JSON Schema Validation 2020-12: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-basic-meta\n    # A Vocabulary for Basic Meta-Data Annotations\n    title: Optional[str] = None\n    description: Optional[str] = None\n    default: Optional[Any] = None\n    deprecated: Optional[bool] = None\n    readOnly: Optional[bool] = None\n    writeOnly: Optional[bool] = None\n    examples: Optional[List[Any]] = None\n    # Ref: OpenAPI 3.1.0: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object\n    # Schema Object\n    discriminator: Optional[Discriminator] = None\n    xml: Optional[XML] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    example: Annotated[\n        Optional[Any],\n        typing_deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = None\n\n\n# Ref: https://json-schema.org/draft/2020-12/json-schema-core.html#name-json-schema-documents\n# A JSON Schema MUST be an object or a boolean.\nSchemaOrBool = Union[Schema, bool]\n\n\nclass Example(TypedDict, total=False):\n    summary: Optional[str]\n    description: Optional[str]\n    value: Optional[Any]\n    externalValue: Optional[AnyUrl]\n\n    if PYDANTIC_V2:  # type: ignore [misc]\n        __pydantic_config__ = {\"extra\": \"allow\"}\n\n    else:\n\n        class Config:\n            extra = \"allow\"\n\n\nclass ParameterInType(Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\"\n\n\nclass Encoding(BaseModelWithConfig):\n    contentType: Optional[str] = None\n    headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None\n\n\nclass MediaType(BaseModelWithConfig):\n    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    encoding: Optional[Dict[str, Encoding]] = None\n\n\nclass ParameterBase(BaseModelWithConfig):\n    description: Optional[str] = None\n    required: Optional[bool] = None\n    deprecated: Optional[bool] = None\n    # Serialization rules for simple scenarios\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None\n    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    # Serialization rules for more complex scenarios\n    content: Optional[Dict[str, MediaType]] = None\n\n\nclass Parameter(ParameterBase):\n    name: str\n    in_: ParameterInType = Field(alias=\"in\")\n\n\nclass Header(ParameterBase):\n    pass\n\n\nclass RequestBody(BaseModelWithConfig):\n    description: Optional[str] = None\n    content: Dict[str, MediaType]\n    required: Optional[bool] = None\n\n\nclass Link(BaseModelWithConfig):\n    operationRef: Optional[str] = None\n    operationId: Optional[str] = None\n    parameters: Optional[Dict[str, Union[Any, str]]] = None\n    requestBody: Optional[Union[Any, str]] = None\n    description: Optional[str] = None\n    server: Optional[Server] = None\n\n\nclass Response(BaseModelWithConfig):\n    description: str\n    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n    content: Optional[Dict[str, MediaType]] = None\n    links: Optional[Dict[str, Union[Link, Reference]]] = None\n\n\nclass Operation(BaseModelWithConfig):\n    tags: Optional[List[str]] = None\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    operationId: Optional[str] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None\n    requestBody: Optional[Union[RequestBody, Reference]] = None\n    # Using Any for Specification Extensions\n    responses: Optional[Dict[str, Union[Response, Any]]] = None\n    callbacks: Optional[Dict[str, Union[Dict[str, \"PathItem\"], Reference]]] = None\n    deprecated: Optional[bool] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    servers: Optional[List[Server]] = None\n\n\nclass PathItem(BaseModelWithConfig):\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    get: Optional[Operation] = None\n    put: Optional[Operation] = None\n    post: Optional[Operation] = None\n    delete: Optional[Operation] = None\n    options: Optional[Operation] = None\n    head: Optional[Operation] = None\n    patch: Optional[Operation] = None\n    trace: Optional[Operation] = None\n    servers: Optional[List[Server]] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None\n\n\nclass SecuritySchemeType(Enum):\n    apiKey = \"apiKey\"\n    http = \"http\"\n    oauth2 = \"oauth2\"\n    openIdConnect = \"openIdConnect\"\n\n\nclass SecurityBase(BaseModelWithConfig):\n    type_: SecuritySchemeType = Field(alias=\"type\")\n    description: Optional[str] = None\n\n\nclass APIKeyIn(Enum):\n    query = \"query\"\n    header = \"header\"\n    cookie = \"cookie\"\n\n\nclass APIKey(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.apiKey, alias=\"type\")\n    in_: APIKeyIn = Field(alias=\"in\")\n    name: str\n\n\nclass HTTPBase(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.http, alias=\"type\")\n    scheme: str\n\n\nclass HTTPBearer(HTTPBase):\n    scheme: Literal[\"bearer\"] = \"bearer\"\n    bearerFormat: Optional[str] = None\n\n\nclass OAuthFlow(BaseModelWithConfig):\n    refreshUrl: Optional[str] = None\n    scopes: Dict[str, str] = {}\n\n\nclass OAuthFlowImplicit(OAuthFlow):\n    authorizationUrl: str\n\n\nclass OAuthFlowPassword(OAuthFlow):\n    tokenUrl: str\n\n\nclass OAuthFlowClientCredentials(OAuthFlow):\n    tokenUrl: str\n\n\nclass OAuthFlowAuthorizationCode(OAuthFlow):\n    authorizationUrl: str\n    tokenUrl: str\n\n\nclass OAuthFlows(BaseModelWithConfig):\n    implicit: Optional[OAuthFlowImplicit] = None\n    password: Optional[OAuthFlowPassword] = None\n    clientCredentials: Optional[OAuthFlowClientCredentials] = None\n    authorizationCode: Optional[OAuthFlowAuthorizationCode] = None\n\n\nclass OAuth2(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.oauth2, alias=\"type\")\n    flows: OAuthFlows\n\n\nclass OpenIdConnect(SecurityBase):\n    type_: SecuritySchemeType = Field(\n        default=SecuritySchemeType.openIdConnect, alias=\"type\"\n    )\n    openIdConnectUrl: str\n\n\nSecurityScheme = Union[APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer]\n\n\nclass Components(BaseModelWithConfig):\n    schemas: Optional[Dict[str, Union[Schema, Reference]]] = None\n    responses: Optional[Dict[str, Union[Response, Reference]]] = None\n    parameters: Optional[Dict[str, Union[Parameter, Reference]]] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    requestBodies: Optional[Dict[str, Union[RequestBody, Reference]]] = None\n    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n    securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None\n    links: Optional[Dict[str, Union[Link, Reference]]] = None\n    # Using Any for Specification Extensions\n    callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference, Any]]] = None\n    pathItems: Optional[Dict[str, Union[PathItem, Reference]]] = None\n\n\nclass Tag(BaseModelWithConfig):\n    name: str\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n\n\nclass OpenAPI(BaseModelWithConfig):\n    openapi: str\n    info: Info\n    jsonSchemaDialect: Optional[str] = None\n    servers: Optional[List[Server]] = None\n    # Using Any for Specification Extensions\n    paths: Optional[Dict[str, Union[PathItem, Any]]] = None\n    webhooks: Optional[Dict[str, Union[PathItem, Reference]]] = None\n    components: Optional[Components] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    tags: Optional[List[Tag]] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n\n\n_model_rebuild(Schema)\n_model_rebuild(Operation)\n_model_rebuild(Encoding)\n", "fastapi/openapi/constants.py": "METHODS_WITH_BODY = {\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"}\nREF_PREFIX = \"#/components/schemas/\"\nREF_TEMPLATE = \"#/components/schemas/{model}\"\n", "fastapi/openapi/__init__.py": "", ".github/actions/people/app/main.py": "import logging\nimport subprocess\nimport sys\nfrom collections import Counter, defaultdict\nfrom datetime import datetime, timedelta, timezone\nfrom pathlib import Path\nfrom typing import Any, Container, DefaultDict, Dict, List, Set, Union\n\nimport httpx\nimport yaml\nfrom github import Github\nfrom pydantic import BaseModel, SecretStr\nfrom pydantic_settings import BaseSettings\n\ngithub_graphql_url = \"https://api.github.com/graphql\"\nquestions_category_id = \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDAxNDM0\"\n\ndiscussions_query = \"\"\"\nquery Q($after: String, $category_id: ID) {\n  repository(name: \"fastapi\", owner: \"tiangolo\") {\n    discussions(first: 100, after: $after, categoryId: $category_id) {\n      edges {\n        cursor\n        node {\n          number\n          author {\n            login\n            avatarUrl\n            url\n          }\n          title\n          createdAt\n          comments(first: 100) {\n            nodes {\n              createdAt\n              author {\n                login\n                avatarUrl\n                url\n              }\n              isAnswer\n              replies(first: 10) {\n                nodes {\n                  createdAt\n                  author {\n                    login\n                    avatarUrl\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\n\nprs_query = \"\"\"\nquery Q($after: String) {\n  repository(name: \"fastapi\", owner: \"tiangolo\") {\n    pullRequests(first: 100, after: $after) {\n      edges {\n        cursor\n        node {\n          number\n          labels(first: 100) {\n            nodes {\n              name\n            }\n          }\n          author {\n            login\n            avatarUrl\n            url\n          }\n          title\n          createdAt\n          state\n          comments(first: 100) {\n            nodes {\n              createdAt\n              author {\n                login\n                avatarUrl\n                url\n              }\n            }\n          }\n          reviews(first:100) {\n            nodes {\n              author {\n                login\n                avatarUrl\n                url\n              }\n              state\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\nsponsors_query = \"\"\"\nquery Q($after: String) {\n  user(login: \"tiangolo\") {\n    sponsorshipsAsMaintainer(first: 100, after: $after) {\n      edges {\n        cursor\n        node {\n          sponsorEntity {\n            ... on Organization {\n              login\n              avatarUrl\n              url\n            }\n            ... on User {\n              login\n              avatarUrl\n              url\n            }\n          }\n          tier {\n            name\n            monthlyPriceInDollars\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\n\nclass Author(BaseModel):\n    login: str\n    avatarUrl: str\n    url: str\n\n\n# Discussions\n\n\nclass CommentsNode(BaseModel):\n    createdAt: datetime\n    author: Union[Author, None] = None\n\n\nclass Replies(BaseModel):\n    nodes: List[CommentsNode]\n\n\nclass DiscussionsCommentsNode(CommentsNode):\n    replies: Replies\n\n\nclass Comments(BaseModel):\n    nodes: List[CommentsNode]\n\n\nclass DiscussionsComments(BaseModel):\n    nodes: List[DiscussionsCommentsNode]\n\n\nclass DiscussionsNode(BaseModel):\n    number: int\n    author: Union[Author, None] = None\n    title: str\n    createdAt: datetime\n    comments: DiscussionsComments\n\n\nclass DiscussionsEdge(BaseModel):\n    cursor: str\n    node: DiscussionsNode\n\n\nclass Discussions(BaseModel):\n    edges: List[DiscussionsEdge]\n\n\nclass DiscussionsRepository(BaseModel):\n    discussions: Discussions\n\n\nclass DiscussionsResponseData(BaseModel):\n    repository: DiscussionsRepository\n\n\nclass DiscussionsResponse(BaseModel):\n    data: DiscussionsResponseData\n\n\n# PRs\n\n\nclass LabelNode(BaseModel):\n    name: str\n\n\nclass Labels(BaseModel):\n    nodes: List[LabelNode]\n\n\nclass ReviewNode(BaseModel):\n    author: Union[Author, None] = None\n    state: str\n\n\nclass Reviews(BaseModel):\n    nodes: List[ReviewNode]\n\n\nclass PullRequestNode(BaseModel):\n    number: int\n    labels: Labels\n    author: Union[Author, None] = None\n    title: str\n    createdAt: datetime\n    state: str\n    comments: Comments\n    reviews: Reviews\n\n\nclass PullRequestEdge(BaseModel):\n    cursor: str\n    node: PullRequestNode\n\n\nclass PullRequests(BaseModel):\n    edges: List[PullRequestEdge]\n\n\nclass PRsRepository(BaseModel):\n    pullRequests: PullRequests\n\n\nclass PRsResponseData(BaseModel):\n    repository: PRsRepository\n\n\nclass PRsResponse(BaseModel):\n    data: PRsResponseData\n\n\n# Sponsors\n\n\nclass SponsorEntity(BaseModel):\n    login: str\n    avatarUrl: str\n    url: str\n\n\nclass Tier(BaseModel):\n    name: str\n    monthlyPriceInDollars: float\n\n\nclass SponsorshipAsMaintainerNode(BaseModel):\n    sponsorEntity: SponsorEntity\n    tier: Tier\n\n\nclass SponsorshipAsMaintainerEdge(BaseModel):\n    cursor: str\n    node: SponsorshipAsMaintainerNode\n\n\nclass SponsorshipAsMaintainer(BaseModel):\n    edges: List[SponsorshipAsMaintainerEdge]\n\n\nclass SponsorsUser(BaseModel):\n    sponsorshipsAsMaintainer: SponsorshipAsMaintainer\n\n\nclass SponsorsResponseData(BaseModel):\n    user: SponsorsUser\n\n\nclass SponsorsResponse(BaseModel):\n    data: SponsorsResponseData\n\n\nclass Settings(BaseSettings):\n    input_token: SecretStr\n    github_repository: str\n    httpx_timeout: int = 30\n\n\ndef get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: Union[str, None] = None,\n    category_id: Union[str, None] = None,\n) -> Dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n    # category_id is only used by one query, but GraphQL allows unused variables, so\n    # keep it here for simplicity\n    variables = {\"after\": after, \"category_id\": category_id}\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(\n            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n        )\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return data\n\n\ndef get_graphql_question_discussion_edges(\n    *,\n    settings: Settings,\n    after: Union[str, None] = None,\n):\n    data = get_graphql_response(\n        settings=settings,\n        query=discussions_query,\n        after=after,\n        category_id=questions_category_id,\n    )\n    graphql_response = DiscussionsResponse.model_validate(data)\n    return graphql_response.data.repository.discussions.edges\n\n\ndef get_graphql_pr_edges(*, settings: Settings, after: Union[str, None] = None):\n    data = get_graphql_response(settings=settings, query=prs_query, after=after)\n    graphql_response = PRsResponse.model_validate(data)\n    return graphql_response.data.repository.pullRequests.edges\n\n\ndef get_graphql_sponsor_edges(*, settings: Settings, after: Union[str, None] = None):\n    data = get_graphql_response(settings=settings, query=sponsors_query, after=after)\n    graphql_response = SponsorsResponse.model_validate(data)\n    return graphql_response.data.user.sponsorshipsAsMaintainer.edges\n\n\nclass DiscussionExpertsResults(BaseModel):\n    commenters: Counter\n    last_month_commenters: Counter\n    three_months_commenters: Counter\n    six_months_commenters: Counter\n    one_year_commenters: Counter\n    authors: Dict[str, Author]\n\n\ndef get_discussion_nodes(settings: Settings) -> List[DiscussionsNode]:\n    discussion_nodes: List[DiscussionsNode] = []\n    discussion_edges = get_graphql_question_discussion_edges(settings=settings)\n\n    while discussion_edges:\n        for discussion_edge in discussion_edges:\n            discussion_nodes.append(discussion_edge.node)\n        last_edge = discussion_edges[-1]\n        discussion_edges = get_graphql_question_discussion_edges(\n            settings=settings, after=last_edge.cursor\n        )\n    return discussion_nodes\n\n\ndef get_discussions_experts(\n    discussion_nodes: List[DiscussionsNode],\n) -> DiscussionExpertsResults:\n    commenters = Counter()\n    last_month_commenters = Counter()\n    three_months_commenters = Counter()\n    six_months_commenters = Counter()\n    one_year_commenters = Counter()\n    authors: Dict[str, Author] = {}\n\n    now = datetime.now(tz=timezone.utc)\n    one_month_ago = now - timedelta(days=30)\n    three_months_ago = now - timedelta(days=90)\n    six_months_ago = now - timedelta(days=180)\n    one_year_ago = now - timedelta(days=365)\n\n    for discussion in discussion_nodes:\n        discussion_author_name = None\n        if discussion.author:\n            authors[discussion.author.login] = discussion.author\n            discussion_author_name = discussion.author.login\n        discussion_commentors: dict[str, datetime] = {}\n        for comment in discussion.comments.nodes:\n            if comment.author:\n                authors[comment.author.login] = comment.author\n                if comment.author.login != discussion_author_name:\n                    author_time = discussion_commentors.get(\n                        comment.author.login, comment.createdAt\n                    )\n                    discussion_commentors[comment.author.login] = max(\n                        author_time, comment.createdAt\n                    )\n            for reply in comment.replies.nodes:\n                if reply.author:\n                    authors[reply.author.login] = reply.author\n                    if reply.author.login != discussion_author_name:\n                        author_time = discussion_commentors.get(\n                            reply.author.login, reply.createdAt\n                        )\n                        discussion_commentors[reply.author.login] = max(\n                            author_time, reply.createdAt\n                        )\n        for author_name, author_time in discussion_commentors.items():\n            commenters[author_name] += 1\n            if author_time > one_month_ago:\n                last_month_commenters[author_name] += 1\n            if author_time > three_months_ago:\n                three_months_commenters[author_name] += 1\n            if author_time > six_months_ago:\n                six_months_commenters[author_name] += 1\n            if author_time > one_year_ago:\n                one_year_commenters[author_name] += 1\n    discussion_experts_results = DiscussionExpertsResults(\n        authors=authors,\n        commenters=commenters,\n        last_month_commenters=last_month_commenters,\n        three_months_commenters=three_months_commenters,\n        six_months_commenters=six_months_commenters,\n        one_year_commenters=one_year_commenters,\n    )\n    return discussion_experts_results\n\n\ndef get_pr_nodes(settings: Settings) -> List[PullRequestNode]:\n    pr_nodes: List[PullRequestNode] = []\n    pr_edges = get_graphql_pr_edges(settings=settings)\n\n    while pr_edges:\n        for edge in pr_edges:\n            pr_nodes.append(edge.node)\n        last_edge = pr_edges[-1]\n        pr_edges = get_graphql_pr_edges(settings=settings, after=last_edge.cursor)\n    return pr_nodes\n\n\nclass ContributorsResults(BaseModel):\n    contributors: Counter\n    commenters: Counter\n    reviewers: Counter\n    translation_reviewers: Counter\n    authors: Dict[str, Author]\n\n\ndef get_contributors(pr_nodes: List[PullRequestNode]) -> ContributorsResults:\n    contributors = Counter()\n    commenters = Counter()\n    reviewers = Counter()\n    translation_reviewers = Counter()\n    authors: Dict[str, Author] = {}\n\n    for pr in pr_nodes:\n        author_name = None\n        if pr.author:\n            authors[pr.author.login] = pr.author\n            author_name = pr.author.login\n        pr_commentors: Set[str] = set()\n        pr_reviewers: Set[str] = set()\n        for comment in pr.comments.nodes:\n            if comment.author:\n                authors[comment.author.login] = comment.author\n                if comment.author.login == author_name:\n                    continue\n                pr_commentors.add(comment.author.login)\n        for author_name in pr_commentors:\n            commenters[author_name] += 1\n        for review in pr.reviews.nodes:\n            if review.author:\n                authors[review.author.login] = review.author\n                pr_reviewers.add(review.author.login)\n                for label in pr.labels.nodes:\n                    if label.name == \"lang-all\":\n                        translation_reviewers[review.author.login] += 1\n                        break\n        for reviewer in pr_reviewers:\n            reviewers[reviewer] += 1\n        if pr.state == \"MERGED\" and pr.author:\n            contributors[pr.author.login] += 1\n    return ContributorsResults(\n        contributors=contributors,\n        commenters=commenters,\n        reviewers=reviewers,\n        translation_reviewers=translation_reviewers,\n        authors=authors,\n    )\n\n\ndef get_individual_sponsors(settings: Settings):\n    nodes: List[SponsorshipAsMaintainerNode] = []\n    edges = get_graphql_sponsor_edges(settings=settings)\n\n    while edges:\n        for edge in edges:\n            nodes.append(edge.node)\n        last_edge = edges[-1]\n        edges = get_graphql_sponsor_edges(settings=settings, after=last_edge.cursor)\n\n    tiers: DefaultDict[float, Dict[str, SponsorEntity]] = defaultdict(dict)\n    for node in nodes:\n        tiers[node.tier.monthlyPriceInDollars][\n            node.sponsorEntity.login\n        ] = node.sponsorEntity\n    return tiers\n\n\ndef get_top_users(\n    *,\n    counter: Counter,\n    authors: Dict[str, Author],\n    skip_users: Container[str],\n    min_count: int = 2,\n):\n    users = []\n    for commenter, count in counter.most_common(50):\n        if commenter in skip_users:\n            continue\n        if count >= min_count:\n            author = authors[commenter]\n            users.append(\n                {\n                    \"login\": commenter,\n                    \"count\": count,\n                    \"avatarUrl\": author.avatarUrl,\n                    \"url\": author.url,\n                }\n            )\n    return users\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.input_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    discussion_nodes = get_discussion_nodes(settings=settings)\n    experts_results = get_discussions_experts(discussion_nodes=discussion_nodes)\n    pr_nodes = get_pr_nodes(settings=settings)\n    contributors_results = get_contributors(pr_nodes=pr_nodes)\n    authors = {**experts_results.authors, **contributors_results.authors}\n    maintainers_logins = {\"tiangolo\"}\n    bot_names = {\"codecov\", \"github-actions\", \"pre-commit-ci\", \"dependabot\"}\n    maintainers = []\n    for login in maintainers_logins:\n        user = authors[login]\n        maintainers.append(\n            {\n                \"login\": login,\n                \"answers\": experts_results.commenters[login],\n                \"prs\": contributors_results.contributors[login],\n                \"avatarUrl\": user.avatarUrl,\n                \"url\": user.url,\n            }\n        )\n\n    skip_users = maintainers_logins | bot_names\n    experts = get_top_users(\n        counter=experts_results.commenters,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    last_month_experts = get_top_users(\n        counter=experts_results.last_month_commenters,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    three_months_experts = get_top_users(\n        counter=experts_results.three_months_commenters,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    six_months_experts = get_top_users(\n        counter=experts_results.six_months_commenters,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    one_year_experts = get_top_users(\n        counter=experts_results.one_year_commenters,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    top_contributors = get_top_users(\n        counter=contributors_results.contributors,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    top_reviewers = get_top_users(\n        counter=contributors_results.reviewers,\n        authors=authors,\n        skip_users=skip_users,\n    )\n    top_translations_reviewers = get_top_users(\n        counter=contributors_results.translation_reviewers,\n        authors=authors,\n        skip_users=skip_users,\n    )\n\n    tiers = get_individual_sponsors(settings=settings)\n    keys = list(tiers.keys())\n    keys.sort(reverse=True)\n    sponsors = []\n    for key in keys:\n        sponsor_group = []\n        for login, sponsor in tiers[key].items():\n            sponsor_group.append(\n                {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n            )\n        sponsors.append(sponsor_group)\n\n    people = {\n        \"maintainers\": maintainers,\n        \"experts\": experts,\n        \"last_month_experts\": last_month_experts,\n        \"three_months_experts\": three_months_experts,\n        \"six_months_experts\": six_months_experts,\n        \"one_year_experts\": one_year_experts,\n        \"top_contributors\": top_contributors,\n        \"top_reviewers\": top_reviewers,\n        \"top_translations_reviewers\": top_translations_reviewers,\n    }\n    github_sponsors = {\n        \"sponsors\": sponsors,\n    }\n    # For local development\n    # people_path = Path(\"../../../../docs/en/data/people.yml\")\n    people_path = Path(\"./docs/en/data/people.yml\")\n    github_sponsors_path = Path(\"./docs/en/data/github_sponsors.yml\")\n    people_old_content = people_path.read_text(encoding=\"utf-8\")\n    github_sponsors_old_content = github_sponsors_path.read_text(encoding=\"utf-8\")\n    new_people_content = yaml.dump(\n        people, sort_keys=False, width=200, allow_unicode=True\n    )\n    new_github_sponsors_content = yaml.dump(\n        github_sponsors, sort_keys=False, width=200, allow_unicode=True\n    )\n    if (\n        people_old_content == new_people_content\n        and github_sponsors_old_content == new_github_sponsors_content\n    ):\n        logging.info(\"The FastAPI People data hasn't changed, finishing.\")\n        sys.exit(0)\n    people_path.write_text(new_people_content, encoding=\"utf-8\")\n    github_sponsors_path.write_text(new_github_sponsors_content, encoding=\"utf-8\")\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = \"fastapi-people\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run(\n        [\"git\", \"add\", str(people_path), str(github_sponsors_path)], check=True\n    )\n    logging.info(\"Committing updated file\")\n    message = \"\ud83d\udc65 Update FastAPI People\"\n    result = subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")\n", ".github/actions/comment-docs-preview-in-pr/app/main.py": "import logging\nimport sys\nfrom pathlib import Path\nfrom typing import Union\n\nimport httpx\nfrom github import Github\nfrom github.PullRequest import PullRequest\nfrom pydantic import BaseModel, SecretStr, ValidationError\nfrom pydantic_settings import BaseSettings\n\ngithub_api = \"https://api.github.com\"\n\n\nclass Settings(BaseSettings):\n    github_repository: str\n    github_event_path: Path\n    github_event_name: Union[str, None] = None\n    input_token: SecretStr\n    input_deploy_url: str\n\n\nclass PartialGithubEventHeadCommit(BaseModel):\n    id: str\n\n\nclass PartialGithubEventWorkflowRun(BaseModel):\n    head_commit: PartialGithubEventHeadCommit\n\n\nclass PartialGithubEvent(BaseModel):\n    workflow_run: PartialGithubEventWorkflowRun\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.json()}\")\n    g = Github(settings.input_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    try:\n        event = PartialGithubEvent.parse_file(settings.github_event_path)\n    except ValidationError as e:\n        logging.error(f\"Error parsing event file: {e.errors()}\")\n        sys.exit(0)\n    use_pr: Union[PullRequest, None] = None\n    for pr in repo.get_pulls():\n        if pr.head.sha == event.workflow_run.head_commit.id:\n            use_pr = pr\n            break\n    if not use_pr:\n        logging.error(f\"No PR found for hash: {event.workflow_run.head_commit.id}\")\n        sys.exit(0)\n    github_headers = {\n        \"Authorization\": f\"token {settings.input_token.get_secret_value()}\"\n    }\n    url = f\"{github_api}/repos/{settings.github_repository}/issues/{use_pr.number}/comments\"\n    logging.info(f\"Using comments URL: {url}\")\n    response = httpx.post(\n        url,\n        headers=github_headers,\n        json={\n            \"body\": f\"\ud83d\udcdd Docs preview for commit {use_pr.head.sha} at: {settings.input_deploy_url}\"\n        },\n    )\n    if not (200 <= response.status_code <= 300):\n        logging.error(f\"Error posting comment: {response.text}\")\n        sys.exit(1)\n    logging.info(\"Finished\")\n", ".github/actions/notify-translations/app/main.py": "import logging\nimport random\nimport sys\nimport time\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Union, cast\n\nimport httpx\nfrom github import Github\nfrom pydantic import BaseModel, BaseSettings, SecretStr\n\nawaiting_label = \"awaiting-review\"\nlang_all_label = \"lang-all\"\napproved_label = \"approved-2\"\ntranslations_path = Path(__file__).parent / \"translations.yml\"\n\ngithub_graphql_url = \"https://api.github.com/graphql\"\nquestions_translations_category_id = \"DIC_kwDOCZduT84CT5P9\"\n\nall_discussions_query = \"\"\"\nquery Q($category_id: ID) {\n  repository(name: \"fastapi\", owner: \"tiangolo\") {\n    discussions(categoryId: $category_id, first: 100) {\n      nodes {\n        title\n        id\n        number\n        labels(first: 10) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\ntranslation_discussion_query = \"\"\"\nquery Q($after: String, $discussion_number: Int!) {\n  repository(name: \"fastapi\", owner: \"tiangolo\") {\n    discussion(number: $discussion_number) {\n      comments(first: 100, after: $after) {\n        edges {\n          cursor\n          node {\n            id\n            url\n            body\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\"\n\nadd_comment_mutation = \"\"\"\nmutation Q($discussion_id: ID!, $body: String!) {\n  addDiscussionComment(input: {discussionId: $discussion_id, body: $body}) {\n    comment {\n      id\n      url\n      body\n    }\n  }\n}\n\"\"\"\n\nupdate_comment_mutation = \"\"\"\nmutation Q($comment_id: ID!, $body: String!) {\n  updateDiscussionComment(input: {commentId: $comment_id, body: $body}) {\n    comment {\n      id\n      url\n      body\n    }\n  }\n}\n\"\"\"\n\n\nclass Comment(BaseModel):\n    id: str\n    url: str\n    body: str\n\n\nclass UpdateDiscussionComment(BaseModel):\n    comment: Comment\n\n\nclass UpdateCommentData(BaseModel):\n    updateDiscussionComment: UpdateDiscussionComment\n\n\nclass UpdateCommentResponse(BaseModel):\n    data: UpdateCommentData\n\n\nclass AddDiscussionComment(BaseModel):\n    comment: Comment\n\n\nclass AddCommentData(BaseModel):\n    addDiscussionComment: AddDiscussionComment\n\n\nclass AddCommentResponse(BaseModel):\n    data: AddCommentData\n\n\nclass CommentsEdge(BaseModel):\n    node: Comment\n    cursor: str\n\n\nclass Comments(BaseModel):\n    edges: List[CommentsEdge]\n\n\nclass CommentsDiscussion(BaseModel):\n    comments: Comments\n\n\nclass CommentsRepository(BaseModel):\n    discussion: CommentsDiscussion\n\n\nclass CommentsData(BaseModel):\n    repository: CommentsRepository\n\n\nclass CommentsResponse(BaseModel):\n    data: CommentsData\n\n\nclass AllDiscussionsLabelNode(BaseModel):\n    id: str\n    name: str\n\n\nclass AllDiscussionsLabelsEdge(BaseModel):\n    node: AllDiscussionsLabelNode\n\n\nclass AllDiscussionsDiscussionLabels(BaseModel):\n    edges: List[AllDiscussionsLabelsEdge]\n\n\nclass AllDiscussionsDiscussionNode(BaseModel):\n    title: str\n    id: str\n    number: int\n    labels: AllDiscussionsDiscussionLabels\n\n\nclass AllDiscussionsDiscussions(BaseModel):\n    nodes: List[AllDiscussionsDiscussionNode]\n\n\nclass AllDiscussionsRepository(BaseModel):\n    discussions: AllDiscussionsDiscussions\n\n\nclass AllDiscussionsData(BaseModel):\n    repository: AllDiscussionsRepository\n\n\nclass AllDiscussionsResponse(BaseModel):\n    data: AllDiscussionsData\n\n\nclass Settings(BaseSettings):\n    github_repository: str\n    input_token: SecretStr\n    github_event_path: Path\n    github_event_name: Union[str, None] = None\n    httpx_timeout: int = 30\n    input_debug: Union[bool, None] = False\n\n\nclass PartialGitHubEventIssue(BaseModel):\n    number: int\n\n\nclass PartialGitHubEvent(BaseModel):\n    pull_request: PartialGitHubEventIssue\n\n\ndef get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: Union[str, None] = None,\n    category_id: Union[str, None] = None,\n    discussion_number: Union[int, None] = None,\n    discussion_id: Union[str, None] = None,\n    comment_id: Union[str, None] = None,\n    body: Union[str, None] = None,\n) -> Dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n    # some fields are only used by one query, but GraphQL allows unused variables, so\n    # keep them here for simplicity\n    variables = {\n        \"after\": after,\n        \"category_id\": category_id,\n        \"discussion_number\": discussion_number,\n        \"discussion_id\": discussion_id,\n        \"comment_id\": comment_id,\n        \"body\": body,\n    }\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(\n            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n        )\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return cast(Dict[str, Any], data)\n\n\ndef get_graphql_translation_discussions(*, settings: Settings):\n    data = get_graphql_response(\n        settings=settings,\n        query=all_discussions_query,\n        category_id=questions_translations_category_id,\n    )\n    graphql_response = AllDiscussionsResponse.parse_obj(data)\n    return graphql_response.data.repository.discussions.nodes\n\n\ndef get_graphql_translation_discussion_comments_edges(\n    *, settings: Settings, discussion_number: int, after: Union[str, None] = None\n):\n    data = get_graphql_response(\n        settings=settings,\n        query=translation_discussion_query,\n        discussion_number=discussion_number,\n        after=after,\n    )\n    graphql_response = CommentsResponse.parse_obj(data)\n    return graphql_response.data.repository.discussion.comments.edges\n\n\ndef get_graphql_translation_discussion_comments(\n    *, settings: Settings, discussion_number: int\n):\n    comment_nodes: List[Comment] = []\n    discussion_edges = get_graphql_translation_discussion_comments_edges(\n        settings=settings, discussion_number=discussion_number\n    )\n\n    while discussion_edges:\n        for discussion_edge in discussion_edges:\n            comment_nodes.append(discussion_edge.node)\n        last_edge = discussion_edges[-1]\n        discussion_edges = get_graphql_translation_discussion_comments_edges(\n            settings=settings,\n            discussion_number=discussion_number,\n            after=last_edge.cursor,\n        )\n    return comment_nodes\n\n\ndef create_comment(*, settings: Settings, discussion_id: str, body: str):\n    data = get_graphql_response(\n        settings=settings,\n        query=add_comment_mutation,\n        discussion_id=discussion_id,\n        body=body,\n    )\n    response = AddCommentResponse.parse_obj(data)\n    return response.data.addDiscussionComment.comment\n\n\ndef update_comment(*, settings: Settings, comment_id: str, body: str):\n    data = get_graphql_response(\n        settings=settings,\n        query=update_comment_mutation,\n        comment_id=comment_id,\n        body=body,\n    )\n    response = UpdateCommentResponse.parse_obj(data)\n    return response.data.updateDiscussionComment.comment\n\n\nif __name__ == \"__main__\":\n    settings = Settings()\n    if settings.input_debug:\n        logging.basicConfig(level=logging.DEBUG)\n    else:\n        logging.basicConfig(level=logging.INFO)\n    logging.debug(f\"Using config: {settings.json()}\")\n    g = Github(settings.input_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    if not settings.github_event_path.is_file():\n        raise RuntimeError(\n            f\"No github event file available at: {settings.github_event_path}\"\n        )\n    contents = settings.github_event_path.read_text()\n    github_event = PartialGitHubEvent.parse_raw(contents)\n\n    # Avoid race conditions with multiple labels\n    sleep_time = random.random() * 10  # random number between 0 and 10 seconds\n    logging.info(\n        f\"Sleeping for {sleep_time} seconds to avoid \"\n        \"race conditions and multiple comments\"\n    )\n    time.sleep(sleep_time)\n\n    # Get PR\n    logging.debug(f\"Processing PR: #{github_event.pull_request.number}\")\n    pr = repo.get_pull(github_event.pull_request.number)\n    label_strs = {label.name for label in pr.get_labels()}\n    langs = []\n    for label in label_strs:\n        if label.startswith(\"lang-\") and not label == lang_all_label:\n            langs.append(label[5:])\n    logging.info(f\"PR #{pr.number} has labels: {label_strs}\")\n    if not langs or lang_all_label not in label_strs:\n        logging.info(f\"PR #{pr.number} doesn't seem to be a translation PR, skipping\")\n        sys.exit(0)\n\n    # Generate translation map, lang ID to discussion\n    discussions = get_graphql_translation_discussions(settings=settings)\n    lang_to_discussion_map: Dict[str, AllDiscussionsDiscussionNode] = {}\n    for discussion in discussions:\n        for edge in discussion.labels.edges:\n            label = edge.node.name\n            if label.startswith(\"lang-\") and not label == lang_all_label:\n                lang = label[5:]\n                lang_to_discussion_map[lang] = discussion\n    logging.debug(f\"Using translations map: {lang_to_discussion_map}\")\n\n    # Messages to create or check\n    new_translation_message = f\"Good news everyone! \ud83d\ude09 There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}. \ud83c\udf89 This requires 2 approvals from native speakers to be merged. \ud83e\udd13\"\n    done_translation_message = f\"~There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}~ Good job! This is done. \ud83c\udf70\u2615\"\n\n    # Normally only one language, but still\n    for lang in langs:\n        if lang not in lang_to_discussion_map:\n            log_message = f\"Could not find discussion for language: {lang}\"\n            logging.error(log_message)\n            raise RuntimeError(log_message)\n        discussion = lang_to_discussion_map[lang]\n        logging.info(\n            f\"Found a translation discussion for language: {lang} in discussion: #{discussion.number}\"\n        )\n\n        already_notified_comment: Union[Comment, None] = None\n        already_done_comment: Union[Comment, None] = None\n\n        logging.info(\n            f\"Checking current comments in discussion: #{discussion.number} to see if already notified about this PR: #{pr.number}\"\n        )\n        comments = get_graphql_translation_discussion_comments(\n            settings=settings, discussion_number=discussion.number\n        )\n        for comment in comments:\n            if new_translation_message in comment.body:\n                already_notified_comment = comment\n            elif done_translation_message in comment.body:\n                already_done_comment = comment\n        logging.info(\n            f\"Already notified comment: {already_notified_comment}, already done comment: {already_done_comment}\"\n        )\n\n        if pr.state == \"open\" and awaiting_label in label_strs:\n            logging.info(\n                f\"This PR seems to be a language translation and awaiting reviews: #{pr.number}\"\n            )\n            if already_notified_comment:\n                logging.info(\n                    f\"This PR #{pr.number} was already notified in comment: {already_notified_comment.url}\"\n                )\n            else:\n                logging.info(\n                    f\"Writing notification comment about PR #{pr.number} in Discussion: #{discussion.number}\"\n                )\n                comment = create_comment(\n                    settings=settings,\n                    discussion_id=discussion.id,\n                    body=new_translation_message,\n                )\n                logging.info(f\"Notified in comment: {comment.url}\")\n        elif pr.state == \"closed\" or approved_label in label_strs:\n            logging.info(f\"Already approved or closed PR #{pr.number}\")\n            if already_done_comment:\n                logging.info(\n                    f\"This PR #{pr.number} was already marked as done in comment: {already_done_comment.url}\"\n                )\n            elif already_notified_comment:\n                updated_comment = update_comment(\n                    settings=settings,\n                    comment_id=already_notified_comment.id,\n                    body=done_translation_message,\n                )\n                logging.info(f\"Marked as done in comment: {updated_comment.url}\")\n        else:\n            logging.info(\n                f\"There doesn't seem to be anything to be done about PR #{pr.number}\"\n            )\n    logging.info(\"Finished\")\n", "scripts/docs.py": "import json\nimport logging\nimport os\nimport re\nimport shutil\nimport subprocess\nfrom functools import lru_cache\nfrom http.server import HTTPServer, SimpleHTTPRequestHandler\nfrom importlib import metadata\nfrom multiprocessing import Pool\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Union\n\nimport mkdocs.commands.build\nimport mkdocs.commands.serve\nimport mkdocs.config\nimport mkdocs.utils\nimport typer\nimport yaml\nfrom jinja2 import Template\n\nlogging.basicConfig(level=logging.INFO)\n\napp = typer.Typer()\n\nmkdocs_name = \"mkdocs.yml\"\n\nmissing_translation_snippet = \"\"\"\n{!../../../docs/missing-translation.md!}\n\"\"\"\n\ndocs_path = Path(\"docs\")\nen_docs_path = Path(\"docs/en\")\nen_config_path: Path = en_docs_path / mkdocs_name\nsite_path = Path(\"site\").absolute()\nbuild_site_path = Path(\"site_build\").absolute()\n\n\n@lru_cache\ndef is_mkdocs_insiders() -> bool:\n    version = metadata.version(\"mkdocs-material\")\n    return \"insiders\" in version\n\n\ndef get_en_config() -> Dict[str, Any]:\n    return mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n\n\ndef get_lang_paths() -> List[Path]:\n    return sorted(docs_path.iterdir())\n\n\ndef lang_callback(lang: Optional[str]) -> Union[str, None]:\n    if lang is None:\n        return None\n    lang = lang.lower()\n    return lang\n\n\ndef complete_existing_lang(incomplete: str):\n    lang_path: Path\n    for lang_path in get_lang_paths():\n        if lang_path.is_dir() and lang_path.name.startswith(incomplete):\n            yield lang_path.name\n\n\n@app.callback()\ndef callback() -> None:\n    if is_mkdocs_insiders():\n        os.environ[\"INSIDERS_FILE\"] = \"../en/mkdocs.insiders.yml\"\n    # For MacOS with insiders and Cairo\n    os.environ[\"DYLD_FALLBACK_LIBRARY_PATH\"] = \"/opt/homebrew/lib\"\n\n\n@app.command()\ndef new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n    \"\"\"\n    Generate a new docs translation directory for the language LANG.\n    \"\"\"\n    new_path: Path = Path(\"docs\") / lang\n    if new_path.exists():\n        typer.echo(f\"The language was already created: {lang}\")\n        raise typer.Abort()\n    new_path.mkdir()\n    new_config_path: Path = Path(new_path) / mkdocs_name\n    new_config_path.write_text(\"INHERIT: ../en/mkdocs.yml\\n\", encoding=\"utf-8\")\n    new_config_docs_path: Path = new_path / \"docs\"\n    new_config_docs_path.mkdir()\n    en_index_path: Path = en_docs_path / \"docs\" / \"index.md\"\n    new_index_path: Path = new_config_docs_path / \"index.md\"\n    en_index_content = en_index_path.read_text(encoding=\"utf-8\")\n    new_index_content = f\"{missing_translation_snippet}\\n\\n{en_index_content}\"\n    new_index_path.write_text(new_index_content, encoding=\"utf-8\")\n    typer.secho(f\"Successfully initialized: {new_path}\", color=typer.colors.GREEN)\n    update_languages()\n\n\n@app.command()\ndef build_lang(\n    lang: str = typer.Argument(\n        ..., callback=lang_callback, autocompletion=complete_existing_lang\n    ),\n) -> None:\n    \"\"\"\n    Build the docs for a language.\n    \"\"\"\n    insiders_env_file = os.environ.get(\"INSIDERS_FILE\")\n    print(f\"Insiders file {insiders_env_file}\")\n    if is_mkdocs_insiders():\n        print(\"Using insiders\")\n    lang_path: Path = Path(\"docs\") / lang\n    if not lang_path.is_dir():\n        typer.echo(f\"The language translation doesn't seem to exist yet: {lang}\")\n        raise typer.Abort()\n    typer.echo(f\"Building docs for: {lang}\")\n    build_site_dist_path = build_site_path / lang\n    if lang == \"en\":\n        dist_path = site_path\n        # Don't remove en dist_path as it might already contain other languages.\n        # When running build_all(), that function already removes site_path.\n        # All this is only relevant locally, on GitHub Actions all this is done through\n        # artifacts and multiple workflows, so it doesn't matter if directories are\n        # removed or not.\n    else:\n        dist_path = site_path / lang\n        shutil.rmtree(dist_path, ignore_errors=True)\n    current_dir = os.getcwd()\n    os.chdir(lang_path)\n    shutil.rmtree(build_site_dist_path, ignore_errors=True)\n    subprocess.run([\"mkdocs\", \"build\", \"--site-dir\", build_site_dist_path], check=True)\n    shutil.copytree(build_site_dist_path, dist_path, dirs_exist_ok=True)\n    os.chdir(current_dir)\n    typer.secho(f\"Successfully built docs for: {lang}\", color=typer.colors.GREEN)\n\n\nindex_sponsors_template = \"\"\"\n{% if sponsors %}\n{% for sponsor in sponsors.gold -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n{% endfor -%}\n{%- for sponsor in sponsors.silver -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n{% endfor %}\n{% endif %}\n\"\"\"\n\n\ndef generate_readme_content() -> str:\n    en_index = en_docs_path / \"docs\" / \"index.md\"\n    content = en_index.read_text(\"utf-8\")\n    match_pre = re.search(r\"</style>\\n\\n\", content)\n    match_start = re.search(r\"<!-- sponsors -->\", content)\n    match_end = re.search(r\"<!-- /sponsors -->\", content)\n    sponsors_data_path = en_docs_path / \"data\" / \"sponsors.yml\"\n    sponsors = mkdocs.utils.yaml_load(sponsors_data_path.read_text(encoding=\"utf-8\"))\n    if not (match_start and match_end):\n        raise RuntimeError(\"Couldn't auto-generate sponsors section\")\n    if not match_pre:\n        raise RuntimeError(\"Couldn't find pre section (<style>) in index.md\")\n    frontmatter_end = match_pre.end()\n    pre_end = match_start.end()\n    post_start = match_end.start()\n    template = Template(index_sponsors_template)\n    message = template.render(sponsors=sponsors)\n    pre_content = content[frontmatter_end:pre_end]\n    post_content = content[post_start:]\n    new_content = pre_content + message + post_content\n    return new_content\n\n\n@app.command()\ndef generate_readme() -> None:\n    \"\"\"\n    Generate README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Generating README\")\n    readme_path = Path(\"README.md\")\n    new_content = generate_readme_content()\n    readme_path.write_text(new_content, encoding=\"utf-8\")\n\n\n@app.command()\ndef verify_readme() -> None:\n    \"\"\"\n    Verify README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Verifying README\")\n    readme_path = Path(\"README.md\")\n    generated_content = generate_readme_content()\n    readme_content = readme_path.read_text(\"utf-8\")\n    if generated_content != readme_content:\n        typer.secho(\n            \"README.md outdated from the latest index.md\", color=typer.colors.RED\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid README \u2705\")\n\n\n@app.command()\ndef build_all() -> None:\n    \"\"\"\n    Build mkdocs site for en, and then build each language inside, end result is located\n    at directory ./site/ with each language inside.\n    \"\"\"\n    update_languages()\n    shutil.rmtree(site_path, ignore_errors=True)\n    langs = [lang.name for lang in get_lang_paths() if lang.is_dir()]\n    cpu_count = os.cpu_count() or 1\n    process_pool_size = cpu_count * 4\n    typer.echo(f\"Using process pool size: {process_pool_size}\")\n    with Pool(process_pool_size) as p:\n        p.map(build_lang, langs)\n\n\n@app.command()\ndef update_languages() -> None:\n    \"\"\"\n    Update the mkdocs.yml file Languages section including all the available languages.\n    \"\"\"\n    update_config()\n\n\n@app.command()\ndef serve() -> None:\n    \"\"\"\n    A quick server to preview a built site with translations.\n\n    For development, prefer the command live (or just mkdocs serve).\n\n    This is here only to preview a site with translations already built.\n\n    Make sure you run the build-all command first.\n    \"\"\"\n    typer.echo(\"Warning: this is a very simple server.\")\n    typer.echo(\"For development, use the command live instead.\")\n    typer.echo(\"This is here only to preview a site with translations already built.\")\n    typer.echo(\"Make sure you run the build-all command first.\")\n    os.chdir(\"site\")\n    server_address = (\"\", 8008)\n    server = HTTPServer(server_address, SimpleHTTPRequestHandler)\n    typer.echo(\"Serving at: http://127.0.0.1:8008\")\n    server.serve_forever()\n\n\n@app.command()\ndef live(\n    lang: str = typer.Argument(\n        None, callback=lang_callback, autocompletion=complete_existing_lang\n    ),\n) -> None:\n    \"\"\"\n    Serve with livereload a docs site for a specific language.\n\n    This only shows the actual translated files, not the placeholders created with\n    build-all.\n\n    Takes an optional LANG argument with the name of the language to serve, by default\n    en.\n    \"\"\"\n    # Enable line numbers during local development to make it easier to highlight\n    os.environ[\"LINENUMS\"] = \"true\"\n    if lang is None:\n        lang = \"en\"\n    lang_path: Path = docs_path / lang\n    os.chdir(lang_path)\n    mkdocs.commands.serve.serve(dev_addr=\"127.0.0.1:8008\")\n\n\ndef get_updated_config_content() -> Dict[str, Any]:\n    config = get_en_config()\n    languages = [{\"en\": \"/\"}]\n    new_alternate: List[Dict[str, str]] = []\n    # Language names sourced from https://quickref.me/iso-639-1\n    # Contributors may wish to update or change these, e.g. to fix capitalization.\n    language_names_path = Path(__file__).parent / \"../docs/language_names.yml\"\n    local_language_names: Dict[str, str] = mkdocs.utils.yaml_load(\n        language_names_path.read_text(encoding=\"utf-8\")\n    )\n    for lang_path in get_lang_paths():\n        if lang_path.name in {\"en\", \"em\"} or not lang_path.is_dir():\n            continue\n        code = lang_path.name\n        languages.append({code: f\"/{code}/\"})\n    for lang_dict in languages:\n        code = list(lang_dict.keys())[0]\n        url = lang_dict[code]\n        if code not in local_language_names:\n            print(\n                f\"Missing language name for: {code}, \"\n                \"update it in docs/language_names.yml\"\n            )\n            raise typer.Abort()\n        use_name = f\"{code} - {local_language_names[code]}\"\n        new_alternate.append({\"link\": url, \"name\": use_name})\n    new_alternate.append({\"link\": \"/em/\", \"name\": \"\ud83d\ude09\"})\n    config[\"extra\"][\"alternate\"] = new_alternate\n    return config\n\n\ndef update_config() -> None:\n    config = get_updated_config_content()\n    en_config_path.write_text(\n        yaml.dump(config, sort_keys=False, width=200, allow_unicode=True),\n        encoding=\"utf-8\",\n    )\n\n\n@app.command()\ndef verify_config() -> None:\n    \"\"\"\n    Verify main mkdocs.yml content to make sure it uses the latest language names.\n    \"\"\"\n    typer.echo(\"Verifying mkdocs.yml\")\n    config = get_en_config()\n    updated_config = get_updated_config_content()\n    if config != updated_config:\n        typer.secho(\n            \"docs/en/mkdocs.yml outdated from docs/language_names.yml, \"\n            \"update language_names.yml and run \"\n            \"python ./scripts/docs.py update-languages\",\n            color=typer.colors.RED,\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid mkdocs.yml \u2705\")\n\n\n@app.command()\ndef verify_docs():\n    verify_readme()\n    verify_config()\n\n\n@app.command()\ndef langs_json():\n    langs = []\n    for lang_path in get_lang_paths():\n        if lang_path.is_dir():\n            langs.append(lang_path.name)\n    print(json.dumps(langs))\n\n\nif __name__ == \"__main__\":\n    app()\n", "scripts/mkdocs_hooks.py": "from functools import lru_cache\nfrom pathlib import Path\nfrom typing import Any, List, Union\n\nimport material\nfrom mkdocs.config.defaults import MkDocsConfig\nfrom mkdocs.structure.files import File, Files\nfrom mkdocs.structure.nav import Link, Navigation, Section\nfrom mkdocs.structure.pages import Page\n\nnon_traslated_sections = [\n    \"reference/\",\n    \"release-notes.md\",\n]\n\n\n@lru_cache\ndef get_missing_translation_content(docs_dir: str) -> str:\n    docs_dir_path = Path(docs_dir)\n    missing_translation_path = docs_dir_path.parent.parent / \"missing-translation.md\"\n    return missing_translation_path.read_text(encoding=\"utf-8\")\n\n\n@lru_cache\ndef get_mkdocs_material_langs() -> List[str]:\n    material_path = Path(material.__file__).parent\n    material_langs_path = material_path / \"templates\" / \"partials\" / \"languages\"\n    langs = [file.stem for file in material_langs_path.glob(\"*.html\")]\n    return langs\n\n\nclass EnFile(File):\n    pass\n\n\ndef on_config(config: MkDocsConfig, **kwargs: Any) -> MkDocsConfig:\n    available_langs = get_mkdocs_material_langs()\n    dir_path = Path(config.docs_dir)\n    lang = dir_path.parent.name\n    if lang in available_langs:\n        config.theme[\"language\"] = lang\n    if not (config.site_url or \"\").endswith(f\"{lang}/\") and not lang == \"en\":\n        config.site_url = f\"{config.site_url}{lang}/\"\n    return config\n\n\ndef resolve_file(*, item: str, files: Files, config: MkDocsConfig) -> None:\n    item_path = Path(config.docs_dir) / item\n    if not item_path.is_file():\n        en_src_dir = (Path(config.docs_dir) / \"../../en/docs\").resolve()\n        potential_path = en_src_dir / item\n        if potential_path.is_file():\n            files.append(\n                EnFile(\n                    path=item,\n                    src_dir=str(en_src_dir),\n                    dest_dir=config.site_dir,\n                    use_directory_urls=config.use_directory_urls,\n                )\n            )\n\n\ndef resolve_files(*, items: List[Any], files: Files, config: MkDocsConfig) -> None:\n    for item in items:\n        if isinstance(item, str):\n            resolve_file(item=item, files=files, config=config)\n        elif isinstance(item, dict):\n            assert len(item) == 1\n            values = list(item.values())\n            if not values:\n                continue\n            if isinstance(values[0], str):\n                resolve_file(item=values[0], files=files, config=config)\n            elif isinstance(values[0], list):\n                resolve_files(items=values[0], files=files, config=config)\n            else:\n                raise ValueError(f\"Unexpected value: {values}\")\n\n\ndef on_files(files: Files, *, config: MkDocsConfig) -> Files:\n    resolve_files(items=config.nav or [], files=files, config=config)\n    if \"logo\" in config.theme:\n        resolve_file(item=config.theme[\"logo\"], files=files, config=config)\n    if \"favicon\" in config.theme:\n        resolve_file(item=config.theme[\"favicon\"], files=files, config=config)\n    resolve_files(items=config.extra_css, files=files, config=config)\n    resolve_files(items=config.extra_javascript, files=files, config=config)\n    return files\n\n\ndef generate_renamed_section_items(\n    items: List[Union[Page, Section, Link]], *, config: MkDocsConfig\n) -> List[Union[Page, Section, Link]]:\n    new_items: List[Union[Page, Section, Link]] = []\n    for item in items:\n        if isinstance(item, Section):\n            new_title = item.title\n            new_children = generate_renamed_section_items(item.children, config=config)\n            first_child = new_children[0]\n            if isinstance(first_child, Page):\n                if first_child.file.src_path.endswith(\"index.md\"):\n                    # Read the source so that the title is parsed and available\n                    first_child.read_source(config=config)\n                    new_title = first_child.title or new_title\n            # Creating a new section makes it render it collapsed by default\n            # no idea why, so, let's just modify the existing one\n            # new_section = Section(title=new_title, children=new_children)\n            item.title = new_title\n            item.children = new_children\n            new_items.append(item)\n        else:\n            new_items.append(item)\n    return new_items\n\n\ndef on_nav(\n    nav: Navigation, *, config: MkDocsConfig, files: Files, **kwargs: Any\n) -> Navigation:\n    new_items = generate_renamed_section_items(nav.items, config=config)\n    return Navigation(items=new_items, pages=nav.pages)\n\n\ndef on_pre_page(page: Page, *, config: MkDocsConfig, files: Files) -> Page:\n    return page\n\n\ndef on_page_markdown(\n    markdown: str, *, page: Page, config: MkDocsConfig, files: Files\n) -> str:\n    if isinstance(page.file, EnFile):\n        for excluded_section in non_traslated_sections:\n            if page.file.src_path.startswith(excluded_section):\n                return markdown\n        missing_translation_content = get_missing_translation_content(config.docs_dir)\n        header = \"\"\n        body = markdown\n        if markdown.startswith(\"#\"):\n            header, _, body = markdown.partition(\"\\n\\n\")\n        return f\"{header}\\n\\n{missing_translation_content}\\n\\n{body}\"\n    return markdown\n", "scripts/playwright/separate_openapi_schemas/image03.py": "import subprocess\n\nfrom playwright.sync_api import Playwright, sync_playwright\n\n\ndef run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"GET/items/Read Items\").click()\n    page.get_by_role(\"tab\", name=\"Schema\").click()\n    page.get_by_label(\"Schema\").get_by_role(\"button\", name=\"Expand all\").click()\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image03.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()\n\n\nprocess = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)\ntry:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()\n", "scripts/playwright/separate_openapi_schemas/image05.py": "import subprocess\n\nfrom playwright.sync_api import Playwright, sync_playwright\n\n\ndef run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"Item\", exact=True).click()\n    page.set_viewport_size({\"width\": 960, \"height\": 700})\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image05.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()\n\n\nprocess = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial002:app\"]\n)\ntry:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()\n", "scripts/playwright/separate_openapi_schemas/image02.py": "import subprocess\n\nfrom playwright.sync_api import Playwright, sync_playwright\n\n\ndef run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"GET/items/Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.get_by_role(\"button\", name=\"Execute\").click()\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image02.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()\n\n\nprocess = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)\ntry:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()\n", "scripts/playwright/separate_openapi_schemas/image04.py": "import subprocess\n\nfrom playwright.sync_api import Playwright, sync_playwright\n\n\ndef run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"Item-Input\").click()\n    page.get_by_role(\"button\", name=\"Item-Output\").click()\n    page.set_viewport_size({\"width\": 960, \"height\": 820})\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image04.png\"\n    )\n    # ---------------------\n    context.close()\n    browser.close()\n\n\nprocess = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)\ntry:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()\n", "scripts/playwright/separate_openapi_schemas/image01.py": "import subprocess\n\nfrom playwright.sync_api import Playwright, sync_playwright\n\n\ndef run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"POST/items/Create Item\").click()\n    page.get_by_role(\"tab\", name=\"Schema\").first.click()\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image01.png\"\n    )\n\n    # ---------------------\n    context.close()\n    browser.close()\n\n\nprocess = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)\ntry:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()\n", "tests/test_security_http_digest.py": "from fastapi import FastAPI, Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPDigest()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_digest():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_digest_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_security_http_digest_incorrect_scheme_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPDigest\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n        },\n    }\n", "tests/test_security_openid_connect_optional.py": "from typing import Optional\n\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security.open_id_connect_url import OpenIdConnect\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noid = OpenIdConnect(openIdConnectUrl=\"/openid\", auto_error=False)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: Optional[str] = Security(oid)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n\n\ndef test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}\n\n\ndef test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OpenIdConnect\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OpenIdConnect\": {\n                    \"type\": \"openIdConnect\",\n                    \"openIdConnectUrl\": \"/openid\",\n                }\n            }\n        },\n    }\n", "tests/test_security_openid_connect_description.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security.open_id_connect_url import OpenIdConnect\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noid = OpenIdConnect(\n    openIdConnectUrl=\"/openid\", description=\"OpenIdConnect security scheme\"\n)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(oid)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n\n\ndef test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}\n\n\ndef test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OpenIdConnect\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OpenIdConnect\": {\n                    \"type\": \"openIdConnect\",\n                    \"openIdConnectUrl\": \"/openid\",\n                    \"description\": \"OpenIdConnect security scheme\",\n                }\n            }\n        },\n    }\n", "tests/test_local_docs.py": "import inspect\n\nfrom fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n\n\ndef test_strings_in_generated_swagger():\n    sig = inspect.signature(get_swagger_ui_html)\n    swagger_js_url = sig.parameters.get(\"swagger_js_url\").default  # type: ignore\n    swagger_css_url = sig.parameters.get(\"swagger_css_url\").default  # type: ignore\n    swagger_favicon_url = sig.parameters.get(\"swagger_favicon_url\").default  # type: ignore\n    html = get_swagger_ui_html(openapi_url=\"/docs\", title=\"title\")\n    body_content = html.body.decode()\n    assert swagger_js_url in body_content\n    assert swagger_css_url in body_content\n    assert swagger_favicon_url in body_content\n\n\ndef test_strings_in_custom_swagger():\n    swagger_js_url = \"swagger_fake_file.js\"\n    swagger_css_url = \"swagger_fake_file.css\"\n    swagger_favicon_url = \"swagger_fake_file.png\"\n    html = get_swagger_ui_html(\n        openapi_url=\"/docs\",\n        title=\"title\",\n        swagger_js_url=swagger_js_url,\n        swagger_css_url=swagger_css_url,\n        swagger_favicon_url=swagger_favicon_url,\n    )\n    body_content = html.body.decode()\n    assert swagger_js_url in body_content\n    assert swagger_css_url in body_content\n    assert swagger_favicon_url in body_content\n\n\ndef test_strings_in_generated_redoc():\n    sig = inspect.signature(get_redoc_html)\n    redoc_js_url = sig.parameters.get(\"redoc_js_url\").default  # type: ignore\n    redoc_favicon_url = sig.parameters.get(\"redoc_favicon_url\").default  # type: ignore\n    html = get_redoc_html(openapi_url=\"/docs\", title=\"title\")\n    body_content = html.body.decode()\n    assert redoc_js_url in body_content\n    assert redoc_favicon_url in body_content\n\n\ndef test_strings_in_custom_redoc():\n    redoc_js_url = \"fake_redoc_file.js\"\n    redoc_favicon_url = \"fake_redoc_file.png\"\n    html = get_redoc_html(\n        openapi_url=\"/docs\",\n        title=\"title\",\n        redoc_js_url=redoc_js_url,\n        redoc_favicon_url=redoc_favicon_url,\n    )\n    body_content = html.body.decode()\n    assert redoc_js_url in body_content\n    assert redoc_favicon_url in body_content\n\n\ndef test_google_fonts_in_generated_redoc():\n    body_with_google_fonts = get_redoc_html(\n        openapi_url=\"/docs\", title=\"title\"\n    ).body.decode()\n    assert \"fonts.googleapis.com\" in body_with_google_fonts\n    body_without_google_fonts = get_redoc_html(\n        openapi_url=\"/docs\", title=\"title\", with_google_fonts=False\n    ).body.decode()\n    assert \"fonts.googleapis.com\" not in body_without_google_fonts\n", "tests/test_security_api_key_query.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyQuery\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyQuery(name=\"key\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_api_key():\n    response = client.get(\"/users/me?key=secret\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyQuery\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyQuery\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"query\"}\n            }\n        },\n    }\n", "tests/test_datastructures.py": "import io\nfrom pathlib import Path\nfrom typing import List\n\nimport pytest\nfrom fastapi import FastAPI, UploadFile\nfrom fastapi.datastructures import Default\nfrom fastapi.testclient import TestClient\n\n\n# TODO: remove when deprecating Pydantic v1\ndef test_upload_file_invalid():\n    with pytest.raises(ValueError):\n        UploadFile.validate(\"not a Starlette UploadFile\")\n\n\ndef test_upload_file_invalid_pydantic_v2():\n    with pytest.raises(ValueError):\n        UploadFile._validate(\"not a Starlette UploadFile\", {})\n\n\ndef test_default_placeholder_equals():\n    placeholder_1 = Default(\"a\")\n    placeholder_2 = Default(\"a\")\n    assert placeholder_1 == placeholder_2\n    assert placeholder_1.value == placeholder_2.value\n\n\ndef test_default_placeholder_bool():\n    placeholder_a = Default(\"a\")\n    placeholder_b = Default(\"\")\n    assert placeholder_a\n    assert not placeholder_b\n\n\ndef test_upload_file_is_closed(tmp_path: Path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    app = FastAPI()\n\n    testing_file_store: List[UploadFile] = []\n\n    @app.post(\"/uploadfile/\")\n    def create_upload_file(file: UploadFile):\n        testing_file_store.append(file)\n        return {\"filename\": file.filename}\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n    assert testing_file_store\n    assert testing_file_store[0].file.closed\n\n\n# For UploadFile coverage, segments copied from Starlette tests\n\n\n@pytest.mark.anyio\nasync def test_upload_file():\n    stream = io.BytesIO(b\"data\")\n    file = UploadFile(filename=\"file\", file=stream, size=4)\n    assert await file.read() == b\"data\"\n    assert file.size == 4\n    await file.write(b\" and more data!\")\n    assert await file.read() == b\"\"\n    assert file.size == 19\n    await file.seek(0)\n    assert await file.read() == b\"data and more data!\"\n    await file.close()\n", "tests/test_repeated_parameter_alias.py": "from fastapi import FastAPI, Path, Query, status\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/{repeated_alias}\")\ndef get_parameters_with_repeated_aliases(\n    path: str = Path(..., alias=\"repeated_alias\"),\n    query: str = Query(..., alias=\"repeated_alias\"),\n):\n    return {\"path\": path, \"query\": query}\n\n\nclient = TestClient(app)\n\n\ndef test_get_parameters():\n    response = client.get(\"/test_path\", params={\"repeated_alias\": \"test_query\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"path\": \"test_path\", \"query\": \"test_query\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == status.HTTP_200_OK\n    actual_schema = response.json()\n    assert actual_schema == {\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                        }\n                    },\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                    \"type\": \"object\",\n                },\n            }\n        },\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"openapi\": \"3.1.0\",\n        \"paths\": {\n            \"/{repeated_alias}\": {\n                \"get\": {\n                    \"operationId\": \"get_parameters_with_repeated_aliases__repeated_alias__get\",\n                    \"parameters\": [\n                        {\n                            \"in\": \"path\",\n                            \"name\": \"repeated_alias\",\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Repeated Alias\", \"type\": \"string\"},\n                        },\n                        {\n                            \"in\": \"query\",\n                            \"name\": \"repeated_alias\",\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Repeated Alias\", \"type\": \"string\"},\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful Response\",\n                        },\n                        \"422\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                            \"description\": \"Validation Error\",\n                        },\n                    },\n                    \"summary\": \"Get Parameters With Repeated Aliases\",\n                }\n            }\n        },\n    }\n", "tests/test_route_scope.py": "import pytest\nfrom fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect\nfrom fastapi.routing import APIRoute, APIWebSocketRoute\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: str, request: Request):\n    route: APIRoute = request.scope[\"route\"]\n    return {\"user_id\": user_id, \"path\": route.path}\n\n\n@app.websocket(\"/items/{item_id}\")\nasync def websocket_item(item_id: str, websocket: WebSocket):\n    route: APIWebSocketRoute = websocket.scope[\"route\"]\n    await websocket.accept()\n    await websocket.send_json({\"item_id\": item_id, \"path\": route.path})\n\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/users/rick\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"user_id\": \"rick\", \"path\": \"/users/{user_id}\"}\n\n\ndef test_invalid_method_doesnt_match():\n    response = client.post(\"/users/rick\")\n    assert response.status_code == 405, response.text\n\n\ndef test_invalid_path_doesnt_match():\n    response = client.post(\"/usersx/rick\")\n    assert response.status_code == 404, response.text\n\n\ndef test_websocket():\n    with client.websocket_connect(\"/items/portal-gun\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"item_id\": \"portal-gun\", \"path\": \"/items/{item_id}\"}\n\n\ndef test_websocket_invalid_path_doesnt_match():\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/itemsx/portal-gun\"):\n            pass\n", "tests/test_response_model_data_filter_no_inheritance.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass UserCreate(BaseModel):\n    email: str\n    password: str\n\n\nclass UserDB(BaseModel):\n    email: str\n    hashed_password: str\n\n\nclass User(BaseModel):\n    email: str\n\n\nclass PetDB(BaseModel):\n    name: str\n    owner: UserDB\n\n\nclass PetOut(BaseModel):\n    name: str\n    owner: User\n\n\n@app.post(\"/users/\", response_model=User)\nasync def create_user(user: UserCreate):\n    return user\n\n\n@app.get(\"/pets/{pet_id}\", response_model=PetOut)\nasync def read_pet(pet_id: int):\n    user = UserDB(\n        email=\"johndoe@example.com\",\n        hashed_password=\"secrethashed\",\n    )\n    pet = PetDB(name=\"Nibbler\", owner=user)\n    return pet\n\n\n@app.get(\"/pets/\", response_model=List[PetOut])\nasync def read_pets():\n    user = UserDB(\n        email=\"johndoe@example.com\",\n        hashed_password=\"secrethashed\",\n    )\n    pet1 = PetDB(name=\"Nibbler\", owner=user)\n    pet2 = PetDB(name=\"Zoidberg\", owner=user)\n    return [pet1, pet2]\n\n\nclient = TestClient(app)\n\n\ndef test_filter_top_level_model():\n    response = client.post(\n        \"/users\", json={\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    )\n    assert response.json() == {\"email\": \"johndoe@example.com\"}\n\n\ndef test_filter_second_level_model():\n    response = client.get(\"/pets/1\")\n    assert response.json() == {\n        \"name\": \"Nibbler\",\n        \"owner\": {\"email\": \"johndoe@example.com\"},\n    }\n\n\ndef test_list_of_models():\n    response = client.get(\"/pets/\")\n    assert response.json() == [\n        {\"name\": \"Nibbler\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n        {\"name\": \"Zoidberg\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n    ]\n", "tests/test_security_api_key_header_optional.py": "from typing import Optional\n\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyHeader\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyHeader(name=\"key\", auto_error=False)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: Optional[str] = Security(api_key)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_api_key():\n    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyHeader\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyHeader\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"header\"}\n            }\n        },\n    }\n", "tests/test_response_model_as_return_annotation.py": "from typing import List, Union\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import FastAPIError, ResponseValidationError\nfrom fastapi.responses import JSONResponse, Response\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\n\nclass BaseUser(BaseModel):\n    name: str\n\n\nclass User(BaseUser):\n    surname: str\n\n\nclass DBUser(User):\n    password_hash: str\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\napp = FastAPI()\n\n\n@app.get(\"/no_response_model-no_annotation-return_model\")\ndef no_response_model_no_annotation_return_model():\n    return User(name=\"John\", surname=\"Doe\")\n\n\n@app.get(\"/no_response_model-no_annotation-return_dict\")\ndef no_response_model_no_annotation_return_dict():\n    return {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\n@app.get(\"/response_model-no_annotation-return_same_model\", response_model=User)\ndef response_model_no_annotation_return_same_model():\n    return User(name=\"John\", surname=\"Doe\")\n\n\n@app.get(\"/response_model-no_annotation-return_exact_dict\", response_model=User)\ndef response_model_no_annotation_return_exact_dict():\n    return {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\n@app.get(\"/response_model-no_annotation-return_invalid_dict\", response_model=User)\ndef response_model_no_annotation_return_invalid_dict():\n    return {\"name\": \"John\"}\n\n\n@app.get(\"/response_model-no_annotation-return_invalid_model\", response_model=User)\ndef response_model_no_annotation_return_invalid_model():\n    return Item(name=\"Foo\", price=42.0)\n\n\n@app.get(\n    \"/response_model-no_annotation-return_dict_with_extra_data\", response_model=User\n)\ndef response_model_no_annotation_return_dict_with_extra_data():\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}\n\n\n@app.get(\n    \"/response_model-no_annotation-return_submodel_with_extra_data\", response_model=User\n)\ndef response_model_no_annotation_return_submodel_with_extra_data():\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\"/no_response_model-annotation-return_same_model\")\ndef no_response_model_annotation_return_same_model() -> User:\n    return User(name=\"John\", surname=\"Doe\")\n\n\n@app.get(\"/no_response_model-annotation-return_exact_dict\")\ndef no_response_model_annotation_return_exact_dict() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\n@app.get(\"/no_response_model-annotation-return_invalid_dict\")\ndef no_response_model_annotation_return_invalid_dict() -> User:\n    return {\"name\": \"John\"}\n\n\n@app.get(\"/no_response_model-annotation-return_invalid_model\")\ndef no_response_model_annotation_return_invalid_model() -> User:\n    return Item(name=\"Foo\", price=42.0)\n\n\n@app.get(\"/no_response_model-annotation-return_dict_with_extra_data\")\ndef no_response_model_annotation_return_dict_with_extra_data() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}\n\n\n@app.get(\"/no_response_model-annotation-return_submodel_with_extra_data\")\ndef no_response_model_annotation_return_submodel_with_extra_data() -> User:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\"/response_model_none-annotation-return_same_model\", response_model=None)\ndef response_model_none_annotation_return_same_model() -> User:\n    return User(name=\"John\", surname=\"Doe\")\n\n\n@app.get(\"/response_model_none-annotation-return_exact_dict\", response_model=None)\ndef response_model_none_annotation_return_exact_dict() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\n@app.get(\"/response_model_none-annotation-return_invalid_dict\", response_model=None)\ndef response_model_none_annotation_return_invalid_dict() -> User:\n    return {\"name\": \"John\"}\n\n\n@app.get(\"/response_model_none-annotation-return_invalid_model\", response_model=None)\ndef response_model_none_annotation_return_invalid_model() -> User:\n    return Item(name=\"Foo\", price=42.0)\n\n\n@app.get(\n    \"/response_model_none-annotation-return_dict_with_extra_data\", response_model=None\n)\ndef response_model_none_annotation_return_dict_with_extra_data() -> User:\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}\n\n\n@app.get(\n    \"/response_model_none-annotation-return_submodel_with_extra_data\",\n    response_model=None,\n)\ndef response_model_none_annotation_return_submodel_with_extra_data() -> User:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\n    \"/response_model_model1-annotation_model2-return_same_model\", response_model=User\n)\ndef response_model_model1_annotation_model2_return_same_model() -> Item:\n    return User(name=\"John\", surname=\"Doe\")\n\n\n@app.get(\n    \"/response_model_model1-annotation_model2-return_exact_dict\", response_model=User\n)\ndef response_model_model1_annotation_model2_return_exact_dict() -> Item:\n    return {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\n@app.get(\n    \"/response_model_model1-annotation_model2-return_invalid_dict\", response_model=User\n)\ndef response_model_model1_annotation_model2_return_invalid_dict() -> Item:\n    return {\"name\": \"John\"}\n\n\n@app.get(\n    \"/response_model_model1-annotation_model2-return_invalid_model\", response_model=User\n)\ndef response_model_model1_annotation_model2_return_invalid_model() -> Item:\n    return Item(name=\"Foo\", price=42.0)\n\n\n@app.get(\n    \"/response_model_model1-annotation_model2-return_dict_with_extra_data\",\n    response_model=User,\n)\ndef response_model_model1_annotation_model2_return_dict_with_extra_data() -> Item:\n    return {\"name\": \"John\", \"surname\": \"Doe\", \"password_hash\": \"secret\"}\n\n\n@app.get(\n    \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\",\n    response_model=User,\n)\ndef response_model_model1_annotation_model2_return_submodel_with_extra_data() -> Item:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\n    \"/response_model_filtering_model-annotation_submodel-return_submodel\",\n    response_model=User,\n)\ndef response_model_filtering_model_annotation_submodel_return_submodel() -> DBUser:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\"/response_model_list_of_model-no_annotation\", response_model=List[User])\ndef response_model_list_of_model_no_annotation():\n    return [\n        DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\"),\n        DBUser(name=\"Jane\", surname=\"Does\", password_hash=\"secret2\"),\n    ]\n\n\n@app.get(\"/no_response_model-annotation_list_of_model\")\ndef no_response_model_annotation_list_of_model() -> List[User]:\n    return [\n        DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\"),\n        DBUser(name=\"Jane\", surname=\"Does\", password_hash=\"secret2\"),\n    ]\n\n\n@app.get(\"/no_response_model-annotation_forward_ref_list_of_model\")\ndef no_response_model_annotation_forward_ref_list_of_model() -> \"List[User]\":\n    return [\n        DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\"),\n        DBUser(name=\"Jane\", surname=\"Does\", password_hash=\"secret2\"),\n    ]\n\n\n@app.get(\n    \"/response_model_union-no_annotation-return_model1\",\n    response_model=Union[User, Item],\n)\ndef response_model_union_no_annotation_return_model1():\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\n    \"/response_model_union-no_annotation-return_model2\",\n    response_model=Union[User, Item],\n)\ndef response_model_union_no_annotation_return_model2():\n    return Item(name=\"Foo\", price=42.0)\n\n\n@app.get(\"/no_response_model-annotation_union-return_model1\")\ndef no_response_model_annotation_union_return_model1() -> Union[User, Item]:\n    return DBUser(name=\"John\", surname=\"Doe\", password_hash=\"secret\")\n\n\n@app.get(\"/no_response_model-annotation_union-return_model2\")\ndef no_response_model_annotation_union_return_model2() -> Union[User, Item]:\n    return Item(name=\"Foo\", price=42.0)\n\n\n@app.get(\"/no_response_model-annotation_response_class\")\ndef no_response_model_annotation_response_class() -> Response:\n    return Response(content=\"Foo\")\n\n\n@app.get(\"/no_response_model-annotation_json_response_class\")\ndef no_response_model_annotation_json_response_class() -> JSONResponse:\n    return JSONResponse(content={\"foo\": \"bar\"})\n\n\nclient = TestClient(app)\n\n\ndef test_no_response_model_no_annotation_return_model():\n    response = client.get(\"/no_response_model-no_annotation-return_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_no_response_model_no_annotation_return_dict():\n    response = client.get(\"/no_response_model-no_annotation-return_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_no_annotation_return_same_model():\n    response = client.get(\"/response_model-no_annotation-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_no_annotation_return_exact_dict():\n    response = client.get(\"/response_model-no_annotation-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_no_annotation_return_invalid_dict():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model-no_annotation-return_invalid_dict\")\n    assert \"missing\" in str(excinfo.value)\n\n\ndef test_response_model_no_annotation_return_invalid_model():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model-no_annotation-return_invalid_model\")\n    assert \"missing\" in str(excinfo.value)\n\n\ndef test_response_model_no_annotation_return_dict_with_extra_data():\n    response = client.get(\"/response_model-no_annotation-return_dict_with_extra_data\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_no_annotation_return_submodel_with_extra_data():\n    response = client.get(\n        \"/response_model-no_annotation-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_no_response_model_annotation_return_same_model():\n    response = client.get(\"/no_response_model-annotation-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_no_response_model_annotation_return_exact_dict():\n    response = client.get(\"/no_response_model-annotation-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_no_response_model_annotation_return_invalid_dict():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/no_response_model-annotation-return_invalid_dict\")\n    assert \"missing\" in str(excinfo.value)\n\n\ndef test_no_response_model_annotation_return_invalid_model():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/no_response_model-annotation-return_invalid_model\")\n    assert \"missing\" in str(excinfo.value)\n\n\ndef test_no_response_model_annotation_return_dict_with_extra_data():\n    response = client.get(\"/no_response_model-annotation-return_dict_with_extra_data\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_no_response_model_annotation_return_submodel_with_extra_data():\n    response = client.get(\n        \"/no_response_model-annotation-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_none_annotation_return_same_model():\n    response = client.get(\"/response_model_none-annotation-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_none_annotation_return_exact_dict():\n    response = client.get(\"/response_model_none-annotation-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_none_annotation_return_invalid_dict():\n    response = client.get(\"/response_model_none-annotation-return_invalid_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\"}\n\n\ndef test_response_model_none_annotation_return_invalid_model():\n    response = client.get(\"/response_model_none-annotation-return_invalid_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n\n\ndef test_response_model_none_annotation_return_dict_with_extra_data():\n    response = client.get(\"/response_model_none-annotation-return_dict_with_extra_data\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"password_hash\": \"secret\",\n    }\n\n\ndef test_response_model_none_annotation_return_submodel_with_extra_data():\n    response = client.get(\n        \"/response_model_none-annotation-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"password_hash\": \"secret\",\n    }\n\n\ndef test_response_model_model1_annotation_model2_return_same_model():\n    response = client.get(\"/response_model_model1-annotation_model2-return_same_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_model1_annotation_model2_return_exact_dict():\n    response = client.get(\"/response_model_model1-annotation_model2-return_exact_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_model1_annotation_model2_return_invalid_dict():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model_model1-annotation_model2-return_invalid_dict\")\n    assert \"missing\" in str(excinfo.value)\n\n\ndef test_response_model_model1_annotation_model2_return_invalid_model():\n    with pytest.raises(ResponseValidationError) as excinfo:\n        client.get(\"/response_model_model1-annotation_model2-return_invalid_model\")\n    assert \"missing\" in str(excinfo.value)\n\n\ndef test_response_model_model1_annotation_model2_return_dict_with_extra_data():\n    response = client.get(\n        \"/response_model_model1-annotation_model2-return_dict_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_model1_annotation_model2_return_submodel_with_extra_data():\n    response = client.get(\n        \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_filtering_model_annotation_submodel_return_submodel():\n    response = client.get(\n        \"/response_model_filtering_model-annotation_submodel-return_submodel\"\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_list_of_model_no_annotation():\n    response = client.get(\"/response_model_list_of_model-no_annotation\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"John\", \"surname\": \"Doe\"},\n        {\"name\": \"Jane\", \"surname\": \"Does\"},\n    ]\n\n\ndef test_no_response_model_annotation_list_of_model():\n    response = client.get(\"/no_response_model-annotation_list_of_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"John\", \"surname\": \"Doe\"},\n        {\"name\": \"Jane\", \"surname\": \"Does\"},\n    ]\n\n\ndef test_no_response_model_annotation_forward_ref_list_of_model():\n    response = client.get(\"/no_response_model-annotation_forward_ref_list_of_model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"John\", \"surname\": \"Doe\"},\n        {\"name\": \"Jane\", \"surname\": \"Does\"},\n    ]\n\n\ndef test_response_model_union_no_annotation_return_model1():\n    response = client.get(\"/response_model_union-no_annotation-return_model1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_response_model_union_no_annotation_return_model2():\n    response = client.get(\"/response_model_union-no_annotation-return_model2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n\n\ndef test_no_response_model_annotation_union_return_model1():\n    response = client.get(\"/no_response_model-annotation_union-return_model1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n\n\ndef test_no_response_model_annotation_union_return_model2():\n    response = client.get(\"/no_response_model-annotation_union-return_model2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n\n\ndef test_no_response_model_annotation_return_class():\n    response = client.get(\"/no_response_model-annotation_response_class\")\n    assert response.status_code == 200, response.text\n    assert response.text == \"Foo\"\n\n\ndef test_no_response_model_annotation_json_response_class():\n    response = client.get(\"/no_response_model-annotation_json_response_class\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": \"bar\"}\n\n\ndef test_invalid_response_model_field():\n    app = FastAPI()\n    with pytest.raises(FastAPIError) as e:\n\n        @app.get(\"/\")\n        def read_root() -> Union[Response, None]:\n            return Response(content=\"Foo\")  # pragma: no cover\n\n    assert \"valid Pydantic field type\" in e.value.args[0]\n    assert \"parameter response_model=None\" in e.value.args[0]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/no_response_model-no_annotation-return_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model No Annotation Return Model\",\n                    \"operationId\": \"no_response_model_no_annotation_return_model_no_response_model_no_annotation_return_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-no_annotation-return_dict\": {\n                \"get\": {\n                    \"summary\": \"No Response Model No Annotation Return Dict\",\n                    \"operationId\": \"no_response_model_no_annotation_return_dict_no_response_model_no_annotation_return_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Same Model\",\n                    \"operationId\": \"response_model_no_annotation_return_same_model_response_model_no_annotation_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Exact Dict\",\n                    \"operationId\": \"response_model_no_annotation_return_exact_dict_response_model_no_annotation_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Invalid Dict\",\n                    \"operationId\": \"response_model_no_annotation_return_invalid_dict_response_model_no_annotation_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Invalid Model\",\n                    \"operationId\": \"response_model_no_annotation_return_invalid_model_response_model_no_annotation_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Dict With Extra Data\",\n                    \"operationId\": \"response_model_no_annotation_return_dict_with_extra_data_response_model_no_annotation_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model-no_annotation-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model No Annotation Return Submodel With Extra Data\",\n                    \"operationId\": \"response_model_no_annotation_return_submodel_with_extra_data_response_model_no_annotation_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Same Model\",\n                    \"operationId\": \"no_response_model_annotation_return_same_model_no_response_model_annotation_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Exact Dict\",\n                    \"operationId\": \"no_response_model_annotation_return_exact_dict_no_response_model_annotation_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Invalid Dict\",\n                    \"operationId\": \"no_response_model_annotation_return_invalid_dict_no_response_model_annotation_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Invalid Model\",\n                    \"operationId\": \"no_response_model_annotation_return_invalid_model_no_response_model_annotation_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Dict With Extra Data\",\n                    \"operationId\": \"no_response_model_annotation_return_dict_with_extra_data_no_response_model_annotation_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Return Submodel With Extra Data\",\n                    \"operationId\": \"no_response_model_annotation_return_submodel_with_extra_data_no_response_model_annotation_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Same Model\",\n                    \"operationId\": \"response_model_none_annotation_return_same_model_response_model_none_annotation_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Exact Dict\",\n                    \"operationId\": \"response_model_none_annotation_return_exact_dict_response_model_none_annotation_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Invalid Dict\",\n                    \"operationId\": \"response_model_none_annotation_return_invalid_dict_response_model_none_annotation_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Invalid Model\",\n                    \"operationId\": \"response_model_none_annotation_return_invalid_model_response_model_none_annotation_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Dict With Extra Data\",\n                    \"operationId\": \"response_model_none_annotation_return_dict_with_extra_data_response_model_none_annotation_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_none-annotation-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model None Annotation Return Submodel With Extra Data\",\n                    \"operationId\": \"response_model_none_annotation_return_submodel_with_extra_data_response_model_none_annotation_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_same_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Same Model\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_same_model_response_model_model1_annotation_model2_return_same_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_exact_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Exact Dict\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_exact_dict_response_model_model1_annotation_model2_return_exact_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_invalid_dict\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Invalid Dict\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_invalid_dict_response_model_model1_annotation_model2_return_invalid_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_invalid_model\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Invalid Model\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_invalid_model_response_model_model1_annotation_model2_return_invalid_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_dict_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Dict With Extra Data\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_dict_with_extra_data_response_model_model1_annotation_model2_return_dict_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\": {\n                \"get\": {\n                    \"summary\": \"Response Model Model1 Annotation Model2 Return Submodel With Extra Data\",\n                    \"operationId\": \"response_model_model1_annotation_model2_return_submodel_with_extra_data_response_model_model1_annotation_model2_return_submodel_with_extra_data_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_filtering_model-annotation_submodel-return_submodel\": {\n                \"get\": {\n                    \"summary\": \"Response Model Filtering Model Annotation Submodel Return Submodel\",\n                    \"operationId\": \"response_model_filtering_model_annotation_submodel_return_submodel_response_model_filtering_model_annotation_submodel_return_submodel_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_list_of_model-no_annotation\": {\n                \"get\": {\n                    \"summary\": \"Response Model List Of Model No Annotation\",\n                    \"operationId\": \"response_model_list_of_model_no_annotation_response_model_list_of_model_no_annotation_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Response Model List Of Model No Annotation Response Model List Of Model No Annotation Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_list_of_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation List Of Model\",\n                    \"operationId\": \"no_response_model_annotation_list_of_model_no_response_model_annotation_list_of_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation List Of Model No Response Model Annotation List Of Model Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_forward_ref_list_of_model\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Forward Ref List Of Model\",\n                    \"operationId\": \"no_response_model_annotation_forward_ref_list_of_model_no_response_model_annotation_forward_ref_list_of_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation Forward Ref List Of Model No Response Model Annotation Forward Ref List Of Model Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_union-no_annotation-return_model1\": {\n                \"get\": {\n                    \"summary\": \"Response Model Union No Annotation Return Model1\",\n                    \"operationId\": \"response_model_union_no_annotation_return_model1_response_model_union_no_annotation_return_model1_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Response Model Union No Annotation Return Model1 Response Model Union No Annotation Return Model1 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/response_model_union-no_annotation-return_model2\": {\n                \"get\": {\n                    \"summary\": \"Response Model Union No Annotation Return Model2\",\n                    \"operationId\": \"response_model_union_no_annotation_return_model2_response_model_union_no_annotation_return_model2_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Response Model Union No Annotation Return Model2 Response Model Union No Annotation Return Model2 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_union-return_model1\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Union Return Model1\",\n                    \"operationId\": \"no_response_model_annotation_union_return_model1_no_response_model_annotation_union_return_model1_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation Union Return Model1 No Response Model Annotation Union Return Model1 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_union-return_model2\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Union Return Model2\",\n                    \"operationId\": \"no_response_model_annotation_union_return_model2_no_response_model_annotation_union_return_model2_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Response Model Annotation Union Return Model2 No Response Model Annotation Union Return Model2 Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/User\"},\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_response_class\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Response Class\",\n                    \"operationId\": \"no_response_model_annotation_response_class_no_response_model_annotation_response_class_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/no_response_model-annotation_json_response_class\": {\n                \"get\": {\n                    \"summary\": \"No Response Model Annotation Json Response Class\",\n                    \"operationId\": \"no_response_model_annotation_json_response_class_no_response_model_annotation_json_response_class_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"name\", \"surname\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"surname\": {\"title\": \"Surname\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_security_openid_connect.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security.open_id_connect_url import OpenIdConnect\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noid = OpenIdConnect(openIdConnectUrl=\"/openid\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(oid)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n\n\ndef test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}\n\n\ndef test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OpenIdConnect\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OpenIdConnect\": {\n                    \"type\": \"openIdConnect\",\n                    \"openIdConnectUrl\": \"/openid\",\n                }\n            }\n        },\n    }\n", "tests/test_union_body.py": "from typing import Optional, Union\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: Optional[str] = None\n\n\nclass OtherItem(BaseModel):\n    price: int\n\n\n@app.post(\"/items/\")\ndef save_union_body(item: Union[OtherItem, Item]):\n    return {\"item\": item}\n\n\nclient = TestClient(app)\n\n\ndef test_post_other_item():\n    response = client.post(\"/items/\", json={\"price\": 100})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"price\": 100}}\n\n\ndef test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Union Body\",\n                    \"operationId\": \"save_union_body_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"anyOf\": [\n                                        {\"$ref\": \"#/components/schemas/OtherItem\"},\n                                        {\"$ref\": \"#/components/schemas/Item\"},\n                                    ],\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"OtherItem\": {\n                    \"title\": \"OtherItem\",\n                    \"required\": [\"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"price\": {\"title\": \"Price\", \"type\": \"integer\"}},\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": IsDict(\n                        {\n                            \"name\": {\n                                \"title\": \"Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        }\n                    )\n                    | IsDict(\n                        # TODO: remove when deprecating Pydantic v1\n                        {\"name\": {\"title\": \"Name\", \"type\": \"string\"}}\n                    ),\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_forms_from_non_typing_sequences.py": "from fastapi import FastAPI, Form\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.post(\"/form/python-list\")\ndef post_form_param_list(items: list = Form()):\n    return items\n\n\n@app.post(\"/form/python-set\")\ndef post_form_param_set(items: set = Form()):\n    return items\n\n\n@app.post(\"/form/python-tuple\")\ndef post_form_param_tuple(items: tuple = Form()):\n    return items\n\n\nclient = TestClient(app)\n\n\ndef test_python_list_param_as_form():\n    response = client.post(\n        \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"first\", \"second\", \"third\"]\n\n\ndef test_python_set_param_as_form():\n    response = client.post(\n        \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200, response.text\n    assert set(response.json()) == {\"first\", \"second\", \"third\"}\n\n\ndef test_python_tuple_param_as_form():\n    response = client.post(\n        \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"first\", \"second\", \"third\"]\n", "tests/test_application.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/api_route\", 200, {\"message\": \"Hello World\"}),\n        (\"/non_decorated_route\", 200, {\"message\": \"Hello World\"}),\n        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n    ],\n)\ndef test_get_path(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"swagger-ui-dist\" in response.text\n    assert (\n        \"oauth2RedirectUrl: window.location.origin + '/docs/oauth2-redirect'\"\n        in response.text\n    )\n\n\ndef test_swagger_ui_oauth2_redirect():\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n\n\ndef test_redoc():\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"redoc@next\" in response.text\n\n\ndef test_enum_status_code_response():\n    response = client.get(\"/enum-status-code\")\n    assert response.status_code == 201, response.text\n    assert response.json() == \"foo bar\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/api_route\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Non Operation\",\n                    \"operationId\": \"non_operation_api_route_get\",\n                }\n            },\n            \"/non_decorated_route\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Non Decorated Route\",\n                    \"operationId\": \"non_decorated_route_non_decorated_route_get\",\n                }\n            },\n            \"/text\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get Text\",\n                    \"operationId\": \"get_text_text_get\",\n                }\n            },\n            \"/path/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Id\",\n                    \"operationId\": \"get_id_path__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/str/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Str Id\",\n                    \"operationId\": \"get_str_id_path_str__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Int Id\",\n                    \"operationId\": \"get_int_id_path_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/float/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Float Id\",\n                    \"operationId\": \"get_float_id_path_float__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"number\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/bool/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Bool Id\",\n                    \"operationId\": \"get_bool_id_path_bool__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"boolean\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Id\",\n                    \"operationId\": \"get_path_param_id_path_param__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Item Id\",\n                                }\n                            )\n                            # TODO: remove when deprecating Pydantic v1\n                            | IsDict({\"title\": \"Item Id\", \"type\": \"string\"}),\n                        }\n                    ],\n                }\n            },\n            \"/path/param-minlength/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Min Length\",\n                    \"operationId\": \"get_path_param_min_length_path_param_minlength__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"minLength\": 3,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-maxlength/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Max Length\",\n                    \"operationId\": \"get_path_param_max_length_path_param_maxlength__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maxLength\": 3,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-min_maxlength/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Min Max Length\",\n                    \"operationId\": \"get_path_param_min_max_length_path_param_min_maxlength__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maxLength\": 3,\n                                \"minLength\": 2,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-gt/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Gt\",\n                    \"operationId\": \"get_path_param_gt_path_param_gt__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMinimum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-gt0/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Gt0\",\n                    \"operationId\": \"get_path_param_gt0_path_param_gt0__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMinimum\": 0.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-ge/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Ge\",\n                    \"operationId\": \"get_path_param_ge_path_param_ge__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"minimum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt\",\n                    \"operationId\": \"get_path_param_lt_path_param_lt__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt0/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt0\",\n                    \"operationId\": \"get_path_param_lt0_path_param_lt0__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 0.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le\",\n                    \"operationId\": \"get_path_param_le_path_param_le__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt-gt/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt Gt\",\n                    \"operationId\": \"get_path_param_lt_gt_path_param_lt_gt__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"exclusiveMinimum\": 1.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le-ge/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le Ge\",\n                    \"operationId\": \"get_path_param_le_ge_path_param_le_ge__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"minimum\": 1.0,\n                                \"type\": \"number\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt Int\",\n                    \"operationId\": \"get_path_param_lt_int_path_param_lt_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-gt-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Gt Int\",\n                    \"operationId\": \"get_path_param_gt_int_path_param_gt_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMinimum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le Int\",\n                    \"operationId\": \"get_path_param_le_int_path_param_le_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-ge-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Ge Int\",\n                    \"operationId\": \"get_path_param_ge_int_path_param_ge_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"minimum\": 3.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-lt-gt-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Lt Gt Int\",\n                    \"operationId\": \"get_path_param_lt_gt_int_path_param_lt_gt_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"exclusiveMaximum\": 3.0,\n                                \"exclusiveMinimum\": 1.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/path/param-le-ge-int/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Path Param Le Ge Int\",\n                    \"operationId\": \"get_path_param_le_ge_int_path_param_le_ge_int__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"maximum\": 3.0,\n                                \"minimum\": 1.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/query\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query\",\n                    \"operationId\": \"get_query_query_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/optional\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Optional\",\n                    \"operationId\": \"get_query_optional_query_optional_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/int\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Type\",\n                    \"operationId\": \"get_query_type_query_int_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\", \"type\": \"integer\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/int/optional\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Type Optional\",\n                    \"operationId\": \"get_query_type_optional_query_int_optional_get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Query\",\n                                }\n                            )\n                            # TODO: remove when deprecating Pydantic v1\n                            | IsDict({\"title\": \"Query\", \"type\": \"integer\"}),\n                        }\n                    ],\n                }\n            },\n            \"/query/int/default\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Type Int Default\",\n                    \"operationId\": \"get_query_type_int_default_query_int_default_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Query\",\n                                \"type\": \"integer\",\n                                \"default\": 10,\n                            },\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/param\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Param\",\n                    \"operationId\": \"get_query_param_query_param_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/param-required\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Param Required\",\n                    \"operationId\": \"get_query_param_required_query_param_required_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/query/param-required/int\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Query Param Required Type\",\n                    \"operationId\": \"get_query_param_required_type_query_param_required_int_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Query\", \"type\": \"integer\"},\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            },\n            \"/enum-status-code\": {\n                \"get\": {\n                    \"responses\": {\n                        \"201\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"Get Enum Status Code\",\n                    \"operationId\": \"get_enum_status_code_enum_status_code_get\",\n                }\n            },\n            \"/query/frozenset\": {\n                \"get\": {\n                    \"summary\": \"Get Query Type Frozenset\",\n                    \"operationId\": \"get_query_type_frozenset_query_frozenset_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Query\",\n                                \"uniqueItems\": True,\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                            },\n                            \"name\": \"query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query/list\": {\n                \"get\": {\n                    \"summary\": \"Get Query List\",\n                    \"operationId\": \"get_query_list_query_list_get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"device_ids\",\n                            \"in\": \"query\",\n                            \"required\": True,\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                                \"title\": \"Device Ids\",\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\"type\": \"integer\"},\n                                        \"title\": \"Response Get Query List Query List Get\",\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query/list-default\": {\n                \"get\": {\n                    \"summary\": \"Get Query List Default\",\n                    \"operationId\": \"get_query_list_default_query_list_default_get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"device_ids\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": {\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                                \"default\": [],\n                                \"title\": \"Device Ids\",\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\"type\": \"integer\"},\n                                        \"title\": \"Response Get Query List Default Query List Default Get\",\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_dependency_contextvars.py": "from contextvars import ContextVar\nfrom typing import Any, Awaitable, Callable, Dict, Optional\n\nfrom fastapi import Depends, FastAPI, Request, Response\nfrom fastapi.testclient import TestClient\n\nlegacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n    \"legacy_request_state_context_var\", default=None\n)\n\napp = FastAPI()\n\n\nasync def set_up_request_state_dependency():\n    request_state = {\"user\": \"deadpond\"}\n    contextvar_token = legacy_request_state_context_var.set(request_state)\n    yield request_state\n    legacy_request_state_context_var.reset(contextvar_token)\n\n\n@app.middleware(\"http\")\nasync def custom_middleware(\n    request: Request, call_next: Callable[[Request], Awaitable[Response]]\n):\n    response = await call_next(request)\n    response.headers[\"custom\"] = \"foo\"\n    return response\n\n\n@app.get(\"/user\", dependencies=[Depends(set_up_request_state_dependency)])\ndef get_user():\n    request_state = legacy_request_state_context_var.get()\n    assert request_state\n    return request_state[\"user\"]\n\n\nclient = TestClient(app)\n\n\ndef test_dependency_contextvars():\n    \"\"\"\n    Check that custom middlewares don't affect the contextvar context for dependencies.\n\n    The code before yield and the code after yield should be run in the same contextvar\n    context, so that request_state_context_var.reset(contextvar_token).\n\n    If they are run in a different context, that raises an error.\n    \"\"\"\n    response = client.get(\"/user\")\n    assert response.json() == \"deadpond\"\n    assert response.headers[\"custom\"] == \"foo\"\n", "tests/test_security_api_key_query_optional.py": "from typing import Optional\n\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyQuery\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyQuery(name=\"key\", auto_error=False)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: Optional[str] = Security(api_key)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_api_key():\n    response = client.get(\"/users/me?key=secret\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyQuery\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyQuery\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"query\"}\n            }\n        },\n    }\n", "tests/test_additional_responses_bad.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/a\", responses={\"hello\": {\"description\": \"Not a valid additional response\"}})\nasync def a():\n    pass  # pragma: no cover\n\n\nopenapi_schema = {\n    \"openapi\": \"3.1.0\",\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"paths\": {\n        \"/a\": {\n            \"get\": {\n                \"responses\": {\n                    # this is how one would imagine the openapi schema to be\n                    # but since the key is not valid, openapi.utils.get_openapi will raise ValueError\n                    \"hello\": {\"description\": \"Not a valid additional response\"},\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    },\n                },\n                \"summary\": \"A\",\n                \"operationId\": \"a_a_get\",\n            }\n        }\n    },\n}\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    with pytest.raises(ValueError):\n        client.get(\"/openapi.json\")\n", "tests/test_security_http_basic_optional.py": "from base64 import b64encode\nfrom typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBasic(auto_error=False)\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Optional[HTTPBasicCredentials] = Security(security)):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"username\": credentials.username, \"password\": credentials.password}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n\n\ndef test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }\n", "tests/test_required_noneable.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI, Query\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/query\")\ndef read_query(q: Union[str, None]):\n    return q\n\n\n@app.get(\"/explicit-query\")\ndef read_explicit_query(q: Union[str, None] = Query()):\n    return q\n\n\n@app.post(\"/body-embed\")\ndef send_body_embed(b: Union[str, None] = Body(embed=True)):\n    return b\n\n\nclient = TestClient(app)\n\n\ndef test_required_nonable_query_invalid():\n    response = client.get(\"/query\")\n    assert response.status_code == 422\n\n\ndef test_required_noneable_query_value():\n    response = client.get(\"/query\", params={\"q\": \"foo\"})\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n\n\ndef test_required_nonable_explicit_query_invalid():\n    response = client.get(\"/explicit-query\")\n    assert response.status_code == 422\n\n\ndef test_required_nonable_explicit_query_value():\n    response = client.get(\"/explicit-query\", params={\"q\": \"foo\"})\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n\n\ndef test_required_nonable_body_embed_no_content():\n    response = client.post(\"/body-embed\")\n    assert response.status_code == 422\n\n\ndef test_required_nonable_body_embed_invalid():\n    response = client.post(\"/body-embed\", json={\"invalid\": \"invalid\"})\n    assert response.status_code == 422\n\n\ndef test_required_noneable_body_embed_value():\n    response = client.post(\"/body-embed\", json={\"b\": \"foo\"})\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n", "tests/test_additional_responses_router.py": "from fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\n\nclass ResponseModel(BaseModel):\n    message: str\n\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/a\", responses={501: {\"description\": \"Error 1\"}})\nasync def a():\n    return \"a\"\n\n\n@router.get(\n    \"/b\",\n    responses={\n        502: {\"description\": \"Error 2\"},\n        \"4XX\": {\"description\": \"Error with range, upper\"},\n    },\n)\nasync def b():\n    return \"b\"\n\n\n@router.get(\n    \"/c\",\n    responses={\n        \"400\": {\"description\": \"Error with str\"},\n        \"5xx\": {\"description\": \"Error with range, lower\"},\n        \"default\": {\"description\": \"A default response\"},\n    },\n)\nasync def c():\n    return \"c\"\n\n\n@router.get(\n    \"/d\",\n    responses={\n        \"400\": {\"description\": \"Error with str\"},\n        \"5XX\": {\"model\": ResponseModel},\n        \"default\": {\"model\": ResponseModel},\n    },\n)\nasync def d():\n    return \"d\"\n\n\napp.include_router(router)\n\n\nclient = TestClient(app)\n\n\ndef test_a():\n    response = client.get(\"/a\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"a\"\n\n\ndef test_b():\n    response = client.get(\"/b\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"b\"\n\n\ndef test_c():\n    response = client.get(\"/c\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"c\"\n\n\ndef test_d():\n    response = client.get(\"/d\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"d\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"501\": {\"description\": \"Error 1\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"502\": {\"description\": \"Error 2\"},\n                        \"4XX\": {\"description\": \"Error with range, upper\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n            \"/c\": {\n                \"get\": {\n                    \"responses\": {\n                        \"400\": {\"description\": \"Error with str\"},\n                        \"5XX\": {\"description\": \"Error with range, lower\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"default\": {\"description\": \"A default response\"},\n                    },\n                    \"summary\": \"C\",\n                    \"operationId\": \"c_c_get\",\n                }\n            },\n            \"/d\": {\n                \"get\": {\n                    \"responses\": {\n                        \"400\": {\"description\": \"Error with str\"},\n                        \"5XX\": {\n                            \"description\": \"Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseModel\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"default\": {\n                            \"description\": \"Default Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseModel\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"D\",\n                    \"operationId\": \"d_d_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ResponseModel\": {\n                    \"title\": \"ResponseModel\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                }\n            }\n        },\n    }\n", "tests/test_router_events.py": "from contextlib import asynccontextmanager\nfrom typing import AsyncGenerator, Dict\n\nimport pytest\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\n\nclass State(BaseModel):\n    app_startup: bool = False\n    app_shutdown: bool = False\n    router_startup: bool = False\n    router_shutdown: bool = False\n    sub_router_startup: bool = False\n    sub_router_shutdown: bool = False\n\n\n@pytest.fixture\ndef state() -> State:\n    return State()\n\n\n@pytest.mark.filterwarnings(\n    r\"ignore:\\s*on_event is deprecated, use lifespan event handlers instead.*:DeprecationWarning\"\n)\ndef test_router_events(state: State) -> None:\n    app = FastAPI()\n\n    @app.get(\"/\")\n    def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}\n\n    @app.on_event(\"startup\")\n    def app_startup() -> None:\n        state.app_startup = True\n\n    @app.on_event(\"shutdown\")\n    def app_shutdown() -> None:\n        state.app_shutdown = True\n\n    router = APIRouter()\n\n    @router.on_event(\"startup\")\n    def router_startup() -> None:\n        state.router_startup = True\n\n    @router.on_event(\"shutdown\")\n    def router_shutdown() -> None:\n        state.router_shutdown = True\n\n    sub_router = APIRouter()\n\n    @sub_router.on_event(\"startup\")\n    def sub_router_startup() -> None:\n        state.sub_router_startup = True\n\n    @sub_router.on_event(\"shutdown\")\n    def sub_router_shutdown() -> None:\n        state.sub_router_shutdown = True\n\n    router.include_router(sub_router)\n    app.include_router(router)\n\n    assert state.app_startup is False\n    assert state.router_startup is False\n    assert state.sub_router_startup is False\n    assert state.app_shutdown is False\n    assert state.router_shutdown is False\n    assert state.sub_router_shutdown is False\n    with TestClient(app) as client:\n        assert state.app_startup is True\n        assert state.router_startup is True\n        assert state.sub_router_startup is True\n        assert state.app_shutdown is False\n        assert state.router_shutdown is False\n        assert state.sub_router_shutdown is False\n        response = client.get(\"/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"Hello World\"}\n    assert state.app_startup is True\n    assert state.router_startup is True\n    assert state.sub_router_startup is True\n    assert state.app_shutdown is True\n    assert state.router_shutdown is True\n    assert state.sub_router_shutdown is True\n\n\ndef test_app_lifespan_state(state: State) -> None:\n    @asynccontextmanager\n    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n        state.app_startup = True\n        yield\n        state.app_shutdown = True\n\n    app = FastAPI(lifespan=lifespan)\n\n    @app.get(\"/\")\n    def main() -> Dict[str, str]:\n        return {\"message\": \"Hello World\"}\n\n    assert state.app_startup is False\n    assert state.app_shutdown is False\n    with TestClient(app) as client:\n        assert state.app_startup is True\n        assert state.app_shutdown is False\n        response = client.get(\"/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"Hello World\"}\n    assert state.app_startup is True\n    assert state.app_shutdown is True\n", "tests/test_security_api_key_cookie_optional.py": "from typing import Optional\n\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyCookie\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyCookie(name=\"key\", auto_error=False)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: Optional[str] = Security(api_key)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    else:\n        return current_user\n\n\ndef test_security_api_key():\n    client = TestClient(app, cookies={\"key\": \"secret\"})\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    client = TestClient(app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyCookie\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyCookie\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"cookie\"}\n            }\n        },\n    }\n", "tests/test_response_code_no_body.py": "import typing\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"\n\n\nclass Error(BaseModel):\n    status: str\n    title: str\n\n\nclass JsonApiError(BaseModel):\n    errors: typing.List[Error]\n\n\n@app.get(\n    \"/a\",\n    status_code=204,\n    response_class=JsonApiResponse,\n    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n)\nasync def a():\n    pass\n\n\n@app.get(\"/b\", responses={204: {\"description\": \"No Content\"}})\nasync def b():\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_get_response():\n    response = client.get(\"/a\")\n    assert response.status_code == 204, response.text\n    assert \"content-length\" not in response.headers\n    assert response.content == b\"\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/vnd.api+json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"204\": {\"description\": \"Successful Response\"},\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"204\": {\"description\": \"No Content\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_serialize_response_model.py": "from typing import Dict, List, Optional\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom starlette.testclient import TestClient\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(alias=\"aliased_name\")\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\n\n@app.get(\"/items/valid\", response_model=Item)\ndef get_valid():\n    return Item(aliased_name=\"valid\", price=1.0)\n\n\n@app.get(\"/items/coerce\", response_model=Item)\ndef get_coerce():\n    return Item(aliased_name=\"coerce\", price=\"1.0\")\n\n\n@app.get(\"/items/validlist\", response_model=List[Item])\ndef get_validlist():\n    return [\n        Item(aliased_name=\"foo\"),\n        Item(aliased_name=\"bar\", price=1.0),\n        Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    ]\n\n\n@app.get(\"/items/validdict\", response_model=Dict[str, Item])\ndef get_validdict():\n    return {\n        \"k1\": Item(aliased_name=\"foo\"),\n        \"k2\": Item(aliased_name=\"bar\", price=1.0),\n        \"k3\": Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    }\n\n\n@app.get(\n    \"/items/valid-exclude-unset\", response_model=Item, response_model_exclude_unset=True\n)\ndef get_valid_exclude_unset():\n    return Item(aliased_name=\"valid\", price=1.0)\n\n\n@app.get(\n    \"/items/coerce-exclude-unset\",\n    response_model=Item,\n    response_model_exclude_unset=True,\n)\ndef get_coerce_exclude_unset():\n    return Item(aliased_name=\"coerce\", price=\"1.0\")\n\n\n@app.get(\n    \"/items/validlist-exclude-unset\",\n    response_model=List[Item],\n    response_model_exclude_unset=True,\n)\ndef get_validlist_exclude_unset():\n    return [\n        Item(aliased_name=\"foo\"),\n        Item(aliased_name=\"bar\", price=1.0),\n        Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    ]\n\n\n@app.get(\n    \"/items/validdict-exclude-unset\",\n    response_model=Dict[str, Item],\n    response_model_exclude_unset=True,\n)\ndef get_validdict_exclude_unset():\n    return {\n        \"k1\": Item(aliased_name=\"foo\"),\n        \"k2\": Item(aliased_name=\"bar\", price=1.0),\n        \"k3\": Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n    }\n\n\nclient = TestClient(app)\n\n\ndef test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n\n\ndef test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"aliased_name\": \"coerce\",\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }\n\n\ndef test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]\n\n\ndef test_validdict():\n    response = client.get(\"/items/validdict\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }\n\n\ndef test_valid_exclude_unset():\n    response = client.get(\"/items/valid-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0}\n\n\ndef test_coerce_exclude_unset():\n    response = client.get(\"/items/coerce-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"coerce\", \"price\": 1.0}\n\n\ndef test_validlist_exclude_unset():\n    response = client.get(\"/items/validlist-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\"},\n        {\"aliased_name\": \"bar\", \"price\": 1.0},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]\n\n\ndef test_validdict_exclude_unset():\n    response = client.get(\"/items/validdict-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\"},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }\n", "tests/test_tuples.py": "from typing import List, Tuple\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI, Form\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass ItemGroup(BaseModel):\n    items: List[Tuple[str, str]]\n\n\nclass Coordinate(BaseModel):\n    x: float\n    y: float\n\n\n@app.post(\"/model-with-tuple/\")\ndef post_model_with_tuple(item_group: ItemGroup):\n    return item_group\n\n\n@app.post(\"/tuple-of-models/\")\ndef post_tuple_of_models(square: Tuple[Coordinate, Coordinate]):\n    return square\n\n\n@app.post(\"/tuple-form/\")\ndef hello(values: Tuple[int, int] = Form()):\n    return values\n\n\nclient = TestClient(app)\n\n\ndef test_model_with_tuple_valid():\n    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\"]]}\n    response = client.post(\"/model-with-tuple/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\ndef test_model_with_tuple_invalid():\n    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\", \"too\", \"much\"]]}\n    response = client.post(\"/model-with-tuple/\", json=data)\n    assert response.status_code == 422, response.text\n\n    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\"]]}\n    response = client.post(\"/model-with-tuple/\", json=data)\n    assert response.status_code == 422, response.text\n\n\ndef test_tuple_with_model_valid():\n    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}]\n    response = client.post(\"/tuple-of-models/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\ndef test_tuple_with_model_invalid():\n    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}, {\"x\": 5, \"y\": 6}]\n    response = client.post(\"/tuple-of-models/\", json=data)\n    assert response.status_code == 422, response.text\n\n    data = [{\"x\": 1, \"y\": 2}]\n    response = client.post(\"/tuple-of-models/\", json=data)\n    assert response.status_code == 422, response.text\n\n\ndef test_tuple_form_valid():\n    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\")})\n    assert response.status_code == 200, response.text\n    assert response.json() == [1, 2]\n\n\ndef test_tuple_form_invalid():\n    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\", \"3\")})\n    assert response.status_code == 422, response.text\n\n    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\")})\n    assert response.status_code == 422, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/model-with-tuple/\": {\n                \"post\": {\n                    \"summary\": \"Post Model With Tuple\",\n                    \"operationId\": \"post_model_with_tuple_model_with_tuple__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemGroup\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/tuple-of-models/\": {\n                \"post\": {\n                    \"summary\": \"Post Tuple Of Models\",\n                    \"operationId\": \"post_tuple_of_models_tuple_of_models__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"title\": \"Square\",\n                                        \"maxItems\": 2,\n                                        \"minItems\": 2,\n                                        \"type\": \"array\",\n                                        \"prefixItems\": [\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"title\": \"Square\",\n                                        \"maxItems\": 2,\n                                        \"minItems\": 2,\n                                        \"type\": \"array\",\n                                        \"items\": [\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                            {\"$ref\": \"#/components/schemas/Coordinate\"},\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/tuple-form/\": {\n                \"post\": {\n                    \"summary\": \"Hello\",\n                    \"operationId\": \"hello_tuple_form__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_hello_tuple_form__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_hello_tuple_form__post\": {\n                    \"title\": \"Body_hello_tuple_form__post\",\n                    \"required\": [\"values\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"values\": IsDict(\n                            {\n                                \"title\": \"Values\",\n                                \"maxItems\": 2,\n                                \"minItems\": 2,\n                                \"type\": \"array\",\n                                \"prefixItems\": [\n                                    {\"type\": \"integer\"},\n                                    {\"type\": \"integer\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Values\",\n                                \"maxItems\": 2,\n                                \"minItems\": 2,\n                                \"type\": \"array\",\n                                \"items\": [{\"type\": \"integer\"}, {\"type\": \"integer\"}],\n                            }\n                        )\n                    },\n                },\n                \"Coordinate\": {\n                    \"title\": \"Coordinate\",\n                    \"required\": [\"x\", \"y\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"x\": {\"title\": \"X\", \"type\": \"number\"},\n                        \"y\": {\"title\": \"Y\", \"type\": \"number\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ItemGroup\": {\n                    \"title\": \"ItemGroup\",\n                    \"required\": [\"items\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": IsDict(\n                                {\n                                    \"maxItems\": 2,\n                                    \"minItems\": 2,\n                                    \"type\": \"array\",\n                                    \"prefixItems\": [\n                                        {\"type\": \"string\"},\n                                        {\"type\": \"string\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"maxItems\": 2,\n                                    \"minItems\": 2,\n                                    \"type\": \"array\",\n                                    \"items\": [{\"type\": \"string\"}, {\"type\": \"string\"}],\n                                }\n                            ),\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_security_http_basic_realm.py": "from base64 import b64encode\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBasic(realm=\"simple\")\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n\n\ndef test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n\n\ndef test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }\n", "tests/test_http_connection_injection.py": "from fastapi import Depends, FastAPI\nfrom fastapi.requests import HTTPConnection\nfrom fastapi.testclient import TestClient\nfrom starlette.websockets import WebSocket\n\napp = FastAPI()\napp.state.value = 42\n\n\nasync def extract_value_from_http_connection(conn: HTTPConnection):\n    return conn.app.state.value\n\n\n@app.get(\"/http\")\nasync def get_value_by_http(value: int = Depends(extract_value_from_http_connection)):\n    return value\n\n\n@app.websocket(\"/ws\")\nasync def get_value_by_ws(\n    websocket: WebSocket, value: int = Depends(extract_value_from_http_connection)\n):\n    await websocket.accept()\n    await websocket.send_json(value)\n    await websocket.close()\n\n\nclient = TestClient(app)\n\n\ndef test_value_extracting_by_http():\n    response = client.get(\"/http\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_value_extracting_by_ws():\n    with client.websocket_connect(\"/ws\") as websocket:\n        assert websocket.receive_json() == 42\n", "tests/test_security_oauth2_optional.py": "from typing import Optional\n\nfrom dirty_equals import IsDict\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nreusable_oauth2 = OAuth2(\n    flows={\n        \"password\": {\n            \"tokenUrl\": \"token\",\n            \"scopes\": {\"read:users\": \"Read the users\", \"write:users\": \"Create users\"},\n        }\n    },\n    auto_error=False,\n)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user\n\n\n@app.post(\"/login\")\ndef login(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n    return form_data\n\n\n@app.get(\"/users/me\")\ndef read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n\n\ndef test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}\n\n\ndef test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_strict_login_no_data():\n    response = client.post(\"/login\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_strict_login_no_grant_type():\n    response = client.post(\"/login\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_strict_login_incorrect_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"String should match pattern 'password'\",\n                    \"input\": \"incorrect\",\n                    \"ctx\": {\"pattern\": \"password\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": 'string does not match regex \"password\"',\n                    \"type\": \"value_error.str.regex\",\n                    \"ctx\": {\"pattern\": \"password\"},\n                }\n            ]\n        }\n    )\n\n\ndef test_strict_login_correct_data():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"grant_type\": \"password\",\n        \"username\": \"johndoe\",\n        \"password\": \"secret\",\n        \"scopes\": [],\n        \"client_id\": None,\n        \"client_secret\": None,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login_post\": {\n                    \"title\": \"Body_login_login_post\",\n                    \"required\": [\"grant_type\", \"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": {\n                            \"title\": \"Grant Type\",\n                            \"pattern\": \"password\",\n                            \"type\": \"string\",\n                        },\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"read:users\": \"Read the users\",\n                                \"write:users\": \"Create users\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_additional_responses_custom_model_in_callback.py": "from dirty_equals import IsDict\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, HttpUrl\nfrom starlette.responses import JSONResponse\n\n\nclass CustomModel(BaseModel):\n    a: int\n\n\napp = FastAPI()\n\ncallback_router = APIRouter(default_response_class=JSONResponse)\n\n\n@callback_router.get(\n    \"{$callback_url}/callback/\", responses={400: {\"model\": CustomModel}}\n)\ndef callback_route():\n    pass  # pragma: no cover\n\n\n@app.post(\"/\", callbacks=callback_router.routes)\ndef main_route(callback_url: HttpUrl):\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Main Route\",\n                    \"operationId\": \"main_route__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"Callback Url\",\n                                    \"minLength\": 1,\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                }\n                            )\n                            # TODO: remove when deprecating Pydantic v1\n                            | IsDict(\n                                {\n                                    \"title\": \"Callback Url\",\n                                    \"maxLength\": 2083,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                }\n                            ),\n                            \"name\": \"callback_url\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"callbacks\": {\n                        \"callback_route\": {\n                            \"{$callback_url}/callback/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback Route\",\n                                    \"operationId\": \"callback_route__callback_url__callback__get\",\n                                    \"responses\": {\n                                        \"400\": {\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/CustomModel\"\n                                                    }\n                                                }\n                                            },\n                                            \"description\": \"Bad Request\",\n                                        },\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"CustomModel\": {\n                    \"title\": \"CustomModel\",\n                    \"required\": [\"a\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"a\": {\"title\": \"A\", \"type\": \"integer\"}},\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_additional_response_extra.py": "from fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\n\nrouter = APIRouter()\n\nsub_router = APIRouter()\n\napp = FastAPI()\n\n\n@sub_router.get(\"/\")\ndef read_item():\n    return {\"id\": \"foo\"}\n\n\nrouter.include_router(sub_router, prefix=\"/items\")\n\napp.include_router(router)\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__get\",\n                }\n            }\n        },\n    }\n", "tests/test_dependency_cache.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\ncounter_holder = {\"counter\": 0}\n\n\nasync def dep_counter():\n    counter_holder[\"counter\"] += 1\n    return counter_holder[\"counter\"]\n\n\nasync def super_dep(count: int = Depends(dep_counter)):\n    return count\n\n\n@app.get(\"/counter/\")\nasync def get_counter(count: int = Depends(dep_counter)):\n    return {\"counter\": count}\n\n\n@app.get(\"/sub-counter/\")\nasync def get_sub_counter(\n    subcount: int = Depends(super_dep), count: int = Depends(dep_counter)\n):\n    return {\"counter\": count, \"subcounter\": subcount}\n\n\n@app.get(\"/sub-counter-no-cache/\")\nasync def get_sub_counter_no_cache(\n    subcount: int = Depends(super_dep),\n    count: int = Depends(dep_counter, use_cache=False),\n):\n    return {\"counter\": count, \"subcounter\": subcount}\n\n\n@app.get(\"/scope-counter\")\nasync def get_scope_counter(\n    count: int = Security(dep_counter),\n    scope_count_1: int = Security(dep_counter, scopes=[\"scope\"]),\n    scope_count_2: int = Security(dep_counter, scopes=[\"scope\"]),\n):\n    return {\n        \"counter\": count,\n        \"scope_counter_1\": scope_count_1,\n        \"scope_counter_2\": scope_count_2,\n    }\n\n\nclient = TestClient(app)\n\n\ndef test_normal_counter():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 1}\n    response = client.get(\"/counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 2}\n\n\ndef test_sub_counter():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/sub-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 1, \"subcounter\": 1}\n    response = client.get(\"/sub-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 2, \"subcounter\": 2}\n\n\ndef test_sub_counter_no_cache():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/sub-counter-no-cache/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 2, \"subcounter\": 1}\n    response = client.get(\"/sub-counter-no-cache/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 4, \"subcounter\": 3}\n\n\ndef test_security_cache():\n    counter_holder[\"counter\"] = 0\n    response = client.get(\"/scope-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 1, \"scope_counter_1\": 2, \"scope_counter_2\": 2}\n    response = client.get(\"/scope-counter/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"counter\": 3, \"scope_counter_1\": 4, \"scope_counter_2\": 4}\n", "tests/test_serialize_response.py": "from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\n\n@app.get(\"/items/valid\", response_model=Item)\ndef get_valid():\n    return {\"name\": \"valid\", \"price\": 1.0}\n\n\n@app.get(\"/items/coerce\", response_model=Item)\ndef get_coerce():\n    return {\"name\": \"coerce\", \"price\": \"1.0\"}\n\n\n@app.get(\"/items/validlist\", response_model=List[Item])\ndef get_validlist():\n    return [\n        {\"name\": \"foo\"},\n        {\"name\": \"bar\", \"price\": 1.0},\n        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]\n\n\nclient = TestClient(app)\n\n\ndef test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n\n\ndef test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}\n\n\ndef test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]\n", "tests/test_response_model_data_filter.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass UserDB(UserBase):\n    hashed_password: str\n\n\nclass PetDB(BaseModel):\n    name: str\n    owner: UserDB\n\n\nclass PetOut(BaseModel):\n    name: str\n    owner: UserBase\n\n\n@app.post(\"/users/\", response_model=UserBase)\nasync def create_user(user: UserCreate):\n    return user\n\n\n@app.get(\"/pets/{pet_id}\", response_model=PetOut)\nasync def read_pet(pet_id: int):\n    user = UserDB(\n        email=\"johndoe@example.com\",\n        hashed_password=\"secrethashed\",\n    )\n    pet = PetDB(name=\"Nibbler\", owner=user)\n    return pet\n\n\n@app.get(\"/pets/\", response_model=List[PetOut])\nasync def read_pets():\n    user = UserDB(\n        email=\"johndoe@example.com\",\n        hashed_password=\"secrethashed\",\n    )\n    pet1 = PetDB(name=\"Nibbler\", owner=user)\n    pet2 = PetDB(name=\"Zoidberg\", owner=user)\n    return [pet1, pet2]\n\n\nclient = TestClient(app)\n\n\ndef test_filter_top_level_model():\n    response = client.post(\n        \"/users\", json={\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    )\n    assert response.json() == {\"email\": \"johndoe@example.com\"}\n\n\ndef test_filter_second_level_model():\n    response = client.get(\"/pets/1\")\n    assert response.json() == {\n        \"name\": \"Nibbler\",\n        \"owner\": {\"email\": \"johndoe@example.com\"},\n    }\n\n\ndef test_list_of_models():\n    response = client.get(\"/pets/\")\n    assert response.json() == [\n        {\"name\": \"Nibbler\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n        {\"name\": \"Zoidberg\", \"owner\": {\"email\": \"johndoe@example.com\"}},\n    ]\n", "tests/test_repeated_dependency_schema.py": "from fastapi import Depends, FastAPI, Header, status\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\ndef get_header(*, someheader: str = Header()):\n    return someheader\n\n\ndef get_something_else(*, someheader: str = Depends(get_header)):\n    return f\"{someheader}123\"\n\n\n@app.get(\"/\")\ndef get_deps(dep1: str = Depends(get_header), dep2: str = Depends(get_something_else)):\n    return {\"dep1\": dep1, \"dep2\": dep2}\n\n\nclient = TestClient(app)\n\nschema = {\n    \"components\": {\n        \"schemas\": {\n            \"HTTPValidationError\": {\n                \"properties\": {\n                    \"detail\": {\n                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                    }\n                },\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n            },\n            \"ValidationError\": {\n                \"properties\": {\n                    \"loc\": {\n                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                    },\n                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                    \"type\": {\"title\": \"Error \" \"Type\", \"type\": \"string\"},\n                },\n                \"required\": [\"loc\", \"msg\", \"type\"],\n                \"title\": \"ValidationError\",\n                \"type\": \"object\",\n            },\n        }\n    },\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"openapi\": \"3.1.0\",\n    \"paths\": {\n        \"/\": {\n            \"get\": {\n                \"operationId\": \"get_deps__get\",\n                \"parameters\": [\n                    {\n                        \"in\": \"header\",\n                        \"name\": \"someheader\",\n                        \"required\": True,\n                        \"schema\": {\"title\": \"Someheader\", \"type\": \"string\"},\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                        \"description\": \"Successful \" \"Response\",\n                    },\n                    \"422\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                        \"description\": \"Validation \" \"Error\",\n                    },\n                },\n                \"summary\": \"Get Deps\",\n            }\n        }\n    },\n}\n\n\ndef test_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == status.HTTP_200_OK\n    actual_schema = response.json()\n    assert actual_schema == schema\n    assert (\n        len(actual_schema[\"paths\"][\"/\"][\"get\"][\"parameters\"]) == 1\n    )  # primary goal of this test\n\n\ndef test_response():\n    response = client.get(\"/\", headers={\"someheader\": \"hello\"})\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {\"dep1\": \"hello\", \"dep2\": \"hello123\"}\n", "tests/test_security_oauth2_optional_description.py": "from typing import Optional\n\nfrom dirty_equals import IsDict\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nreusable_oauth2 = OAuth2(\n    flows={\n        \"password\": {\n            \"tokenUrl\": \"token\",\n            \"scopes\": {\"read:users\": \"Read the users\", \"write:users\": \"Create users\"},\n        }\n    },\n    description=\"OAuth2 security scheme\",\n    auto_error=False,\n)\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n    if oauth_header is None:\n        return None\n    user = User(username=oauth_header)\n    return user\n\n\n@app.post(\"/login\")\ndef login(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n    return form_data\n\n\n@app.get(\"/users/me\")\ndef read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n    if current_user is None:\n        return {\"msg\": \"Create an account first\"}\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n\n\ndef test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}\n\n\ndef test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_strict_login_None():\n    response = client.post(\"/login\", data=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_strict_login_no_grant_type():\n    response = client.post(\"/login\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_strict_login_incorrect_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"String should match pattern 'password'\",\n                    \"input\": \"incorrect\",\n                    \"ctx\": {\"pattern\": \"password\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": 'string does not match regex \"password\"',\n                    \"type\": \"value_error.str.regex\",\n                    \"ctx\": {\"pattern\": \"password\"},\n                }\n            ]\n        }\n    )\n\n\ndef test_strict_login_correct_correct_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"grant_type\": \"password\",\n        \"username\": \"johndoe\",\n        \"password\": \"secret\",\n        \"scopes\": [],\n        \"client_id\": None,\n        \"client_secret\": None,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login_post\": {\n                    \"title\": \"Body_login_login_post\",\n                    \"required\": [\"grant_type\", \"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": {\n                            \"title\": \"Grant Type\",\n                            \"pattern\": \"password\",\n                            \"type\": \"string\",\n                        },\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"read:users\": \"Read the users\",\n                                \"write:users\": \"Create users\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                    \"description\": \"OAuth2 security scheme\",\n                }\n            },\n        },\n    }\n", "tests/test_extra_routes.py": "from typing import Optional\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n\n\n@app.api_route(\"/items/{item_id}\", methods=[\"GET\"])\ndef get_items(item_id: str):\n    return {\"item_id\": item_id}\n\n\ndef get_not_decorated(item_id: str):\n    return {\"item_id\": item_id}\n\n\napp.add_api_route(\"/items-not-decorated/{item_id}\", get_not_decorated)\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str, item: Item):\n    return {\"item_id\": item_id, \"item\": item}\n\n\n@app.head(\"/items/{item_id}\")\ndef head_item(item_id: str):\n    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})\n\n\n@app.options(\"/items/{item_id}\")\ndef options_item(item_id: str):\n    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})\n\n\n@app.patch(\"/items/{item_id}\")\ndef patch_item(item_id: str, item: Item):\n    return {\"item_id\": item_id, \"item\": item}\n\n\n@app.trace(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return JSONResponse(None, media_type=\"message/http\")\n\n\nclient = TestClient(app)\n\n\ndef test_get_api_route():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}\n\n\ndef test_get_api_route_not_decorated():\n    response = client.get(\"/items-not-decorated/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}\n\n\ndef test_delete():\n    response = client.request(\"DELETE\", \"/items/foo\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n\n\ndef test_head():\n    response = client.head(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n\n\ndef test_options():\n    response = client.options(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n\n\ndef test_patch():\n    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n\n\ndef test_trace():\n    response = client.request(\"trace\", \"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"message/http\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"delete\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Delete Item\",\n                    \"operationId\": \"delete_item_items__item_id__delete\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n                \"options\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Options Item\",\n                    \"operationId\": \"options_item_items__item_id__options\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"head\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Head Item\",\n                    \"operationId\": \"head_item_items__item_id__head\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"patch\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Patch Item\",\n                    \"operationId\": \"patch_item_items__item_id__patch\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n                \"trace\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Trace Item\",\n                    \"operationId\": \"trace_item_items__item_id__trace\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n            },\n            \"/items-not-decorated/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Get Not Decorated\",\n                    \"operationId\": \"get_not_decorated_items_not_decorated__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": IsDict(\n                            {\n                                \"title\": \"Price\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        # TODO: remove when deprecating Pydantic v1\n                        | IsDict({\"title\": \"Price\", \"type\": \"number\"}),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_ws_router.py": "import functools\n\nimport pytest\nfrom fastapi import (\n    APIRouter,\n    Depends,\n    FastAPI,\n    Header,\n    WebSocket,\n    WebSocketDisconnect,\n    status,\n)\nfrom fastapi.middleware import Middleware\nfrom fastapi.testclient import TestClient\n\nrouter = APIRouter()\nprefix_router = APIRouter()\nnative_prefix_route = APIRouter(prefix=\"/native\")\napp = FastAPI()\n\n\n@app.websocket_route(\"/\")\nasync def index(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, world!\")\n    await websocket.close()\n\n\n@router.websocket_route(\"/router\")\nasync def routerindex(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, router!\")\n    await websocket.close()\n\n\n@prefix_router.websocket_route(\"/\")\nasync def routerprefixindex(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, router with prefix!\")\n    await websocket.close()\n\n\n@router.websocket(\"/router2\")\nasync def routerindex2(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, router!\")\n    await websocket.close()\n\n\n@router.websocket(\"/router/{pathparam:path}\")\nasync def routerindexparams(websocket: WebSocket, pathparam: str, queryparam: str):\n    await websocket.accept()\n    await websocket.send_text(pathparam)\n    await websocket.send_text(queryparam)\n    await websocket.close()\n\n\nasync def ws_dependency():\n    return \"Socket Dependency\"\n\n\n@router.websocket(\"/router-ws-depends/\")\nasync def router_ws_decorator_depends(\n    websocket: WebSocket, data=Depends(ws_dependency)\n):\n    await websocket.accept()\n    await websocket.send_text(data)\n    await websocket.close()\n\n\n@native_prefix_route.websocket(\"/\")\nasync def router_native_prefix_ws(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello, router with native prefix!\")\n    await websocket.close()\n\n\nasync def ws_dependency_err():\n    raise NotImplementedError()\n\n\n@router.websocket(\"/depends-err/\")\nasync def router_ws_depends_err(websocket: WebSocket, data=Depends(ws_dependency_err)):\n    pass  # pragma: no cover\n\n\nasync def ws_dependency_validate(x_missing: str = Header()):\n    pass  # pragma: no cover\n\n\n@router.websocket(\"/depends-validate/\")\nasync def router_ws_depends_validate(\n    websocket: WebSocket, data=Depends(ws_dependency_validate)\n):\n    pass  # pragma: no cover\n\n\nclass CustomError(Exception):\n    pass\n\n\n@router.websocket(\"/custom_error/\")\nasync def router_ws_custom_error(websocket: WebSocket):\n    raise CustomError()\n\n\ndef make_app(app=None, **kwargs):\n    app = app or FastAPI(**kwargs)\n    app.include_router(router)\n    app.include_router(prefix_router, prefix=\"/prefix\")\n    app.include_router(native_prefix_route)\n    return app\n\n\napp = make_app(app)\n\n\ndef test_app():\n    client = TestClient(app)\n    with client.websocket_connect(\"/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, world!\"\n\n\ndef test_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router!\"\n\n\ndef test_prefix_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/prefix/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router with prefix!\"\n\n\ndef test_native_prefix_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/native/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router with native prefix!\"\n\n\ndef test_router2():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router2\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router!\"\n\n\ndef test_router_ws_depends():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n        assert websocket.receive_text() == \"Socket Dependency\"\n\n\ndef test_router_ws_depends_with_override():\n    client = TestClient(app)\n    app.dependency_overrides[ws_dependency] = lambda: \"Override\"  # noqa: E731\n    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n        assert websocket.receive_text() == \"Override\"\n\n\ndef test_router_with_params():\n    client = TestClient(app)\n    with client.websocket_connect(\n        \"/router/path/to/file?queryparam=a_query_param\"\n    ) as websocket:\n        data = websocket.receive_text()\n        assert data == \"path/to/file\"\n        data = websocket.receive_text()\n        assert data == \"a_query_param\"\n\n\ndef test_wrong_uri():\n    \"\"\"\n    Verify that a websocket connection to a non-existent endpoing returns in a shutdown\n    \"\"\"\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/no-router/\"):\n            pass  # pragma: no cover\n    assert e.value.code == status.WS_1000_NORMAL_CLOSURE\n\n\ndef websocket_middleware(middleware_func):\n    \"\"\"\n    Helper to create a Starlette pure websocket middleware\n    \"\"\"\n\n    def middleware_constructor(app):\n        @functools.wraps(app)\n        async def wrapped_app(scope, receive, send):\n            if scope[\"type\"] != \"websocket\":\n                return await app(scope, receive, send)  # pragma: no cover\n\n            async def call_next():\n                return await app(scope, receive, send)\n\n            websocket = WebSocket(scope, receive=receive, send=send)\n            return await middleware_func(websocket, call_next)\n\n        return wrapped_app\n\n    return middleware_constructor\n\n\ndef test_depend_validation():\n    \"\"\"\n    Verify that a validation in a dependency invokes the correct exception handler\n    \"\"\"\n    caught = []\n\n    @websocket_middleware\n    async def catcher(websocket, call_next):\n        try:\n            return await call_next()\n        except Exception as e:  # pragma: no cover\n            caught.append(e)\n            raise\n\n    myapp = make_app(middleware=[Middleware(catcher)])\n\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/depends-validate/\"):\n            pass  # pragma: no cover\n    # the validation error does produce a close message\n    assert e.value.code == status.WS_1008_POLICY_VIOLATION\n    # and no error is leaked\n    assert caught == []\n\n\ndef test_depend_err_middleware():\n    \"\"\"\n    Verify that it is possible to write custom WebSocket middleware to catch errors\n    \"\"\"\n\n    @websocket_middleware\n    async def errorhandler(websocket: WebSocket, call_next):\n        try:\n            return await call_next()\n        except Exception as e:\n            await websocket.close(code=status.WS_1006_ABNORMAL_CLOSURE, reason=repr(e))\n\n    myapp = make_app(middleware=[Middleware(errorhandler)])\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/depends-err/\"):\n            pass  # pragma: no cover\n    assert e.value.code == status.WS_1006_ABNORMAL_CLOSURE\n    assert \"NotImplementedError\" in e.value.reason\n\n\ndef test_depend_err_handler():\n    \"\"\"\n    Verify that it is possible to write custom WebSocket middleware to catch errors\n    \"\"\"\n\n    async def custom_handler(websocket: WebSocket, exc: CustomError) -> None:\n        await websocket.close(1002, \"foo\")\n\n    myapp = make_app(exception_handlers={CustomError: custom_handler})\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/custom_error/\"):\n            pass  # pragma: no cover\n    assert e.value.code == 1002\n    assert \"foo\" in e.value.reason\n", "tests/test_security_http_basic_realm_description.py": "from base64 import b64encode\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBasic(realm=\"simple\", description=\"HTTPBasic scheme\")\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n\n\ndef test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n\n\ndef test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPBasic\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"basic\",\n                    \"description\": \"HTTPBasic scheme\",\n                }\n            }\n        },\n    }\n", "tests/test_param_include_in_schema.py": "from typing import Optional\n\nimport pytest\nfrom fastapi import Cookie, FastAPI, Header, Path, Query\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/hidden_cookie\")\nasync def hidden_cookie(\n    hidden_cookie: Optional[str] = Cookie(default=None, include_in_schema=False),\n):\n    return {\"hidden_cookie\": hidden_cookie}\n\n\n@app.get(\"/hidden_header\")\nasync def hidden_header(\n    hidden_header: Optional[str] = Header(default=None, include_in_schema=False),\n):\n    return {\"hidden_header\": hidden_header}\n\n\n@app.get(\"/hidden_path/{hidden_path}\")\nasync def hidden_path(hidden_path: str = Path(include_in_schema=False)):\n    return {\"hidden_path\": hidden_path}\n\n\n@app.get(\"/hidden_query\")\nasync def hidden_query(\n    hidden_query: Optional[str] = Query(default=None, include_in_schema=False),\n):\n    return {\"hidden_query\": hidden_query}\n\n\nopenapi_schema = {\n    \"openapi\": \"3.1.0\",\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"paths\": {\n        \"/hidden_cookie\": {\n            \"get\": {\n                \"summary\": \"Hidden Cookie\",\n                \"operationId\": \"hidden_cookie_hidden_cookie_get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                    },\n                },\n            }\n        },\n        \"/hidden_header\": {\n            \"get\": {\n                \"summary\": \"Hidden Header\",\n                \"operationId\": \"hidden_header_hidden_header_get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                    },\n                },\n            }\n        },\n        \"/hidden_path/{hidden_path}\": {\n            \"get\": {\n                \"summary\": \"Hidden Path\",\n                \"operationId\": \"hidden_path_hidden_path__hidden_path__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                    },\n                },\n            }\n        },\n        \"/hidden_query\": {\n            \"get\": {\n                \"summary\": \"Hidden Query\",\n                \"operationId\": \"hidden_query_hidden_query_get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                    },\n                },\n            }\n        },\n    },\n    \"components\": {\n        \"schemas\": {\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                    }\n                },\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\"loc\", \"msg\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n                    },\n                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                },\n            },\n        }\n    },\n}\n\n\ndef test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == openapi_schema\n\n\n@pytest.mark.parametrize(\n    \"path,cookies,expected_status,expected_response\",\n    [\n        (\n            \"/hidden_cookie\",\n            {},\n            200,\n            {\"hidden_cookie\": None},\n        ),\n        (\n            \"/hidden_cookie\",\n            {\"hidden_cookie\": \"somevalue\"},\n            200,\n            {\"hidden_cookie\": \"somevalue\"},\n        ),\n    ],\n)\ndef test_hidden_cookie(path, cookies, expected_status, expected_response):\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\n            \"/hidden_header\",\n            {},\n            200,\n            {\"hidden_header\": None},\n        ),\n        (\n            \"/hidden_header\",\n            {\"Hidden-Header\": \"somevalue\"},\n            200,\n            {\"hidden_header\": \"somevalue\"},\n        ),\n    ],\n)\ndef test_hidden_header(path, headers, expected_status, expected_response):\n    client = TestClient(app)\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_hidden_path():\n    client = TestClient(app)\n    response = client.get(\"/hidden_path/hidden_path\")\n    assert response.status_code == 200\n    assert response.json() == {\"hidden_path\": \"hidden_path\"}\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/hidden_query\",\n            200,\n            {\"hidden_query\": None},\n        ),\n        (\n            \"/hidden_query?hidden_query=somevalue\",\n            200,\n            {\"hidden_query\": \"somevalue\"},\n        ),\n    ],\n)\ndef test_hidden_query(path, expected_status, expected_response):\n    client = TestClient(app)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n", "tests/test_include_router_defaults_overrides.py": "import warnings\n\nimport pytest\nfrom fastapi import APIRouter, Depends, FastAPI, Response\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\n\n\nclass ResponseLevel0(JSONResponse):\n    media_type = \"application/x-level-0\"\n\n\nclass ResponseLevel1(JSONResponse):\n    media_type = \"application/x-level-1\"\n\n\nclass ResponseLevel2(JSONResponse):\n    media_type = \"application/x-level-2\"\n\n\nclass ResponseLevel3(JSONResponse):\n    media_type = \"application/x-level-3\"\n\n\nclass ResponseLevel4(JSONResponse):\n    media_type = \"application/x-level-4\"\n\n\nclass ResponseLevel5(JSONResponse):\n    media_type = \"application/x-level-5\"\n\n\nasync def dep0(response: Response):\n    response.headers[\"x-level0\"] = \"True\"\n\n\nasync def dep1(response: Response):\n    response.headers[\"x-level1\"] = \"True\"\n\n\nasync def dep2(response: Response):\n    response.headers[\"x-level2\"] = \"True\"\n\n\nasync def dep3(response: Response):\n    response.headers[\"x-level3\"] = \"True\"\n\n\nasync def dep4(response: Response):\n    response.headers[\"x-level4\"] = \"True\"\n\n\nasync def dep5(response: Response):\n    response.headers[\"x-level5\"] = \"True\"\n\n\ncallback_router0 = APIRouter()\n\n\n@callback_router0.get(\"/\")\nasync def callback0(level0: str):\n    pass  # pragma: nocover\n\n\ncallback_router1 = APIRouter()\n\n\n@callback_router1.get(\"/\")\nasync def callback1(level1: str):\n    pass  # pragma: nocover\n\n\ncallback_router2 = APIRouter()\n\n\n@callback_router2.get(\"/\")\nasync def callback2(level2: str):\n    pass  # pragma: nocover\n\n\ncallback_router3 = APIRouter()\n\n\n@callback_router3.get(\"/\")\nasync def callback3(level3: str):\n    pass  # pragma: nocover\n\n\ncallback_router4 = APIRouter()\n\n\n@callback_router4.get(\"/\")\nasync def callback4(level4: str):\n    pass  # pragma: nocover\n\n\ncallback_router5 = APIRouter()\n\n\n@callback_router5.get(\"/\")\nasync def callback5(level5: str):\n    pass  # pragma: nocover\n\n\napp = FastAPI(\n    dependencies=[Depends(dep0)],\n    responses={\n        400: {\"description\": \"Client error level 0\"},\n        500: {\"description\": \"Server error level 0\"},\n    },\n    default_response_class=ResponseLevel0,\n    callbacks=callback_router0.routes,\n)\n\nrouter2_override = APIRouter(\n    prefix=\"/level2\",\n    tags=[\"level2a\", \"level2b\"],\n    dependencies=[Depends(dep2)],\n    responses={\n        402: {\"description\": \"Client error level 2\"},\n        502: {\"description\": \"Server error level 2\"},\n    },\n    default_response_class=ResponseLevel2,\n    callbacks=callback_router2.routes,\n    deprecated=True,\n)\nrouter2_default = APIRouter()\nrouter4_override = APIRouter(\n    prefix=\"/level4\",\n    tags=[\"level4a\", \"level4b\"],\n    dependencies=[Depends(dep4)],\n    responses={\n        404: {\"description\": \"Client error level 4\"},\n        504: {\"description\": \"Server error level 4\"},\n    },\n    default_response_class=ResponseLevel4,\n    callbacks=callback_router4.routes,\n    deprecated=True,\n)\nrouter4_default = APIRouter()\n\n\n@app.get(\n    \"/override1\",\n    tags=[\"path1a\", \"path1b\"],\n    responses={\n        401: {\"description\": \"Client error level 1\"},\n        501: {\"description\": \"Server error level 1\"},\n    },\n    deprecated=True,\n    callbacks=callback_router1.routes,\n    dependencies=[Depends(dep1)],\n    response_class=ResponseLevel1,\n)\nasync def path1_override(level1: str):\n    return level1\n\n\n@app.get(\"/default1\")\nasync def path1_default(level1: str):\n    return level1\n\n\n@router2_override.get(\n    \"/override3\",\n    tags=[\"path3a\", \"path3b\"],\n    responses={\n        403: {\"description\": \"Client error level 3\"},\n        503: {\"description\": \"Server error level 3\"},\n    },\n    deprecated=True,\n    callbacks=callback_router3.routes,\n    dependencies=[Depends(dep3)],\n    response_class=ResponseLevel3,\n)\nasync def path3_override_router2_override(level3: str):\n    return level3\n\n\n@router2_override.get(\"/default3\")\nasync def path3_default_router2_override(level3: str):\n    return level3\n\n\n@router2_default.get(\n    \"/override3\",\n    tags=[\"path3a\", \"path3b\"],\n    responses={\n        403: {\"description\": \"Client error level 3\"},\n        503: {\"description\": \"Server error level 3\"},\n    },\n    deprecated=True,\n    callbacks=callback_router3.routes,\n    dependencies=[Depends(dep3)],\n    response_class=ResponseLevel3,\n)\nasync def path3_override_router2_default(level3: str):\n    return level3\n\n\n@router2_default.get(\"/default3\")\nasync def path3_default_router2_default(level3: str):\n    return level3\n\n\n@router4_override.get(\n    \"/override5\",\n    tags=[\"path5a\", \"path5b\"],\n    responses={\n        405: {\"description\": \"Client error level 5\"},\n        505: {\"description\": \"Server error level 5\"},\n    },\n    deprecated=True,\n    callbacks=callback_router5.routes,\n    dependencies=[Depends(dep5)],\n    response_class=ResponseLevel5,\n)\nasync def path5_override_router4_override(level5: str):\n    return level5\n\n\n@router4_override.get(\n    \"/default5\",\n)\nasync def path5_default_router4_override(level5: str):\n    return level5\n\n\n@router4_default.get(\n    \"/override5\",\n    tags=[\"path5a\", \"path5b\"],\n    responses={\n        405: {\"description\": \"Client error level 5\"},\n        505: {\"description\": \"Server error level 5\"},\n    },\n    deprecated=True,\n    callbacks=callback_router5.routes,\n    dependencies=[Depends(dep5)],\n    response_class=ResponseLevel5,\n)\nasync def path5_override_router4_default(level5: str):\n    return level5\n\n\n@router4_default.get(\n    \"/default5\",\n)\nasync def path5_default_router4_default(level5: str):\n    return level5\n\n\nrouter2_override.include_router(\n    router4_override,\n    prefix=\"/level3\",\n    tags=[\"level3a\", \"level3b\"],\n    dependencies=[Depends(dep3)],\n    responses={\n        403: {\"description\": \"Client error level 3\"},\n        503: {\"description\": \"Server error level 3\"},\n    },\n    default_response_class=ResponseLevel3,\n    callbacks=callback_router3.routes,\n)\n\nrouter2_override.include_router(\n    router4_default,\n    prefix=\"/level3\",\n    tags=[\"level3a\", \"level3b\"],\n    dependencies=[Depends(dep3)],\n    responses={\n        403: {\"description\": \"Client error level 3\"},\n        503: {\"description\": \"Server error level 3\"},\n    },\n    default_response_class=ResponseLevel3,\n    callbacks=callback_router3.routes,\n)\n\nrouter2_override.include_router(router4_override)\n\nrouter2_override.include_router(router4_default)\n\nrouter2_default.include_router(\n    router4_override,\n    prefix=\"/level3\",\n    tags=[\"level3a\", \"level3b\"],\n    dependencies=[Depends(dep3)],\n    responses={\n        403: {\"description\": \"Client error level 3\"},\n        503: {\"description\": \"Server error level 3\"},\n    },\n    default_response_class=ResponseLevel3,\n    callbacks=callback_router3.routes,\n)\n\nrouter2_default.include_router(\n    router4_default,\n    prefix=\"/level3\",\n    tags=[\"level3a\", \"level3b\"],\n    dependencies=[Depends(dep3)],\n    responses={\n        403: {\"description\": \"Client error level 3\"},\n        503: {\"description\": \"Server error level 3\"},\n    },\n    default_response_class=ResponseLevel3,\n    callbacks=callback_router3.routes,\n)\n\nrouter2_default.include_router(router4_override)\n\nrouter2_default.include_router(router4_default)\n\n\napp.include_router(\n    router2_override,\n    prefix=\"/level1\",\n    tags=[\"level1a\", \"level1b\"],\n    dependencies=[Depends(dep1)],\n    responses={\n        401: {\"description\": \"Client error level 1\"},\n        501: {\"description\": \"Server error level 1\"},\n    },\n    default_response_class=ResponseLevel1,\n    callbacks=callback_router1.routes,\n)\n\napp.include_router(\n    router2_default,\n    prefix=\"/level1\",\n    tags=[\"level1a\", \"level1b\"],\n    dependencies=[Depends(dep1)],\n    responses={\n        401: {\"description\": \"Client error level 1\"},\n        501: {\"description\": \"Server error level 1\"},\n    },\n    default_response_class=ResponseLevel1,\n    callbacks=callback_router1.routes,\n)\n\napp.include_router(router2_override)\n\napp.include_router(router2_default)\n\nclient = TestClient(app)\n\n\ndef test_level1_override():\n    response = client.get(\"/override1?level1=foo\")\n    assert response.json() == \"foo\"\n    assert response.headers[\"content-type\"] == \"application/x-level-1\"\n    assert \"x-level0\" in response.headers\n    assert \"x-level1\" in response.headers\n    assert \"x-level2\" not in response.headers\n    assert \"x-level3\" not in response.headers\n    assert \"x-level4\" not in response.headers\n    assert \"x-level5\" not in response.headers\n\n\ndef test_level1_default():\n    response = client.get(\"/default1?level1=foo\")\n    assert response.json() == \"foo\"\n    assert response.headers[\"content-type\"] == \"application/x-level-0\"\n    assert \"x-level0\" in response.headers\n    assert \"x-level1\" not in response.headers\n    assert \"x-level2\" not in response.headers\n    assert \"x-level3\" not in response.headers\n    assert \"x-level4\" not in response.headers\n    assert \"x-level5\" not in response.headers\n\n\n@pytest.mark.parametrize(\"override1\", [True, False])\n@pytest.mark.parametrize(\"override2\", [True, False])\n@pytest.mark.parametrize(\"override3\", [True, False])\ndef test_paths_level3(override1, override2, override3):\n    url = \"\"\n    content_type_level = \"0\"\n    if override1:\n        url += \"/level1\"\n        content_type_level = \"1\"\n    if override2:\n        url += \"/level2\"\n        content_type_level = \"2\"\n    if override3:\n        url += \"/override3\"\n        content_type_level = \"3\"\n    else:\n        url += \"/default3\"\n    url += \"?level3=foo\"\n    response = client.get(url)\n    assert response.json() == \"foo\"\n    assert (\n        response.headers[\"content-type\"] == f\"application/x-level-{content_type_level}\"\n    )\n    assert \"x-level0\" in response.headers\n    assert not override1 or \"x-level1\" in response.headers\n    assert not override2 or \"x-level2\" in response.headers\n    assert not override3 or \"x-level3\" in response.headers\n\n\n@pytest.mark.parametrize(\"override1\", [True, False])\n@pytest.mark.parametrize(\"override2\", [True, False])\n@pytest.mark.parametrize(\"override3\", [True, False])\n@pytest.mark.parametrize(\"override4\", [True, False])\n@pytest.mark.parametrize(\"override5\", [True, False])\ndef test_paths_level5(override1, override2, override3, override4, override5):\n    url = \"\"\n    content_type_level = \"0\"\n    if override1:\n        url += \"/level1\"\n        content_type_level = \"1\"\n    if override2:\n        url += \"/level2\"\n        content_type_level = \"2\"\n    if override3:\n        url += \"/level3\"\n        content_type_level = \"3\"\n    if override4:\n        url += \"/level4\"\n        content_type_level = \"4\"\n    if override5:\n        url += \"/override5\"\n        content_type_level = \"5\"\n    else:\n        url += \"/default5\"\n    url += \"?level5=foo\"\n    response = client.get(url)\n    assert response.json() == \"foo\"\n    assert (\n        response.headers[\"content-type\"] == f\"application/x-level-{content_type_level}\"\n    )\n    assert \"x-level0\" in response.headers\n    assert not override1 or \"x-level1\" in response.headers\n    assert not override2 or \"x-level2\" in response.headers\n    assert not override3 or \"x-level3\" in response.headers\n    assert not override4 or \"x-level4\" in response.headers\n    assert not override5 or \"x-level5\" in response.headers\n\n\ndef test_openapi():\n    client = TestClient(app)\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        response = client.get(\"/openapi.json\")\n        assert issubclass(w[-1].category, UserWarning)\n        assert \"Duplicate Operation ID\" in str(w[-1].message)\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/override1\": {\n                \"get\": {\n                    \"tags\": [\"path1a\", \"path1b\"],\n                    \"summary\": \"Path1 Override\",\n                    \"operationId\": \"path1_override_override1_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n                            \"name\": \"level1\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-1\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/default1\": {\n                \"get\": {\n                    \"summary\": \"Path1 Default\",\n                    \"operationId\": \"path1_default_default1_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n                            \"name\": \"level1\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-0\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            \"/level1/level2/override3\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"path3a\",\n                        \"path3b\",\n                    ],\n                    \"summary\": \"Path3 Override Router2 Override\",\n                    \"operationId\": \"path3_override_router2_override_level1_level2_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/default3\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level2a\", \"level2b\"],\n                    \"summary\": \"Path3 Default Router2 Override\",\n                    \"operationId\": \"path3_default_router2_override_level1_level2_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level2_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level2_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_level2_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_level2_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level2_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level2_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level2a\",\n                        \"level2b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_level2_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level2/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level2a\", \"level2b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_level2_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/override3\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Default\",\n                    \"operationId\": \"path3_override_router2_default_level1_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/default3\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\"],\n                    \"summary\": \"Path3 Default Router2 Default\",\n                    \"operationId\": \"path3_default_router2_default_level1_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-1\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level1/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level3a\", \"level3b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level1/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level1a\",\n                        \"level1b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level1_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level1_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/override5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level1_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level1/default5\": {\n                \"get\": {\n                    \"tags\": [\"level1a\", \"level1b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level1_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-1\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"401\": {\"description\": \"Client error level 1\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"501\": {\"description\": \"Server error level 1\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback1\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback1\",\n                                    \"operationId\": \"callback1__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level1\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level1\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level2/override3\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Override\",\n                    \"operationId\": \"path3_override_router2_override_level2_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/default3\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\"],\n                    \"summary\": \"Path3 Default Router2 Override\",\n                    \"operationId\": \"path3_default_router2_override_level2_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level2_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                    ],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level2_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level3a\",\n                        \"level3b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level2_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"level3a\", \"level3b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level2_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level2a\",\n                        \"level2b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level2_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level2_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/override5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level2_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level2/default5\": {\n                \"get\": {\n                    \"tags\": [\"level2a\", \"level2b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level2_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-2\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"402\": {\"description\": \"Client error level 2\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"502\": {\"description\": \"Server error level 2\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback2\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback2\",\n                                    \"operationId\": \"callback2__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level2\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level2\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/override3\": {\n                \"get\": {\n                    \"tags\": [\"path3a\", \"path3b\"],\n                    \"summary\": \"Path3 Override Router2 Default\",\n                    \"operationId\": \"path3_override_router2_default_override3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/default3\": {\n                \"get\": {\n                    \"summary\": \"Path3 Default Router2 Default\",\n                    \"operationId\": \"path3_default_router2_default_default3_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n                            \"name\": \"level3\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-0\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            \"/level3/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\n                        \"level3a\",\n                        \"level3b\",\n                        \"level4a\",\n                        \"level4b\",\n                        \"path5a\",\n                        \"path5b\",\n                    ],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level3_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level3/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level3a\", \"level3b\", \"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level3_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level3/override5\": {\n                \"get\": {\n                    \"tags\": [\"level3a\", \"level3b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_level3_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level3/default5\": {\n                \"get\": {\n                    \"tags\": [\"level3a\", \"level3b\"],\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_level3_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-3\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"403\": {\"description\": \"Client error level 3\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"503\": {\"description\": \"Server error level 3\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback3\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback3\",\n                                    \"operationId\": \"callback3__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level3\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level3\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                }\n            },\n            \"/level4/override5\": {\n                \"get\": {\n                    \"tags\": [\"level4a\", \"level4b\", \"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Override\",\n                    \"operationId\": \"path5_override_router4_override_level4_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/level4/default5\": {\n                \"get\": {\n                    \"tags\": [\"level4a\", \"level4b\"],\n                    \"summary\": \"Path5 Default Router4 Override\",\n                    \"operationId\": \"path5_default_router4_override_level4_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-4\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"404\": {\"description\": \"Client error level 4\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"504\": {\"description\": \"Server error level 4\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback4\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback4\",\n                                    \"operationId\": \"callback4__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level4\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level4\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/override5\": {\n                \"get\": {\n                    \"tags\": [\"path5a\", \"path5b\"],\n                    \"summary\": \"Path5 Override Router4 Default\",\n                    \"operationId\": \"path5_override_router4_default_override5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-5\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"405\": {\"description\": \"Client error level 5\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                        \"505\": {\"description\": \"Server error level 5\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"callback5\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback5\",\n                                    \"operationId\": \"callback5__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level5\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level5\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                    },\n                    \"deprecated\": True,\n                }\n            },\n            \"/default5\": {\n                \"get\": {\n                    \"summary\": \"Path5 Default Router4 Default\",\n                    \"operationId\": \"path5_default_router4_default_default5_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n                            \"name\": \"level5\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/x-level-0\": {\"schema\": {}}},\n                        },\n                        \"400\": {\"description\": \"Client error level 0\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"500\": {\"description\": \"Server error level 0\"},\n                    },\n                    \"callbacks\": {\n                        \"callback0\": {\n                            \"/\": {\n                                \"get\": {\n                                    \"summary\": \"Callback0\",\n                                    \"operationId\": \"callback0__get\",\n                                    \"parameters\": [\n                                        {\n                                            \"name\": \"level0\",\n                                            \"in\": \"query\",\n                                            \"required\": True,\n                                            \"schema\": {\n                                                \"title\": \"Level0\",\n                                                \"type\": \"string\",\n                                            },\n                                        }\n                                    ],\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\"schema\": {}}\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_security_oauth2_authorization_code_bearer_description.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import OAuth2AuthorizationCodeBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\noauth2_scheme = OAuth2AuthorizationCodeBearer(\n    authorizationUrl=\"authorize\",\n    tokenUrl=\"token\",\n    description=\"OAuth2 Code Bearer\",\n    auto_error=True,\n)\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Optional[str] = Security(oauth2_scheme)):\n    return {\"token\": token}\n\n\nclient = TestClient(app)\n\n\ndef test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2AuthorizationCodeBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2AuthorizationCodeBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"authorizationCode\": {\n                            \"authorizationUrl\": \"authorize\",\n                            \"tokenUrl\": \"token\",\n                            \"scopes\": {},\n                        }\n                    },\n                    \"description\": \"OAuth2 Code Bearer\",\n                }\n            }\n        },\n    }\n", "tests/test_path.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_text_get():\n    response = client.get(\"/text\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"Hello World\"\n\n\ndef test_nonexistent():\n    response = client.get(\"/nonexistent\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Not Found\"}\n\n\ndef test_path_foobar():\n    response = client.get(\"/path/foobar\")\n    assert response.status_code == 200\n    assert response.json() == \"foobar\"\n\n\ndef test_path_str_foobar():\n    response = client.get(\"/path/str/foobar\")\n    assert response.status_code == 200\n    assert response.json() == \"foobar\"\n\n\ndef test_path_str_42():\n    response = client.get(\"/path/str/42\")\n    assert response.status_code == 200\n    assert response.json() == \"42\"\n\n\ndef test_path_str_True():\n    response = client.get(\"/path/str/True\")\n    assert response.status_code == 200\n    assert response.json() == \"True\"\n\n\ndef test_path_int_foobar():\n    response = client.get(\"/path/int/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foobar\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_int_True():\n    response = client.get(\"/path/int/True\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"True\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_int_42():\n    response = client.get(\"/path/int/42\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_path_int_42_5():\n    response = client.get(\"/path/int/42.5\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"42.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_float_foobar():\n    response = client.get(\"/path/float/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"foobar\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_float_True():\n    response = client.get(\"/path/float/True\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"True\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_float_42():\n    response = client.get(\"/path/float/42\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_path_float_42_5():\n    response = client.get(\"/path/float/42.5\")\n    assert response.status_code == 200\n    assert response.json() == 42.5\n\n\ndef test_path_bool_foobar():\n    response = client.get(\"/path/bool/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"bool_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                    \"input\": \"foobar\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value could not be parsed to a boolean\",\n                    \"type\": \"type_error.bool\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_bool_True():\n    response = client.get(\"/path/bool/True\")\n    assert response.status_code == 200\n    assert response.json() is True\n\n\ndef test_path_bool_42():\n    response = client.get(\"/path/bool/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"bool_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                    \"input\": \"42\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value could not be parsed to a boolean\",\n                    \"type\": \"type_error.bool\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_bool_42_5():\n    response = client.get(\"/path/bool/42.5\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"bool_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                    \"input\": \"42.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value could not be parsed to a boolean\",\n                    \"type\": \"type_error.bool\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_bool_1():\n    response = client.get(\"/path/bool/1\")\n    assert response.status_code == 200\n    assert response.json() is True\n\n\ndef test_path_bool_0():\n    response = client.get(\"/path/bool/0\")\n    assert response.status_code == 200\n    assert response.json() is False\n\n\ndef test_path_bool_true():\n    response = client.get(\"/path/bool/true\")\n    assert response.status_code == 200\n    assert response.json() is True\n\n\ndef test_path_bool_False():\n    response = client.get(\"/path/bool/False\")\n    assert response.status_code == 200\n    assert response.json() is False\n\n\ndef test_path_bool_false():\n    response = client.get(\"/path/bool/false\")\n    assert response.status_code == 200\n    assert response.json() is False\n\n\ndef test_path_param_foo():\n    response = client.get(\"/path/param/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n\n\ndef test_path_param_minlength_foo():\n    response = client.get(\"/path/param-minlength/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n\n\ndef test_path_param_minlength_fo():\n    response = client.get(\"/path/param-minlength/fo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_short\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at least 3 characters\",\n                    \"input\": \"fo\",\n                    \"ctx\": {\"min_length\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at least 3 characters\",\n                    \"type\": \"value_error.any_str.min_length\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_maxlength_foo():\n    response = client.get(\"/path/param-maxlength/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n\n\ndef test_path_param_maxlength_foobar():\n    response = client.get(\"/path/param-maxlength/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_long\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at most 3 characters\",\n                    \"input\": \"foobar\",\n                    \"ctx\": {\"max_length\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at most 3 characters\",\n                    \"type\": \"value_error.any_str.max_length\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_min_maxlength_foo():\n    response = client.get(\"/path/param-min_maxlength/foo\")\n    assert response.status_code == 200\n    assert response.json() == \"foo\"\n\n\ndef test_path_param_min_maxlength_foobar():\n    response = client.get(\"/path/param-min_maxlength/foobar\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_long\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at most 3 characters\",\n                    \"input\": \"foobar\",\n                    \"ctx\": {\"max_length\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at most 3 characters\",\n                    \"type\": \"value_error.any_str.max_length\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_min_maxlength_f():\n    response = client.get(\"/path/param-min_maxlength/f\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_too_short\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"String should have at least 2 characters\",\n                    \"input\": \"f\",\n                    \"ctx\": {\"min_length\": 2},\n                }\n            ]\n        }\n    ) | IsDict(\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value has at least 2 characters\",\n                    \"type\": \"value_error.any_str.min_length\",\n                    \"ctx\": {\"limit_value\": 2},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_gt_42():\n    response = client.get(\"/path/param-gt/42\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_path_param_gt_2():\n    response = client.get(\"/path/param-gt/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"gt\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 3\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_gt0_0_05():\n    response = client.get(\"/path/param-gt0/0.05\")\n    assert response.status_code == 200\n    assert response.json() == 0.05\n\n\ndef test_path_param_gt0_0():\n    response = client.get(\"/path/param-gt0/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 0},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_ge_42():\n    response = client.get(\"/path/param-ge/42\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_path_param_ge_3():\n    response = client.get(\"/path/param-ge/3\")\n    assert response.status_code == 200\n    assert response.json() == 3\n\n\ndef test_path_param_ge_2():\n    response = client.get(\"/path/param-ge/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than or equal to 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"ge\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than or equal to 3\",\n                    \"type\": \"value_error.number.not_ge\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_42():\n    response = client.get(\"/path/param-lt/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"lt\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_2():\n    response = client.get(\"/path/param-lt/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_lt0__1():\n    response = client.get(\"/path/param-lt0/-1\")\n    assert response.status_code == 200\n    assert response.json() == -1\n\n\ndef test_path_param_lt0_0():\n    response = client.get(\"/path/param-lt0/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 0\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"lt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 0\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 0},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_42():\n    response = client.get(\"/path/param-le/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"le\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_3():\n    response = client.get(\"/path/param-le/3\")\n    assert response.status_code == 200\n    assert response.json() == 3\n\n\ndef test_path_param_le_2():\n    response = client.get(\"/path/param-le/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_lt_gt_2():\n    response = client.get(\"/path/param-lt-gt/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_lt_gt_4():\n    response = client.get(\"/path/param-lt-gt/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"lt\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_gt_0():\n    response = client.get(\"/path/param-lt-gt/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 1\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"gt\": 1.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 1\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 1},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_ge_2():\n    response = client.get(\"/path/param-le-ge/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_le_ge_1():\n    response = client.get(\"/path/param-le-ge/1\")\n    assert response.status_code == 200\n\n\ndef test_path_param_le_ge_3():\n    response = client.get(\"/path/param-le-ge/3\")\n    assert response.status_code == 200\n    assert response.json() == 3\n\n\ndef test_path_param_le_ge_4():\n    response = client.get(\"/path/param-le-ge/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"le\": 3.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_int_2():\n    response = client.get(\"/path/param-lt-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_lt_int_42():\n    response = client.get(\"/path/param-lt-int/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"lt\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_int_2_7():\n    response = client.get(\"/path/param-lt-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_gt_int_42():\n    response = client.get(\"/path/param-gt-int/42\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_path_param_gt_int_2():\n    response = client.get(\"/path/param-gt-int/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"gt\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 3\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_gt_int_2_7():\n    response = client.get(\"/path/param-gt-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_int_42():\n    response = client.get(\"/path/param-le-int/42\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"42\",\n                    \"ctx\": {\"le\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_int_3():\n    response = client.get(\"/path/param-le-int/3\")\n    assert response.status_code == 200\n    assert response.json() == 3\n\n\ndef test_path_param_le_int_2():\n    response = client.get(\"/path/param-le-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_le_int_2_7():\n    response = client.get(\"/path/param-le-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_ge_int_42():\n    response = client.get(\"/path/param-ge-int/42\")\n    assert response.status_code == 200\n    assert response.json() == 42\n\n\ndef test_path_param_ge_int_3():\n    response = client.get(\"/path/param-ge-int/3\")\n    assert response.status_code == 200\n    assert response.json() == 3\n\n\ndef test_path_param_ge_int_2():\n    response = client.get(\"/path/param-ge-int/2\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than or equal to 3\",\n                    \"input\": \"2\",\n                    \"ctx\": {\"ge\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than or equal to 3\",\n                    \"type\": \"value_error.number.not_ge\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_ge_int_2_7():\n    response = client.get(\"/path/param-ge-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_gt_int_2():\n    response = client.get(\"/path/param-lt-gt-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_lt_gt_int_4():\n    response = client.get(\"/path/param-lt-gt-int/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"lt\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than 3\",\n                    \"type\": \"value_error.number.not_lt\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_gt_int_0():\n    response = client.get(\"/path/param-lt-gt-int/0\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be greater than 1\",\n                    \"input\": \"0\",\n                    \"ctx\": {\"gt\": 1},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is greater than 1\",\n                    \"type\": \"value_error.number.not_gt\",\n                    \"ctx\": {\"limit_value\": 1},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_lt_gt_int_2_7():\n    response = client.get(\"/path/param-lt-gt-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_ge_int_2():\n    response = client.get(\"/path/param-le-ge-int/2\")\n    assert response.status_code == 200\n    assert response.json() == 2\n\n\ndef test_path_param_le_ge_int_1():\n    response = client.get(\"/path/param-le-ge-int/1\")\n    assert response.status_code == 200\n    assert response.json() == 1\n\n\ndef test_path_param_le_ge_int_3():\n    response = client.get(\"/path/param-le-ge-int/3\")\n    assert response.status_code == 200\n    assert response.json() == 3\n\n\ndef test_path_param_le_ge_int_4():\n    response = client.get(\"/path/param-le-ge-int/4\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"less_than_equal\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be less than or equal to 3\",\n                    \"input\": \"4\",\n                    \"ctx\": {\"le\": 3},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"ensure this value is less than or equal to 3\",\n                    \"type\": \"value_error.number.not_le\",\n                    \"ctx\": {\"limit_value\": 3},\n                }\n            ]\n        }\n    )\n\n\ndef test_path_param_le_ge_int_2_7():\n    response = client.get(\"/path/param-le-ge-int/2.7\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"2.7\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n", "tests/test_additional_responses_custom_validationerror.py": "import typing\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"\n\n\nclass Error(BaseModel):\n    status: str\n    title: str\n\n\nclass JsonApiError(BaseModel):\n    errors: typing.List[Error]\n\n\n@app.get(\n    \"/a/{id}\",\n    response_class=JsonApiResponse,\n    responses={422: {\"description\": \"Error\", \"model\": JsonApiError}},\n)\nasync def a(id):\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/{id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"422\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/vnd.api+json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a__id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Id\"},\n                            \"name\": \"id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_dependency_class.py": "from typing import AsyncGenerator, Generator\n\nimport pytest\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nclass CallableDependency:\n    def __call__(self, value: str) -> str:\n        return value\n\n\nclass CallableGenDependency:\n    def __call__(self, value: str) -> Generator[str, None, None]:\n        yield value\n\n\nclass AsyncCallableDependency:\n    async def __call__(self, value: str) -> str:\n        return value\n\n\nclass AsyncCallableGenDependency:\n    async def __call__(self, value: str) -> AsyncGenerator[str, None]:\n        yield value\n\n\nclass MethodsDependency:\n    def synchronous(self, value: str) -> str:\n        return value\n\n    async def asynchronous(self, value: str) -> str:\n        return value\n\n    def synchronous_gen(self, value: str) -> Generator[str, None, None]:\n        yield value\n\n    async def asynchronous_gen(self, value: str) -> AsyncGenerator[str, None]:\n        yield value\n\n\ncallable_dependency = CallableDependency()\ncallable_gen_dependency = CallableGenDependency()\nasync_callable_dependency = AsyncCallableDependency()\nasync_callable_gen_dependency = AsyncCallableGenDependency()\nmethods_dependency = MethodsDependency()\n\n\n@app.get(\"/callable-dependency\")\nasync def get_callable_dependency(value: str = Depends(callable_dependency)):\n    return value\n\n\n@app.get(\"/callable-gen-dependency\")\nasync def get_callable_gen_dependency(value: str = Depends(callable_gen_dependency)):\n    return value\n\n\n@app.get(\"/async-callable-dependency\")\nasync def get_async_callable_dependency(\n    value: str = Depends(async_callable_dependency),\n):\n    return value\n\n\n@app.get(\"/async-callable-gen-dependency\")\nasync def get_async_callable_gen_dependency(\n    value: str = Depends(async_callable_gen_dependency),\n):\n    return value\n\n\n@app.get(\"/synchronous-method-dependency\")\nasync def get_synchronous_method_dependency(\n    value: str = Depends(methods_dependency.synchronous),\n):\n    return value\n\n\n@app.get(\"/synchronous-method-gen-dependency\")\nasync def get_synchronous_method_gen_dependency(\n    value: str = Depends(methods_dependency.synchronous_gen),\n):\n    return value\n\n\n@app.get(\"/asynchronous-method-dependency\")\nasync def get_asynchronous_method_dependency(\n    value: str = Depends(methods_dependency.asynchronous),\n):\n    return value\n\n\n@app.get(\"/asynchronous-method-gen-dependency\")\nasync def get_asynchronous_method_gen_dependency(\n    value: str = Depends(methods_dependency.asynchronous_gen),\n):\n    return value\n\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"route,value\",\n    [\n        (\"/callable-dependency\", \"callable-dependency\"),\n        (\"/callable-gen-dependency\", \"callable-gen-dependency\"),\n        (\"/async-callable-dependency\", \"async-callable-dependency\"),\n        (\"/async-callable-gen-dependency\", \"async-callable-gen-dependency\"),\n        (\"/synchronous-method-dependency\", \"synchronous-method-dependency\"),\n        (\"/synchronous-method-gen-dependency\", \"synchronous-method-gen-dependency\"),\n        (\"/asynchronous-method-dependency\", \"asynchronous-method-dependency\"),\n        (\"/asynchronous-method-gen-dependency\", \"asynchronous-method-gen-dependency\"),\n    ],\n)\ndef test_class_dependency(route, value):\n    response = client.get(route, params={\"value\": value})\n    assert response.status_code == 200, response.text\n    assert response.json() == value\n", "tests/test_openapi_examples.py": "from typing import Union\n\nfrom dirty_equals import IsDict\nfrom fastapi import Body, Cookie, FastAPI, Header, Path, Query\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    data: str\n\n\n@app.post(\"/examples/\")\ndef examples(\n    item: Item = Body(\n        examples=[\n            {\"data\": \"Data in Body examples, example1\"},\n        ],\n        openapi_examples={\n            \"Example One\": {\n                \"summary\": \"Example One Summary\",\n                \"description\": \"Example One Description\",\n                \"value\": {\"data\": \"Data in Body examples, example1\"},\n            },\n            \"Example Two\": {\n                \"value\": {\"data\": \"Data in Body examples, example2\"},\n            },\n        },\n    ),\n):\n    return item\n\n\n@app.get(\"/path_examples/{item_id}\")\ndef path_examples(\n    item_id: str = Path(\n        examples=[\n            \"json_schema_item_1\",\n            \"json_schema_item_2\",\n        ],\n        openapi_examples={\n            \"Path One\": {\n                \"summary\": \"Path One Summary\",\n                \"description\": \"Path One Description\",\n                \"value\": \"item_1\",\n            },\n            \"Path Two\": {\n                \"value\": \"item_2\",\n            },\n        },\n    ),\n):\n    return item_id\n\n\n@app.get(\"/query_examples/\")\ndef query_examples(\n    data: Union[str, None] = Query(\n        default=None,\n        examples=[\n            \"json_schema_query1\",\n            \"json_schema_query2\",\n        ],\n        openapi_examples={\n            \"Query One\": {\n                \"summary\": \"Query One Summary\",\n                \"description\": \"Query One Description\",\n                \"value\": \"query1\",\n            },\n            \"Query Two\": {\n                \"value\": \"query2\",\n            },\n        },\n    ),\n):\n    return data\n\n\n@app.get(\"/header_examples/\")\ndef header_examples(\n    data: Union[str, None] = Header(\n        default=None,\n        examples=[\n            \"json_schema_header1\",\n            \"json_schema_header2\",\n        ],\n        openapi_examples={\n            \"Header One\": {\n                \"summary\": \"Header One Summary\",\n                \"description\": \"Header One Description\",\n                \"value\": \"header1\",\n            },\n            \"Header Two\": {\n                \"value\": \"header2\",\n            },\n        },\n    ),\n):\n    return data\n\n\n@app.get(\"/cookie_examples/\")\ndef cookie_examples(\n    data: Union[str, None] = Cookie(\n        default=None,\n        examples=[\"json_schema_cookie1\", \"json_schema_cookie2\"],\n        openapi_examples={\n            \"Cookie One\": {\n                \"summary\": \"Cookie One Summary\",\n                \"description\": \"Cookie One Description\",\n                \"value\": \"cookie1\",\n            },\n            \"Cookie Two\": {\n                \"value\": \"cookie2\",\n            },\n        },\n    ),\n):\n    return data\n\n\nclient = TestClient(app)\n\n\ndef test_call_api():\n    response = client.post(\"/examples/\", json={\"data\": \"example1\"})\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/path_examples/foo\")\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/query_examples/\")\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/header_examples/\")\n    assert response.status_code == 200, response.text\n\n    response = client.get(\"/cookie_examples/\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/examples/\": {\n                \"post\": {\n                    \"summary\": \"Examples\",\n                    \"operationId\": \"examples_examples__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"allOf\": [{\"$ref\": \"#/components/schemas/Item\"}],\n                                    \"title\": \"Item\",\n                                    \"examples\": [\n                                        {\"data\": \"Data in Body examples, example1\"}\n                                    ],\n                                },\n                                \"examples\": {\n                                    \"Example One\": {\n                                        \"summary\": \"Example One Summary\",\n                                        \"description\": \"Example One Description\",\n                                        \"value\": {\n                                            \"data\": \"Data in Body examples, example1\"\n                                        },\n                                    },\n                                    \"Example Two\": {\n                                        \"value\": {\n                                            \"data\": \"Data in Body examples, example2\"\n                                        }\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_examples/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Examples\",\n                    \"operationId\": \"path_examples_path_examples__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": {\n                                \"type\": \"string\",\n                                \"examples\": [\n                                    \"json_schema_item_1\",\n                                    \"json_schema_item_2\",\n                                ],\n                                \"title\": \"Item Id\",\n                            },\n                            \"examples\": {\n                                \"Path One\": {\n                                    \"summary\": \"Path One Summary\",\n                                    \"description\": \"Path One Description\",\n                                    \"value\": \"item_1\",\n                                },\n                                \"Path Two\": {\"value\": \"item_2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_examples/\": {\n                \"get\": {\n                    \"summary\": \"Query Examples\",\n                    \"operationId\": \"query_examples_query_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"examples\": [\n                                        \"json_schema_query1\",\n                                        \"json_schema_query2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"examples\": [\n                                        \"json_schema_query1\",\n                                        \"json_schema_query2\",\n                                    ],\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                }\n                            ),\n                            \"examples\": {\n                                \"Query One\": {\n                                    \"summary\": \"Query One Summary\",\n                                    \"description\": \"Query One Description\",\n                                    \"value\": \"query1\",\n                                },\n                                \"Query Two\": {\"value\": \"query2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_examples/\": {\n                \"get\": {\n                    \"summary\": \"Header Examples\",\n                    \"operationId\": \"header_examples_header_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"examples\": [\n                                        \"json_schema_header1\",\n                                        \"json_schema_header2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"examples\": [\n                                        \"json_schema_header1\",\n                                        \"json_schema_header2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            ),\n                            \"examples\": {\n                                \"Header One\": {\n                                    \"summary\": \"Header One Summary\",\n                                    \"description\": \"Header One Description\",\n                                    \"value\": \"header1\",\n                                },\n                                \"Header Two\": {\"value\": \"header2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_examples/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Examples\",\n                    \"operationId\": \"cookie_examples_cookie_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"examples\": [\n                                        \"json_schema_cookie1\",\n                                        \"json_schema_cookie2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"examples\": [\n                                        \"json_schema_cookie1\",\n                                        \"json_schema_cookie2\",\n                                    ],\n                                    \"title\": \"Data\",\n                                }\n                            ),\n                            \"examples\": {\n                                \"Cookie One\": {\n                                    \"summary\": \"Cookie One Summary\",\n                                    \"description\": \"Cookie One Description\",\n                                    \"value\": \"cookie1\",\n                                },\n                                \"Cookie Two\": {\"value\": \"cookie2\"},\n                            },\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\"data\": {\"type\": \"string\", \"title\": \"Data\"}},\n                    \"type\": \"object\",\n                    \"required\": [\"data\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_additional_responses_default_validationerror.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/a/{id}\")\nasync def a(id):\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/{id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a__id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Id\"},\n                            \"name\": \"id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_repeated_cookie_headers.py": "from fastapi import Depends, FastAPI, Response\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\ndef set_cookie(*, response: Response):\n    response.set_cookie(\"cookie-name\", \"cookie-value\")\n    return {}\n\n\ndef set_indirect_cookie(*, dep: str = Depends(set_cookie)):\n    return dep\n\n\n@app.get(\"/directCookie\")\ndef get_direct_cookie(dep: str = Depends(set_cookie)):\n    return {\"dep\": dep}\n\n\n@app.get(\"/indirectCookie\")\ndef get_indirect_cookie(dep: str = Depends(set_indirect_cookie)):\n    return {\"dep\": dep}\n\n\nclient = TestClient(app)\n\n\ndef test_cookie_is_set_once():\n    direct_response = client.get(\"/directCookie\")\n    indirect_response = client.get(\"/indirectCookie\")\n    assert (\n        direct_response.headers[\"set-cookie\"] == indirect_response.headers[\"set-cookie\"]\n    )\n", "tests/test_security_api_key_header_description.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyHeader\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyHeader(name=\"key\", description=\"An API Key Header\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_api_key():\n    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyHeader\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyHeader\": {\n                    \"type\": \"apiKey\",\n                    \"name\": \"key\",\n                    \"in\": \"header\",\n                    \"description\": \"An API Key Header\",\n                }\n            }\n        },\n    }\n", "tests/test_webhooks_security.py": "from datetime import datetime\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import HTTPBearer\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nbearer_scheme = HTTPBearer()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(\n    body: Subscription, token: Annotated[str, Security(bearer_scheme)]\n):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\nclient = TestClient(app)\n\n\ndef test_dummy_webhook():\n    # Just for coverage\n    new_subscription(body={}, token=\"Bearer 123\")\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {},\n        \"webhooks\": {\n            \"new-subscription\": {\n                \"post\": {\n                    \"summary\": \"New Subscription\",\n                    \"description\": \"When a new user subscribes to your service we'll send you a POST request with this\\ndata to the URL that you register for the event `new-subscription` in the dashboard.\",\n                    \"operationId\": \"new_subscriptionnew_subscription_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Subscription\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Subscription\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"monthly_fee\": {\"type\": \"number\", \"title\": \"Monthly Fee\"},\n                        \"start_date\": {\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                            \"title\": \"Start Date\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"monthly_fee\", \"start_date\"],\n                    \"title\": \"Subscription\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            },\n            \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}},\n        },\n    }\n", "tests/test_response_by_alias.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom fastapi._compat import PYDANTIC_V2\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, ConfigDict, Field\n\napp = FastAPI()\n\n\nclass Model(BaseModel):\n    name: str = Field(alias=\"alias\")\n\n\nclass ModelNoAlias(BaseModel):\n    name: str\n\n    if PYDANTIC_V2:\n        model_config = ConfigDict(\n            json_schema_extra={\n                \"description\": (\n                    \"response_model_by_alias=False is basically a quick hack, to support \"\n                    \"proper OpenAPI use another model with the correct field names\"\n                )\n            }\n        )\n    else:\n\n        class Config:\n            schema_extra = {\n                \"description\": (\n                    \"response_model_by_alias=False is basically a quick hack, to support \"\n                    \"proper OpenAPI use another model with the correct field names\"\n                )\n            }\n\n\n@app.get(\"/dict\", response_model=Model, response_model_by_alias=False)\ndef read_dict():\n    return {\"alias\": \"Foo\"}\n\n\n@app.get(\"/model\", response_model=Model, response_model_by_alias=False)\ndef read_model():\n    return Model(alias=\"Foo\")\n\n\n@app.get(\"/list\", response_model=List[Model], response_model_by_alias=False)\ndef read_list():\n    return [{\"alias\": \"Foo\"}, {\"alias\": \"Bar\"}]\n\n\n@app.get(\"/by-alias/dict\", response_model=Model)\ndef by_alias_dict():\n    return {\"alias\": \"Foo\"}\n\n\n@app.get(\"/by-alias/model\", response_model=Model)\ndef by_alias_model():\n    return Model(alias=\"Foo\")\n\n\n@app.get(\"/by-alias/list\", response_model=List[Model])\ndef by_alias_list():\n    return [{\"alias\": \"Foo\"}, {\"alias\": \"Bar\"}]\n\n\n@app.get(\"/no-alias/dict\", response_model=ModelNoAlias)\ndef no_alias_dict():\n    return {\"name\": \"Foo\"}\n\n\n@app.get(\"/no-alias/model\", response_model=ModelNoAlias)\ndef no_alias_model():\n    return ModelNoAlias(name=\"Foo\")\n\n\n@app.get(\"/no-alias/list\", response_model=List[ModelNoAlias])\ndef no_alias_list():\n    return [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n\n\nclient = TestClient(app)\n\n\ndef test_read_dict():\n    response = client.get(\"/dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}\n\n\ndef test_read_model():\n    response = client.get(\"/model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}\n\n\ndef test_read_list():\n    response = client.get(\"/list\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\"},\n        {\"name\": \"Bar\"},\n    ]\n\n\ndef test_read_dict_by_alias():\n    response = client.get(\"/by-alias/dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"alias\": \"Foo\"}\n\n\ndef test_read_model_by_alias():\n    response = client.get(\"/by-alias/model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"alias\": \"Foo\"}\n\n\ndef test_read_list_by_alias():\n    response = client.get(\"/by-alias/list\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"alias\": \"Foo\"},\n        {\"alias\": \"Bar\"},\n    ]\n\n\ndef test_read_dict_no_alias():\n    response = client.get(\"/no-alias/dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}\n\n\ndef test_read_model_no_alias():\n    response = client.get(\"/no-alias/model\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\"}\n\n\ndef test_read_list_no_alias():\n    response = client.get(\"/no-alias/list\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\"},\n        {\"name\": \"Bar\"},\n    ]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/dict\": {\n                \"get\": {\n                    \"summary\": \"Read Dict\",\n                    \"operationId\": \"read_dict_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/model\": {\n                \"get\": {\n                    \"summary\": \"Read Model\",\n                    \"operationId\": \"read_model_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/list\": {\n                \"get\": {\n                    \"summary\": \"Read List\",\n                    \"operationId\": \"read_list_list_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read List List Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/by-alias/dict\": {\n                \"get\": {\n                    \"summary\": \"By Alias Dict\",\n                    \"operationId\": \"by_alias_dict_by_alias_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/by-alias/model\": {\n                \"get\": {\n                    \"summary\": \"By Alias Model\",\n                    \"operationId\": \"by_alias_model_by_alias_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/by-alias/list\": {\n                \"get\": {\n                    \"summary\": \"By Alias List\",\n                    \"operationId\": \"by_alias_list_by_alias_list_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response By Alias List By Alias List Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no-alias/dict\": {\n                \"get\": {\n                    \"summary\": \"No Alias Dict\",\n                    \"operationId\": \"no_alias_dict_no_alias_dict_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no-alias/model\": {\n                \"get\": {\n                    \"summary\": \"No Alias Model\",\n                    \"operationId\": \"no_alias_model_no_alias_model_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n            \"/no-alias/list\": {\n                \"get\": {\n                    \"summary\": \"No Alias List\",\n                    \"operationId\": \"no_alias_list_no_alias_list_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response No Alias List No Alias List Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/ModelNoAlias\"\n                                        },\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Model\": {\n                    \"title\": \"Model\",\n                    \"required\": [\"alias\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"alias\": {\"title\": \"Alias\", \"type\": \"string\"}},\n                },\n                \"ModelNoAlias\": {\n                    \"title\": \"ModelNoAlias\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n                    \"description\": \"response_model_by_alias=False is basically a quick hack, to support proper OpenAPI use another model with the correct field names\",\n                },\n            }\n        },\n    }\n", "tests/test_enforce_once_required_parameter.py": "from typing import Optional\n\nfrom fastapi import Depends, FastAPI, Query, status\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\ndef _get_client_key(client_id: str = Query(...)) -> str:\n    return f\"{client_id}_key\"\n\n\ndef _get_client_tag(client_id: Optional[str] = Query(None)) -> Optional[str]:\n    if client_id is None:\n        return None\n    return f\"{client_id}_tag\"\n\n\n@app.get(\"/foo\")\ndef foo_handler(\n    client_key: str = Depends(_get_client_key),\n    client_tag: Optional[str] = Depends(_get_client_tag),\n):\n    return {\"client_id\": client_key, \"client_tag\": client_tag}\n\n\nclient = TestClient(app)\n\nexpected_schema = {\n    \"components\": {\n        \"schemas\": {\n            \"HTTPValidationError\": {\n                \"properties\": {\n                    \"detail\": {\n                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                    }\n                },\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n            },\n            \"ValidationError\": {\n                \"properties\": {\n                    \"loc\": {\n                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                    },\n                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                    \"type\": {\"title\": \"Error \" \"Type\", \"type\": \"string\"},\n                },\n                \"required\": [\"loc\", \"msg\", \"type\"],\n                \"title\": \"ValidationError\",\n                \"type\": \"object\",\n            },\n        }\n    },\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"openapi\": \"3.1.0\",\n    \"paths\": {\n        \"/foo\": {\n            \"get\": {\n                \"operationId\": \"foo_handler_foo_get\",\n                \"parameters\": [\n                    {\n                        \"in\": \"query\",\n                        \"name\": \"client_id\",\n                        \"required\": True,\n                        \"schema\": {\"title\": \"Client Id\", \"type\": \"string\"},\n                    },\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                        \"description\": \"Successful \" \"Response\",\n                    },\n                    \"422\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                        \"description\": \"Validation \" \"Error\",\n                    },\n                },\n                \"summary\": \"Foo Handler\",\n            }\n        }\n    },\n}\n\n\ndef test_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == status.HTTP_200_OK\n    actual_schema = response.json()\n    assert actual_schema == expected_schema\n\n\ndef test_get_invalid():\n    response = client.get(\"/foo\")\n    assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\ndef test_get_valid():\n    response = client.get(\"/foo\", params={\"client_id\": \"bar\"})\n    assert response.status_code == 200\n    assert response.json() == {\"client_id\": \"bar_key\", \"client_tag\": \"bar_tag\"}\n", "tests/test_ws_dependencies.py": "import json\nfrom typing import List\n\nfrom fastapi import APIRouter, Depends, FastAPI, WebSocket\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\n\ndef dependency_list() -> List[str]:\n    return []\n\n\nDepList = Annotated[List[str], Depends(dependency_list)]\n\n\ndef create_dependency(name: str):\n    def fun(deps: DepList):\n        deps.append(name)\n\n    return Depends(fun)\n\n\nrouter = APIRouter(dependencies=[create_dependency(\"router\")])\nprefix_router = APIRouter(dependencies=[create_dependency(\"prefix_router\")])\napp = FastAPI(dependencies=[create_dependency(\"app\")])\n\n\n@app.websocket(\"/\", dependencies=[create_dependency(\"index\")])\nasync def index(websocket: WebSocket, deps: DepList):\n    await websocket.accept()\n    await websocket.send_text(json.dumps(deps))\n    await websocket.close()\n\n\n@router.websocket(\"/router\", dependencies=[create_dependency(\"routerindex\")])\nasync def routerindex(websocket: WebSocket, deps: DepList):\n    await websocket.accept()\n    await websocket.send_text(json.dumps(deps))\n    await websocket.close()\n\n\n@prefix_router.websocket(\"/\", dependencies=[create_dependency(\"routerprefixindex\")])\nasync def routerprefixindex(websocket: WebSocket, deps: DepList):\n    await websocket.accept()\n    await websocket.send_text(json.dumps(deps))\n    await websocket.close()\n\n\napp.include_router(router, dependencies=[create_dependency(\"router2\")])\napp.include_router(\n    prefix_router, prefix=\"/prefix\", dependencies=[create_dependency(\"prefix_router2\")]\n)\n\n\ndef test_index():\n    client = TestClient(app)\n    with client.websocket_connect(\"/\") as websocket:\n        data = json.loads(websocket.receive_text())\n        assert data == [\"app\", \"index\"]\n\n\ndef test_routerindex():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router\") as websocket:\n        data = json.loads(websocket.receive_text())\n        assert data == [\"app\", \"router2\", \"router\", \"routerindex\"]\n\n\ndef test_routerprefixindex():\n    client = TestClient(app)\n    with client.websocket_connect(\"/prefix/\") as websocket:\n        data = json.loads(websocket.receive_text())\n        assert data == [\"app\", \"prefix_router2\", \"prefix_router\", \"routerprefixindex\"]\n", "tests/test_multi_query_errors.py": "from typing import List\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI, Query\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\ndef read_items(q: List[int] = Query(default=None)):\n    return {\"q\": q}\n\n\nclient = TestClient(app)\n\n\ndef test_multi_query():\n    response = client.get(\"/items/?q=5&q=6\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [5, 6]}\n\n\ndef test_multi_query_incorrect():\n    response = client.get(\"/items/?q=five&q=six\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"q\", 0],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"five\",\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"q\", 1],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"six\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\", 0],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n                {\n                    \"loc\": [\"query\", \"q\", 1],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"integer\"},\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_dependency_contextmanager.py": "import json\nfrom typing import Dict\n\nimport pytest\nfrom fastapi import BackgroundTasks, Depends, FastAPI\nfrom fastapi.responses import StreamingResponse\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\nstate = {\n    \"/async\": \"asyncgen not started\",\n    \"/sync\": \"generator not started\",\n    \"/async_raise\": \"asyncgen raise not started\",\n    \"/sync_raise\": \"generator raise not started\",\n    \"context_a\": \"not started a\",\n    \"context_b\": \"not started b\",\n    \"bg\": \"not set\",\n    \"sync_bg\": \"not set\",\n}\n\nerrors = []\n\n\nasync def get_state():\n    return state\n\n\nclass AsyncDependencyError(Exception):\n    pass\n\n\nclass SyncDependencyError(Exception):\n    pass\n\n\nclass OtherDependencyError(Exception):\n    pass\n\n\nasync def asyncgen_state(state: Dict[str, str] = Depends(get_state)):\n    state[\"/async\"] = \"asyncgen started\"\n    yield state[\"/async\"]\n    state[\"/async\"] = \"asyncgen completed\"\n\n\ndef generator_state(state: Dict[str, str] = Depends(get_state)):\n    state[\"/sync\"] = \"generator started\"\n    yield state[\"/sync\"]\n    state[\"/sync\"] = \"generator completed\"\n\n\nasync def asyncgen_state_try(state: Dict[str, str] = Depends(get_state)):\n    state[\"/async_raise\"] = \"asyncgen raise started\"\n    try:\n        yield state[\"/async_raise\"]\n    except AsyncDependencyError:\n        errors.append(\"/async_raise\")\n        raise\n    finally:\n        state[\"/async_raise\"] = \"asyncgen raise finalized\"\n\n\ndef generator_state_try(state: Dict[str, str] = Depends(get_state)):\n    state[\"/sync_raise\"] = \"generator raise started\"\n    try:\n        yield state[\"/sync_raise\"]\n    except SyncDependencyError:\n        errors.append(\"/sync_raise\")\n        raise\n    finally:\n        state[\"/sync_raise\"] = \"generator raise finalized\"\n\n\nasync def context_a(state: dict = Depends(get_state)):\n    state[\"context_a\"] = \"started a\"\n    try:\n        yield state\n    finally:\n        state[\"context_a\"] = \"finished a\"\n\n\nasync def context_b(state: dict = Depends(context_a)):\n    state[\"context_b\"] = \"started b\"\n    try:\n        yield state\n    finally:\n        state[\"context_b\"] = f\"finished b with a: {state['context_a']}\"\n\n\n@app.get(\"/async\")\nasync def get_async(state: str = Depends(asyncgen_state)):\n    return state\n\n\n@app.get(\"/sync\")\nasync def get_sync(state: str = Depends(generator_state)):\n    return state\n\n\n@app.get(\"/async_raise\")\nasync def get_async_raise(state: str = Depends(asyncgen_state_try)):\n    assert state == \"asyncgen raise started\"\n    raise AsyncDependencyError()\n\n\n@app.get(\"/sync_raise\")\nasync def get_sync_raise(state: str = Depends(generator_state_try)):\n    assert state == \"generator raise started\"\n    raise SyncDependencyError()\n\n\n@app.get(\"/async_raise_other\")\nasync def get_async_raise_other(state: str = Depends(asyncgen_state_try)):\n    assert state == \"asyncgen raise started\"\n    raise OtherDependencyError()\n\n\n@app.get(\"/sync_raise_other\")\nasync def get_sync_raise_other(state: str = Depends(generator_state_try)):\n    assert state == \"generator raise started\"\n    raise OtherDependencyError()\n\n\n@app.get(\"/context_b\")\nasync def get_context_b(state: dict = Depends(context_b)):\n    return state\n\n\n@app.get(\"/context_b_raise\")\nasync def get_context_b_raise(state: dict = Depends(context_b)):\n    assert state[\"context_b\"] == \"started b\"\n    assert state[\"context_a\"] == \"started a\"\n    raise OtherDependencyError()\n\n\n@app.get(\"/context_b_bg\")\nasync def get_context_b_bg(tasks: BackgroundTasks, state: dict = Depends(context_b)):\n    async def bg(state: dict):\n        state[\"bg\"] = f\"bg set - b: {state['context_b']} - a: {state['context_a']}\"\n\n    tasks.add_task(bg, state)\n    return state\n\n\n# Sync versions\n\n\n@app.get(\"/sync_async\")\ndef get_sync_async(state: str = Depends(asyncgen_state)):\n    return state\n\n\n@app.get(\"/sync_sync\")\ndef get_sync_sync(state: str = Depends(generator_state)):\n    return state\n\n\n@app.get(\"/sync_async_raise\")\ndef get_sync_async_raise(state: str = Depends(asyncgen_state_try)):\n    assert state == \"asyncgen raise started\"\n    raise AsyncDependencyError()\n\n\n@app.get(\"/sync_sync_raise\")\ndef get_sync_sync_raise(state: str = Depends(generator_state_try)):\n    assert state == \"generator raise started\"\n    raise SyncDependencyError()\n\n\n@app.get(\"/sync_async_raise_other\")\ndef get_sync_async_raise_other(state: str = Depends(asyncgen_state_try)):\n    assert state == \"asyncgen raise started\"\n    raise OtherDependencyError()\n\n\n@app.get(\"/sync_sync_raise_other\")\ndef get_sync_sync_raise_other(state: str = Depends(generator_state_try)):\n    assert state == \"generator raise started\"\n    raise OtherDependencyError()\n\n\n@app.get(\"/sync_context_b\")\ndef get_sync_context_b(state: dict = Depends(context_b)):\n    return state\n\n\n@app.get(\"/sync_context_b_raise\")\ndef get_sync_context_b_raise(state: dict = Depends(context_b)):\n    assert state[\"context_b\"] == \"started b\"\n    assert state[\"context_a\"] == \"started a\"\n    raise OtherDependencyError()\n\n\n@app.get(\"/sync_context_b_bg\")\nasync def get_sync_context_b_bg(\n    tasks: BackgroundTasks, state: dict = Depends(context_b)\n):\n    async def bg(state: dict):\n        state[\n            \"sync_bg\"\n        ] = f\"sync_bg set - b: {state['context_b']} - a: {state['context_a']}\"\n\n    tasks.add_task(bg, state)\n    return state\n\n\n@app.middleware(\"http\")\nasync def middleware(request, call_next):\n    response: StreamingResponse = await call_next(request)\n    response.headers[\"x-state\"] = json.dumps(state.copy())\n    return response\n\n\nclient = TestClient(app)\n\n\ndef test_async_state():\n    assert state[\"/async\"] == \"asyncgen not started\"\n    response = client.get(\"/async\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"asyncgen started\"\n    assert state[\"/async\"] == \"asyncgen completed\"\n\n\ndef test_sync_state():\n    assert state[\"/sync\"] == \"generator not started\"\n    response = client.get(\"/sync\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"generator started\"\n    assert state[\"/sync\"] == \"generator completed\"\n\n\ndef test_async_raise_other():\n    assert state[\"/async_raise\"] == \"asyncgen raise not started\"\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/async_raise_other\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" not in errors\n\n\ndef test_sync_raise_other():\n    assert state[\"/sync_raise\"] == \"generator raise not started\"\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_raise_other\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" not in errors\n\n\ndef test_async_raise_raises():\n    with pytest.raises(AsyncDependencyError):\n        client.get(\"/async_raise\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()\n\n\ndef test_async_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/async_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()\n\n\ndef test_context_b():\n    response = client.get(\"/context_b\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n\n\ndef test_context_b_raise():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/context_b_raise\")\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n\n\ndef test_background_tasks():\n    response = client.get(\"/context_b_bg\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert data[\"bg\"] == \"not set\"\n    middleware_state = json.loads(response.headers[\"x-state\"])\n    assert middleware_state[\"context_b\"] == \"finished b with a: started a\"\n    assert middleware_state[\"context_a\"] == \"finished a\"\n    assert middleware_state[\"bg\"] == \"not set\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n    assert state[\"bg\"] == \"bg set - b: finished b with a: started a - a: finished a\"\n\n\ndef test_sync_raise_raises():\n    with pytest.raises(SyncDependencyError):\n        client.get(\"/sync_raise\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()\n\n\ndef test_sync_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/sync_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()\n\n\ndef test_sync_async_state():\n    response = client.get(\"/sync_async\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"asyncgen started\"\n    assert state[\"/async\"] == \"asyncgen completed\"\n\n\ndef test_sync_sync_state():\n    response = client.get(\"/sync_sync\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"generator started\"\n    assert state[\"/sync\"] == \"generator completed\"\n\n\ndef test_sync_async_raise_other():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_async_raise_other\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" not in errors\n\n\ndef test_sync_sync_raise_other():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_sync_raise_other\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" not in errors\n\n\ndef test_sync_async_raise_raises():\n    with pytest.raises(AsyncDependencyError):\n        client.get(\"/sync_async_raise\")\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()\n\n\ndef test_sync_async_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/sync_async_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n    assert \"/async_raise\" in errors\n    errors.clear()\n\n\ndef test_sync_sync_raise_raises():\n    with pytest.raises(SyncDependencyError):\n        client.get(\"/sync_sync_raise\")\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()\n\n\ndef test_sync_sync_raise_server_error():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/sync_sync_raise\")\n    assert response.status_code == 500, response.text\n    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n    assert \"/sync_raise\" in errors\n    errors.clear()\n\n\ndef test_sync_context_b():\n    response = client.get(\"/sync_context_b\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n\n\ndef test_sync_context_b_raise():\n    with pytest.raises(OtherDependencyError):\n        client.get(\"/sync_context_b_raise\")\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n\n\ndef test_sync_background_tasks():\n    response = client.get(\"/sync_context_b_bg\")\n    data = response.json()\n    assert data[\"context_b\"] == \"started b\"\n    assert data[\"context_a\"] == \"started a\"\n    assert data[\"sync_bg\"] == \"not set\"\n    assert state[\"context_b\"] == \"finished b with a: started a\"\n    assert state[\"context_a\"] == \"finished a\"\n    assert (\n        state[\"sync_bg\"]\n        == \"sync_bg set - b: finished b with a: started a - a: finished a\"\n    )\n", "tests/test_multi_body_errors.py": "from decimal import Decimal\nfrom typing import List\n\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, condecimal\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    age: condecimal(gt=Decimal(0.0))  # type: ignore\n\n\n@app.post(\"/items/\")\ndef save_item_no_body(item: List[Item]):\n    return {\"item\": item}\n\n\nclient = TestClient(app)\n\n\ndef test_put_correct_body():\n    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": 5}])\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"item\": [\n            {\n                \"name\": \"Foo\",\n                \"age\": IsOneOf(\n                    5,\n                    # TODO: remove when deprecating Pydantic v1\n                    \"5\",\n                ),\n            }\n        ]\n    }\n\n\ndef test_jsonable_encoder_requiring_error():\n    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -1.0,\n                    \"ctx\": {\"gt\": 0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0.0},\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )\n\n\ndef test_put_incorrect_body_multiple():\n    response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", 0, \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"age\": \"five\"},\n                },\n                {\n                    \"type\": \"decimal_parsing\",\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"Input should be a valid decimal\",\n                    \"input\": \"five\",\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", 1, \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"age\": \"six\"},\n                },\n                {\n                    \"type\": \"decimal_parsing\",\n                    \"loc\": [\"body\", 1, \"age\"],\n                    \"msg\": \"Input should be a valid decimal\",\n                    \"input\": \"six\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", 0, \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", 0, \"age\"],\n                    \"msg\": \"value is not a valid decimal\",\n                    \"type\": \"type_error.decimal\",\n                },\n                {\n                    \"loc\": [\"body\", 1, \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", 1, \"age\"],\n                    \"msg\": \"value is not a valid decimal\",\n                    \"type\": \"type_error.decimal\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Item No Body\",\n                    \"operationId\": \"save_item_no_body_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"age\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"age\": IsDict(\n                            {\n                                \"title\": \"Age\",\n                                \"anyOf\": [\n                                    {\"exclusiveMinimum\": 0.0, \"type\": \"number\"},\n                                    {\"type\": \"string\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Age\",\n                                \"exclusiveMinimum\": 0.0,\n                                \"type\": \"number\",\n                            }\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/utils.py": "import sys\n\nimport pytest\nfrom fastapi._compat import PYDANTIC_V2\n\nneeds_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\nneeds_py310 = pytest.mark.skipif(\n    sys.version_info < (3, 10), reason=\"requires python3.10+\"\n)\nneeds_pydanticv2 = pytest.mark.skipif(not PYDANTIC_V2, reason=\"requires Pydantic v2\")\nneeds_pydanticv1 = pytest.mark.skipif(PYDANTIC_V2, reason=\"requires Pydantic v1\")\n", "tests/test_regex_deprecated_body.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI, Form\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\nfrom .utils import needs_py310\n\n\ndef get_client():\n    app = FastAPI()\n    with pytest.warns(DeprecationWarning):\n\n        @app.post(\"/items/\")\n        async def read_items(\n            q: Annotated[str | None, Form(regex=\"^fixedquery$\")] = None,\n        ):\n            if q:\n                return f\"Hello {q}\"\n            else:\n                return \"Hello World\"\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_no_query():\n    client = get_client()\n    response = client.post(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == \"Hello World\"\n\n\n@needs_py310\ndef test_q_fixedquery():\n    client = get_client()\n    response = client.post(\"/items/\", data={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == \"Hello fixedquery\"\n\n\n@needs_py310\ndef test_query_nonregexquery():\n    client = get_client()\n    response = client.post(\"/items/\", data={\"q\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"q\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"body\", \"q\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema():\n    client = get_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__post\": {\n                    \"properties\": {\n                        \"q\": IsDict(\n                            {\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"pattern\": \"^fixedquery$\"},\n                                    {\"type\": \"null\"},\n                                ],\n                                \"title\": \"Q\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"type\": \"string\", \"pattern\": \"^fixedquery$\", \"title\": \"Q\"}\n                        )\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"Body_read_items_items__post\",\n                },\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_dependency_duplicates.py": "from typing import List\n\nfrom dirty_equals import IsDict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclient = TestClient(app)\n\n\nclass Item(BaseModel):\n    data: str\n\n\ndef duplicate_dependency(item: Item):\n    return item\n\n\ndef dependency(item2: Item):\n    return item2\n\n\ndef sub_duplicate_dependency(\n    item: Item, sub_item: Item = Depends(duplicate_dependency)\n):\n    return [item, sub_item]\n\n\n@app.post(\"/with-duplicates\")\nasync def with_duplicates(item: Item, item2: Item = Depends(duplicate_dependency)):\n    return [item, item2]\n\n\n@app.post(\"/no-duplicates\")\nasync def no_duplicates(item: Item, item2: Item = Depends(dependency)):\n    return [item, item2]\n\n\n@app.post(\"/with-duplicates-sub\")\nasync def no_duplicates_sub(\n    item: Item, sub_items: List[Item] = Depends(sub_duplicate_dependency)\n):\n    return [item, sub_items]\n\n\ndef test_no_duplicates_invalid():\n    response = client.post(\"/no-duplicates\", json={\"item\": {\"data\": \"myitem\"}})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item2\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item2\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_no_duplicates():\n    response = client.post(\n        \"/no-duplicates\",\n        json={\"item\": {\"data\": \"myitem\"}, \"item2\": {\"data\": \"myitem2\"}},\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem2\"}]\n\n\ndef test_duplicates():\n    response = client.post(\"/with-duplicates\", json={\"data\": \"myitem\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}]\n\n\ndef test_sub_duplicates():\n    response = client.post(\"/with-duplicates-sub\", json={\"data\": \"myitem\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"data\": \"myitem\"},\n        [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}],\n    ]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/with-duplicates\": {\n                \"post\": {\n                    \"summary\": \"With Duplicates\",\n                    \"operationId\": \"with_duplicates_with_duplicates_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/no-duplicates\": {\n                \"post\": {\n                    \"summary\": \"No Duplicates\",\n                    \"operationId\": \"no_duplicates_no_duplicates_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_no_duplicates_no_duplicates_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/with-duplicates-sub\": {\n                \"post\": {\n                    \"summary\": \"No Duplicates Sub\",\n                    \"operationId\": \"no_duplicates_sub_with_duplicates_sub_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_no_duplicates_no_duplicates_post\": {\n                    \"title\": \"Body_no_duplicates_no_duplicates_post\",\n                    \"required\": [\"item\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"data\": {\"title\": \"Data\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_read_with_orm_mode.py": "from typing import Any\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, ConfigDict\n\nfrom .utils import needs_pydanticv1, needs_pydanticv2\n\n\n@needs_pydanticv2\ndef test_read_with_orm_mode() -> None:\n    class PersonBase(BaseModel):\n        name: str\n        lastname: str\n\n    class Person(PersonBase):\n        @property\n        def full_name(self) -> str:\n            return f\"{self.name} {self.lastname}\"\n\n        model_config = ConfigDict(from_attributes=True)\n\n    class PersonCreate(PersonBase):\n        pass\n\n    class PersonRead(PersonBase):\n        full_name: str\n\n        model_config = {\"from_attributes\": True}\n\n    app = FastAPI()\n\n    @app.post(\"/people/\", response_model=PersonRead)\n    def create_person(person: PersonCreate) -> Any:\n        db_person = Person.model_validate(person)\n        return db_person\n\n    client = TestClient(app)\n\n    person_data = {\"name\": \"Dive\", \"lastname\": \"Wilson\"}\n    response = client.post(\"/people/\", json=person_data)\n    data = response.json()\n    assert response.status_code == 200, response.text\n    assert data[\"name\"] == person_data[\"name\"]\n    assert data[\"lastname\"] == person_data[\"lastname\"]\n    assert data[\"full_name\"] == person_data[\"name\"] + \" \" + person_data[\"lastname\"]\n\n\n@needs_pydanticv1\ndef test_read_with_orm_mode_pv1() -> None:\n    class PersonBase(BaseModel):\n        name: str\n        lastname: str\n\n    class Person(PersonBase):\n        @property\n        def full_name(self) -> str:\n            return f\"{self.name} {self.lastname}\"\n\n        class Config:\n            orm_mode = True\n            read_with_orm_mode = True\n\n    class PersonCreate(PersonBase):\n        pass\n\n    class PersonRead(PersonBase):\n        full_name: str\n\n        class Config:\n            orm_mode = True\n\n    app = FastAPI()\n\n    @app.post(\"/people/\", response_model=PersonRead)\n    def create_person(person: PersonCreate) -> Any:\n        db_person = Person.from_orm(person)\n        return db_person\n\n    client = TestClient(app)\n\n    person_data = {\"name\": \"Dive\", \"lastname\": \"Wilson\"}\n    response = client.post(\"/people/\", json=person_data)\n    data = response.json()\n    assert response.status_code == 200, response.text\n    assert data[\"name\"] == person_data[\"name\"]\n    assert data[\"lastname\"] == person_data[\"lastname\"]\n    assert data[\"full_name\"] == person_data[\"name\"] + \" \" + person_data[\"lastname\"]\n", "tests/test_invalid_path_param.py": "from typing import Dict, List, Tuple\n\nimport pytest\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\ndef test_invalid_sequence():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: List[Item]):\n            pass  # pragma: no cover\n\n\ndef test_invalid_tuple():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: Tuple[Item, Item]):\n            pass  # pragma: no cover\n\n\ndef test_invalid_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: Dict[str, Item]):\n            pass  # pragma: no cover\n\n\ndef test_invalid_simple_list():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: list):\n            pass  # pragma: no cover\n\n\ndef test_invalid_simple_tuple():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: tuple):\n            pass  # pragma: no cover\n\n\ndef test_invalid_simple_set():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: set):\n            pass  # pragma: no cover\n\n\ndef test_invalid_simple_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        @app.get(\"/items/{id}\")\n        def read_items(id: dict):\n            pass  # pragma: no cover\n", "tests/test_security_api_key_header.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyHeader\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyHeader(name=\"key\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_api_key():\n    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyHeader\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyHeader\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"header\"}\n            }\n        },\n    }\n", "tests/test_security_oauth2_password_bearer_optional.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import OAuth2PasswordBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/token\", auto_error=False)\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Optional[str] = Security(oauth2_scheme)):\n    if token is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"token\": token}\n\n\nclient = TestClient(app)\n\n\ndef test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\ndef test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n                }\n            }\n        },\n    }\n", "tests/test_duplicate_models_openapi.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Model(BaseModel):\n    pass\n\n\nclass Model2(BaseModel):\n    a: Model\n\n\nclass Model3(BaseModel):\n    c: Model\n    d: Model2\n\n\n@app.get(\"/\", response_model=Model3)\ndef f():\n    return {\"c\": {}, \"d\": {\"a\": {}}}\n\n\nclient = TestClient(app)\n\n\ndef test_get_api_route():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"c\": {}, \"d\": {\"a\": {}}}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"F\",\n                    \"operationId\": \"f__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model3\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Model\": {\"title\": \"Model\", \"type\": \"object\", \"properties\": {}},\n                \"Model2\": {\n                    \"title\": \"Model2\",\n                    \"required\": [\"a\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"a\": {\"$ref\": \"#/components/schemas/Model\"}},\n                },\n                \"Model3\": {\n                    \"title\": \"Model3\",\n                    \"required\": [\"c\", \"d\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"c\": {\"$ref\": \"#/components/schemas/Model\"},\n                        \"d\": {\"$ref\": \"#/components/schemas/Model2\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_response_model_include_exclude.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\n\nclass Model1(BaseModel):\n    foo: str\n    bar: str\n\n\nclass Model2(BaseModel):\n    ref: Model1\n    baz: str\n\n\nclass Model3(BaseModel):\n    name: str\n    age: int\n    ref2: Model2\n\n\napp = FastAPI()\n\n\n@app.get(\n    \"/simple_include\",\n    response_model=Model2,\n    response_model_include={\"baz\": ..., \"ref\": {\"foo\"}},\n)\ndef simple_include():\n    return Model2(\n        ref=Model1(foo=\"simple_include model foo\", bar=\"simple_include model bar\"),\n        baz=\"simple_include model2 baz\",\n    )\n\n\n@app.get(\n    \"/simple_include_dict\",\n    response_model=Model2,\n    response_model_include={\"baz\": ..., \"ref\": {\"foo\"}},\n)\ndef simple_include_dict():\n    return {\n        \"ref\": {\n            \"foo\": \"simple_include_dict model foo\",\n            \"bar\": \"simple_include_dict model bar\",\n        },\n        \"baz\": \"simple_include_dict model2 baz\",\n    }\n\n\n@app.get(\n    \"/simple_exclude\",\n    response_model=Model2,\n    response_model_exclude={\"ref\": {\"bar\"}},\n)\ndef simple_exclude():\n    return Model2(\n        ref=Model1(foo=\"simple_exclude model foo\", bar=\"simple_exclude model bar\"),\n        baz=\"simple_exclude model2 baz\",\n    )\n\n\n@app.get(\n    \"/simple_exclude_dict\",\n    response_model=Model2,\n    response_model_exclude={\"ref\": {\"bar\"}},\n)\ndef simple_exclude_dict():\n    return {\n        \"ref\": {\n            \"foo\": \"simple_exclude_dict model foo\",\n            \"bar\": \"simple_exclude_dict model bar\",\n        },\n        \"baz\": \"simple_exclude_dict model2 baz\",\n    }\n\n\n@app.get(\n    \"/mixed\",\n    response_model=Model3,\n    response_model_include={\"ref2\", \"name\"},\n    response_model_exclude={\"ref2\": {\"baz\"}},\n)\ndef mixed():\n    return Model3(\n        name=\"mixed model3 name\",\n        age=3,\n        ref2=Model2(\n            ref=Model1(foo=\"mixed model foo\", bar=\"mixed model bar\"),\n            baz=\"mixed model2 baz\",\n        ),\n    )\n\n\n@app.get(\n    \"/mixed_dict\",\n    response_model=Model3,\n    response_model_include={\"ref2\", \"name\"},\n    response_model_exclude={\"ref2\": {\"baz\"}},\n)\ndef mixed_dict():\n    return {\n        \"name\": \"mixed_dict model3 name\",\n        \"age\": 3,\n        \"ref2\": {\n            \"ref\": {\"foo\": \"mixed_dict model foo\", \"bar\": \"mixed_dict model bar\"},\n            \"baz\": \"mixed_dict model2 baz\",\n        },\n    }\n\n\nclient = TestClient(app)\n\n\ndef test_nested_include_simple():\n    response = client.get(\"/simple_include\")\n\n    assert response.status_code == 200, response.text\n\n    assert response.json() == {\n        \"baz\": \"simple_include model2 baz\",\n        \"ref\": {\"foo\": \"simple_include model foo\"},\n    }\n\n\ndef test_nested_include_simple_dict():\n    response = client.get(\"/simple_include_dict\")\n\n    assert response.status_code == 200, response.text\n\n    assert response.json() == {\n        \"baz\": \"simple_include_dict model2 baz\",\n        \"ref\": {\"foo\": \"simple_include_dict model foo\"},\n    }\n\n\ndef test_nested_exclude_simple():\n    response = client.get(\"/simple_exclude\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"baz\": \"simple_exclude model2 baz\",\n        \"ref\": {\"foo\": \"simple_exclude model foo\"},\n    }\n\n\ndef test_nested_exclude_simple_dict():\n    response = client.get(\"/simple_exclude_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"baz\": \"simple_exclude_dict model2 baz\",\n        \"ref\": {\"foo\": \"simple_exclude_dict model foo\"},\n    }\n\n\ndef test_nested_include_mixed():\n    response = client.get(\"/mixed\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"mixed model3 name\",\n        \"ref2\": {\n            \"ref\": {\"foo\": \"mixed model foo\", \"bar\": \"mixed model bar\"},\n        },\n    }\n\n\ndef test_nested_include_mixed_dict():\n    response = client.get(\"/mixed_dict\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"mixed_dict model3 name\",\n        \"ref2\": {\n            \"ref\": {\"foo\": \"mixed_dict model foo\", \"bar\": \"mixed_dict model bar\"},\n        },\n    }\n", "tests/test_query.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_query():\n    response = client.get(\"/query\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_query_baz():\n    response = client.get(\"/query?query=baz\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar baz\"\n\n\ndef test_query_not_declared_baz():\n    response = client.get(\"/query?not_declared=baz\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_optional():\n    response = client.get(\"/query/optional\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"\n\n\ndef test_query_optional_query_baz():\n    response = client.get(\"/query/optional?query=baz\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar baz\"\n\n\ndef test_query_optional_not_declared_baz():\n    response = client.get(\"/query/optional?not_declared=baz\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"\n\n\ndef test_query_int():\n    response = client.get(\"/query/int\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_int_query_42():\n    response = client.get(\"/query/int?query=42\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 42\"\n\n\ndef test_query_int_query_42_5():\n    response = client.get(\"/query/int?query=42.5\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"42.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_int_query_baz():\n    response = client.get(\"/query/int?query=baz\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"baz\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_int_not_declared_baz():\n    response = client.get(\"/query/int?not_declared=baz\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_int_optional():\n    response = client.get(\"/query/int/optional\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"\n\n\ndef test_query_int_optional_query_50():\n    response = client.get(\"/query/int/optional?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"\n\n\ndef test_query_int_optional_query_foo():\n    response = client.get(\"/query/int/optional?query=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_int_default():\n    response = client.get(\"/query/int/default\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 10\"\n\n\ndef test_query_int_default_query_50():\n    response = client.get(\"/query/int/default?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"\n\n\ndef test_query_int_default_query_foo():\n    response = client.get(\"/query/int/default?query=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_param():\n    response = client.get(\"/query/param\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar\"\n\n\ndef test_query_param_query_50():\n    response = client.get(\"/query/param?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"\n\n\ndef test_query_param_required():\n    response = client.get(\"/query/param-required\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_param_required_query_50():\n    response = client.get(\"/query/param-required?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"\n\n\ndef test_query_param_required_int():\n    response = client.get(\"/query/param-required/int\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_param_required_int_query_50():\n    response = client.get(\"/query/param-required/int?query=50\")\n    assert response.status_code == 200\n    assert response.json() == \"foo bar 50\"\n\n\ndef test_query_param_required_int_query_foo():\n    response = client.get(\"/query/param-required/int?query=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"query\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_query_frozenset_query_1_query_1_query_2():\n    response = client.get(\"/query/frozenset/?query=1&query=1&query=2\")\n    assert response.status_code == 200\n    assert response.json() == \"1,2\"\n\n\ndef test_query_list():\n    response = client.get(\"/query/list/?device_ids=1&device_ids=2\")\n    assert response.status_code == 200\n    assert response.json() == [1, 2]\n\n\ndef test_query_list_empty():\n    response = client.get(\"/query/list/\")\n    assert response.status_code == 422\n\n\ndef test_query_list_default():\n    response = client.get(\"/query/list-default/?device_ids=1&device_ids=2\")\n    assert response.status_code == 200\n    assert response.json() == [1, 2]\n\n\ndef test_query_list_default_empty():\n    response = client.get(\"/query/list-default/\")\n    assert response.status_code == 200\n    assert response.json() == []\n", "tests/test_custom_schema_fields.py": "from fastapi import FastAPI\nfrom fastapi._compat import PYDANTIC_V2\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n\n    if PYDANTIC_V2:\n        model_config = {\n            \"json_schema_extra\": {\n                \"x-something-internal\": {\"level\": 4},\n            }\n        }\n    else:\n\n        class Config:\n            schema_extra = {\n                \"x-something-internal\": {\"level\": 4},\n            }\n\n\n@app.get(\"/foo\", response_model=Item)\ndef foo():\n    return {\"name\": \"Foo item\"}\n\n\nclient = TestClient(app)\n\n\nitem_schema = {\n    \"title\": \"Item\",\n    \"required\": [\"name\"],\n    \"type\": \"object\",\n    \"x-something-internal\": {\n        \"level\": 4,\n    },\n    \"properties\": {\n        \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\",\n        }\n    },\n}\n\n\ndef test_custom_response_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json()[\"components\"][\"schemas\"][\"Item\"] == item_schema\n\n\ndef test_response():\n    # For coverage\n    response = client.get(\"/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo item\"}\n", "tests/test_orjson_response_class.py": "from fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy.sql.elements import quoted_name\n\napp = FastAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/orjson_non_str_keys\")\ndef get_orjson_non_str_keys():\n    key = quoted_name(value=\"msg\", quote=False)\n    return {key: \"Hello World\", 1: 1}\n\n\nclient = TestClient(app)\n\n\ndef test_orjson_non_str_keys():\n    with client:\n        response = client.get(\"/orjson_non_str_keys\")\n    assert response.json() == {\"msg\": \"Hello World\", \"1\": 1}\n", "tests/test_additional_properties_bool.py": "from typing import Union\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi._compat import PYDANTIC_V2\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, ConfigDict\n\n\nclass FooBaseModel(BaseModel):\n    if PYDANTIC_V2:\n        model_config = ConfigDict(extra=\"forbid\")\n    else:\n\n        class Config:\n            extra = \"forbid\"\n\n\nclass Foo(FooBaseModel):\n    pass\n\n\napp = FastAPI()\n\n\n@app.post(\"/\")\nasync def post(\n    foo: Union[Foo, None] = None,\n):\n    return foo\n\n\nclient = TestClient(app)\n\n\ndef test_call_invalid():\n    response = client.post(\"/\", json={\"foo\": {\"bar\": \"baz\"}})\n    assert response.status_code == 422\n\n\ndef test_call_valid():\n    response = client.post(\"/\", json={})\n    assert response.status_code == 200\n    assert response.json() == {}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post\",\n                    \"operationId\": \"post__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Foo\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Foo\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Foo\"}\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Foo\": {\n                    \"properties\": {},\n                    \"additionalProperties\": False,\n                    \"type\": \"object\",\n                    \"title\": \"Foo\",\n                },\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_router_redirect_slashes.py": "from fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\n\n\ndef test_redirect_slashes_enabled():\n    app = FastAPI()\n    router = APIRouter()\n\n    @router.get(\"/hello/\")\n    def hello_page() -> str:\n        return \"Hello, World!\"\n\n    app.include_router(router)\n\n    client = TestClient(app)\n\n    response = client.get(\"/hello/\", follow_redirects=False)\n    assert response.status_code == 200\n\n    response = client.get(\"/hello\", follow_redirects=False)\n    assert response.status_code == 307\n\n\ndef test_redirect_slashes_disabled():\n    app = FastAPI(redirect_slashes=False)\n    router = APIRouter()\n\n    @router.get(\"/hello/\")\n    def hello_page() -> str:\n        return \"Hello, World!\"\n\n    app.include_router(router)\n\n    client = TestClient(app)\n\n    response = client.get(\"/hello/\", follow_redirects=False)\n    assert response.status_code == 200\n\n    response = client.get(\"/hello\", follow_redirects=False)\n    assert response.status_code == 404\n", "tests/test_security_http_base_optional.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security.http import HTTPAuthorizationCredentials, HTTPBase\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBase(scheme=\"Other\", auto_error=False)\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_base():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_base_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBase\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n        },\n    }\n", "tests/test_swagger_ui_init_oauth.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nswagger_ui_init_oauth = {\"clientId\": \"the-foo-clients\", \"appName\": \"The Predendapp\"}\n\napp = FastAPI(swagger_ui_init_oauth=swagger_ui_init_oauth)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return {\"id\": \"foo\"}\n\n\nclient = TestClient(app)\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    print(response.text)\n    assert \"ui.initOAuth\" in response.text\n    assert '\"appName\": \"The Predendapp\"' in response.text\n    assert '\"clientId\": \"the-foo-clients\"' in response.text\n\n\ndef test_response():\n    response = client.get(\"/items/\")\n    assert response.json() == {\"id\": \"foo\"}\n", "tests/test_security_oauth2_password_bearer_optional_description.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import OAuth2PasswordBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"/token\",\n    description=\"OAuth2PasswordBearer security scheme\",\n    auto_error=False,\n)\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Optional[str] = Security(oauth2_scheme)):\n    if token is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"token\": token}\n\n\nclient = TestClient(app)\n\n\ndef test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\ndef test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n                    \"description\": \"OAuth2PasswordBearer security scheme\",\n                }\n            }\n        },\n    }\n", "tests/test_jsonable_encoder.py": "from collections import deque\nfrom dataclasses import dataclass\nfrom datetime import datetime, timezone\nfrom decimal import Decimal\nfrom enum import Enum\nfrom pathlib import PurePath, PurePosixPath, PureWindowsPath\nfrom typing import Optional\n\nimport pytest\nfrom fastapi._compat import PYDANTIC_V2, Undefined\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel, Field, ValidationError\n\nfrom .utils import needs_pydanticv1, needs_pydanticv2\n\n\nclass Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\nclass Pet:\n    def __init__(self, owner: Person, name: str):\n        self.owner = owner\n        self.name = name\n\n\n@dataclass\nclass Item:\n    name: str\n    count: int\n\n\nclass DictablePerson(Person):\n    def __iter__(self):\n        return ((k, v) for k, v in self.__dict__.items())\n\n\nclass DictablePet(Pet):\n    def __iter__(self):\n        return ((k, v) for k, v in self.__dict__.items())\n\n\nclass Unserializable:\n    def __iter__(self):\n        raise NotImplementedError()\n\n    @property\n    def __dict__(self):\n        raise NotImplementedError()\n\n\nclass RoleEnum(Enum):\n    admin = \"admin\"\n    normal = \"normal\"\n\n\nclass ModelWithConfig(BaseModel):\n    role: Optional[RoleEnum] = None\n\n    if PYDANTIC_V2:\n        model_config = {\"use_enum_values\": True}\n    else:\n\n        class Config:\n            use_enum_values = True\n\n\nclass ModelWithAlias(BaseModel):\n    foo: str = Field(alias=\"Foo\")\n\n\nclass ModelWithDefault(BaseModel):\n    foo: str = ...  # type: ignore\n    bar: str = \"bar\"\n    bla: str = \"bla\"\n\n\ndef test_encode_dict():\n    pet = {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, include={}) == {}\n    assert jsonable_encoder(pet, exclude={}) == {\n        \"name\": \"Firulais\",\n        \"owner\": {\"name\": \"Foo\"},\n    }\n\n\ndef test_encode_class():\n    person = Person(name=\"Foo\")\n    pet = Pet(owner=person, name=\"Firulais\")\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, include={}) == {}\n    assert jsonable_encoder(pet, exclude={}) == {\n        \"name\": \"Firulais\",\n        \"owner\": {\"name\": \"Foo\"},\n    }\n\n\ndef test_encode_dictable():\n    person = DictablePerson(name=\"Foo\")\n    pet = DictablePet(owner=person, name=\"Firulais\")\n    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n    assert jsonable_encoder(pet, include={}) == {}\n    assert jsonable_encoder(pet, exclude={}) == {\n        \"name\": \"Firulais\",\n        \"owner\": {\"name\": \"Foo\"},\n    }\n\n\ndef test_encode_dataclass():\n    item = Item(name=\"foo\", count=100)\n    assert jsonable_encoder(item) == {\"name\": \"foo\", \"count\": 100}\n    assert jsonable_encoder(item, include={\"name\"}) == {\"name\": \"foo\"}\n    assert jsonable_encoder(item, exclude={\"count\"}) == {\"name\": \"foo\"}\n    assert jsonable_encoder(item, include={}) == {}\n    assert jsonable_encoder(item, exclude={}) == {\"name\": \"foo\", \"count\": 100}\n\n\ndef test_encode_unsupported():\n    unserializable = Unserializable()\n    with pytest.raises(ValueError):\n        jsonable_encoder(unserializable)\n\n\n@needs_pydanticv2\ndef test_encode_custom_json_encoders_model_pydanticv2():\n    from pydantic import field_serializer\n\n    class ModelWithCustomEncoder(BaseModel):\n        dt_field: datetime\n\n        @field_serializer(\"dt_field\")\n        def serialize_dt_field(self, dt):\n            return dt.replace(microsecond=0, tzinfo=timezone.utc).isoformat()\n\n    class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n        pass\n\n    model = ModelWithCustomEncoder(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n    subclass_model = ModelWithCustomEncoderSubclass(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(subclass_model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_encode_custom_json_encoders_model_pydanticv1():\n    class ModelWithCustomEncoder(BaseModel):\n        dt_field: datetime\n\n        class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }\n\n    class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n        class Config:\n            pass\n\n    model = ModelWithCustomEncoder(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n    subclass_model = ModelWithCustomEncoderSubclass(dt_field=datetime(2019, 1, 1, 8))\n    assert jsonable_encoder(subclass_model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n\n\ndef test_encode_model_with_config():\n    model = ModelWithConfig(role=RoleEnum.admin)\n    assert jsonable_encoder(model) == {\"role\": \"admin\"}\n\n\ndef test_encode_model_with_alias_raises():\n    with pytest.raises(ValidationError):\n        ModelWithAlias(foo=\"Bar\")\n\n\ndef test_encode_model_with_alias():\n    model = ModelWithAlias(Foo=\"Bar\")\n    assert jsonable_encoder(model) == {\"Foo\": \"Bar\"}\n\n\ndef test_encode_model_with_default():\n    model = ModelWithDefault(foo=\"foo\", bar=\"bar\")\n    assert jsonable_encoder(model) == {\"foo\": \"foo\", \"bar\": \"bar\", \"bla\": \"bla\"}\n    assert jsonable_encoder(model, exclude_unset=True) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n    assert jsonable_encoder(model, exclude_defaults=True) == {\"foo\": \"foo\"}\n    assert jsonable_encoder(model, exclude_unset=True, exclude_defaults=True) == {\n        \"foo\": \"foo\"\n    }\n    assert jsonable_encoder(model, include={\"foo\"}) == {\"foo\": \"foo\"}\n    assert jsonable_encoder(model, exclude={\"bla\"}) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n    assert jsonable_encoder(model, include={}) == {}\n    assert jsonable_encoder(model, exclude={}) == {\n        \"foo\": \"foo\",\n        \"bar\": \"bar\",\n        \"bla\": \"bla\",\n    }\n\n\n@needs_pydanticv1\ndef test_custom_encoders():\n    class safe_datetime(datetime):\n        pass\n\n    class MyModel(BaseModel):\n        dt_field: safe_datetime\n\n    instance = MyModel(dt_field=safe_datetime.now())\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n    )\n    assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()\n\n\ndef test_custom_enum_encoders():\n    def custom_enum_encoder(v: Enum):\n        return v.value.lower()\n\n    class MyEnum(Enum):\n        ENUM_VAL_1 = \"ENUM_VAL_1\"\n\n    instance = MyEnum.ENUM_VAL_1\n\n    encoded_instance = jsonable_encoder(\n        instance, custom_encoder={MyEnum: custom_enum_encoder}\n    )\n    assert encoded_instance == custom_enum_encoder(instance)\n\n\ndef test_encode_model_with_pure_path():\n    class ModelWithPath(BaseModel):\n        path: PurePath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True\n\n    test_path = PurePath(\"/foo\", \"bar\")\n    obj = ModelWithPath(path=test_path)\n    assert jsonable_encoder(obj) == {\"path\": str(test_path)}\n\n\ndef test_encode_model_with_pure_posix_path():\n    class ModelWithPath(BaseModel):\n        path: PurePosixPath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True\n\n    obj = ModelWithPath(path=PurePosixPath(\"/foo\", \"bar\"))\n    assert jsonable_encoder(obj) == {\"path\": \"/foo/bar\"}\n\n\ndef test_encode_model_with_pure_windows_path():\n    class ModelWithPath(BaseModel):\n        path: PureWindowsPath\n\n        if PYDANTIC_V2:\n            model_config = {\"arbitrary_types_allowed\": True}\n        else:\n\n            class Config:\n                arbitrary_types_allowed = True\n\n    obj = ModelWithPath(path=PureWindowsPath(\"/foo\", \"bar\"))\n    assert jsonable_encoder(obj) == {\"path\": \"\\\\foo\\\\bar\"}\n\n\n@needs_pydanticv1\ndef test_encode_root():\n    class ModelWithRoot(BaseModel):\n        __root__: str\n\n    model = ModelWithRoot(__root__=\"Foo\")\n    assert jsonable_encoder(model) == \"Foo\"\n\n\n@needs_pydanticv2\ndef test_decimal_encoder_float():\n    data = {\"value\": Decimal(1.23)}\n    assert jsonable_encoder(data) == {\"value\": 1.23}\n\n\n@needs_pydanticv2\ndef test_decimal_encoder_int():\n    data = {\"value\": Decimal(2)}\n    assert jsonable_encoder(data) == {\"value\": 2}\n\n\ndef test_encode_deque_encodes_child_models():\n    class Model(BaseModel):\n        test: str\n\n    dq = deque([Model(test=\"test\")])\n\n    assert jsonable_encoder(dq)[0][\"test\"] == \"test\"\n\n\n@needs_pydanticv2\ndef test_encode_pydantic_undefined():\n    data = {\"value\": Undefined}\n    assert jsonable_encoder(data) == {\"value\": None}\n", "tests/test_infer_param_optionality.py": "from typing import Optional\n\nfrom dirty_equals import IsDict\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nuser_router = APIRouter()\nitem_router = APIRouter()\n\n\n@user_router.get(\"/\")\ndef get_users():\n    return [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]\n\n\n@user_router.get(\"/{user_id}\")\ndef get_user(user_id: str):\n    return {\"user_id\": user_id}\n\n\n@item_router.get(\"/\")\ndef get_items(user_id: Optional[str] = None):\n    if user_id is None:\n        return [{\"item_id\": \"i1\", \"user_id\": \"u1\"}, {\"item_id\": \"i2\", \"user_id\": \"u2\"}]\n    else:\n        return [{\"item_id\": \"i2\", \"user_id\": user_id}]\n\n\n@item_router.get(\"/{item_id}\")\ndef get_item(item_id: str, user_id: Optional[str] = None):\n    if user_id is None:\n        return {\"item_id\": item_id}\n    else:\n        return {\"item_id\": item_id, \"user_id\": user_id}\n\n\napp.include_router(user_router, prefix=\"/users\")\napp.include_router(item_router, prefix=\"/items\")\n\napp.include_router(item_router, prefix=\"/users/{user_id}/items\")\n\n\nclient = TestClient(app)\n\n\ndef test_get_users():\n    \"\"\"Check that /users returns expected data\"\"\"\n    response = client.get(\"/users\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]\n\n\ndef test_get_user():\n    \"\"\"Check that /users/{user_id} returns expected data\"\"\"\n    response = client.get(\"/users/abc123\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"user_id\": \"abc123\"}\n\n\ndef test_get_items_1():\n    \"\"\"Check that /items returns expected data\"\"\"\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"item_id\": \"i1\", \"user_id\": \"u1\"},\n        {\"item_id\": \"i2\", \"user_id\": \"u2\"},\n    ]\n\n\ndef test_get_items_2():\n    \"\"\"Check that /items returns expected data with user_id specified\"\"\"\n    response = client.get(\"/items?user_id=abc123\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]\n\n\ndef test_get_item_1():\n    \"\"\"Check that /items/{item_id} returns expected data\"\"\"\n    response = client.get(\"/items/item01\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"item01\"}\n\n\ndef test_get_item_2():\n    \"\"\"Check that /items/{item_id} returns expected data with user_id specified\"\"\"\n    response = client.get(\"/items/item01?user_id=abc123\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}\n\n\ndef test_get_users_items():\n    \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n    response = client.get(\"/users/abc123/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]\n\n\ndef test_get_users_item():\n    \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n    response = client.get(\"/users/abc123/items/item01\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Get Users\",\n                    \"operationId\": \"get_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"summary\": \"Get User\",\n                    \"operationId\": \"get_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"string\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"name\": \"user_id\",\n                            \"in\": \"query\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Get Item\",\n                    \"operationId\": \"get_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"name\": \"user_id\",\n                            \"in\": \"query\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"get\": {\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_users__user_id__items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{user_id}/items/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Get Item\",\n                    \"operationId\": \"get_item_users__user_id__items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User Id\", \"type\": \"string\"}\n                            ),\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_generate_unique_id_function.py": "import warnings\nfrom typing import List\n\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.routing import APIRoute\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"foo_{route.name}\"\n\n\ndef custom_generate_unique_id2(route: APIRoute):\n    return f\"bar_{route.name}\"\n\n\ndef custom_generate_unique_id3(route: APIRoute):\n    return f\"baz_{route.name}\"\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass Message(BaseModel):\n    title: str\n    description: str\n\n\ndef test_top_level_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter()\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"foo_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_router\": {\n                    \"title\": \"Body_foo_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_router_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"bar_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_router\": {\n                    \"title\": \"Body_bar_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_router_include_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router, generate_unique_id_function=custom_generate_unique_id3)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"bar_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_router\": {\n                    \"title\": \"Body_bar_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_subrouter_top_level_include_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter()\n    sub_router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @sub_router.post(\n        \"/subrouter\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n    )\n    def post_subrouter(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    router.include_router(sub_router)\n    app.include_router(router, generate_unique_id_function=custom_generate_unique_id3)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"baz_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/subrouter\": {\n                \"post\": {\n                    \"summary\": \"Post Subrouter\",\n                    \"operationId\": \"bar_post_subrouter\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_subrouter\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Subrouter\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Subrouter\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_subrouter\": {\n                    \"title\": \"Body_bar_post_subrouter\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_baz_post_router\": {\n                    \"title\": \"Body_baz_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_router_path_operation_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"foo_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"baz_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_baz_post_router\": {\n                    \"title\": \"Body_baz_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_root\": {\n                    \"title\": \"Body_foo_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_app_path_operation_overrides_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @app.post(\n        \"/\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n    )\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @router.post(\n        \"/router\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n    )\n    def post_router(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    app.include_router(router)\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"baz_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/router\": {\n                \"post\": {\n                    \"summary\": \"Post Router\",\n                    \"operationId\": \"bar_post_router\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Bar Post Router\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_bar_post_router\": {\n                    \"title\": \"Body_bar_post_router\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_baz_post_root\": {\n                    \"title\": \"Body_baz_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_callback_override_generate_unique_id():\n    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n    callback_router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n\n    @callback_router.post(\n        \"/post-callback\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n    )\n    def post_callback(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @app.post(\n        \"/\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n        generate_unique_id_function=custom_generate_unique_id3,\n        callbacks=callback_router.routes,\n    )\n    def post_root(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    @app.post(\n        \"/tocallback\",\n        response_model=List[Item],\n        responses={404: {\"model\": List[Message]}},\n    )\n    def post_with_callback(item1: Item, item2: Item):\n        return item1, item2  # pragma: nocover\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"post\": {\n                    \"summary\": \"Post Root\",\n                    \"operationId\": \"baz_post_root\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_baz_post_root\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Baz Post Root\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"callbacks\": {\n                        \"post_callback\": {\n                            \"/post-callback\": {\n                                \"post\": {\n                                    \"summary\": \"Post Callback\",\n                                    \"operationId\": \"baz_post_callback\",\n                                    \"requestBody\": {\n                                        \"content\": {\n                                            \"application/json\": {\n                                                \"schema\": {\n                                                    \"$ref\": \"#/components/schemas/Body_baz_post_callback\"\n                                                }\n                                            }\n                                        },\n                                        \"required\": True,\n                                    },\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"title\": \"Response Baz Post Callback\",\n                                                        \"type\": \"array\",\n                                                        \"items\": {\n                                                            \"$ref\": \"#/components/schemas/Item\"\n                                                        },\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"404\": {\n                                            \"description\": \"Not Found\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"title\": \"Response 404 Baz Post Callback\",\n                                                        \"type\": \"array\",\n                                                        \"items\": {\n                                                            \"$ref\": \"#/components/schemas/Message\"\n                                                        },\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            \"/tocallback\": {\n                \"post\": {\n                    \"summary\": \"Post With Callback\",\n                    \"operationId\": \"foo_post_with_callback\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_foo_post_with_callback\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Foo Post With Callback\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 404 Foo Post With Callback\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Message\"\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_baz_post_callback\": {\n                    \"title\": \"Body_baz_post_callback\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_baz_post_root\": {\n                    \"title\": \"Body_baz_post_root\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"Body_foo_post_with_callback\": {\n                    \"title\": \"Body_foo_post_with_callback\",\n                    \"required\": [\"item1\", \"item2\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"title\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\ndef test_warn_duplicate_operation_id():\n    def broken_operation_id(route: APIRoute):\n        return \"foo\"\n\n    app = FastAPI(generate_unique_id_function=broken_operation_id)\n\n    @app.post(\"/\")\n    def post_root(item1: Item):\n        return item1  # pragma: nocover\n\n    @app.post(\"/second\")\n    def post_second(item1: Item):\n        return item1  # pragma: nocover\n\n    @app.post(\"/third\")\n    def post_third(item1: Item):\n        return item1  # pragma: nocover\n\n    client = TestClient(app)\n    with warnings.catch_warnings(record=True) as w:\n        warnings.simplefilter(\"always\")\n        client.get(\"/openapi.json\")\n        assert len(w) >= 2\n        duplicate_warnings = [\n            warning for warning in w if issubclass(warning.category, UserWarning)\n        ]\n        assert len(duplicate_warnings) > 0\n        assert \"Duplicate Operation ID\" in str(duplicate_warnings[0].message)\n", "tests/test_ambiguous_params.py": "import pytest\nfrom fastapi import Depends, FastAPI, Path\nfrom fastapi.param_functions import Query\nfrom fastapi.testclient import TestClient\nfrom fastapi.utils import PYDANTIC_V2\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\ndef test_no_annotated_defaults():\n    with pytest.raises(\n        AssertionError, match=\"Path parameters cannot have a default value\"\n    ):\n\n        @app.get(\"/items/{item_id}/\")\n        async def get_item(item_id: Annotated[int, Path(default=1)]):\n            pass  # pragma: nocover\n\n    with pytest.raises(\n        AssertionError,\n        match=(\n            \"`Query` default value cannot be set in `Annotated` for 'item_id'. Set the\"\n            \" default value with `=` instead.\"\n        ),\n    ):\n\n        @app.get(\"/\")\n        async def get(item_id: Annotated[int, Query(default=1)]):\n            pass  # pragma: nocover\n\n\ndef test_multiple_annotations():\n    async def dep():\n        pass  # pragma: nocover\n\n    @app.get(\"/multi-query\")\n    async def get(foo: Annotated[int, Query(gt=2), Query(lt=10)]):\n        return foo\n\n    with pytest.raises(\n        AssertionError,\n        match=(\n            \"Cannot specify `Depends` in `Annotated` and default value\"\n            \" together for 'foo'\"\n        ),\n    ):\n\n        @app.get(\"/\")\n        async def get2(foo: Annotated[int, Depends(dep)] = Depends(dep)):\n            pass  # pragma: nocover\n\n    with pytest.raises(\n        AssertionError,\n        match=(\n            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n            \" default value together for 'foo'\"\n        ),\n    ):\n\n        @app.get(\"/\")\n        async def get3(foo: Annotated[int, Query(min_length=1)] = Depends(dep)):\n            pass  # pragma: nocover\n\n    client = TestClient(app)\n    response = client.get(\"/multi-query\", params={\"foo\": \"5\"})\n    assert response.status_code == 200\n    assert response.json() == 5\n\n    response = client.get(\"/multi-query\", params={\"foo\": \"123\"})\n    assert response.status_code == 422\n\n    if PYDANTIC_V2:\n        response = client.get(\"/multi-query\", params={\"foo\": \"1\"})\n        assert response.status_code == 422\n", "tests/test_empty_router.py": "import pytest\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.exceptions import FastAPIError\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nrouter = APIRouter()\n\n\n@router.get(\"\")\ndef get_empty():\n    return [\"OK\"]\n\n\napp.include_router(router, prefix=\"/prefix\")\n\n\nclient = TestClient(app)\n\n\ndef test_use_empty():\n    with client:\n        response = client.get(\"/prefix\")\n        assert response.status_code == 200, response.text\n        assert response.json() == [\"OK\"]\n\n        response = client.get(\"/prefix/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == [\"OK\"]\n\n\ndef test_include_empty():\n    # if both include and router.path are empty - it should raise exception\n    with pytest.raises(FastAPIError):\n        app.include_router(router)\n", "tests/test_security_api_key_cookie.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyCookie\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyCookie(name=\"key\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\ndef test_security_api_key():\n    client = TestClient(app, cookies={\"key\": \"secret\"})\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    client = TestClient(app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyCookie\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyCookie\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"cookie\"}\n            }\n        },\n    }\n", "tests/test_custom_swagger_ui_redirect.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nswagger_ui_oauth2_redirect_url = \"/docs/redirect\"\n\napp = FastAPI(swagger_ui_oauth2_redirect_url=swagger_ui_oauth2_redirect_url)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return {\"id\": \"foo\"}\n\n\nclient = TestClient(app)\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"swagger-ui-dist\" in response.text\n    print(client.base_url)\n    assert (\n        f\"oauth2RedirectUrl: window.location.origin + '{swagger_ui_oauth2_redirect_url}'\"\n        in response.text\n    )\n\n\ndef test_swagger_ui_oauth2_redirect():\n    response = client.get(swagger_ui_oauth2_redirect_url)\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n\n\ndef test_response():\n    response = client.get(\"/items/\")\n    assert response.json() == {\"id\": \"foo\"}\n", "tests/test_computed_fields.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom .utils import needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    app = FastAPI()\n\n    from pydantic import BaseModel, computed_field\n\n    class Rectangle(BaseModel):\n        width: int\n        length: int\n\n        @computed_field\n        @property\n        def area(self) -> int:\n            return self.width * self.length\n\n    @app.get(\"/\")\n    def read_root() -> Rectangle:\n        return Rectangle(width=3, length=4)\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv2\ndef test_get(client: TestClient):\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"width\": 3, \"length\": 4, \"area\": 12}\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Read Root\",\n                    \"operationId\": \"read_root__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Rectangle\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Rectangle\": {\n                    \"properties\": {\n                        \"width\": {\"type\": \"integer\", \"title\": \"Width\"},\n                        \"length\": {\"type\": \"integer\", \"title\": \"Length\"},\n                        \"area\": {\"type\": \"integer\", \"title\": \"Area\", \"readOnly\": True},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"width\", \"length\", \"area\"],\n                    \"title\": \"Rectangle\",\n                }\n            }\n        },\n    }\n", "tests/test_starlette_urlconvertors.py": "from fastapi import FastAPI, Path, Query\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/int/{param:int}\")\ndef int_convertor(param: int = Path()):\n    return {\"int\": param}\n\n\n@app.get(\"/float/{param:float}\")\ndef float_convertor(param: float = Path()):\n    return {\"float\": param}\n\n\n@app.get(\"/path/{param:path}\")\ndef path_convertor(param: str = Path()):\n    return {\"path\": param}\n\n\n@app.get(\"/query/\")\ndef query_convertor(param: str = Query()):\n    return {\"query\": param}\n\n\nclient = TestClient(app)\n\n\ndef test_route_converters_int():\n    # Test integer conversion\n    response = client.get(\"/int/5\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"int\": 5}\n    assert app.url_path_for(\"int_convertor\", param=5) == \"/int/5\"  # type: ignore\n\n\ndef test_route_converters_float():\n    # Test float conversion\n    response = client.get(\"/float/25.5\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"float\": 25.5}\n    assert app.url_path_for(\"float_convertor\", param=25.5) == \"/float/25.5\"  # type: ignore\n\n\ndef test_route_converters_path():\n    # Test path conversion\n    response = client.get(\"/path/some/example\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"path\": \"some/example\"}\n\n\ndef test_route_converters_query():\n    # Test query conversion\n    response = client.get(\"/query\", params={\"param\": \"Qu\u00e9 tal!\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"query\": \"Qu\u00e9 tal!\"}\n\n\ndef test_url_path_for_path_convertor():\n    assert (\n        app.url_path_for(\"path_convertor\", param=\"some/example\") == \"/path/some/example\"\n    )\n", "tests/test_router_prefix_with_template.py": "from fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/{id}\")\ndef read_user(segment: str, id: str):\n    return {\"segment\": segment, \"id\": id}\n\n\napp.include_router(router, prefix=\"/{segment}\")\n\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/seg/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"segment\": \"seg\", \"id\": \"foo\"}\n", "tests/test_compat.py": "from typing import List, Union\n\nfrom fastapi import FastAPI, UploadFile\nfrom fastapi._compat import (\n    ModelField,\n    Undefined,\n    _get_model_config,\n    is_bytes_sequence_annotation,\n    is_uploadfile_sequence_annotation,\n)\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseConfig, BaseModel, ConfigDict\nfrom pydantic.fields import FieldInfo\n\nfrom .utils import needs_pydanticv1, needs_pydanticv2\n\n\n@needs_pydanticv2\ndef test_model_field_default_required():\n    # For coverage\n    field_info = FieldInfo(annotation=str)\n    field = ModelField(name=\"foo\", field_info=field_info)\n    assert field.default is Undefined\n\n\n@needs_pydanticv1\ndef test_upload_file_dummy_with_info_plain_validator_function():\n    # For coverage\n    assert UploadFile.__get_pydantic_core_schema__(str, lambda x: None) == {}\n\n\n@needs_pydanticv1\ndef test_union_scalar_list():\n    # For coverage\n    # TODO: there might not be a current valid code path that uses this, it would\n    # potentially enable query parameters defined as both a scalar and a list\n    # but that would require more refactors, also not sure it's really useful\n    from fastapi._compat import is_pv1_scalar_field\n\n    field_info = FieldInfo()\n    field = ModelField(\n        name=\"foo\",\n        field_info=field_info,\n        type_=Union[str, List[int]],\n        class_validators={},\n        model_config=BaseConfig,\n    )\n    assert not is_pv1_scalar_field(field)\n\n\n@needs_pydanticv2\ndef test_get_model_config():\n    # For coverage in Pydantic v2\n    class Foo(BaseModel):\n        model_config = ConfigDict(from_attributes=True)\n\n    foo = Foo()\n    config = _get_model_config(foo)\n    assert config == {\"from_attributes\": True}\n\n\ndef test_complex():\n    app = FastAPI()\n\n    @app.post(\"/\")\n    def foo(foo: Union[str, List[int]]):\n        return foo\n\n    client = TestClient(app)\n\n    response = client.post(\"/\", json=\"bar\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"bar\"\n\n    response2 = client.post(\"/\", json=[1, 2])\n    assert response2.status_code == 200, response2.text\n    assert response2.json() == [1, 2]\n\n\ndef test_is_bytes_sequence_annotation_union():\n    # For coverage\n    # TODO: in theory this would allow declaring types that could be lists of bytes\n    # to be read from files and other types, but I'm not even sure it's a good idea\n    # to support it as a first class \"feature\"\n    assert is_bytes_sequence_annotation(Union[List[str], List[bytes]])\n\n\ndef test_is_uploadfile_sequence_annotation():\n    # For coverage\n    # TODO: in theory this would allow declaring types that could be lists of UploadFile\n    # and other types, but I'm not even sure it's a good idea to support it as a first\n    # class \"feature\"\n    assert is_uploadfile_sequence_annotation(Union[List[str], List[UploadFile]])\n", "tests/test_security_oauth2.py": "from dirty_equals import IsDict\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nreusable_oauth2 = OAuth2(\n    flows={\n        \"password\": {\n            \"tokenUrl\": \"token\",\n            \"scopes\": {\"read:users\": \"Read the users\", \"write:users\": \"Create users\"},\n        }\n    }\n)\n\n\nclass User(BaseModel):\n    username: str\n\n\n# Here we use string annotations to test them\ndef get_current_user(oauth_header: \"str\" = Security(reusable_oauth2)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.post(\"/login\")\n# Here we use string annotations to test them\ndef login(form_data: \"OAuth2PasswordRequestFormStrict\" = Depends()):\n    return form_data\n\n\n@app.get(\"/users/me\")\n# Here we use string annotations to test them\ndef read_current_user(current_user: \"User\" = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_oauth2():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n\n\ndef test_security_oauth2_password_other_header():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"Other footokenbar\"}\n\n\ndef test_security_oauth2_password_bearer_no_header():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_strict_login_no_data():\n    response = client.post(\"/login\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_strict_login_no_grant_type():\n    response = client.post(\"/login\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_strict_login_incorrect_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": \"String should match pattern 'password'\",\n                    \"input\": \"incorrect\",\n                    \"ctx\": {\"pattern\": \"password\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"grant_type\"],\n                    \"msg\": 'string does not match regex \"password\"',\n                    \"type\": \"value_error.str.regex\",\n                    \"ctx\": {\"pattern\": \"password\"},\n                }\n            ]\n        }\n    )\n\n\ndef test_strict_login_correct_grant_type():\n    response = client.post(\n        \"/login\",\n        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"grant_type\": \"password\",\n        \"username\": \"johndoe\",\n        \"password\": \"secret\",\n        \"scopes\": [],\n        \"client_id\": None,\n        \"client_secret\": None,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"OAuth2\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login_post\": {\n                    \"title\": \"Body_login_login_post\",\n                    \"required\": [\"grant_type\", \"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": {\n                            \"title\": \"Grant Type\",\n                            \"pattern\": \"password\",\n                            \"type\": \"string\",\n                        },\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"read:users\": \"Read the users\",\n                                \"write:users\": \"Create users\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_no_swagger_ui_redirect.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI(swagger_ui_oauth2_redirect_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return {\"id\": \"foo\"}\n\n\nclient = TestClient(app)\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n    assert \"swagger-ui-dist\" in response.text\n    print(client.base_url)\n    assert \"oauth2RedirectUrl\" not in response.text\n\n\ndef test_swagger_ui_no_oauth2_redirect():\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 404, response.text\n\n\ndef test_response():\n    response = client.get(\"/items/\")\n    assert response.json() == {\"id\": \"foo\"}\n", "tests/test_security_api_key_cookie_description.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyCookie\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyCookie(name=\"key\", description=\"An API Cookie Key\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\ndef test_security_api_key():\n    client = TestClient(app, cookies={\"key\": \"secret\"})\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    client = TestClient(app)\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyCookie\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyCookie\": {\n                    \"type\": \"apiKey\",\n                    \"name\": \"key\",\n                    \"in\": \"cookie\",\n                    \"description\": \"An API Cookie Key\",\n                }\n            }\n        },\n    }\n", "tests/test_dependency_normal_exceptions.py": "import pytest\nfrom fastapi import Body, Depends, FastAPI, HTTPException\nfrom fastapi.testclient import TestClient\n\ninitial_fake_database = {\"rick\": \"Rick Sanchez\"}\n\nfake_database = initial_fake_database.copy()\n\ninitial_state = {\"except\": False, \"finally\": False}\n\nstate = initial_state.copy()\n\napp = FastAPI()\n\n\nasync def get_database():\n    temp_database = fake_database.copy()\n    try:\n        yield temp_database\n        fake_database.update(temp_database)\n    except HTTPException:\n        state[\"except\"] = True\n        raise\n    finally:\n        state[\"finally\"] = True\n\n\n@app.put(\"/invalid-user/{user_id}\")\ndef put_invalid_user(\n    user_id: str, name: str = Body(), db: dict = Depends(get_database)\n):\n    db[user_id] = name\n    raise HTTPException(status_code=400, detail=\"Invalid user\")\n\n\n@app.put(\"/user/{user_id}\")\ndef put_user(user_id: str, name: str = Body(), db: dict = Depends(get_database)):\n    db[user_id] = name\n    return {\"message\": \"OK\"}\n\n\n@pytest.fixture(autouse=True)\ndef reset_state_and_db():\n    global fake_database\n    global state\n    fake_database = initial_fake_database.copy()\n    state = initial_state.copy()\n\n\nclient = TestClient(app)\n\n\ndef test_dependency_gets_exception():\n    assert state[\"except\"] is False\n    assert state[\"finally\"] is False\n    response = client.put(\"/invalid-user/rick\", json=\"Morty\")\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Invalid user\"}\n    assert state[\"except\"] is True\n    assert state[\"finally\"] is True\n    assert fake_database[\"rick\"] == \"Rick Sanchez\"\n\n\ndef test_dependency_no_exception():\n    assert state[\"except\"] is False\n    assert state[\"finally\"] is False\n    response = client.put(\"/user/rick\", json=\"Morty\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"OK\"}\n    assert state[\"except\"] is False\n    assert state[\"finally\"] is True\n    assert fake_database[\"rick\"] == \"Morty\"\n", "tests/test_response_model_invalid.py": "from typing import List\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import FastAPIError\n\n\nclass NonPydanticModel:\n    pass\n\n\ndef test_invalid_response_model_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", response_model=NonPydanticModel)\n        def read_root():\n            pass  # pragma: nocover\n\n\ndef test_invalid_response_model_sub_type_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", response_model=List[NonPydanticModel])\n        def read_root():\n            pass  # pragma: nocover\n\n\ndef test_invalid_response_model_in_responses_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", responses={\"500\": {\"model\": NonPydanticModel}})\n        def read_root():\n            pass  # pragma: nocover\n\n\ndef test_invalid_response_model_sub_type_in_responses_raises():\n    with pytest.raises(FastAPIError):\n        app = FastAPI()\n\n        @app.get(\"/\", responses={\"500\": {\"model\": List[NonPydanticModel]}})\n        def read_root():\n            pass  # pragma: nocover\n", "tests/test_security_http_digest_description.py": "from fastapi import FastAPI, Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPDigest(description=\"HTTPDigest scheme\")\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_digest():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_digest_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_security_http_digest_incorrect_scheme_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPDigest\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPDigest\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"digest\",\n                    \"description\": \"HTTPDigest scheme\",\n                }\n            }\n        },\n    }\n", "tests/test_dependency_security_overrides.py": "from typing import List, Tuple\n\nfrom fastapi import Depends, FastAPI, Security\nfrom fastapi.security import SecurityScopes\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\ndef get_user(required_scopes: SecurityScopes):\n    return \"john\", required_scopes.scopes\n\n\ndef get_user_override(required_scopes: SecurityScopes):\n    return \"alice\", required_scopes.scopes\n\n\ndef get_data():\n    return [1, 2, 3]\n\n\ndef get_data_override():\n    return [3, 4, 5]\n\n\n@app.get(\"/user\")\ndef read_user(\n    user_data: Tuple[str, List[str]] = Security(get_user, scopes=[\"foo\", \"bar\"]),\n    data: List[int] = Depends(get_data),\n):\n    return {\"user\": user_data[0], \"scopes\": user_data[1], \"data\": data}\n\n\nclient = TestClient(app)\n\n\ndef test_normal():\n    response = client.get(\"/user\")\n    assert response.json() == {\n        \"user\": \"john\",\n        \"scopes\": [\"foo\", \"bar\"],\n        \"data\": [1, 2, 3],\n    }\n\n\ndef test_override_data():\n    app.dependency_overrides[get_data] = get_data_override\n    response = client.get(\"/user\")\n    assert response.json() == {\n        \"user\": \"john\",\n        \"scopes\": [\"foo\", \"bar\"],\n        \"data\": [3, 4, 5],\n    }\n    app.dependency_overrides = {}\n\n\ndef test_override_security():\n    app.dependency_overrides[get_user] = get_user_override\n    response = client.get(\"/user\")\n    assert response.json() == {\n        \"user\": \"alice\",\n        \"scopes\": [\"foo\", \"bar\"],\n        \"data\": [1, 2, 3],\n    }\n    app.dependency_overrides = {}\n", "tests/test_default_response_class_router.py": "from fastapi import APIRouter, FastAPI\nfrom fastapi.responses import HTMLResponse, JSONResponse, PlainTextResponse\nfrom fastapi.testclient import TestClient\n\n\nclass OverrideResponse(JSONResponse):\n    media_type = \"application/x-override\"\n\n\napp = FastAPI()\nrouter_a = APIRouter()\nrouter_a_a = APIRouter()\nrouter_a_b_override = APIRouter()  # Overrides default class\nrouter_b_override = APIRouter()  # Overrides default class\nrouter_b_a = APIRouter()\nrouter_b_a_c_override = APIRouter()  # Overrides default class again\n\n\n@app.get(\"/\")\ndef get_root():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.get(\"/override\", response_class=PlainTextResponse)\ndef get_path_override():\n    return \"Hello World\"\n\n\n@router_a.get(\"/\")\ndef get_a():\n    return {\"msg\": \"Hello A\"}\n\n\n@router_a.get(\"/override\", response_class=PlainTextResponse)\ndef get_a_path_override():\n    return \"Hello A\"\n\n\n@router_a_a.get(\"/\")\ndef get_a_a():\n    return {\"msg\": \"Hello A A\"}\n\n\n@router_a_a.get(\"/override\", response_class=PlainTextResponse)\ndef get_a_a_path_override():\n    return \"Hello A A\"\n\n\n@router_a_b_override.get(\"/\")\ndef get_a_b():\n    return \"Hello A B\"\n\n\n@router_a_b_override.get(\"/override\", response_class=HTMLResponse)\ndef get_a_b_path_override():\n    return \"Hello A B\"\n\n\n@router_b_override.get(\"/\")\ndef get_b():\n    return \"Hello B\"\n\n\n@router_b_override.get(\"/override\", response_class=HTMLResponse)\ndef get_b_path_override():\n    return \"Hello B\"\n\n\n@router_b_a.get(\"/\")\ndef get_b_a():\n    return \"Hello B A\"\n\n\n@router_b_a.get(\"/override\", response_class=HTMLResponse)\ndef get_b_a_path_override():\n    return \"Hello B A\"\n\n\n@router_b_a_c_override.get(\"/\")\ndef get_b_a_c():\n    return \"Hello B A C\"\n\n\n@router_b_a_c_override.get(\"/override\", response_class=OverrideResponse)\ndef get_b_a_c_path_override():\n    return {\"msg\": \"Hello B A C\"}\n\n\nrouter_b_a.include_router(\n    router_b_a_c_override, prefix=\"/c\", default_response_class=HTMLResponse\n)\nrouter_b_override.include_router(router_b_a, prefix=\"/a\")\nrouter_a.include_router(router_a_a, prefix=\"/a\")\nrouter_a.include_router(\n    router_a_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n)\napp.include_router(router_a, prefix=\"/a\")\napp.include_router(\n    router_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n)\n\n\nclient = TestClient(app)\n\njson_type = \"application/json\"\ntext_type = \"text/plain; charset=utf-8\"\nhtml_type = \"text/html; charset=utf-8\"\noverride_type = \"application/x-override\"\n\n\ndef test_app():\n    with client:\n        response = client.get(\"/\")\n    assert response.json() == {\"msg\": \"Hello World\"}\n    assert response.headers[\"content-type\"] == json_type\n\n\ndef test_app_override():\n    with client:\n        response = client.get(\"/override\")\n    assert response.content == b\"Hello World\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a():\n    with client:\n        response = client.get(\"/a\")\n    assert response.json() == {\"msg\": \"Hello A\"}\n    assert response.headers[\"content-type\"] == json_type\n\n\ndef test_router_a_override():\n    with client:\n        response = client.get(\"/a/override\")\n    assert response.content == b\"Hello A\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a_a():\n    with client:\n        response = client.get(\"/a/a\")\n    assert response.json() == {\"msg\": \"Hello A A\"}\n    assert response.headers[\"content-type\"] == json_type\n\n\ndef test_router_a_a_override():\n    with client:\n        response = client.get(\"/a/a/override\")\n    assert response.content == b\"Hello A A\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a_b():\n    with client:\n        response = client.get(\"/a/b\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a_b_override():\n    with client:\n        response = client.get(\"/a/b/override\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b():\n    with client:\n        response = client.get(\"/b\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_b_override():\n    with client:\n        response = client.get(\"/b/override\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b_a():\n    with client:\n        response = client.get(\"/b/a\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_b_a_override():\n    with client:\n        response = client.get(\"/b/a/override\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b_a_c():\n    with client:\n        response = client.get(\"/b/a/c\")\n    assert response.content == b\"Hello B A C\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b_a_c_override():\n    with client:\n        response = client.get(\"/b/a/c/override\")\n    assert response.json() == {\"msg\": \"Hello B A C\"}\n    assert response.headers[\"content-type\"] == override_type\n", "tests/test_security_http_bearer_optional.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBearer(auto_error=False)\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_bearer():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_bearer_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n        },\n    }\n", "tests/test_deprecated_openapi_prefix.py": "from fastapi import FastAPI, Request\nfrom fastapi.testclient import TestClient\n\napp = FastAPI(openapi_prefix=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n\n\nclient = TestClient(app)\n\n\ndef test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n\ndef test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"servers\": [{\"url\": \"/api/v1\"}],\n    }\n", "tests/test_security_http_base.py": "from fastapi import FastAPI, Security\nfrom fastapi.security.http import HTTPAuthorizationCredentials, HTTPBase\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBase(scheme=\"Other\")\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_base():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_base_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBase\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n        },\n    }\n", "tests/test_skip_defaults.py": "from typing import Optional\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass SubModel(BaseModel):\n    a: Optional[str] = \"foo\"\n\n\nclass Model(BaseModel):\n    x: Optional[int] = None\n    sub: SubModel\n\n\nclass ModelSubclass(Model):\n    y: int\n    z: int = 0\n    w: Optional[int] = None\n\n\nclass ModelDefaults(BaseModel):\n    w: Optional[str] = None\n    x: Optional[str] = None\n    y: str = \"y\"\n    z: str = \"z\"\n\n\n@app.get(\"/\", response_model=Model, response_model_exclude_unset=True)\ndef get_root() -> ModelSubclass:\n    return ModelSubclass(sub={}, y=1, z=0)\n\n\n@app.get(\n    \"/exclude_unset\", response_model=ModelDefaults, response_model_exclude_unset=True\n)\ndef get_exclude_unset() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")\n\n\n@app.get(\n    \"/exclude_defaults\",\n    response_model=ModelDefaults,\n    response_model_exclude_defaults=True,\n)\ndef get_exclude_defaults() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")\n\n\n@app.get(\n    \"/exclude_none\", response_model=ModelDefaults, response_model_exclude_none=True\n)\ndef get_exclude_none() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")\n\n\n@app.get(\n    \"/exclude_unset_none\",\n    response_model=ModelDefaults,\n    response_model_exclude_unset=True,\n    response_model_exclude_none=True,\n)\ndef get_exclude_unset_none() -> ModelDefaults:\n    return ModelDefaults(x=None, y=\"y\")\n\n\nclient = TestClient(app)\n\n\ndef test_return_defaults():\n    response = client.get(\"/\")\n    assert response.json() == {\"sub\": {}}\n\n\ndef test_return_exclude_unset():\n    response = client.get(\"/exclude_unset\")\n    assert response.json() == {\"x\": None, \"y\": \"y\"}\n\n\ndef test_return_exclude_defaults():\n    response = client.get(\"/exclude_defaults\")\n    assert response.json() == {}\n\n\ndef test_return_exclude_none():\n    response = client.get(\"/exclude_none\")\n    assert response.json() == {\"y\": \"y\", \"z\": \"z\"}\n\n\ndef test_return_exclude_unset_none():\n    response = client.get(\"/exclude_unset_none\")\n    assert response.json() == {\"y\": \"y\"}\n", "tests/test_annotated.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import APIRouter, FastAPI, Query\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/default\")\nasync def default(foo: Annotated[str, Query()] = \"foo\"):\n    return {\"foo\": foo}\n\n\n@app.get(\"/required\")\nasync def required(foo: Annotated[str, Query(min_length=1)]):\n    return {\"foo\": foo}\n\n\n@app.get(\"/multiple\")\nasync def multiple(foo: Annotated[str, object(), Query(min_length=1)]):\n    return {\"foo\": foo}\n\n\n@app.get(\"/unrelated\")\nasync def unrelated(foo: Annotated[str, object()]):\n    return {\"foo\": foo}\n\n\nclient = TestClient(app)\n\nfoo_is_missing = {\n    \"detail\": [\n        IsDict(\n            {\n                \"loc\": [\"query\", \"foo\"],\n                \"msg\": \"Field required\",\n                \"type\": \"missing\",\n                \"input\": None,\n            }\n        )\n        # TODO: remove when deprecating Pydantic v1\n        | IsDict(\n            {\n                \"loc\": [\"query\", \"foo\"],\n                \"msg\": \"field required\",\n                \"type\": \"value_error.missing\",\n            }\n        )\n    ]\n}\nfoo_is_short = {\n    \"detail\": [\n        IsDict(\n            {\n                \"ctx\": {\"min_length\": 1},\n                \"loc\": [\"query\", \"foo\"],\n                \"msg\": \"String should have at least 1 character\",\n                \"type\": \"string_too_short\",\n                \"input\": \"\",\n            }\n        )\n        # TODO: remove when deprecating Pydantic v1\n        | IsDict(\n            {\n                \"ctx\": {\"limit_value\": 1},\n                \"loc\": [\"query\", \"foo\"],\n                \"msg\": \"ensure this value has at least 1 characters\",\n                \"type\": \"value_error.any_str.min_length\",\n            }\n        )\n    ]\n}\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/default\", 200, {\"foo\": \"foo\"}),\n        (\"/default?foo=bar\", 200, {\"foo\": \"bar\"}),\n        (\"/required?foo=bar\", 200, {\"foo\": \"bar\"}),\n        (\"/required\", 422, foo_is_missing),\n        (\"/required?foo=\", 422, foo_is_short),\n        (\"/multiple?foo=bar\", 200, {\"foo\": \"bar\"}),\n        (\"/multiple\", 422, foo_is_missing),\n        (\"/multiple?foo=\", 422, foo_is_short),\n        (\"/unrelated?foo=bar\", 200, {\"foo\": \"bar\"}),\n        (\"/unrelated\", 422, foo_is_missing),\n    ],\n)\ndef test_get(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_multiple_path():\n    app = FastAPI()\n\n    @app.get(\"/test1\")\n    @app.get(\"/test2\")\n    async def test(var: Annotated[str, Query()] = \"bar\"):\n        return {\"foo\": var}\n\n    client = TestClient(app)\n    response = client.get(\"/test1\")\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"bar\"}\n\n    response = client.get(\"/test1\", params={\"var\": \"baz\"})\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"baz\"}\n\n    response = client.get(\"/test2\")\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"bar\"}\n\n    response = client.get(\"/test2\", params={\"var\": \"baz\"})\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"baz\"}\n\n\ndef test_nested_router():\n    app = FastAPI()\n\n    router = APIRouter(prefix=\"/nested\")\n\n    @router.get(\"/test\")\n    async def test(var: Annotated[str, Query()] = \"bar\"):\n        return {\"foo\": var}\n\n    app.include_router(router)\n\n    client = TestClient(app)\n\n    response = client.get(\"/nested/test\")\n    assert response.status_code == 200\n    assert response.json() == {\"foo\": \"bar\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/default\": {\n                \"get\": {\n                    \"summary\": \"Default\",\n                    \"operationId\": \"default_default_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Foo\",\n                                \"type\": \"string\",\n                                \"default\": \"foo\",\n                            },\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/required\": {\n                \"get\": {\n                    \"summary\": \"Required\",\n                    \"operationId\": \"required_required_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Foo\",\n                                \"minLength\": 1,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/multiple\": {\n                \"get\": {\n                    \"summary\": \"Multiple\",\n                    \"operationId\": \"multiple_multiple_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Foo\",\n                                \"minLength\": 1,\n                                \"type\": \"string\",\n                            },\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/unrelated\": {\n                \"get\": {\n                    \"summary\": \"Unrelated\",\n                    \"operationId\": \"unrelated_unrelated_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Foo\", \"type\": \"string\"},\n                            \"name\": \"foo\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_filter_pydantic_sub_model_pv2.py": "from typing import Optional\n\nimport pytest\nfrom dirty_equals import HasRepr, IsDict, IsOneOf\nfrom fastapi import Depends, FastAPI\nfrom fastapi.exceptions import ResponseValidationError\nfrom fastapi.testclient import TestClient\n\nfrom .utils import needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from pydantic import BaseModel, ValidationInfo, field_validator\n\n    app = FastAPI()\n\n    class ModelB(BaseModel):\n        username: str\n\n    class ModelC(ModelB):\n        password: str\n\n    class ModelA(BaseModel):\n        name: str\n        description: Optional[str] = None\n        foo: ModelB\n\n        @field_validator(\"name\")\n        def lower_username(cls, name: str, info: ValidationInfo):\n            if not name.endswith(\"A\"):\n                raise ValueError(\"name must end in A\")\n            return name\n\n    async def get_model_c() -> ModelC:\n        return ModelC(username=\"test-user\", password=\"test-password\")\n\n    @app.get(\"/model/{name}\", response_model=ModelA)\n    async def get_model_a(name: str, model_c=Depends(get_model_c)):\n        return {\"name\": name, \"description\": \"model-a-desc\", \"foo\": model_c}\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv2\ndef test_filter_sub_model(client: TestClient):\n    response = client.get(\"/model/modelA\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"modelA\",\n        \"description\": \"model-a-desc\",\n        \"foo\": {\"username\": \"test-user\"},\n    }\n\n\n@needs_pydanticv2\ndef test_validator_is_cloned(client: TestClient):\n    with pytest.raises(ResponseValidationError) as err:\n        client.get(\"/model/modelX\")\n    assert err.value.errors() == [\n        IsDict(\n            {\n                \"type\": \"value_error\",\n                \"loc\": (\"response\", \"name\"),\n                \"msg\": \"Value error, name must end in A\",\n                \"input\": \"modelX\",\n                \"ctx\": {\"error\": HasRepr(\"ValueError('name must end in A')\")},\n            }\n        )\n        | IsDict(\n            # TODO remove when deprecating Pydantic v1\n            {\n                \"loc\": (\"response\", \"name\"),\n                \"msg\": \"name must end in A\",\n                \"type\": \"value_error\",\n            }\n        )\n    ]\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/model/{name}\": {\n                \"get\": {\n                    \"summary\": \"Get Model A\",\n                    \"operationId\": \"get_model_a_model__name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"name\": \"name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/ModelA\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ModelA\": {\n                    \"title\": \"ModelA\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"foo\"],\n                        # TODO remove when deprecating Pydantic v1\n                        [\"name\", \"foo\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        |\n                        # TODO remove when deprecating Pydantic v1\n                        IsDict({\"title\": \"Description\", \"type\": \"string\"}),\n                        \"foo\": {\"$ref\": \"#/components/schemas/ModelB\"},\n                    },\n                },\n                \"ModelB\": {\n                    \"title\": \"ModelB\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"username\": {\"title\": \"Username\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_validate_response.py": "from typing import List, Optional, Union\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import ResponseValidationError\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\n\n@app.get(\"/items/invalid\", response_model=Item)\ndef get_invalid():\n    return {\"name\": \"invalid\", \"price\": \"foo\"}\n\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    return None\n\n\n@app.get(\"/items/validnone\", response_model=Union[Item, None])\ndef get_valid_none(send_none: bool = False):\n    if send_none:\n        return None\n    else:\n        return {\"name\": \"invalid\", \"price\": 3.2}\n\n\n@app.get(\"/items/innerinvalid\", response_model=Item)\ndef get_innerinvalid():\n    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n\n\n@app.get(\"/items/invalidlist\", response_model=List[Item])\ndef get_invalidlist():\n    return [\n        {\"name\": \"foo\"},\n        {\"name\": \"bar\", \"price\": \"bar\"},\n        {\"name\": \"baz\", \"price\": \"baz\"},\n    ]\n\n\nclient = TestClient(app)\n\n\ndef test_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalid\")\n\n\ndef test_invalid_none():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalidnone\")\n\n\ndef test_valid_none_data():\n    response = client.get(\"/items/validnone\")\n    data = response.json()\n    assert response.status_code == 200\n    assert data == {\"name\": \"invalid\", \"price\": 3.2, \"owner_ids\": None}\n\n\ndef test_valid_none_none():\n    response = client.get(\"/items/validnone\", params={\"send_none\": \"true\"})\n    data = response.json()\n    assert response.status_code == 200\n    assert data is None\n\n\ndef test_double_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/innerinvalid\")\n\n\ndef test_invalid_list():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalidlist\")\n", "tests/test_schema_extra_examples.py": "from typing import Union\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi import Body, Cookie, FastAPI, Header, Path, Query\nfrom fastapi._compat import PYDANTIC_V2\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, ConfigDict\n\n\ndef create_app():\n    app = FastAPI()\n\n    class Item(BaseModel):\n        data: str\n\n        if PYDANTIC_V2:\n            model_config = ConfigDict(\n                json_schema_extra={\"example\": {\"data\": \"Data in schema_extra\"}}\n            )\n        else:\n\n            class Config:\n                schema_extra = {\"example\": {\"data\": \"Data in schema_extra\"}}\n\n    @app.post(\"/schema_extra/\")\n    def schema_extra(item: Item):\n        return item\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.post(\"/example/\")\n        def example(item: Item = Body(example={\"data\": \"Data in Body example\"})):\n            return item\n\n    @app.post(\"/examples/\")\n    def examples(\n        item: Item = Body(\n            examples=[\n                {\"data\": \"Data in Body examples, example1\"},\n                {\"data\": \"Data in Body examples, example2\"},\n            ],\n        ),\n    ):\n        return item\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.post(\"/example_examples/\")\n        def example_examples(\n            item: Item = Body(\n                example={\"data\": \"Overridden example\"},\n                examples=[\n                    {\"data\": \"examples example_examples 1\"},\n                    {\"data\": \"examples example_examples 2\"},\n                ],\n            ),\n        ):\n            return item\n\n    # TODO: enable these tests once/if Form(embed=False) is supported\n    # TODO: In that case, define if File() should support example/examples too\n    # @app.post(\"/form_example\")\n    # def form_example(firstname: str = Form(example=\"John\")):\n    #     return firstname\n\n    # @app.post(\"/form_examples\")\n    # def form_examples(\n    #     lastname: str = Form(\n    #         ...,\n    #         examples={\n    #             \"example1\": {\"summary\": \"last name summary\", \"value\": \"Doe\"},\n    #             \"example2\": {\"value\": \"Doesn't\"},\n    #         },\n    #     ),\n    # ):\n    #     return lastname\n\n    # @app.post(\"/form_example_examples\")\n    # def form_example_examples(\n    #     lastname: str = Form(\n    #         ...,\n    #         example=\"Doe overridden\",\n    #         examples={\n    #             \"example1\": {\"summary\": \"last name summary\", \"value\": \"Doe\"},\n    #             \"example2\": {\"value\": \"Doesn't\"},\n    #         },\n    #     ),\n    # ):\n    #     return lastname\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/path_example/{item_id}\")\n        def path_example(\n            item_id: str = Path(\n                example=\"item_1\",\n            ),\n        ):\n            return item_id\n\n    @app.get(\"/path_examples/{item_id}\")\n    def path_examples(\n        item_id: str = Path(\n            examples=[\"item_1\", \"item_2\"],\n        ),\n    ):\n        return item_id\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/path_example_examples/{item_id}\")\n        def path_example_examples(\n            item_id: str = Path(\n                example=\"item_overridden\",\n                examples=[\"item_1\", \"item_2\"],\n            ),\n        ):\n            return item_id\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/query_example/\")\n        def query_example(\n            data: Union[str, None] = Query(\n                default=None,\n                example=\"query1\",\n            ),\n        ):\n            return data\n\n    @app.get(\"/query_examples/\")\n    def query_examples(\n        data: Union[str, None] = Query(\n            default=None,\n            examples=[\"query1\", \"query2\"],\n        ),\n    ):\n        return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/query_example_examples/\")\n        def query_example_examples(\n            data: Union[str, None] = Query(\n                default=None,\n                example=\"query_overridden\",\n                examples=[\"query1\", \"query2\"],\n            ),\n        ):\n            return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/header_example/\")\n        def header_example(\n            data: Union[str, None] = Header(\n                default=None,\n                example=\"header1\",\n            ),\n        ):\n            return data\n\n    @app.get(\"/header_examples/\")\n    def header_examples(\n        data: Union[str, None] = Header(\n            default=None,\n            examples=[\n                \"header1\",\n                \"header2\",\n            ],\n        ),\n    ):\n        return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/header_example_examples/\")\n        def header_example_examples(\n            data: Union[str, None] = Header(\n                default=None,\n                example=\"header_overridden\",\n                examples=[\"header1\", \"header2\"],\n            ),\n        ):\n            return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/cookie_example/\")\n        def cookie_example(\n            data: Union[str, None] = Cookie(\n                default=None,\n                example=\"cookie1\",\n            ),\n        ):\n            return data\n\n    @app.get(\"/cookie_examples/\")\n    def cookie_examples(\n        data: Union[str, None] = Cookie(\n            default=None,\n            examples=[\"cookie1\", \"cookie2\"],\n        ),\n    ):\n        return data\n\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/cookie_example_examples/\")\n        def cookie_example_examples(\n            data: Union[str, None] = Cookie(\n                default=None,\n                example=\"cookie_overridden\",\n                examples=[\"cookie1\", \"cookie2\"],\n            ),\n        ):\n            return data\n\n    return app\n\n\ndef test_call_api():\n    app = create_app()\n    client = TestClient(app)\n    response = client.post(\"/schema_extra/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.post(\"/example/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.post(\"/examples/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.post(\"/example_examples/\", json={\"data\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    response = client.get(\"/path_example/foo\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/path_examples/foo\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/path_example_examples/foo\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/query_example/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/query_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/query_example_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/header_example/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/header_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/header_example_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/cookie_example/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/cookie_examples/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/cookie_example_examples/\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    \"\"\"\n    Test that example overrides work:\n\n    * pydantic model schema_extra is included\n    * Body(example={}) overrides schema_extra in pydantic model\n    * Body(examples{}) overrides Body(example={}) and schema_extra in pydantic model\n    \"\"\"\n    app = create_app()\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/schema_extra/\": {\n                \"post\": {\n                    \"summary\": \"Schema Extra\",\n                    \"operationId\": \"schema_extra_schema_extra__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/example/\": {\n                \"post\": {\n                    \"summary\": \"Example\",\n                    \"operationId\": \"example_example__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n                                \"example\": {\"data\": \"Data in Body example\"},\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/examples/\": {\n                \"post\": {\n                    \"summary\": \"Examples\",\n                    \"operationId\": \"examples_examples__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\"data\": \"Data in Body examples, example1\"},\n                                            {\"data\": \"Data in Body examples, example2\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove this when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\"data\": \"Data in Body examples, example1\"},\n                                            {\"data\": \"Data in Body examples, example2\"},\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/example_examples/\": {\n                \"post\": {\n                    \"summary\": \"Example Examples\",\n                    \"operationId\": \"example_examples_example_examples__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\"data\": \"examples example_examples 1\"},\n                                            {\"data\": \"examples example_examples 2\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove this when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\"data\": \"examples example_examples 1\"},\n                                            {\"data\": \"examples example_examples 2\"},\n                                        ],\n                                    },\n                                ),\n                                \"example\": {\"data\": \"Overridden example\"},\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_example/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Example\",\n                    \"operationId\": \"path_example_path_example__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"example\": \"item_1\",\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_examples/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Examples\",\n                    \"operationId\": \"path_examples_path_examples__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"examples\": [\"item_1\", \"item_2\"],\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/path_example_examples/{item_id}\": {\n                \"get\": {\n                    \"summary\": \"Path Example Examples\",\n                    \"operationId\": \"path_example_examples_path_example_examples__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"examples\": [\"item_1\", \"item_2\"],\n                            },\n                            \"example\": \"item_overridden\",\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_example/\": {\n                \"get\": {\n                    \"summary\": \"Query Example\",\n                    \"operationId\": \"query_example_query_example__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\"title\": \"Data\", \"type\": \"string\"}\n                            ),\n                            \"example\": \"query1\",\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_examples/\": {\n                \"get\": {\n                    \"summary\": \"Query Examples\",\n                    \"operationId\": \"query_examples_query_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            ),\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/query_example_examples/\": {\n                \"get\": {\n                    \"summary\": \"Query Example Examples\",\n                    \"operationId\": \"query_example_examples_query_example_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"query1\", \"query2\"],\n                                }\n                            ),\n                            \"example\": \"query_overridden\",\n                            \"name\": \"data\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_example/\": {\n                \"get\": {\n                    \"summary\": \"Header Example\",\n                    \"operationId\": \"header_example_header_example__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\"title\": \"Data\", \"type\": \"string\"}\n                            ),\n                            \"example\": \"header1\",\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_examples/\": {\n                \"get\": {\n                    \"summary\": \"Header Examples\",\n                    \"operationId\": \"header_examples_header_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            ),\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/header_example_examples/\": {\n                \"get\": {\n                    \"summary\": \"Header Example Examples\",\n                    \"operationId\": \"header_example_examples_header_example_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Data\",\n                                    \"type\": \"string\",\n                                    \"examples\": [\"header1\", \"header2\"],\n                                }\n                            ),\n                            \"example\": \"header_overridden\",\n                            \"name\": \"data\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_example/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Example\",\n                    \"operationId\": \"cookie_example_cookie_example__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\"title\": \"Data\", \"type\": \"string\"}\n                            ),\n                            \"example\": \"cookie1\",\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_examples/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Examples\",\n                    \"operationId\": \"cookie_examples_cookie_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Data\",\n                                    \"type\": \"string\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            ),\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/cookie_example_examples/\": {\n                \"get\": {\n                    \"summary\": \"Cookie Example Examples\",\n                    \"operationId\": \"cookie_example_examples_cookie_example_examples__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Data\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: Remove this when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Data\",\n                                    \"type\": \"string\",\n                                    \"examples\": [\"cookie1\", \"cookie2\"],\n                                }\n                            ),\n                            \"example\": \"cookie_overridden\",\n                            \"name\": \"data\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"data\": {\"title\": \"Data\", \"type\": \"string\"}},\n                    \"example\": {\"data\": \"Data in schema_extra\"},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_regex_deprecated_params.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI, Query\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\nfrom .utils import needs_py310\n\n\ndef get_client():\n    app = FastAPI()\n    with pytest.warns(DeprecationWarning):\n\n        @app.get(\"/items/\")\n        async def read_items(\n            q: Annotated[str | None, Query(regex=\"^fixedquery$\")] = None,\n        ):\n            if q:\n                return f\"Hello {q}\"\n            else:\n                return \"Hello World\"\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_query_params_str_validations_no_query():\n    client = get_client()\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == \"Hello World\"\n\n\n@needs_py310\ndef test_query_params_str_validations_q_fixedquery():\n    client = get_client()\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == \"Hello fixedquery\"\n\n\n@needs_py310\ndef test_query_params_str_validations_item_query_nonregexquery():\n    client = get_client()\n    response = client.get(\"/items/\", params={\"q\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema():\n    client = get_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"string\", \"pattern\": \"^fixedquery$\"},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"title\": \"Q\",\n                                }\n                            ),\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_put_no_body.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\ndef save_item_no_body(item_id: str):\n    return {\"item_id\": item_id}\n\n\nclient = TestClient(app)\n\n\ndef test_put_no_body():\n    response = client.put(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}\n\n\ndef test_put_no_body_with_body():\n    response = client.put(\"/items/foo\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"foo\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Item No Body\",\n                    \"operationId\": \"save_item_no_body_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_security_http_base_description.py": "from fastapi import FastAPI, Security\nfrom fastapi.security.http import HTTPAuthorizationCredentials, HTTPBase\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBase(scheme=\"Other\", description=\"Other Security Scheme\")\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_base():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_base_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBase\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPBase\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"Other\",\n                    \"description\": \"Other Security Scheme\",\n                }\n            }\n        },\n    }\n", "tests/test_security_http_bearer_description.py": "from fastapi import FastAPI, Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBearer(description=\"HTTP Bearer token scheme\")\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_bearer():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_bearer_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"HTTPBearer\": {\n                    \"type\": \"http\",\n                    \"scheme\": \"bearer\",\n                    \"description\": \"HTTP Bearer token scheme\",\n                }\n            }\n        },\n    }\n", "tests/test_params_repr.py": "from typing import Any, List\n\nfrom dirty_equals import IsOneOf\nfrom fastapi.params import Body, Cookie, Depends, Header, Param, Path, Query\n\ntest_data: List[Any] = [\"teststr\", None, ..., 1, []]\n\n\ndef get_user():\n    return {}  # pragma: no cover\n\n\ndef test_param_repr_str():\n    assert repr(Param(\"teststr\")) == \"Param(teststr)\"\n\n\ndef test_param_repr_none():\n    assert repr(Param(None)) == \"Param(None)\"\n\n\ndef test_param_repr_ellipsis():\n    assert repr(Param(...)) == IsOneOf(\n        \"Param(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Param(Ellipsis)\",\n    )\n\n\ndef test_param_repr_number():\n    assert repr(Param(1)) == \"Param(1)\"\n\n\ndef test_param_repr_list():\n    assert repr(Param([])) == \"Param([])\"\n\n\ndef test_path_repr():\n    assert repr(Path()) == IsOneOf(\n        \"Path(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Path(Ellipsis)\",\n    )\n    assert repr(Path(...)) == IsOneOf(\n        \"Path(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Path(Ellipsis)\",\n    )\n\n\ndef test_query_repr_str():\n    assert repr(Query(\"teststr\")) == \"Query(teststr)\"\n\n\ndef test_query_repr_none():\n    assert repr(Query(None)) == \"Query(None)\"\n\n\ndef test_query_repr_ellipsis():\n    assert repr(Query(...)) == IsOneOf(\n        \"Query(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Query(Ellipsis)\",\n    )\n\n\ndef test_query_repr_number():\n    assert repr(Query(1)) == \"Query(1)\"\n\n\ndef test_query_repr_list():\n    assert repr(Query([])) == \"Query([])\"\n\n\ndef test_header_repr_str():\n    assert repr(Header(\"teststr\")) == \"Header(teststr)\"\n\n\ndef test_header_repr_none():\n    assert repr(Header(None)) == \"Header(None)\"\n\n\ndef test_header_repr_ellipsis():\n    assert repr(Header(...)) == IsOneOf(\n        \"Header(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Header(Ellipsis)\",\n    )\n\n\ndef test_header_repr_number():\n    assert repr(Header(1)) == \"Header(1)\"\n\n\ndef test_header_repr_list():\n    assert repr(Header([])) == \"Header([])\"\n\n\ndef test_cookie_repr_str():\n    assert repr(Cookie(\"teststr\")) == \"Cookie(teststr)\"\n\n\ndef test_cookie_repr_none():\n    assert repr(Cookie(None)) == \"Cookie(None)\"\n\n\ndef test_cookie_repr_ellipsis():\n    assert repr(Cookie(...)) == IsOneOf(\n        \"Cookie(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Cookie(Ellipsis)\",\n    )\n\n\ndef test_cookie_repr_number():\n    assert repr(Cookie(1)) == \"Cookie(1)\"\n\n\ndef test_cookie_repr_list():\n    assert repr(Cookie([])) == \"Cookie([])\"\n\n\ndef test_body_repr_str():\n    assert repr(Body(\"teststr\")) == \"Body(teststr)\"\n\n\ndef test_body_repr_none():\n    assert repr(Body(None)) == \"Body(None)\"\n\n\ndef test_body_repr_ellipsis():\n    assert repr(Body(...)) == IsOneOf(\n        \"Body(PydanticUndefined)\",\n        # TODO: remove when deprecating Pydantic v1\n        \"Body(Ellipsis)\",\n    )\n\n\ndef test_body_repr_number():\n    assert repr(Body(1)) == \"Body(1)\"\n\n\ndef test_body_repr_list():\n    assert repr(Body([])) == \"Body([])\"\n\n\ndef test_depends_repr():\n    assert repr(Depends()) == \"Depends(NoneType)\"\n    assert repr(Depends(get_user)) == \"Depends(get_user)\"\n    assert repr(Depends(use_cache=False)) == \"Depends(NoneType, use_cache=False)\"\n    assert (\n        repr(Depends(get_user, use_cache=False)) == \"Depends(get_user, use_cache=False)\"\n    )\n", "tests/test_typing_python39.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom .utils import needs_py310\n\n\n@needs_py310\ndef test_typing():\n    types = {\n        list[int]: [1, 2, 3],\n        dict[str, list[int]]: {\"a\": [1, 2, 3], \"b\": [4, 5, 6]},\n        set[int]: [1, 2, 3],  # `set` is converted to `list`\n        tuple[int, ...]: [1, 2, 3],  # `tuple` is converted to `list`\n    }\n    for test_type, expect in types.items():\n        app = FastAPI()\n\n        @app.post(\"/\", response_model=test_type)\n        def post_endpoint(input: test_type):\n            return input\n\n        res = TestClient(app).post(\"/\", json=expect)\n        assert res.status_code == 200, res.json()\n        assert res.json() == expect\n", "tests/test_reponse_set_reponse_code_empty.py": "from typing import Any\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.delete(\n    \"/{id}\",\n    status_code=204,\n    response_model=None,\n)\nasync def delete_deployment(\n    id: int,\n    response: Response,\n) -> Any:\n    response.status_code = 400\n    return {\"msg\": \"Status overwritten\", \"id\": id}\n\n\nclient = TestClient(app)\n\n\ndef test_dependency_set_status_code():\n    response = client.delete(\"/1\")\n    assert response.status_code == 400 and response.content\n    assert response.json() == {\"msg\": \"Status overwritten\", \"id\": 1}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/{id}\": {\n                \"delete\": {\n                    \"summary\": \"Delete Deployment\",\n                    \"operationId\": \"delete_deployment__id__delete\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Id\", \"type\": \"integer\"},\n                            \"name\": \"id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"204\": {\"description\": \"Successful Response\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/main.py": "import http\nfrom typing import FrozenSet, List, Optional\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.api_route(\"/api_route\")\ndef non_operation():\n    return {\"message\": \"Hello World\"}\n\n\ndef non_decorated_route():\n    return {\"message\": \"Hello World\"}\n\n\napp.add_api_route(\"/non_decorated_route\", non_decorated_route)\n\n\n@app.get(\"/text\")\ndef get_text():\n    return \"Hello World\"\n\n\n@app.get(\"/path/{item_id}\")\ndef get_id(item_id):\n    return item_id\n\n\n@app.get(\"/path/str/{item_id}\")\ndef get_str_id(item_id: str):\n    return item_id\n\n\n@app.get(\"/path/int/{item_id}\")\ndef get_int_id(item_id: int):\n    return item_id\n\n\n@app.get(\"/path/float/{item_id}\")\ndef get_float_id(item_id: float):\n    return item_id\n\n\n@app.get(\"/path/bool/{item_id}\")\ndef get_bool_id(item_id: bool):\n    return item_id\n\n\n@app.get(\"/path/param/{item_id}\")\ndef get_path_param_id(item_id: Optional[str] = Path()):\n    return item_id\n\n\n@app.get(\"/path/param-minlength/{item_id}\")\ndef get_path_param_min_length(item_id: str = Path(min_length=3)):\n    return item_id\n\n\n@app.get(\"/path/param-maxlength/{item_id}\")\ndef get_path_param_max_length(item_id: str = Path(max_length=3)):\n    return item_id\n\n\n@app.get(\"/path/param-min_maxlength/{item_id}\")\ndef get_path_param_min_max_length(item_id: str = Path(max_length=3, min_length=2)):\n    return item_id\n\n\n@app.get(\"/path/param-gt/{item_id}\")\ndef get_path_param_gt(item_id: float = Path(gt=3)):\n    return item_id\n\n\n@app.get(\"/path/param-gt0/{item_id}\")\ndef get_path_param_gt0(item_id: float = Path(gt=0)):\n    return item_id\n\n\n@app.get(\"/path/param-ge/{item_id}\")\ndef get_path_param_ge(item_id: float = Path(ge=3)):\n    return item_id\n\n\n@app.get(\"/path/param-lt/{item_id}\")\ndef get_path_param_lt(item_id: float = Path(lt=3)):\n    return item_id\n\n\n@app.get(\"/path/param-lt0/{item_id}\")\ndef get_path_param_lt0(item_id: float = Path(lt=0)):\n    return item_id\n\n\n@app.get(\"/path/param-le/{item_id}\")\ndef get_path_param_le(item_id: float = Path(le=3)):\n    return item_id\n\n\n@app.get(\"/path/param-lt-gt/{item_id}\")\ndef get_path_param_lt_gt(item_id: float = Path(lt=3, gt=1)):\n    return item_id\n\n\n@app.get(\"/path/param-le-ge/{item_id}\")\ndef get_path_param_le_ge(item_id: float = Path(le=3, ge=1)):\n    return item_id\n\n\n@app.get(\"/path/param-lt-int/{item_id}\")\ndef get_path_param_lt_int(item_id: int = Path(lt=3)):\n    return item_id\n\n\n@app.get(\"/path/param-gt-int/{item_id}\")\ndef get_path_param_gt_int(item_id: int = Path(gt=3)):\n    return item_id\n\n\n@app.get(\"/path/param-le-int/{item_id}\")\ndef get_path_param_le_int(item_id: int = Path(le=3)):\n    return item_id\n\n\n@app.get(\"/path/param-ge-int/{item_id}\")\ndef get_path_param_ge_int(item_id: int = Path(ge=3)):\n    return item_id\n\n\n@app.get(\"/path/param-lt-gt-int/{item_id}\")\ndef get_path_param_lt_gt_int(item_id: int = Path(lt=3, gt=1)):\n    return item_id\n\n\n@app.get(\"/path/param-le-ge-int/{item_id}\")\ndef get_path_param_le_ge_int(item_id: int = Path(le=3, ge=1)):\n    return item_id\n\n\n@app.get(\"/query\")\ndef get_query(query):\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/optional\")\ndef get_query_optional(query=None):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/int\")\ndef get_query_type(query: int):\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/int/optional\")\ndef get_query_type_optional(query: Optional[int] = None):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/int/default\")\ndef get_query_type_int_default(query: int = 10):\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/param\")\ndef get_query_param(query=Query(default=None)):\n    if query is None:\n        return \"foo bar\"\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/param-required\")\ndef get_query_param_required(query=Query()):\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/query/param-required/int\")\ndef get_query_param_required_type(query: int = Query()):\n    return f\"foo bar {query}\"\n\n\n@app.get(\"/enum-status-code\", status_code=http.HTTPStatus.CREATED)\ndef get_enum_status_code():\n    return \"foo bar\"\n\n\n@app.get(\"/query/frozenset\")\ndef get_query_type_frozenset(query: FrozenSet[int] = Query(...)):\n    return \",\".join(map(str, sorted(query)))\n\n\n@app.get(\"/query/list\")\ndef get_query_list(device_ids: List[int] = Query()) -> List[int]:\n    return device_ids\n\n\n@app.get(\"/query/list-default\")\ndef get_query_list_default(device_ids: List[int] = Query(default=[])) -> List[int]:\n    return device_ids\n", "tests/test_param_class.py": "from typing import Optional\n\nfrom fastapi import FastAPI\nfrom fastapi.params import Param\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\ndef read_items(q: Optional[str] = Param(default=None)):  # type: ignore\n    return {\"q\": q}\n\n\nclient = TestClient(app)\n\n\ndef test_default_param_query_none():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\ndef test_default_param_query():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": \"foo\"}\n", "tests/test_include_route.py": "from fastapi import APIRouter, FastAPI, Request\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.route(\"/items/\")\ndef read_items(request: Request):\n    return JSONResponse({\"hello\": \"world\"})\n\n\napp.include_router(router)\n\nclient = TestClient(app)\n\n\ndef test_sub_router():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hello\": \"world\"}\n", "tests/test_multipart_installation.py": "import pytest\nfrom fastapi import FastAPI, File, Form, UploadFile\nfrom fastapi.dependencies.utils import (\n    multipart_incorrect_install_error,\n    multipart_not_installed_error,\n)\n\n\ndef test_incorrect_multipart_installed_form(monkeypatch):\n    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form()):\n            return username  # pragma: nocover\n\n\ndef test_incorrect_multipart_installed_file_upload(monkeypatch):\n    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(f: UploadFile = File()):\n            return f  # pragma: nocover\n\n\ndef test_incorrect_multipart_installed_file_bytes(monkeypatch):\n    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(f: bytes = File()):\n            return f  # pragma: nocover\n\n\ndef test_incorrect_multipart_installed_multi_form(monkeypatch):\n    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form(), password: str = Form()):\n            return username  # pragma: nocover\n\n\ndef test_incorrect_multipart_installed_form_file(monkeypatch):\n    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form(), f: UploadFile = File()):\n            return username  # pragma: nocover\n\n\ndef test_no_multipart_installed(monkeypatch):\n    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form()):\n            return username  # pragma: nocover\n\n\ndef test_no_multipart_installed_file(monkeypatch):\n    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(f: UploadFile = File()):\n            return f  # pragma: nocover\n\n\ndef test_no_multipart_installed_file_bytes(monkeypatch):\n    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(f: bytes = File()):\n            return f  # pragma: nocover\n\n\ndef test_no_multipart_installed_multi_form(monkeypatch):\n    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form(), password: str = Form()):\n            return username  # pragma: nocover\n\n\ndef test_no_multipart_installed_form_file(monkeypatch):\n    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n        app = FastAPI()\n\n        @app.post(\"/\")\n        async def root(username: str = Form(), f: UploadFile = File()):\n            return username  # pragma: nocover\n", "tests/test_union_inherited_body.py": "from typing import Optional, Union\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: Optional[str] = None\n\n\nclass ExtendedItem(Item):\n    age: int\n\n\n@app.post(\"/items/\")\ndef save_union_different_body(item: Union[ExtendedItem, Item]):\n    return {\"item\": item}\n\n\nclient = TestClient(app)\n\n\ndef test_post_extended_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n\n\ndef test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Save Union Different Body\",\n                    \"operationId\": \"save_union_different_body_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"anyOf\": [\n                                        {\"$ref\": \"#/components/schemas/ExtendedItem\"},\n                                        {\"$ref\": \"#/components/schemas/Item\"},\n                                    ],\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": IsDict(\n                            {\n                                \"title\": \"Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Name\", \"type\": \"string\"}\n                        )\n                    },\n                },\n                \"ExtendedItem\": {\n                    \"title\": \"ExtendedItem\",\n                    \"required\": [\"age\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": IsDict(\n                            {\n                                \"title\": \"Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Name\", \"type\": \"string\"}\n                        ),\n                        \"age\": {\"title\": \"Age\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_serialize_response_dataclass.py": "from dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@dataclass\nclass Item:\n    name: str\n    date: datetime\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\n\n@app.get(\"/items/valid\", response_model=Item)\ndef get_valid():\n    return {\"name\": \"valid\", \"date\": datetime(2021, 7, 26), \"price\": 1.0}\n\n\n@app.get(\"/items/object\", response_model=Item)\ndef get_object():\n    return Item(\n        name=\"object\", date=datetime(2021, 7, 26), price=1.0, owner_ids=[1, 2, 3]\n    )\n\n\n@app.get(\"/items/coerce\", response_model=Item)\ndef get_coerce():\n    return {\"name\": \"coerce\", \"date\": datetime(2021, 7, 26).isoformat(), \"price\": \"1.0\"}\n\n\n@app.get(\"/items/validlist\", response_model=List[Item])\ndef get_validlist():\n    return [\n        {\"name\": \"foo\", \"date\": datetime(2021, 7, 26)},\n        {\"name\": \"bar\", \"date\": datetime(2021, 7, 26), \"price\": 1.0},\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]\n\n\n@app.get(\"/items/objectlist\", response_model=List[Item])\ndef get_objectlist():\n    return [\n        Item(name=\"foo\", date=datetime(2021, 7, 26)),\n        Item(name=\"bar\", date=datetime(2021, 7, 26), price=1.0),\n        Item(name=\"baz\", date=datetime(2021, 7, 26), price=2.0, owner_ids=[1, 2, 3]),\n    ]\n\n\n@app.get(\"/items/no-response-model/object\")\ndef get_no_response_model_object():\n    return Item(\n        name=\"object\", date=datetime(2021, 7, 26), price=1.0, owner_ids=[1, 2, 3]\n    )\n\n\n@app.get(\"/items/no-response-model/objectlist\")\ndef get_no_response_model_objectlist():\n    return [\n        Item(name=\"foo\", date=datetime(2021, 7, 26)),\n        Item(name=\"bar\", date=datetime(2021, 7, 26), price=1.0),\n        Item(name=\"baz\", date=datetime(2021, 7, 26), price=2.0, owner_ids=[1, 2, 3]),\n    ]\n\n\nclient = TestClient(app)\n\n\ndef test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"valid\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }\n\n\ndef test_object():\n    response = client.get(\"/items/object\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"object\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": [1, 2, 3],\n    }\n\n\ndef test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"coerce\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }\n\n\ndef test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\n            \"name\": \"foo\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": None,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"bar\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 1.0,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]\n\n\ndef test_objectlist():\n    response = client.get(\"/items/objectlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\n            \"name\": \"foo\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": None,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"bar\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 1.0,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]\n\n\ndef test_no_response_model_object():\n    response = client.get(\"/items/no-response-model/object\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"name\": \"object\",\n        \"date\": datetime(2021, 7, 26).isoformat(),\n        \"price\": 1.0,\n        \"owner_ids\": [1, 2, 3],\n    }\n\n\ndef test_no_response_model_objectlist():\n    response = client.get(\"/items/no-response-model/objectlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\n            \"name\": \"foo\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": None,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"bar\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 1.0,\n            \"owner_ids\": None,\n        },\n        {\n            \"name\": \"baz\",\n            \"date\": datetime(2021, 7, 26).isoformat(),\n            \"price\": 2.0,\n            \"owner_ids\": [1, 2, 3],\n        },\n    ]\n", "tests/test_response_class_no_mediatype.py": "import typing\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"\n\n\nclass Error(BaseModel):\n    status: str\n    title: str\n\n\nclass JsonApiError(BaseModel):\n    errors: typing.List[Error]\n\n\n@app.get(\n    \"/a\",\n    response_class=Response,\n    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n)\nasync def a():\n    pass  # pragma: no cover\n\n\n@app.get(\"/b\", responses={500: {\"description\": \"Error\", \"model\": Error}})\nasync def b():\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\"description\": \"Successful Response\"},\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_custom_middleware_exception.py": "from pathlib import Path\nfrom typing import Optional\n\nfrom fastapi import APIRouter, FastAPI, File, UploadFile\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nrouter = APIRouter()\n\n\nclass ContentSizeLimitMiddleware:\n    \"\"\"Content size limiting middleware for ASGI applications\n    Args:\n      app (ASGI application): ASGI application\n      max_content_size (optional): the maximum content size allowed in bytes, None for no limit\n    \"\"\"\n\n    def __init__(self, app: APIRouter, max_content_size: Optional[int] = None):\n        self.app = app\n        self.max_content_size = max_content_size\n\n    def receive_wrapper(self, receive):\n        received = 0\n\n        async def inner():\n            nonlocal received\n            message = await receive()\n            if message[\"type\"] != \"http.request\":\n                return message  # pragma: no cover\n\n            body_len = len(message.get(\"body\", b\"\"))\n            received += body_len\n            if received > self.max_content_size:\n                raise HTTPException(\n                    422,\n                    detail={\n                        \"name\": \"ContentSizeLimitExceeded\",\n                        \"code\": 999,\n                        \"message\": \"File limit exceeded\",\n                    },\n                )\n            return message\n\n        return inner\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] != \"http\" or self.max_content_size is None:\n            await self.app(scope, receive, send)\n            return\n\n        wrapper = self.receive_wrapper(receive)\n        await self.app(scope, wrapper, send)\n\n\n@router.post(\"/middleware\")\ndef run_middleware(file: UploadFile = File(..., description=\"Big File\")):\n    return {\"message\": \"OK\"}\n\n\napp.include_router(router)\napp.add_middleware(ContentSizeLimitMiddleware, max_content_size=2**8)\n\n\nclient = TestClient(app)\n\n\ndef test_custom_middleware_exception(tmp_path: Path):\n    default_pydantic_max_size = 2**16\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n\n    with client:\n        with open(path, \"rb\") as file:\n            response = client.post(\"/middleware\", files={\"file\": file})\n        assert response.status_code == 422, response.text\n        assert response.json() == {\n            \"detail\": {\n                \"name\": \"ContentSizeLimitExceeded\",\n                \"code\": 999,\n                \"message\": \"File limit exceeded\",\n            }\n        }\n\n\ndef test_custom_middleware_exception_not_raised(tmp_path: Path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with client:\n        with open(path, \"rb\") as file:\n            response = client.post(\"/middleware\", files={\"file\": file})\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"message\": \"OK\"}\n", "tests/test_dependency_overrides.py": "from typing import Optional\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi import APIRouter, Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nrouter = APIRouter()\n\n\nasync def common_parameters(q: str, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/main-depends/\")\nasync def main_depends(commons: dict = Depends(common_parameters)):\n    return {\"in\": \"main-depends\", \"params\": commons}\n\n\n@app.get(\"/decorator-depends/\", dependencies=[Depends(common_parameters)])\nasync def decorator_depends():\n    return {\"in\": \"decorator-depends\"}\n\n\n@router.get(\"/router-depends/\")\nasync def router_depends(commons: dict = Depends(common_parameters)):\n    return {\"in\": \"router-depends\", \"params\": commons}\n\n\n@router.get(\"/router-decorator-depends/\", dependencies=[Depends(common_parameters)])\nasync def router_decorator_depends():\n    return {\"in\": \"router-decorator-depends\"}\n\n\napp.include_router(router)\n\nclient = TestClient(app)\n\n\nasync def overrider_dependency_simple(q: Optional[str] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\nasync def overrider_sub_dependency(k: str):\n    return {\"k\": k}\n\n\nasync def overrider_dependency_with_sub(msg: dict = Depends(overrider_sub_dependency)):\n    return msg\n\n\ndef test_main_depends():\n    response = client.get(\"/main-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_main_depends_q_foo():\n    response = client.get(\"/main-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"main-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 0, \"limit\": 100},\n    }\n\n\ndef test_main_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/main-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"main-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n\n\ndef test_decorator_depends():\n    response = client.get(\"/decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_decorator_depends_q_foo():\n    response = client.get(\"/decorator-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"decorator-depends\"}\n\n\ndef test_decorator_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/decorator-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"decorator-depends\"}\n\n\ndef test_router_depends():\n    response = client.get(\"/router-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_router_depends_q_foo():\n    response = client.get(\"/router-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"router-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 0, \"limit\": 100},\n    }\n\n\ndef test_router_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/router-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"in\": \"router-depends\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n\n\ndef test_router_decorator_depends():\n    response = client.get(\"/router-decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"q\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_router_decorator_depends_q_foo():\n    response = client.get(\"/router-decorator-depends/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-decorator-depends\"}\n\n\ndef test_router_decorator_depends_q_foo_skip_100_limit_200():\n    response = client.get(\"/router-decorator-depends/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-decorator-depends\"}\n\n\n@pytest.mark.parametrize(\n    \"url,status_code,expected\",\n    [\n        (\n            \"/main-depends/\",\n            200,\n            {\"in\": \"main-depends\", \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10}},\n        ),\n        (\n            \"/main-depends/?q=foo\",\n            200,\n            {\"in\": \"main-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n        ),\n        (\n            \"/main-depends/?q=foo&skip=100&limit=200\",\n            200,\n            {\"in\": \"main-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n        ),\n        (\"/decorator-depends/\", 200, {\"in\": \"decorator-depends\"}),\n        (\n            \"/router-depends/\",\n            200,\n            {\"in\": \"router-depends\", \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10}},\n        ),\n        (\n            \"/router-depends/?q=foo\",\n            200,\n            {\"in\": \"router-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n        ),\n        (\n            \"/router-depends/?q=foo&skip=100&limit=200\",\n            200,\n            {\"in\": \"router-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n        ),\n        (\"/router-decorator-depends/\", 200, {\"in\": \"router-decorator-depends\"}),\n    ],\n)\ndef test_override_simple(url, status_code, expected):\n    app.dependency_overrides[common_parameters] = overrider_dependency_simple\n    response = client.get(url)\n    assert response.status_code == status_code\n    assert response.json() == expected\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_main_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/main-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub__main_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/main-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_main_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/main-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"main-depends\", \"params\": {\"k\": \"bar\"}}\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_decorator_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_decorator_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/decorator-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_decorator_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/decorator-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"decorator-depends\"}\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_router_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_router_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_router_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-depends\", \"params\": {\"k\": \"bar\"}}\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_router_decorator_depends():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-decorator-depends/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_router_decorator_depends_q_foo():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-decorator-depends/?q=foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"k\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n    app.dependency_overrides = {}\n\n\ndef test_override_with_sub_router_decorator_depends_k_bar():\n    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n    response = client.get(\"/router-decorator-depends/?k=bar\")\n    assert response.status_code == 200\n    assert response.json() == {\"in\": \"router-decorator-depends\"}\n    app.dependency_overrides = {}\n", "tests/test_security_http_bearer.py": "from fastapi import FastAPI, Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPBearer()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_bearer():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_bearer_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n        },\n    }\n", "tests/test_exception_handlers.py": "import pytest\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.testclient import TestClient\nfrom starlette.responses import JSONResponse\n\n\ndef http_exception_handler(request, exception):\n    return JSONResponse({\"exception\": \"http-exception\"})\n\n\ndef request_validation_exception_handler(request, exception):\n    return JSONResponse({\"exception\": \"request-validation\"})\n\n\ndef server_error_exception_handler(request, exception):\n    return JSONResponse(status_code=500, content={\"exception\": \"server-error\"})\n\n\napp = FastAPI(\n    exception_handlers={\n        HTTPException: http_exception_handler,\n        RequestValidationError: request_validation_exception_handler,\n        Exception: server_error_exception_handler,\n    }\n)\n\nclient = TestClient(app)\n\n\n@app.get(\"/http-exception\")\ndef route_with_http_exception():\n    raise HTTPException(status_code=400)\n\n\n@app.get(\"/request-validation/{param}/\")\ndef route_with_request_validation_exception(param: int):\n    pass  # pragma: no cover\n\n\n@app.get(\"/server-error\")\ndef route_with_server_error():\n    raise RuntimeError(\"Oops!\")\n\n\ndef test_override_http_exception():\n    response = client.get(\"/http-exception\")\n    assert response.status_code == 200\n    assert response.json() == {\"exception\": \"http-exception\"}\n\n\ndef test_override_request_validation_exception():\n    response = client.get(\"/request-validation/invalid\")\n    assert response.status_code == 200\n    assert response.json() == {\"exception\": \"request-validation\"}\n\n\ndef test_override_server_error_exception_raises():\n    with pytest.raises(RuntimeError):\n        client.get(\"/server-error\")\n\n\ndef test_override_server_error_exception_response():\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/server-error\")\n    assert response.status_code == 500\n    assert response.json() == {\"exception\": \"server-error\"}\n", "tests/test_inherited_custom_class.py": "import uuid\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\nfrom .utils import needs_pydanticv1, needs_pydanticv2\n\n\nclass MyUuid:\n    def __init__(self, uuid_string: str):\n        self.uuid = uuid_string\n\n    def __str__(self):\n        return self.uuid\n\n    @property  # type: ignore\n    def __class__(self):\n        return uuid.UUID\n\n    @property\n    def __dict__(self):\n        \"\"\"Spoof a missing __dict__ by raising TypeError, this is how\n        asyncpg.pgroto.pgproto.UUID behaves\"\"\"\n        raise TypeError(\"vars() argument must have __dict__ attribute\")\n\n\n@needs_pydanticv2\ndef test_pydanticv2():\n    from pydantic import field_serializer\n\n    app = FastAPI()\n\n    @app.get(\"/fast_uuid\")\n    def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) != uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}\n\n    class SomeCustomClass(BaseModel):\n        model_config = {\"arbitrary_types_allowed\": True}\n\n        a_uuid: MyUuid\n\n        @field_serializer(\"a_uuid\")\n        def serialize_a_uuid(self, v):\n            return str(v)\n\n    @app.get(\"/get_custom_class\")\n    def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))\n\n    client = TestClient(app)\n\n    with client:\n        response_simple = client.get(\"/fast_uuid\")\n        response_pydantic = client.get(\"/get_custom_class\")\n\n    assert response_simple.json() == {\n        \"fast_uuid\": \"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"\n    }\n\n    assert response_pydantic.json() == {\n        \"a_uuid\": \"b8799909-f914-42de-91bc-95c819218d01\"\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_pydanticv1():\n    app = FastAPI()\n\n    @app.get(\"/fast_uuid\")\n    def return_fast_uuid():\n        asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n        assert isinstance(asyncpg_uuid, uuid.UUID)\n        assert type(asyncpg_uuid) != uuid.UUID\n        with pytest.raises(TypeError):\n            vars(asyncpg_uuid)\n        return {\"fast_uuid\": asyncpg_uuid}\n\n    class SomeCustomClass(BaseModel):\n        class Config:\n            arbitrary_types_allowed = True\n            json_encoders = {uuid.UUID: str}\n\n        a_uuid: MyUuid\n\n    @app.get(\"/get_custom_class\")\n    def return_some_user():\n        # Test that the fix also works for custom pydantic classes\n        return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))\n\n    client = TestClient(app)\n\n    with client:\n        response_simple = client.get(\"/fast_uuid\")\n        response_pydantic = client.get(\"/get_custom_class\")\n\n    assert response_simple.json() == {\n        \"fast_uuid\": \"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"\n    }\n\n    assert response_pydantic.json() == {\n        \"a_uuid\": \"b8799909-f914-42de-91bc-95c819218d01\"\n    }\n", "tests/test_param_in_path_and_dependency.py": "from fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def user_exists(user_id: int):\n    return True\n\n\n@app.get(\"/users/{user_id}\", dependencies=[Depends(user_exists)])\nasync def read_users(user_id: int):\n    pass\n\n\nclient = TestClient(app)\n\n\ndef test_read_users():\n    response = client.get(\"/users/42\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_response_change_status_code.py": "from fastapi import Depends, FastAPI, Response\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def response_status_setter(response: Response):\n    response.status_code = 201\n\n\nasync def parent_dep(result=Depends(response_status_setter)):\n    return result\n\n\n@app.get(\"/\", dependencies=[Depends(parent_dep)])\nasync def get_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_dependency_set_status_code():\n    response = client.get(\"/\")\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"msg\": \"Hello World\"}\n", "tests/test_datetime_custom_encoder.py": "from datetime import datetime, timezone\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\nfrom .utils import needs_pydanticv1, needs_pydanticv2\n\n\n@needs_pydanticv2\ndef test_pydanticv2():\n    from pydantic import field_serializer\n\n    class ModelWithDatetimeField(BaseModel):\n        dt_field: datetime\n\n        @field_serializer(\"dt_field\")\n        def serialize_datetime(self, dt_field: datetime):\n            return dt_field.replace(microsecond=0, tzinfo=timezone.utc).isoformat()\n\n    app = FastAPI()\n    model = ModelWithDatetimeField(dt_field=datetime(2019, 1, 1, 8))\n\n    @app.get(\"/model\", response_model=ModelWithDatetimeField)\n    def get_model():\n        return model\n\n    client = TestClient(app)\n    with client:\n        response = client.get(\"/model\")\n    assert response.json() == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_pydanticv1():\n    class ModelWithDatetimeField(BaseModel):\n        dt_field: datetime\n\n        class Config:\n            json_encoders = {\n                datetime: lambda dt: dt.replace(\n                    microsecond=0, tzinfo=timezone.utc\n                ).isoformat()\n            }\n\n    app = FastAPI()\n    model = ModelWithDatetimeField(dt_field=datetime(2019, 1, 1, 8))\n\n    @app.get(\"/model\", response_model=ModelWithDatetimeField)\n    def get_model():\n        return model\n\n    client = TestClient(app)\n    with client:\n        response = client.get(\"/model\")\n    assert response.json() == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n", "tests/test_custom_route_class.py": "import pytest\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.routing import APIRoute\nfrom fastapi.testclient import TestClient\nfrom starlette.routing import Route\n\napp = FastAPI()\n\n\nclass APIRouteA(APIRoute):\n    x_type = \"A\"\n\n\nclass APIRouteB(APIRoute):\n    x_type = \"B\"\n\n\nclass APIRouteC(APIRoute):\n    x_type = \"C\"\n\n\nrouter_a = APIRouter(route_class=APIRouteA)\nrouter_b = APIRouter(route_class=APIRouteB)\nrouter_c = APIRouter(route_class=APIRouteC)\n\n\n@router_a.get(\"/\")\ndef get_a():\n    return {\"msg\": \"A\"}\n\n\n@router_b.get(\"/\")\ndef get_b():\n    return {\"msg\": \"B\"}\n\n\n@router_c.get(\"/\")\ndef get_c():\n    return {\"msg\": \"C\"}\n\n\nrouter_b.include_router(router=router_c, prefix=\"/c\")\nrouter_a.include_router(router=router_b, prefix=\"/b\")\napp.include_router(router=router_a, prefix=\"/a\")\n\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/a\", 200, {\"msg\": \"A\"}),\n        (\"/a/b\", 200, {\"msg\": \"B\"}),\n        (\"/a/b/c\", 200, {\"msg\": \"C\"}),\n    ],\n)\ndef test_get_path(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_route_classes():\n    routes = {}\n    for r in app.router.routes:\n        assert isinstance(r, Route)\n        routes[r.path] = r\n    assert getattr(routes[\"/a/\"], \"x_type\") == \"A\"  # noqa: B009\n    assert getattr(routes[\"/a/b/\"], \"x_type\") == \"B\"  # noqa: B009\n    assert getattr(routes[\"/a/b/c/\"], \"x_type\") == \"C\"  # noqa: B009\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get A\",\n                    \"operationId\": \"get_a_a__get\",\n                }\n            },\n            \"/a/b/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get B\",\n                    \"operationId\": \"get_b_a_b__get\",\n                }\n            },\n            \"/a/b/c/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Get C\",\n                    \"operationId\": \"get_c_a_b_c__get\",\n                }\n            },\n        },\n    }\n", "tests/__init__.py": "", "tests/test_security_api_key_query_description.py": "from fastapi import Depends, FastAPI, Security\nfrom fastapi.security import APIKeyQuery\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\napi_key = APIKeyQuery(name=\"key\", description=\"API Key Query\")\n\n\nclass User(BaseModel):\n    username: str\n\n\ndef get_current_user(oauth_header: str = Security(api_key)):\n    user = User(username=oauth_header)\n    return user\n\n\n@app.get(\"/users/me\")\ndef read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\nclient = TestClient(app)\n\n\ndef test_security_api_key():\n    response = client.get(\"/users/me?key=secret\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"secret\"}\n\n\ndef test_security_api_key_no_key():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"APIKeyQuery\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"APIKeyQuery\": {\n                    \"type\": \"apiKey\",\n                    \"name\": \"key\",\n                    \"in\": \"query\",\n                    \"description\": \"API Key Query\",\n                }\n            }\n        },\n    }\n", "tests/test_additional_responses_response_class.py": "import typing\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass JsonApiResponse(JSONResponse):\n    media_type = \"application/vnd.api+json\"\n\n\nclass Error(BaseModel):\n    status: str\n    title: str\n\n\nclass JsonApiError(BaseModel):\n    errors: typing.List[Error]\n\n\n@app.get(\n    \"/a\",\n    response_class=JsonApiResponse,\n    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n)\nasync def a():\n    pass  # pragma: no cover\n\n\n@app.get(\"/b\", responses={500: {\"description\": \"Error\", \"model\": Error}})\nasync def b():\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/vnd.api+json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n                                    }\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"A\",\n                    \"operationId\": \"a_a_get\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"responses\": {\n                        \"500\": {\n                            \"description\": \"Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"B\",\n                    \"operationId\": \"b_b_get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Error\": {\n                    \"title\": \"Error\",\n                    \"required\": [\"status\", \"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                    },\n                },\n                \"JsonApiError\": {\n                    \"title\": \"JsonApiError\",\n                    \"required\": [\"errors\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"errors\": {\n                            \"title\": \"Errors\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_generic_parameterless_depends.py": "from typing import TypeVar\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nT = TypeVar(\"T\")\n\nDep = Annotated[T, Depends()]\n\n\nclass A:\n    pass\n\n\nclass B:\n    pass\n\n\n@app.get(\"/a\")\nasync def a(dep: Dep[A]):\n    return {\"cls\": dep.__class__.__name__}\n\n\n@app.get(\"/b\")\nasync def b(dep: Dep[B]):\n    return {\"cls\": dep.__class__.__name__}\n\n\nclient = TestClient(app)\n\n\ndef test_generic_parameterless_depends():\n    response = client.get(\"/a\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"cls\": \"A\"}\n\n    response = client.get(\"/b\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"cls\": \"B\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"openapi\": \"3.1.0\",\n        \"paths\": {\n            \"/a\": {\n                \"get\": {\n                    \"operationId\": \"a_a_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful \" \"Response\",\n                        }\n                    },\n                    \"summary\": \"A\",\n                }\n            },\n            \"/b\": {\n                \"get\": {\n                    \"operationId\": \"b_b_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful \" \"Response\",\n                        }\n                    },\n                    \"summary\": \"B\",\n                }\n            },\n        },\n    }\n", "tests/test_invalid_sequence_param.py": "from typing import Dict, List, Optional, Tuple\n\nimport pytest\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel\n\n\ndef test_invalid_sequence():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: List[Item] = Query(default=None)):\n            pass  # pragma: no cover\n\n\ndef test_invalid_tuple():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: Tuple[Item, Item] = Query(default=None)):\n            pass  # pragma: no cover\n\n\ndef test_invalid_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: Dict[str, Item] = Query(default=None)):\n            pass  # pragma: no cover\n\n\ndef test_invalid_simple_dict():\n    with pytest.raises(AssertionError):\n        app = FastAPI()\n\n        class Item(BaseModel):\n            title: str\n\n        @app.get(\"/items/\")\n        def read_items(q: Optional[dict] = Query(default=None)):\n            pass  # pragma: no cover\n", "tests/test_security_http_digest_optional.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nsecurity = HTTPDigest(auto_error=False)\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n):\n    if credentials is None:\n        return {\"msg\": \"Create an account first\"}\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n\n\nclient = TestClient(app)\n\n\ndef test_security_http_digest():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n\n\ndef test_security_http_digest_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\ndef test_security_http_digest_incorrect_scheme_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPDigest\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n        },\n    }\n", "tests/test_security_oauth2_authorization_code_bearer.py": "from typing import Optional\n\nfrom fastapi import FastAPI, Security\nfrom fastapi.security import OAuth2AuthorizationCodeBearer\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\noauth2_scheme = OAuth2AuthorizationCodeBearer(\n    authorizationUrl=\"authorize\", tokenUrl=\"token\", auto_error=True\n)\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Optional[str] = Security(oauth2_scheme)):\n    return {\"token\": token}\n\n\nclient = TestClient(app)\n\n\ndef test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\ndef test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2AuthorizationCodeBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2AuthorizationCodeBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"authorizationCode\": {\n                            \"authorizationUrl\": \"authorize\",\n                            \"tokenUrl\": \"token\",\n                            \"scopes\": {},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_openapi_separate_input_output_schemas.py": "from typing import List, Optional\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\nfrom .utils import PYDANTIC_V2, needs_pydanticv2\n\n\nclass SubItem(BaseModel):\n    subname: str\n    sub_description: Optional[str] = None\n    tags: List[str] = []\n    if PYDANTIC_V2:\n        model_config = {\"json_schema_serialization_defaults_required\": True}\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    sub: Optional[SubItem] = None\n    if PYDANTIC_V2:\n        model_config = {\"json_schema_serialization_defaults_required\": True}\n\n\ndef get_app_client(separate_input_output_schemas: bool = True) -> TestClient:\n    app = FastAPI(separate_input_output_schemas=separate_input_output_schemas)\n\n    @app.post(\"/items/\")\n    def create_item(item: Item):\n        return item\n\n    @app.post(\"/items-list/\")\n    def create_item_list(item: List[Item]):\n        return item\n\n    @app.get(\"/items/\")\n    def read_items() -> List[Item]:\n        return [\n            Item(\n                name=\"Portal Gun\",\n                description=\"Device to travel through the multi-rick-verse\",\n                sub=SubItem(subname=\"subname\"),\n            ),\n            Item(name=\"Plumbus\"),\n        ]\n\n    client = TestClient(app)\n    return client\n\n\ndef test_create_item():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    response = client.post(\"/items/\", json={\"name\": \"Plumbus\"})\n    response2 = client_no.post(\"/items/\", json={\"name\": \"Plumbus\"})\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == {\"name\": \"Plumbus\", \"description\": None, \"sub\": None}\n    )\n\n\ndef test_create_item_with_sub():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    data = {\n        \"name\": \"Plumbus\",\n        \"sub\": {\"subname\": \"SubPlumbus\", \"sub_description\": \"Sub WTF\"},\n    }\n    response = client.post(\"/items/\", json=data)\n    response2 = client_no.post(\"/items/\", json=data)\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == {\n            \"name\": \"Plumbus\",\n            \"description\": None,\n            \"sub\": {\"subname\": \"SubPlumbus\", \"sub_description\": \"Sub WTF\", \"tags\": []},\n        }\n    )\n\n\ndef test_create_item_list():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    data = [\n        {\"name\": \"Plumbus\"},\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n    ]\n    response = client.post(\"/items-list/\", json=data)\n    response2 = client_no.post(\"/items-list/\", json=data)\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == [\n            {\"name\": \"Plumbus\", \"description\": None, \"sub\": None},\n            {\n                \"name\": \"Portal Gun\",\n                \"description\": \"Device to travel through the multi-rick-verse\",\n                \"sub\": None,\n            },\n        ]\n    )\n\n\ndef test_read_items():\n    client = get_app_client()\n    client_no = get_app_client(separate_input_output_schemas=False)\n    response = client.get(\"/items/\")\n    response2 = client_no.get(\"/items/\")\n    assert response.status_code == response2.status_code == 200, response.text\n    assert (\n        response.json()\n        == response2.json()\n        == [\n            {\n                \"name\": \"Portal Gun\",\n                \"description\": \"Device to travel through the multi-rick-verse\",\n                \"sub\": {\"subname\": \"subname\", \"sub_description\": None, \"tags\": []},\n            },\n            {\"name\": \"Plumbus\", \"description\": None, \"sub\": None},\n        ]\n    )\n\n\n@needs_pydanticv2\ndef test_openapi_schema():\n    client = get_app_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Item-Output\"\n                                        },\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item-Input\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/items-list/\": {\n                \"post\": {\n                    \"summary\": \"Create Item List\",\n                    \"operationId\": \"create_item_list_items_list__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Item-Input\"\n                                    },\n                                    \"type\": \"array\",\n                                    \"title\": \"Item\",\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item-Input\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"sub\": {\n                            \"anyOf\": [\n                                {\"$ref\": \"#/components/schemas/SubItem-Input\"},\n                                {\"type\": \"null\"},\n                            ]\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"Item-Output\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"sub\": {\n                            \"anyOf\": [\n                                {\"$ref\": \"#/components/schemas/SubItem-Output\"},\n                                {\"type\": \"null\"},\n                            ]\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"description\", \"sub\"],\n                    \"title\": \"Item\",\n                },\n                \"SubItem-Input\": {\n                    \"properties\": {\n                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n                        \"sub_description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Sub Description\",\n                        },\n                        \"tags\": {\n                            \"items\": {\"type\": \"string\"},\n                            \"type\": \"array\",\n                            \"title\": \"Tags\",\n                            \"default\": [],\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"subname\"],\n                    \"title\": \"SubItem\",\n                },\n                \"SubItem-Output\": {\n                    \"properties\": {\n                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n                        \"sub_description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Sub Description\",\n                        },\n                        \"tags\": {\n                            \"items\": {\"type\": \"string\"},\n                            \"type\": \"array\",\n                            \"title\": \"Tags\",\n                            \"default\": [],\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"subname\", \"sub_description\", \"tags\"],\n                    \"title\": \"SubItem\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n\n\n@needs_pydanticv2\ndef test_openapi_schema_no_separate():\n    client = get_app_client(separate_input_output_schemas=False)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/items-list/\": {\n                \"post\": {\n                    \"summary\": \"Create Item List\",\n                    \"operationId\": \"create_item_list_items_list__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    \"type\": \"array\",\n                                    \"title\": \"Item\",\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"sub\": {\n                            \"anyOf\": [\n                                {\"$ref\": \"#/components/schemas/SubItem\"},\n                                {\"type\": \"null\"},\n                            ]\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"SubItem\": {\n                    \"properties\": {\n                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n                        \"sub_description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Sub Description\",\n                        },\n                        \"tags\": {\n                            \"items\": {\"type\": \"string\"},\n                            \"type\": \"array\",\n                            \"title\": \"Tags\",\n                            \"default\": [],\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"subname\"],\n                    \"title\": \"SubItem\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_sub_callbacks.py": "from typing import Optional\n\nfrom dirty_equals import IsDict\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass  # pragma: nocover\n\n\nclass Event(BaseModel):\n    name: str\n    total: float\n\n\nevents_callback_router = APIRouter()\n\n\n@events_callback_router.get(\"{$callback_url}/events/{$request.body.title}\")\ndef event_callback(event: Event):\n    pass  # pragma: nocover\n\n\nsubrouter = APIRouter()\n\n\n@subrouter.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Optional[HttpUrl] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n\n\napp.include_router(subrouter, callbacks=events_callback_router.routes)\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.post(\n        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Invoice received\"}\n\n\ndef test_openapi_schema():\n    with client:\n        response = client.get(\"/openapi.json\")\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/invoices/\": {\n                    \"post\": {\n                        \"summary\": \"Create Invoice\",\n                        \"description\": 'Create an invoice.\\n\\nThis will (let\\'s imagine) let the API user (some external developer) create an\\ninvoice.\\n\\nAnd this path operation will:\\n\\n* Send the invoice to the client.\\n* Collect the money from the client.\\n* Send a notification back to the API user (the external developer), as a callback.\\n    * At this point is that the API will somehow send a POST request to the\\n        external API with the notification of the invoice event\\n        (e.g. \"payment successful\").',\n                        \"operationId\": \"create_invoice_invoices__post\",\n                        \"parameters\": [\n                            {\n                                \"required\": False,\n                                \"schema\": IsDict(\n                                    {\n                                        \"title\": \"Callback Url\",\n                                        \"anyOf\": [\n                                            {\n                                                \"type\": \"string\",\n                                                \"format\": \"uri\",\n                                                \"minLength\": 1,\n                                                \"maxLength\": 2083,\n                                            },\n                                            {\"type\": \"null\"},\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"title\": \"Callback Url\",\n                                        \"maxLength\": 2083,\n                                        \"minLength\": 1,\n                                        \"type\": \"string\",\n                                        \"format\": \"uri\",\n                                    }\n                                ),\n                                \"name\": \"callback_url\",\n                                \"in\": \"query\",\n                            }\n                        ],\n                        \"requestBody\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Invoice\"}\n                                }\n                            },\n                            \"required\": True,\n                        },\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                        \"callbacks\": {\n                            \"event_callback\": {\n                                \"{$callback_url}/events/{$request.body.title}\": {\n                                    \"get\": {\n                                        \"summary\": \"Event Callback\",\n                                        \"operationId\": \"event_callback__callback_url__events___request_body_title__get\",\n                                        \"requestBody\": {\n                                            \"required\": True,\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/Event\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"responses\": {\n                                            \"200\": {\n                                                \"description\": \"Successful Response\",\n                                                \"content\": {\n                                                    \"application/json\": {\"schema\": {}}\n                                                },\n                                            },\n                                            \"422\": {\n                                                \"description\": \"Validation Error\",\n                                                \"content\": {\n                                                    \"application/json\": {\n                                                        \"schema\": {\n                                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                        }\n                                                    }\n                                                },\n                                            },\n                                        },\n                                    }\n                                }\n                            },\n                            \"invoice_notification\": {\n                                \"{$callback_url}/invoices/{$request.body.id}\": {\n                                    \"post\": {\n                                        \"summary\": \"Invoice Notification\",\n                                        \"operationId\": \"invoice_notification__callback_url__invoices___request_body_id__post\",\n                                        \"requestBody\": {\n                                            \"required\": True,\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/InvoiceEvent\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"responses\": {\n                                            \"200\": {\n                                                \"description\": \"Successful Response\",\n                                                \"content\": {\n                                                    \"application/json\": {\n                                                        \"schema\": {\n                                                            \"$ref\": \"#/components/schemas/InvoiceEventReceived\"\n                                                        }\n                                                    }\n                                                },\n                                            },\n                                            \"422\": {\n                                                \"description\": \"Validation Error\",\n                                                \"content\": {\n                                                    \"application/json\": {\n                                                        \"schema\": {\n                                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                        }\n                                                    }\n                                                },\n                                            },\n                                        },\n                                    }\n                                }\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"Event\": {\n                        \"title\": \"Event\",\n                        \"required\": [\"name\", \"total\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n                        },\n                    },\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                    \"Invoice\": {\n                        \"title\": \"Invoice\",\n                        \"required\": [\"id\", \"customer\", \"total\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                            \"title\": IsDict(\n                                {\n                                    \"title\": \"Title\",\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Title\", \"type\": \"string\"}\n                            ),\n                            \"customer\": {\"title\": \"Customer\", \"type\": \"string\"},\n                            \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n                        },\n                    },\n                    \"InvoiceEvent\": {\n                        \"title\": \"InvoiceEvent\",\n                        \"required\": [\"description\", \"paid\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                            \"paid\": {\"title\": \"Paid\", \"type\": \"boolean\"},\n                        },\n                    },\n                    \"InvoiceEventReceived\": {\n                        \"title\": \"InvoiceEventReceived\",\n                        \"required\": [\"ok\"],\n                        \"type\": \"object\",\n                        \"properties\": {\"ok\": {\"title\": \"Ok\", \"type\": \"boolean\"}},\n                    },\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                }\n            },\n        }\n", "tests/test_openapi_route_extensions.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/\", openapi_extra={\"x-custom-extension\": \"value\"})\ndef route_with_extras():\n    return {}\n\n\nclient = TestClient(app)\n\n\ndef test_get_route():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {}\n\n\ndef test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                    },\n                    \"summary\": \"Route With Extras\",\n                    \"operationId\": \"route_with_extras__get\",\n                    \"x-custom-extension\": \"value\",\n                }\n            },\n        },\n    }\n", "tests/test_request_body_parameters_media_type.py": "import typing\n\nfrom fastapi import Body, FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nmedia_type = \"application/vnd.api+json\"\n\n\n# NOTE: These are not valid JSON:API resources\n# but they are fine for testing requestBody with custom media_type\nclass Product(BaseModel):\n    name: str\n    price: float\n\n\nclass Shop(BaseModel):\n    name: str\n\n\n@app.post(\"/products\")\nasync def create_product(data: Product = Body(media_type=media_type, embed=True)):\n    pass  # pragma: no cover\n\n\n@app.post(\"/shops\")\nasync def create_shop(\n    data: Shop = Body(media_type=media_type),\n    included: typing.List[Product] = Body(default=[], media_type=media_type),\n):\n    pass  # pragma: no cover\n\n\nclient = TestClient(app)\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/products\": {\n                \"post\": {\n                    \"summary\": \"Create Product\",\n                    \"operationId\": \"create_product_products_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/vnd.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_product_products_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/shops\": {\n                \"post\": {\n                    \"summary\": \"Create Shop\",\n                    \"operationId\": \"create_shop_shops_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/vnd.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_shop_shops_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_product_products_post\": {\n                    \"title\": \"Body_create_product_products_post\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"data\": {\"$ref\": \"#/components/schemas/Product\"}},\n                },\n                \"Body_create_shop_shops_post\": {\n                    \"title\": \"Body_create_shop_shops_post\",\n                    \"required\": [\"data\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"data\": {\"$ref\": \"#/components/schemas/Shop\"},\n                        \"included\": {\n                            \"title\": \"Included\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Product\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Product\": {\n                    \"title\": \"Product\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"Shop\": {\n                    \"title\": \"Shop\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_get_request_body.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Product(BaseModel):\n    name: str\n    description: str = None  # type: ignore\n    price: float\n\n\n@app.get(\"/product\")\nasync def create_item(product: Product):\n    return product\n\n\nclient = TestClient(app)\n\n\ndef test_get_with_body():\n    body = {\"name\": \"Foo\", \"description\": \"Some description\", \"price\": 5.5}\n    response = client.request(\"GET\", \"/product\", json=body)\n    assert response.json() == body\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/product\": {\n                \"get\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_product_get\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Product\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Product\": {\n                    \"title\": \"Product\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_validate_response_dataclass.py": "from typing import List, Optional\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import ResponseValidationError\nfrom fastapi.testclient import TestClient\nfrom pydantic.dataclasses import dataclass\n\napp = FastAPI()\n\n\n@dataclass\nclass Item:\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\n\n@app.get(\"/items/invalid\", response_model=Item)\ndef get_invalid():\n    return {\"name\": \"invalid\", \"price\": \"foo\"}\n\n\n@app.get(\"/items/innerinvalid\", response_model=Item)\ndef get_innerinvalid():\n    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n\n\n@app.get(\"/items/invalidlist\", response_model=List[Item])\ndef get_invalidlist():\n    return [\n        {\"name\": \"foo\"},\n        {\"name\": \"bar\", \"price\": \"bar\"},\n        {\"name\": \"baz\", \"price\": \"baz\"},\n    ]\n\n\nclient = TestClient(app)\n\n\ndef test_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalid\")\n\n\ndef test_double_invalid():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/innerinvalid\")\n\n\ndef test_invalid_list():\n    with pytest.raises(ResponseValidationError):\n        client.get(\"/items/invalidlist\")\n", "tests/test_default_response_class.py": "from typing import Any\n\nimport orjson\nfrom fastapi import APIRouter, FastAPI\nfrom fastapi.responses import HTMLResponse, JSONResponse, PlainTextResponse\nfrom fastapi.testclient import TestClient\n\n\nclass ORJSONResponse(JSONResponse):\n    media_type = \"application/x-orjson\"\n\n    def render(self, content: Any) -> bytes:\n        return orjson.dumps(content)\n\n\nclass OverrideResponse(JSONResponse):\n    media_type = \"application/x-override\"\n\n\napp = FastAPI(default_response_class=ORJSONResponse)\nrouter_a = APIRouter()\nrouter_a_a = APIRouter()\nrouter_a_b_override = APIRouter()  # Overrides default class\nrouter_b_override = APIRouter()  # Overrides default class\nrouter_b_a = APIRouter()\nrouter_b_a_c_override = APIRouter()  # Overrides default class again\n\n\n@app.get(\"/\")\ndef get_root():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.get(\"/override\", response_class=PlainTextResponse)\ndef get_path_override():\n    return \"Hello World\"\n\n\n@router_a.get(\"/\")\ndef get_a():\n    return {\"msg\": \"Hello A\"}\n\n\n@router_a.get(\"/override\", response_class=PlainTextResponse)\ndef get_a_path_override():\n    return \"Hello A\"\n\n\n@router_a_a.get(\"/\")\ndef get_a_a():\n    return {\"msg\": \"Hello A A\"}\n\n\n@router_a_a.get(\"/override\", response_class=PlainTextResponse)\ndef get_a_a_path_override():\n    return \"Hello A A\"\n\n\n@router_a_b_override.get(\"/\")\ndef get_a_b():\n    return \"Hello A B\"\n\n\n@router_a_b_override.get(\"/override\", response_class=HTMLResponse)\ndef get_a_b_path_override():\n    return \"Hello A B\"\n\n\n@router_b_override.get(\"/\")\ndef get_b():\n    return \"Hello B\"\n\n\n@router_b_override.get(\"/override\", response_class=HTMLResponse)\ndef get_b_path_override():\n    return \"Hello B\"\n\n\n@router_b_a.get(\"/\")\ndef get_b_a():\n    return \"Hello B A\"\n\n\n@router_b_a.get(\"/override\", response_class=HTMLResponse)\ndef get_b_a_path_override():\n    return \"Hello B A\"\n\n\n@router_b_a_c_override.get(\"/\")\ndef get_b_a_c():\n    return \"Hello B A C\"\n\n\n@router_b_a_c_override.get(\"/override\", response_class=OverrideResponse)\ndef get_b_a_c_path_override():\n    return {\"msg\": \"Hello B A C\"}\n\n\nrouter_b_a.include_router(\n    router_b_a_c_override, prefix=\"/c\", default_response_class=HTMLResponse\n)\nrouter_b_override.include_router(router_b_a, prefix=\"/a\")\nrouter_a.include_router(router_a_a, prefix=\"/a\")\nrouter_a.include_router(\n    router_a_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n)\napp.include_router(router_a, prefix=\"/a\")\napp.include_router(\n    router_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n)\n\n\nclient = TestClient(app)\n\norjson_type = \"application/x-orjson\"\ntext_type = \"text/plain; charset=utf-8\"\nhtml_type = \"text/html; charset=utf-8\"\noverride_type = \"application/x-override\"\n\n\ndef test_app():\n    with client:\n        response = client.get(\"/\")\n    assert response.json() == {\"msg\": \"Hello World\"}\n    assert response.headers[\"content-type\"] == orjson_type\n\n\ndef test_app_override():\n    with client:\n        response = client.get(\"/override\")\n    assert response.content == b\"Hello World\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a():\n    with client:\n        response = client.get(\"/a\")\n    assert response.json() == {\"msg\": \"Hello A\"}\n    assert response.headers[\"content-type\"] == orjson_type\n\n\ndef test_router_a_override():\n    with client:\n        response = client.get(\"/a/override\")\n    assert response.content == b\"Hello A\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a_a():\n    with client:\n        response = client.get(\"/a/a\")\n    assert response.json() == {\"msg\": \"Hello A A\"}\n    assert response.headers[\"content-type\"] == orjson_type\n\n\ndef test_router_a_a_override():\n    with client:\n        response = client.get(\"/a/a/override\")\n    assert response.content == b\"Hello A A\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a_b():\n    with client:\n        response = client.get(\"/a/b\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_a_b_override():\n    with client:\n        response = client.get(\"/a/b/override\")\n    assert response.content == b\"Hello A B\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b():\n    with client:\n        response = client.get(\"/b\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_b_override():\n    with client:\n        response = client.get(\"/b/override\")\n    assert response.content == b\"Hello B\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b_a():\n    with client:\n        response = client.get(\"/b/a\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == text_type\n\n\ndef test_router_b_a_override():\n    with client:\n        response = client.get(\"/b/a/override\")\n    assert response.content == b\"Hello B A\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b_a_c():\n    with client:\n        response = client.get(\"/b/a/c\")\n    assert response.content == b\"Hello B A C\"\n    assert response.headers[\"content-type\"] == html_type\n\n\ndef test_router_b_a_c_override():\n    with client:\n        response = client.get(\"/b/a/c/override\")\n    assert response.json() == {\"msg\": \"Hello B A C\"}\n    assert response.headers[\"content-type\"] == override_type\n", "tests/test_callable_endpoint.py": "from functools import partial\nfrom typing import Optional\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\n\ndef main(some_arg, q: Optional[str] = None):\n    return {\"some_arg\": some_arg, \"q\": q}\n\n\nendpoint = partial(main, \"foo\")\n\napp = FastAPI()\n\napp.get(\"/\")(endpoint)\n\n\nclient = TestClient(app)\n\n\ndef test_partial():\n    response = client.get(\"/?q=bar\")\n    data = response.json()\n    assert data == {\"some_arg\": \"foo\", \"q\": \"bar\"}\n", "tests/test_operations_signatures.py": "import inspect\n\nfrom fastapi import APIRouter, FastAPI\n\nmethod_names = [\"get\", \"put\", \"post\", \"delete\", \"options\", \"head\", \"patch\", \"trace\"]\n\n\ndef test_signatures_consistency():\n    base_sig = inspect.signature(APIRouter.get)\n    for method_name in method_names:\n        router_method = getattr(APIRouter, method_name)\n        app_method = getattr(FastAPI, method_name)\n        router_sig = inspect.signature(router_method)\n        app_sig = inspect.signature(app_method)\n        param: inspect.Parameter\n        for key, param in base_sig.parameters.items():\n            router_param: inspect.Parameter = router_sig.parameters[key]\n            app_param: inspect.Parameter = app_sig.parameters[key]\n            assert param.annotation == router_param.annotation\n            assert param.annotation == app_param.annotation\n            assert param.default == router_param.default\n            assert param.default == app_param.default\n", "tests/test_additional_properties.py": "from typing import Dict\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Items(BaseModel):\n    items: Dict[str, int]\n\n\n@app.post(\"/foo\")\ndef foo(items: Items):\n    return items.items\n\n\nclient = TestClient(app)\n\n\ndef test_additional_properties_post():\n    response = client.post(\"/foo\", json={\"items\": {\"foo\": 1, \"bar\": 2}})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": 1, \"bar\": 2}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/foo\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Foo\",\n                    \"operationId\": \"foo_foo_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Items\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Items\": {\n                    \"title\": \"Items\",\n                    \"required\": [\"items\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"object\",\n                            \"additionalProperties\": {\"type\": \"integer\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_response_model_sub_types.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\n\n\nclass Model(BaseModel):\n    name: str\n\n\napp = FastAPI()\n\n\n@app.get(\"/valid1\", responses={\"500\": {\"model\": int}})\ndef valid1():\n    pass\n\n\n@app.get(\"/valid2\", responses={\"500\": {\"model\": List[int]}})\ndef valid2():\n    pass\n\n\n@app.get(\"/valid3\", responses={\"500\": {\"model\": Model}})\ndef valid3():\n    pass\n\n\n@app.get(\"/valid4\", responses={\"500\": {\"model\": List[Model]}})\ndef valid4():\n    pass\n\n\nclient = TestClient(app)\n\n\ndef test_path_operations():\n    response = client.get(\"/valid1\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/valid2\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/valid3\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/valid4\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/valid1\": {\n                \"get\": {\n                    \"summary\": \"Valid1\",\n                    \"operationId\": \"valid1_valid1_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 500 Valid1 Valid1 Get\",\n                                        \"type\": \"integer\",\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/valid2\": {\n                \"get\": {\n                    \"summary\": \"Valid2\",\n                    \"operationId\": \"valid2_valid2_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 500 Valid2 Valid2 Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"type\": \"integer\"},\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/valid3\": {\n                \"get\": {\n                    \"summary\": \"Valid3\",\n                    \"operationId\": \"valid3_valid3_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/valid4\": {\n                \"get\": {\n                    \"summary\": \"Valid4\",\n                    \"operationId\": \"valid4_valid4_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"500\": {\n                            \"description\": \"Internal Server Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response 500 Valid4 Valid4 Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Model\": {\n                    \"title\": \"Model\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n                }\n            }\n        },\n    }\n", "tests/test_starlette_exception.py": "from fastapi import FastAPI, HTTPException\nfrom fastapi.testclient import TestClient\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = FastAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"Some custom header\"},\n        )\n    return {\"item\": items[item_id]}\n\n\n@app.get(\"/http-no-body-statuscode-exception\")\nasync def no_body_status_code_exception():\n    raise HTTPException(status_code=204)\n\n\n@app.get(\"/http-no-body-statuscode-with-detail-exception\")\nasync def no_body_status_code_with_detail_exception():\n    raise HTTPException(status_code=204, detail=\"I should just disappear!\")\n\n\n@app.get(\"/starlette-items/{item_id}\")\nasync def read_starlette_item(item_id: str):\n    if item_id not in items:\n        raise StarletteHTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n\n\nclient = TestClient(app)\n\n\ndef test_get_item():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n\n\ndef test_get_item_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") == \"Some custom header\"\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_get_starlette_item():\n    response = client.get(\"/starlette-items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n\n\ndef test_get_starlette_item_not_found():\n    response = client.get(\"/starlette-items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") is None\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_no_body_status_code_exception_handlers():\n    response = client.get(\"/http-no-body-statuscode-exception\")\n    assert response.status_code == 204\n    assert not response.content\n\n\ndef test_no_body_status_code_with_detail_exception_handlers():\n    response = client.get(\"/http-no-body-statuscode-with-detail-exception\")\n    assert response.status_code == 204\n    assert not response.content\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/http-no-body-statuscode-exception\": {\n                \"get\": {\n                    \"operationId\": \"no_body_status_code_exception_http_no_body_statuscode_exception_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful Response\",\n                        }\n                    },\n                    \"summary\": \"No Body Status Code Exception\",\n                }\n            },\n            \"/http-no-body-statuscode-with-detail-exception\": {\n                \"get\": {\n                    \"operationId\": \"no_body_status_code_with_detail_exception_http_no_body_statuscode_with_detail_exception_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                            \"description\": \"Successful Response\",\n                        }\n                    },\n                    \"summary\": \"No Body Status Code With Detail Exception\",\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/starlette-items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Starlette Item\",\n                    \"operationId\": \"read_starlette_item_starlette_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_openapi_servers.py": "from dirty_equals import IsOneOf\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI(\n    servers=[\n        {\"url\": \"/\", \"description\": \"Default, relative server\"},\n        {\n            \"url\": \"http://staging.localhost.tiangolo.com:8000\",\n            \"description\": \"Staging but actually localhost still\",\n        },\n        {\"url\": \"https://prod.example.com\"},\n    ]\n)\n\n\n@app.get(\"/foo\")\ndef foo():\n    return {\"message\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_app():\n    response = client.get(\"/foo\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"servers\": [\n            {\"url\": \"/\", \"description\": \"Default, relative server\"},\n            {\n                \"url\": IsOneOf(\n                    \"http://staging.localhost.tiangolo.com:8000/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"http://staging.localhost.tiangolo.com:8000\",\n                ),\n                \"description\": \"Staging but actually localhost still\",\n            },\n            {\n                \"url\": IsOneOf(\n                    \"https://prod.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://prod.example.com\",\n                )\n            },\n        ],\n        \"paths\": {\n            \"/foo\": {\n                \"get\": {\n                    \"summary\": \"Foo\",\n                    \"operationId\": \"foo_foo_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_openapi_query_parameter_extension.py": "from typing import Optional\n\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\n    \"/\",\n    openapi_extra={\n        \"parameters\": [\n            {\n                \"required\": False,\n                \"schema\": {\"title\": \"Extra Param 1\"},\n                \"name\": \"extra_param_1\",\n                \"in\": \"query\",\n            },\n            {\n                \"required\": True,\n                \"schema\": {\"title\": \"Extra Param 2\"},\n                \"name\": \"extra_param_2\",\n                \"in\": \"query\",\n            },\n        ]\n    },\n)\ndef route_with_extra_query_parameters(standard_query_param: Optional[int] = 50):\n    return {}\n\n\nclient = TestClient(app)\n\n\ndef test_get_route():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {}\n\n\ndef test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Route With Extra Query Parameters\",\n                    \"operationId\": \"route_with_extra_query_parameters__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"default\": 50,\n                                    \"title\": \"Standard Query Param\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Standard Query Param\",\n                                    \"type\": \"integer\",\n                                    \"default\": 50,\n                                }\n                            ),\n                            \"name\": \"standard_query_param\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\"title\": \"Extra Param 1\"},\n                            \"name\": \"extra_param_1\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Extra Param 2\"},\n                            \"name\": \"extra_param_2\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_modules_same_name_body/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .app.main import app\n\nclient = TestClient(app)\n\n\ndef test_post_a():\n    data = {\"a\": 2, \"b\": \"foo\"}\n    response = client.post(\"/a/compute\", json=data)\n    assert response.status_code == 200, response.text\n    data = response.json()\n\n\ndef test_post_a_invalid():\n    data = {\"a\": \"bar\", \"b\": \"foo\"}\n    response = client.post(\"/a/compute\", json=data)\n    assert response.status_code == 422, response.text\n\n\ndef test_post_b():\n    data = {\"a\": 2, \"b\": \"foo\"}\n    response = client.post(\"/b/compute/\", json=data)\n    assert response.status_code == 200, response.text\n    data = response.json()\n\n\ndef test_post_b_invalid():\n    data = {\"a\": \"bar\", \"b\": \"foo\"}\n    response = client.post(\"/b/compute/\", json=data)\n    assert response.status_code == 422, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/a/compute\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Compute\",\n                    \"operationId\": \"compute_a_compute_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_compute_a_compute_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/b/compute/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Compute\",\n                    \"operationId\": \"compute_b_compute__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_compute_b_compute__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_compute_b_compute__post\": {\n                    \"title\": \"Body_compute_b_compute__post\",\n                    \"required\": [\"a\", \"b\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"a\": {\"title\": \"A\", \"type\": \"integer\"},\n                        \"b\": {\"title\": \"B\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_compute_a_compute_post\": {\n                    \"title\": \"Body_compute_a_compute_post\",\n                    \"required\": [\"a\", \"b\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"a\": {\"title\": \"A\", \"type\": \"integer\"},\n                        \"b\": {\"title\": \"B\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_modules_same_name_body/__init__.py": "", "tests/test_modules_same_name_body/app/a.py": "from fastapi import APIRouter, Body\n\nrouter = APIRouter()\n\n\n@router.post(\"/compute\")\ndef compute(a: int = Body(), b: str = Body()):\n    return {\"a\": a, \"b\": b}\n", "tests/test_modules_same_name_body/app/b.py": "from fastapi import APIRouter, Body\n\nrouter = APIRouter()\n\n\n@router.post(\"/compute/\")\ndef compute(a: int = Body(), b: str = Body()):\n    return {\"a\": a, \"b\": b}\n", "tests/test_modules_same_name_body/app/main.py": "from fastapi import FastAPI\n\nfrom . import a, b\n\napp = FastAPI()\n\napp.include_router(a.router, prefix=\"/a\")\napp.include_router(b.router, prefix=\"/b\")\n", "tests/test_modules_same_name_body/app/__init__.py": "", "tests/test_filter_pydantic_sub_model/app_pv1.py": "from typing import Optional\n\nfrom fastapi import Depends, FastAPI\nfrom pydantic import BaseModel, validator\n\napp = FastAPI()\n\n\nclass ModelB(BaseModel):\n    username: str\n\n\nclass ModelC(ModelB):\n    password: str\n\n\nclass ModelA(BaseModel):\n    name: str\n    description: Optional[str] = None\n    model_b: ModelB\n\n    @validator(\"name\")\n    def lower_username(cls, name: str, values):\n        if not name.endswith(\"A\"):\n            raise ValueError(\"name must end in A\")\n        return name\n\n\nasync def get_model_c() -> ModelC:\n    return ModelC(username=\"test-user\", password=\"test-password\")\n\n\n@app.get(\"/model/{name}\", response_model=ModelA)\nasync def get_model_a(name: str, model_c=Depends(get_model_c)):\n    return {\"name\": name, \"description\": \"model-a-desc\", \"model_b\": model_c}\n", "tests/test_filter_pydantic_sub_model/test_filter_pydantic_sub_model_pv1.py": "import pytest\nfrom fastapi.exceptions import ResponseValidationError\nfrom fastapi.testclient import TestClient\n\nfrom ..utils import needs_pydanticv1\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from .app_pv1 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv1\ndef test_filter_sub_model(client: TestClient):\n    response = client.get(\"/model/modelA\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"modelA\",\n        \"description\": \"model-a-desc\",\n        \"model_b\": {\"username\": \"test-user\"},\n    }\n\n\n@needs_pydanticv1\ndef test_validator_is_cloned(client: TestClient):\n    with pytest.raises(ResponseValidationError) as err:\n        client.get(\"/model/modelX\")\n    assert err.value.errors() == [\n        {\n            \"loc\": (\"response\", \"name\"),\n            \"msg\": \"name must end in A\",\n            \"type\": \"value_error\",\n        }\n    ]\n\n\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/model/{name}\": {\n                \"get\": {\n                    \"summary\": \"Get Model A\",\n                    \"operationId\": \"get_model_a_model__name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"name\": \"name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/ModelA\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ModelA\": {\n                    \"title\": \"ModelA\",\n                    \"required\": [\"name\", \"model_b\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"model_b\": {\"$ref\": \"#/components/schemas/ModelB\"},\n                    },\n                },\n                \"ModelB\": {\n                    \"title\": \"ModelB\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"username\": {\"title\": \"Username\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_filter_pydantic_sub_model/__init__.py": "", "tests/test_validate_response_recursive/test_validate_response_recursive_pv1.py": "from fastapi.testclient import TestClient\n\nfrom ..utils import needs_pydanticv1\n\n\n@needs_pydanticv1\ndef test_recursive():\n    from .app_pv1 import app\n\n    client = TestClient(app)\n    response = client.get(\"/items/recursive\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}],\n        \"name\": \"item\",\n    }\n\n    response = client.get(\"/items/recursive-submodel\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }\n", "tests/test_validate_response_recursive/app_pv1.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass RecursiveItem(BaseModel):\n    sub_items: List[\"RecursiveItem\"] = []\n    name: str\n\n\nRecursiveItem.update_forward_refs()\n\n\nclass RecursiveSubitemInSubmodel(BaseModel):\n    sub_items2: List[\"RecursiveItemViaSubmodel\"] = []\n    name: str\n\n\nclass RecursiveItemViaSubmodel(BaseModel):\n    sub_items1: List[RecursiveSubitemInSubmodel] = []\n    name: str\n\n\nRecursiveSubitemInSubmodel.update_forward_refs()\n\n\n@app.get(\"/items/recursive\", response_model=RecursiveItem)\ndef get_recursive():\n    return {\"name\": \"item\", \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}]}\n\n\n@app.get(\"/items/recursive-submodel\", response_model=RecursiveItemViaSubmodel)\ndef get_recursive_submodel():\n    return {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }\n", "tests/test_validate_response_recursive/app_pv2.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass RecursiveItem(BaseModel):\n    sub_items: List[\"RecursiveItem\"] = []\n    name: str\n\n\nRecursiveItem.model_rebuild()\n\n\nclass RecursiveSubitemInSubmodel(BaseModel):\n    sub_items2: List[\"RecursiveItemViaSubmodel\"] = []\n    name: str\n\n\nclass RecursiveItemViaSubmodel(BaseModel):\n    sub_items1: List[RecursiveSubitemInSubmodel] = []\n    name: str\n\n\nRecursiveSubitemInSubmodel.model_rebuild()\nRecursiveItemViaSubmodel.model_rebuild()\n\n\n@app.get(\"/items/recursive\", response_model=RecursiveItem)\ndef get_recursive():\n    return {\"name\": \"item\", \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}]}\n\n\n@app.get(\"/items/recursive-submodel\", response_model=RecursiveItemViaSubmodel)\ndef get_recursive_submodel():\n    return {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }\n", "tests/test_validate_response_recursive/test_validate_response_recursive_pv2.py": "from fastapi.testclient import TestClient\n\nfrom ..utils import needs_pydanticv2\n\n\n@needs_pydanticv2\ndef test_recursive():\n    from .app_pv2 import app\n\n    client = TestClient(app)\n    response = client.get(\"/items/recursive\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}],\n        \"name\": \"item\",\n    }\n\n    response = client.get(\"/items/recursive-submodel\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"item\",\n        \"sub_items1\": [\n            {\n                \"name\": \"subitem\",\n                \"sub_items2\": [\n                    {\n                        \"name\": \"subsubitem\",\n                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n                    }\n                ],\n            }\n        ],\n    }\n", "tests/test_validate_response_recursive/__init__.py": "", "tests/test_tutorial/__init__.py": "", "tests/test_tutorial/test_cors/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.cors.tutorial001 import app\n\n\ndef test_cors():\n    client = TestClient(app)\n    # Test pre-flight response\n    headers = {\n        \"Origin\": \"https://localhost.tiangolo.com\",\n        \"Access-Control-Request-Method\": \"GET\",\n        \"Access-Control-Request-Headers\": \"X-Example\",\n    }\n    response = client.options(\"/\", headers=headers)\n    assert response.status_code == 200, response.text\n    assert response.text == \"OK\"\n    assert (\n        response.headers[\"access-control-allow-origin\"]\n        == \"https://localhost.tiangolo.com\"\n    )\n    assert response.headers[\"access-control-allow-headers\"] == \"X-Example\"\n\n    # Test standard response\n    headers = {\"Origin\": \"https://localhost.tiangolo.com\"}\n    response = client.get(\"/\", headers=headers)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert (\n        response.headers[\"access-control-allow-origin\"]\n        == \"https://localhost.tiangolo.com\"\n    )\n\n    # Test non-CORS response\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert \"access-control-allow-origin\" not in response.headers\n", "tests/test_tutorial/test_cors/__init__.py": "", "tests/test_tutorial/test_additional_responses/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.additional_responses.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n\n\ndef test_path_operation_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"message\": \"Item not found\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"404\": {\n                            \"description\": \"The item was not found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Item requested by ID\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    \"example\": {\n                                        \"id\": \"bar\",\n                                        \"value\": \"The bar tenders\",\n                                    },\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_additional_responses/test_tutorial004.py": "import os\nimport shutil\n\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.additional_responses.tutorial004 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n\n\ndef test_path_operation_img():\n    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n    response = client.get(\"/items/foo?img=1\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"Content-Type\"] == \"image/png\"\n    assert len(response.content)\n    os.remove(\"./image.png\")\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"404\": {\"description\": \"Item not found\"},\n                        \"302\": {\"description\": \"The item was moved\"},\n                        \"403\": {\"description\": \"Not enough privileges\"},\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"image/png\": {},\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                },\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Img\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Img\", \"type\": \"boolean\"}\n                            ),\n                            \"name\": \"img\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_additional_responses/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.additional_responses.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n\n\ndef test_path_operation_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"message\": \"Item not found\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"404\": {\n                            \"description\": \"Not Found\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n                                }\n                            },\n                        },\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"Message\": {\n                    \"title\": \"Message\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_additional_responses/test_tutorial002.py": "import os\nimport shutil\n\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.additional_responses.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n\n\ndef test_path_operation_img():\n    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n    response = client.get(\"/items/foo?img=1\")\n    assert response.status_code == 200, response.text\n    assert response.headers[\"Content-Type\"] == \"image/png\"\n    assert len(response.content)\n    os.remove(\"./image.png\")\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Return the JSON item or an image.\",\n                            \"content\": {\n                                \"image/png\": {},\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                },\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Img\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Img\", \"type\": \"boolean\"}\n                            ),\n                            \"name\": \"img\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"id\", \"value\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_additional_responses/__init__.py": "", "tests/test_tutorial/test_body_updates/test_tutorial001_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39, needs_pydanticv1, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_updates.tutorial001_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get(client: TestClient):\n    response = client.get(\"/items/baz\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Baz\",\n        \"description\": None,\n        \"price\": 50.2,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }\n\n\n@needs_py39\ndef test_put(client: TestClient):\n    response = client.put(\n        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n    )\n    assert response.json() == {\n        \"name\": \"Barz\",\n        \"description\": None,\n        \"price\": 3,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }\n\n\n@needs_py39\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"type\": \"object\",\n                    \"title\": \"Item\",\n                    \"properties\": {\n                        \"name\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Name\",\n                        },\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Price\",\n                        },\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_py39\n@needs_pydanticv1\ndef test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_updates/test_tutorial001.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv1, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_updates.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_get(client: TestClient):\n    response = client.get(\"/items/baz\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Baz\",\n        \"description\": None,\n        \"price\": 50.2,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }\n\n\ndef test_put(client: TestClient):\n    response = client.put(\n        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n    )\n    assert response.json() == {\n        \"name\": \"Barz\",\n        \"description\": None,\n        \"price\": 3,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"type\": \"object\",\n                    \"title\": \"Item\",\n                    \"properties\": {\n                        \"name\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Name\",\n                        },\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Price\",\n                        },\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_updates/__init__.py": "", "tests/test_tutorial/test_body_updates/test_tutorial001_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv1, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_updates.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_get(client: TestClient):\n    response = client.get(\"/items/baz\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Baz\",\n        \"description\": None,\n        \"price\": 50.2,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }\n\n\n@needs_py310\ndef test_put(client: TestClient):\n    response = client.put(\n        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n    )\n    assert response.json() == {\n        \"name\": \"Barz\",\n        \"description\": None,\n        \"price\": 3,\n        \"tax\": 10.5,\n        \"tags\": [],\n    }\n\n\n@needs_py310\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"type\": \"object\",\n                    \"title\": \"Item\",\n                    \"properties\": {\n                        \"name\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Name\",\n                        },\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Price\",\n                        },\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_py310\n@needs_pydanticv1\ndef test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                },\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_separate_openapi_schemas/test_tutorial001_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client() -> TestClient:\n    from docs_src.separate_openapi_schemas.tutorial001_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n\n\n@needs_py39\ndef test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]\n\n\n@needs_py39\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_separate_openapi_schemas/test_tutorial002_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client() -> TestClient:\n    from docs_src.separate_openapi_schemas.tutorial002_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n\n\n@needs_py310\ndef test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]\n\n\n@needs_py310\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_separate_openapi_schemas/test_tutorial002_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client() -> TestClient:\n    from docs_src.separate_openapi_schemas.tutorial002_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n\n\n@needs_py39\ndef test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]\n\n\n@needs_py39\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_separate_openapi_schemas/test_tutorial001.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client() -> TestClient:\n    from docs_src.separate_openapi_schemas.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n\n\ndef test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_separate_openapi_schemas/test_tutorial002.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client() -> TestClient:\n    from docs_src.separate_openapi_schemas.tutorial002 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n\n\ndef test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_separate_openapi_schemas/__init__.py": "", "tests/test_tutorial/test_separate_openapi_schemas/test_tutorial001_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client() -> TestClient:\n    from docs_src.separate_openapi_schemas.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_create_item(client: TestClient) -> None:\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n\n\n@needs_py310\ndef test_read_items(client: TestClient) -> None:\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\n            \"name\": \"Portal Gun\",\n            \"description\": \"Device to travel through the multi-rick-verse\",\n        },\n        {\"name\": \"Plumbus\", \"description\": None},\n    ]\n\n\n@needs_py310\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                        \"type\": \"array\",\n                                        \"title\": \"Response Read Items Items  Get\",\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\"],\n                    \"title\": \"Item\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_websockets/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.websockets.tutorial003 import app, html\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/\")\n    assert response.text == html\n\n\ndef test_websocket_handle_disconnection():\n    with client.websocket_connect(\"/ws/1234\") as connection, client.websocket_connect(\n        \"/ws/5678\"\n    ) as connection_two:\n        connection.send_text(\"Hello from 1234\")\n        data1 = connection.receive_text()\n        assert data1 == \"You wrote: Hello from 1234\"\n        data2 = connection_two.receive_text()\n        client1_says = \"Client #1234 says: Hello from 1234\"\n        assert data2 == client1_says\n        data1 = connection.receive_text()\n        assert data1 == client1_says\n        connection_two.close()\n        data1 = connection.receive_text()\n        assert data1 == \"Client #5678 left the chat\"\n", "tests/test_tutorial/test_websockets/test_tutorial002_py310.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocketDisconnect\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.websockets.tutorial002_py310 import app\n\n    return app\n\n\n@needs_py310\ndef test_main(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content\n\n\n@needs_py310\ndef test_websocket_with_cookie(app: FastAPI):\n    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n\n\n@needs_py310\ndef test_websocket_with_header(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n\n\n@needs_py310\ndef test_websocket_with_header_and_query(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n\n\n@needs_py310\ndef test_websocket_no_credentials(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n\n\n@needs_py310\ndef test_websocket_invalid_data(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n", "tests/test_tutorial/test_websockets/test_tutorial003_py39.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.websockets.tutorial003_py39 import app\n\n    return app\n\n\n@pytest.fixture(name=\"html\")\ndef get_html():\n    from docs_src.websockets.tutorial003_py39 import html\n\n    return html\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n\n    return client\n\n\n@needs_py39\ndef test_get(client: TestClient, html: str):\n    response = client.get(\"/\")\n    assert response.text == html\n\n\n@needs_py39\ndef test_websocket_handle_disconnection(client: TestClient):\n    with client.websocket_connect(\"/ws/1234\") as connection, client.websocket_connect(\n        \"/ws/5678\"\n    ) as connection_two:\n        connection.send_text(\"Hello from 1234\")\n        data1 = connection.receive_text()\n        assert data1 == \"You wrote: Hello from 1234\"\n        data2 = connection_two.receive_text()\n        client1_says = \"Client #1234 says: Hello from 1234\"\n        assert data2 == client1_says\n        data1 = connection.receive_text()\n        assert data1 == client1_says\n        connection_two.close()\n        data1 = connection.receive_text()\n        assert data1 == \"Client #5678 left the chat\"\n", "tests/test_tutorial/test_websockets/test_tutorial002_an_py39.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocketDisconnect\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.websockets.tutorial002_an_py39 import app\n\n    return app\n\n\n@needs_py39\ndef test_main(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content\n\n\n@needs_py39\ndef test_websocket_with_cookie(app: FastAPI):\n    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n\n\n@needs_py39\ndef test_websocket_with_header(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n\n\n@needs_py39\ndef test_websocket_with_header_and_query(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n\n\n@needs_py39\ndef test_websocket_no_credentials(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n\n\n@needs_py39\ndef test_websocket_invalid_data(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n", "tests/test_tutorial/test_websockets/test_tutorial002_an_py310.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocketDisconnect\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.websockets.tutorial002_an_py310 import app\n\n    return app\n\n\n@needs_py310\ndef test_main(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content\n\n\n@needs_py310\ndef test_websocket_with_cookie(app: FastAPI):\n    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n\n\n@needs_py310\ndef test_websocket_with_header(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n\n\n@needs_py310\ndef test_websocket_with_header_and_query(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n\n\n@needs_py310\ndef test_websocket_no_credentials(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n\n\n@needs_py310\ndef test_websocket_invalid_data(app: FastAPI):\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n", "tests/test_tutorial/test_websockets/test_tutorial002_an.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocketDisconnect\n\nfrom docs_src.websockets.tutorial002_an import app\n\n\ndef test_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content\n\n\ndef test_websocket_with_cookie():\n    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n\n\ndef test_websocket_with_header():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n\n\ndef test_websocket_with_header_and_query():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n\n\ndef test_websocket_no_credentials():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n\n\ndef test_websocket_invalid_data():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n", "tests/test_tutorial/test_websockets/test_tutorial001.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocketDisconnect\n\nfrom docs_src.websockets.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content\n\n\ndef test_websocket():\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}\"\n", "tests/test_tutorial/test_websockets/test_tutorial002.py": "import pytest\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocketDisconnect\n\nfrom docs_src.websockets.tutorial002 import app\n\n\ndef test_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<!DOCTYPE html>\" in response.content\n\n\ndef test_websocket_with_cookie():\n    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: fakesession\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: foo\"\n\n\ndef test_websocket_with_header():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: bar\"\n\n\ndef test_websocket_with_header_and_query():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n            message = \"Message one\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n            message = \"Message two\"\n            websocket.send_text(message)\n            data = websocket.receive_text()\n            assert data == \"Session cookie or query token value is: some-token\"\n            data = websocket.receive_text()\n            assert data == \"Query parameter q is: 3\"\n            data = websocket.receive_text()\n            assert data == f\"Message text was: {message}, for item ID: 2\"\n\n\ndef test_websocket_no_credentials():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n\n\ndef test_websocket_invalid_data():\n    client = TestClient(app)\n    with pytest.raises(WebSocketDisconnect):\n        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n            pytest.fail(\n                \"did not raise WebSocketDisconnect on __enter__\"\n            )  # pragma: no cover\n", "tests/test_tutorial/test_websockets/__init__.py": "", "tests/test_tutorial/test_testing/test_tutorial003.py": "import pytest\n\n\ndef test_main():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.app_testing.tutorial003 import test_read_items\n    test_read_items()\n", "tests/test_tutorial/test_testing/test_main_b_py310.py": "from ...utils import needs_py310\n\n\n@needs_py310\ndef test_app():\n    from docs_src.app_testing.app_b_py310 import test_main\n\n    test_main.test_create_existing_item()\n    test_main.test_create_item()\n    test_main.test_create_item_bad_token()\n    test_main.test_read_nonexistent_item()\n    test_main.test_read_item()\n    test_main.test_read_item_bad_token()\n", "tests/test_tutorial/test_testing/test_main_b.py": "from docs_src.app_testing.app_b import test_main\n\n\ndef test_app():\n    test_main.test_create_existing_item()\n    test_main.test_create_item()\n    test_main.test_create_item_bad_token()\n    test_main.test_read_nonexistent_item()\n    test_main.test_read_item()\n    test_main.test_read_item_bad_token()\n", "tests/test_tutorial/test_testing/test_tutorial001.py": "from docs_src.app_testing.tutorial001 import client, test_read_main\n\n\ndef test_main():\n    test_read_main()\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_testing/test_tutorial002.py": "from docs_src.app_testing.tutorial002 import test_read_main, test_websocket\n\n\ndef test_main():\n    test_read_main()\n\n\ndef test_ws():\n    test_websocket()\n", "tests/test_tutorial/test_testing/test_main.py": "from docs_src.app_testing.test_main import client, test_read_main\n\n\ndef test_main():\n    test_read_main()\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_testing/__init__.py": "", "tests/test_tutorial/test_testing/test_main_b_an.py": "from docs_src.app_testing.app_b_an import test_main\n\n\ndef test_app():\n    test_main.test_create_existing_item()\n    test_main.test_create_item()\n    test_main.test_create_item_bad_token()\n    test_main.test_read_nonexistent_item()\n    test_main.test_read_item()\n    test_main.test_read_item_bad_token()\n", "tests/test_tutorial/test_testing/test_main_b_an_py39.py": "from ...utils import needs_py39\n\n\n@needs_py39\ndef test_app():\n    from docs_src.app_testing.app_b_an_py39 import test_main\n\n    test_main.test_create_existing_item()\n    test_main.test_create_item()\n    test_main.test_create_item_bad_token()\n    test_main.test_read_nonexistent_item()\n    test_main.test_read_item()\n    test_main.test_read_item_bad_token()\n", "tests/test_tutorial/test_testing/test_main_b_an_py310.py": "from ...utils import needs_py310\n\n\n@needs_py310\ndef test_app():\n    from docs_src.app_testing.app_b_an_py310 import test_main\n\n    test_main.test_create_existing_item()\n    test_main.test_create_item()\n    test_main.test_create_item_bad_token()\n    test_main.test_read_nonexistent_item()\n    test_main.test_read_item()\n    test_main.test_read_item_bad_token()\n", "tests/test_tutorial/test_handling_errors/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.handling_errors.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/unicorns/shinny\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"unicorn_name\": \"shinny\"}\n\n\ndef test_get_exception():\n    response = client.get(\"/unicorns/yolo\")\n    assert response.status_code == 418, response.text\n    assert response.json() == {\n        \"message\": \"Oops! yolo did something. There goes a rainbow...\"\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/unicorns/{name}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Unicorn\",\n                    \"operationId\": \"read_unicorn_unicorns__name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n                            \"name\": \"name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_handling_errors/test_tutorial004.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.handling_errors.tutorial004 import app\n\nclient = TestClient(app)\n\n\ndef test_get_validation_error():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 400, response.text\n    # TODO: remove when deprecating Pydantic v1\n    assert (\n        # TODO: remove when deprecating Pydantic v1\n        \"path -> item_id\" in response.text\n        or \"'loc': ('path', 'item_id')\" in response.text\n    )\n    assert (\n        # TODO: remove when deprecating Pydantic v1\n        \"value is not a valid integer\" in response.text\n        or \"Input should be a valid integer, unable to parse string as an integer\"\n        in response.text\n    )\n\n\ndef test_get_http_error():\n    response = client.get(\"/items/3\")\n    assert response.status_code == 418, response.text\n    assert response.content == b\"Nope! I don't like 3.\"\n\n\ndef test_get():\n    response = client.get(\"/items/2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": 2}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_handling_errors/test_tutorial005.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.handling_errors.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_post_validation_error():\n    response = client.post(\"/items/\", json={\"title\": \"towel\", \"size\": \"XL\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"body\", \"size\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"XL\",\n                }\n            ],\n            \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"size\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ],\n            \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n        }\n    )\n\n\ndef test_post():\n    data = {\"title\": \"towel\", \"size\": 5}\n    response = client.post(\"/items/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"size\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_handling_errors/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.handling_errors.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_get_item():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n\n\ndef test_get_item_not_found():\n    response = client.get(\"/items/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") is None\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_handling_errors/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.handling_errors.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_get_item_header():\n    response = client.get(\"/items-header/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n\n\ndef test_get_item_not_found_header():\n    response = client.get(\"/items-header/bar\")\n    assert response.status_code == 404, response.text\n    assert response.headers.get(\"x-error\") == \"There goes my error\"\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items-header/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Header\",\n                    \"operationId\": \"read_item_header_items_header__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_handling_errors/__init__.py": "", "tests/test_tutorial/test_handling_errors/test_tutorial006.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.handling_errors.tutorial006 import app\n\nclient = TestClient(app)\n\n\ndef test_get_validation_error():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_get_http_error():\n    response = client.get(\"/items/3\")\n    assert response.status_code == 418, response.text\n    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n\n\ndef test_get():\n    response = client.get(\"/items/2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": 2}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial011_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial011_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py39\ndef test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial010.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial010 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_query_params_str_validations_no_query(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\ndef test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n        \"q\": \"fixedquery\",\n    }\n\n\ndef test_query_params_str_validations_q_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\ndef test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"description\": \"Query string for the items to search in the database that have a good match\",\n                            \"required\": False,\n                            \"deprecated\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"minLength\": 3,\n                                            \"maxLength\": 50,\n                                            \"pattern\": \"^fixedquery$\",\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Query string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Query string\",\n                                    \"maxLength\": 50,\n                                    \"minLength\": 3,\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"type\": \"string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            ),\n                            \"name\": \"item-query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial010_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial010_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_query_params_str_validations_no_query(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\ndef test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n        \"q\": \"fixedquery\",\n    }\n\n\ndef test_query_params_str_validations_q_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\ndef test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"description\": \"Query string for the items to search in the database that have a good match\",\n                            \"required\": False,\n                            \"deprecated\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"minLength\": 3,\n                                            \"maxLength\": 50,\n                                            \"pattern\": \"^fixedquery$\",\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Query string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Query string\",\n                                    \"maxLength\": 50,\n                                    \"minLength\": 3,\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"type\": \"string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            ),\n                            \"name\": \"item-query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial010_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial010_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_query_params_str_validations_no_query(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\n@needs_py310\ndef test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n        \"q\": \"fixedquery\",\n    }\n\n\n@needs_py310\ndef test_query_params_str_validations_q_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\n@needs_py310\ndef test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"description\": \"Query string for the items to search in the database that have a good match\",\n                            \"required\": False,\n                            \"deprecated\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"minLength\": 3,\n                                            \"maxLength\": 50,\n                                            \"pattern\": \"^fixedquery$\",\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Query string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Query string\",\n                                    \"maxLength\": 50,\n                                    \"minLength\": 3,\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"type\": \"string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            ),\n                            \"name\": \"item-query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial014_an_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial014_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_hidden_query(client: TestClient):\n    response = client.get(\"/items?hidden_query=somevalue\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"somevalue\"}\n\n\n@needs_py310\ndef test_no_hidden_query(client: TestClient):\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial011_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial011_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py310\ndef test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial014.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial014 import app\n\nclient = TestClient(app)\n\n\ndef test_hidden_query():\n    response = client.get(\"/items?hidden_query=somevalue\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"somevalue\"}\n\n\ndef test_no_hidden_query():\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial012_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial012_an import app\n\nclient = TestClient(app)\n\n\ndef test_default_query_values():\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\ndef test_multi_query_values():\n    url = \"/items/?q=baz&q=foobar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                                \"default\": [\"foo\", \"bar\"],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial011_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial011_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py310\ndef test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial014_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial014_an import app\n\nclient = TestClient(app)\n\n\ndef test_hidden_query():\n    response = client.get(\"/items?hidden_query=somevalue\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"somevalue\"}\n\n\ndef test_no_hidden_query():\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial013_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial013_an import app\n\nclient = TestClient(app)\n\n\ndef test_multi_query_values():\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\ndef test_query_no_values():\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": []}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {},\n                                \"default\": [],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial012.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial012 import app\n\nclient = TestClient(app)\n\n\ndef test_default_query_values():\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\ndef test_multi_query_values():\n    url = \"/items/?q=baz&q=foobar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                                \"default\": [\"foo\", \"bar\"],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial014_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial014_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_hidden_query(client: TestClient):\n    response = client.get(\"/items?hidden_query=somevalue\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"somevalue\"}\n\n\n@needs_py310\ndef test_no_hidden_query(client: TestClient):\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial012_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial012_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_default_query_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py39\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=baz&q=foobar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                                \"default\": [\"foo\", \"bar\"],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial012_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial012_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_default_query_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py39\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=baz&q=foobar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                                \"default\": [\"foo\", \"bar\"],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial013_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial013_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py39\ndef test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": []}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {},\n                                \"default\": [],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial014_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial014_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_hidden_query(client: TestClient):\n    response = client.get(\"/items?hidden_query=somevalue\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"somevalue\"}\n\n\n@needs_py310\ndef test_no_hidden_query(client: TestClient):\n    response = client.get(\"/items\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/__init__.py": "", "tests/test_tutorial/test_query_params_str_validations/test_tutorial011_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial011_an import app\n\nclient = TestClient(app)\n\n\ndef test_multi_query_values():\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\ndef test_query_no_values():\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial011_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial011_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_multi_query_values(client: TestClient):\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\n@needs_py39\ndef test_query_no_values(client: TestClient):\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial011.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial011 import app\n\nclient = TestClient(app)\n\n\ndef test_multi_query_values():\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\ndef test_query_no_values():\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": None}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Q\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial013.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.query_params_str_validations.tutorial013 import app\n\nclient = TestClient(app)\n\n\ndef test_multi_query_values():\n    url = \"/items/?q=foo&q=bar\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\ndef test_query_no_values():\n    url = \"/items/\"\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"q\": []}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Q\",\n                                \"type\": \"array\",\n                                \"items\": {},\n                                \"default\": [],\n                            },\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial010_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial010_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_query_params_str_validations_no_query(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\n@needs_py310\ndef test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n        \"q\": \"fixedquery\",\n    }\n\n\n@needs_py310\ndef test_query_params_str_validations_q_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\n@needs_py310\ndef test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"description\": \"Query string for the items to search in the database that have a good match\",\n                            \"required\": False,\n                            \"deprecated\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"minLength\": 3,\n                                            \"maxLength\": 50,\n                                            \"pattern\": \"^fixedquery$\",\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Query string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Query string\",\n                                    \"maxLength\": 50,\n                                    \"minLength\": 3,\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"type\": \"string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            ),\n                            \"name\": \"item-query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params_str_validations/test_tutorial010_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params_str_validations.tutorial010_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_query_params_str_validations_no_query(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\n@needs_py39\ndef test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n        \"q\": \"fixedquery\",\n    }\n\n\n@needs_py39\ndef test_query_params_str_validations_q_fixedquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n    assert response.status_code == 200\n    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n\n\n@needs_py39\ndef test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"string_pattern_mismatch\",\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": \"String should match pattern '^fixedquery$'\",\n                    \"input\": \"nonregexquery\",\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n                    \"loc\": [\"query\", \"item-query\"],\n                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n                    \"type\": \"value_error.str.regex\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"description\": \"Query string for the items to search in the database that have a good match\",\n                            \"required\": False,\n                            \"deprecated\": True,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"minLength\": 3,\n                                            \"maxLength\": 50,\n                                            \"pattern\": \"^fixedquery$\",\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Query string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Query string\",\n                                    \"maxLength\": 50,\n                                    \"minLength\": 3,\n                                    \"pattern\": \"^fixedquery$\",\n                                    \"type\": \"string\",\n                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n                                }\n                            ),\n                            \"name\": \"item-query\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_additional_status_codes/test_tutorial001_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.additional_status_codes.tutorial001_an import app\n\nclient = TestClient(app)\n\n\ndef test_update():\n    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n\n\ndef test_create():\n    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n", "tests/test_tutorial/test_additional_status_codes/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.additional_status_codes.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_update():\n    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n\n\ndef test_create():\n    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n", "tests/test_tutorial/test_additional_status_codes/__init__.py": "", "tests/test_tutorial/test_additional_status_codes/test_tutorial001_an_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.additional_status_codes.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_update(client: TestClient):\n    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n\n\n@needs_py310\ndef test_create(client: TestClient):\n    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n", "tests/test_tutorial/test_additional_status_codes/test_tutorial001_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.additional_status_codes.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_update(client: TestClient):\n    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n\n\n@needs_py39\ndef test_create(client: TestClient):\n    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n", "tests/test_tutorial/test_additional_status_codes/test_tutorial001_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.additional_status_codes.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_update(client: TestClient):\n    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n\n\n@needs_py310\ndef test_create(client: TestClient):\n    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n    assert response.status_code == 201, response.text\n    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n", "tests/test_tutorial/test_sub_applications/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.sub_applications.tutorial001 import app\n\nclient = TestClient(app)\n\nopenapi_schema_main = {\n    \"openapi\": \"3.1.0\",\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"paths\": {\n        \"/app\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    }\n                },\n                \"summary\": \"Read Main\",\n                \"operationId\": \"read_main_app_get\",\n            }\n        }\n    },\n}\nopenapi_schema_sub = {\n    \"openapi\": \"3.1.0\",\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"paths\": {\n        \"/sub\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    }\n                },\n                \"summary\": \"Read Sub\",\n                \"operationId\": \"read_sub_sub_get\",\n            }\n        }\n    },\n    \"servers\": [{\"url\": \"/subapi\"}],\n}\n\n\ndef test_openapi_schema_main():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == openapi_schema_main\n\n\ndef test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World from main app\"}\n\n\ndef test_openapi_schema_sub():\n    response = client.get(\"/subapi/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == openapi_schema_sub\n\n\ndef test_sub():\n    response = client.get(\"/subapi/sub\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World from sub API\"}\n", "tests/test_tutorial/test_sub_applications/__init__.py": "", "tests/test_tutorial/test_behind_a_proxy/test_tutorial003.py": "from dirty_equals import IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.behind_a_proxy.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"servers\": [\n            {\"url\": \"/api/v1\"},\n            {\n                \"url\": IsOneOf(\n                    \"https://stag.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://stag.example.com\",\n                ),\n                \"description\": \"Staging environment\",\n            },\n            {\n                \"url\": IsOneOf(\n                    \"https://prod.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://prod.example.com\",\n                ),\n                \"description\": \"Production environment\",\n            },\n        ],\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_behind_a_proxy/test_tutorial004.py": "from dirty_equals import IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.behind_a_proxy.tutorial004 import app\n\nclient = TestClient(app)\n\n\ndef test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"servers\": [\n            {\n                \"url\": IsOneOf(\n                    \"https://stag.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://stag.example.com\",\n                ),\n                \"description\": \"Staging environment\",\n            },\n            {\n                \"url\": IsOneOf(\n                    \"https://prod.example.com/\",\n                    # TODO: remove when deprecating Pydantic v1\n                    \"https://prod.example.com\",\n                ),\n                \"description\": \"Production environment\",\n            },\n        ],\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_behind_a_proxy/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.behind_a_proxy.tutorial001 import app\n\nclient = TestClient(app, root_path=\"/api/v1\")\n\n\ndef test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n\ndef test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"servers\": [{\"url\": \"/api/v1\"}],\n    }\n", "tests/test_tutorial/test_behind_a_proxy/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.behind_a_proxy.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_main():\n    response = client.get(\"/app\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n\ndef test_openapi():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/app\": {\n                \"get\": {\n                    \"summary\": \"Read Main\",\n                    \"operationId\": \"read_main_app_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"servers\": [{\"url\": \"/api/v1\"}],\n    }\n", "tests/test_tutorial/test_behind_a_proxy/__init__.py": "", "tests/test_tutorial/test_body_multiple_params/test_tutorial003.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial003 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_valid(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"importance\": 2,\n            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n            \"user\": {\"username\": \"Dave\"},\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"importance\": 2,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n    }\n\n\ndef test_post_body_no_data(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_body_empty_list(client: TestClient):\n    response = client.put(\"/items/5\", json=[])\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\", \"user\", \"importance\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial001_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_q_bar_content(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"q\": \"bar\",\n    }\n\n\ndef test_post_no_body_q_bar(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n\n\ndef test_post_no_body(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5}\n\n\ndef test_post_id_foo(client: TestClient):\n    response = client.put(\"/items/foo\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"The ID of the item to get\",\n                                \"maximum\": 1000.0,\n                                \"minimum\": 0.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Item\"}\n                                )\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial003_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial003_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_valid(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"importance\": 2,\n            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n            \"user\": {\"username\": \"Dave\"},\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"importance\": 2,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n    }\n\n\ndef test_post_body_no_data(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_body_empty_list(client: TestClient):\n    response = client.put(\"/items/5\", json=[])\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\", \"user\", \"importance\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial003_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial003_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_body_valid(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"importance\": 2,\n            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n            \"user\": {\"username\": \"Dave\"},\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"importance\": 2,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n    }\n\n\n@needs_py310\ndef test_post_body_no_data(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_body_empty_list(client: TestClient):\n    response = client.put(\"/items/5\", json=[])\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\", \"user\", \"importance\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial003_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial003_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_body_valid(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"importance\": 2,\n            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n            \"user\": {\"username\": \"Dave\"},\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"importance\": 2,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n    }\n\n\n@needs_py310\ndef test_post_body_no_data(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_body_empty_list(client: TestClient):\n    response = client.put(\"/items/5\", json=[])\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\", \"user\", \"importance\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_q_bar_content(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"q\": \"bar\",\n    }\n\n\ndef test_post_no_body_q_bar(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n\n\ndef test_post_no_body(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5}\n\n\ndef test_post_id_foo(client: TestClient):\n    response = client.put(\"/items/foo\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"The ID of the item to get\",\n                                \"maximum\": 1000.0,\n                                \"minimum\": 0.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Item\"}\n                                )\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/__init__.py": "", "tests/test_tutorial/test_body_multiple_params/test_tutorial001_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_body_q_bar_content(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"q\": \"bar\",\n    }\n\n\n@needs_py310\ndef test_post_no_body_q_bar(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n\n\n@needs_py310\ndef test_post_no_body(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5}\n\n\n@needs_py310\ndef test_post_id_foo(client: TestClient):\n    response = client.put(\"/items/foo\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"The ID of the item to get\",\n                                \"maximum\": 1000.0,\n                                \"minimum\": 0.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Item\"}\n                                )\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_body_q_bar_content(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"q\": \"bar\",\n    }\n\n\n@needs_py39\ndef test_post_no_body_q_bar(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n\n\n@needs_py39\ndef test_post_no_body(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5}\n\n\n@needs_py39\ndef test_post_id_foo(client: TestClient):\n    response = client.put(\"/items/foo\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"The ID of the item to get\",\n                                \"maximum\": 1000.0,\n                                \"minimum\": 0.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Item\"}\n                                )\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial003_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial003_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_body_valid(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"importance\": 2,\n            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n            \"user\": {\"username\": \"Dave\"},\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"importance\": 2,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n    }\n\n\n@needs_py39\ndef test_post_body_no_data(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_empty_list(client: TestClient):\n    response = client.put(\"/items/5\", json=[])\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"item\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"user\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"importance\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\", \"user\", \"importance\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_multiple_params/test_tutorial001_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_multiple_params.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_body_q_bar_content(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\n            \"name\": \"Foo\",\n            \"price\": 50.5,\n            \"description\": None,\n            \"tax\": None,\n        },\n        \"q\": \"bar\",\n    }\n\n\n@needs_py310\ndef test_post_no_body_q_bar(client: TestClient):\n    response = client.put(\"/items/5?q=bar\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n\n\n@needs_py310\ndef test_post_no_body(client: TestClient):\n    response = client.put(\"/items/5\", json=None)\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": 5}\n\n\n@needs_py310\ndef test_post_id_foo(client: TestClient):\n    response = client.put(\"/items/foo\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"path\", \"item_id\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"The ID of the item to get\",\n                                \"maximum\": 1000.0,\n                                \"minimum\": 0.0,\n                                \"type\": \"integer\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"},\n                                            {\"type\": \"null\"},\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\"$ref\": \"#/components/schemas/Item\"}\n                                )\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_configurations/test_tutorial005_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39, needs_pydanticv1, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.path_operation_configuration.tutorial005_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_query_params_str_validations(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 42,\n        \"description\": None,\n        \"tax\": None,\n        \"tags\": [],\n    }\n\n\n@needs_py39\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                        },\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\n                            \"title\": \"Tax\",\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                        },\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_py39\n@needs_pydanticv1\ndef test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_configurations/test_tutorial005.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_configuration.tutorial005 import app\n\nfrom ...utils import needs_pydanticv1, needs_pydanticv2\n\nclient = TestClient(app)\n\n\ndef test_query_params_str_validations():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 42,\n        \"description\": None,\n        \"tax\": None,\n        \"tags\": [],\n    }\n\n\n@needs_pydanticv2\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                        },\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\n                            \"title\": \"Tax\",\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                        },\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_openapi_schema_pv1():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_configurations/test_tutorial002b.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_configuration.tutorial002b import app\n\nclient = TestClient(app)\n\n\ndef test_get_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"Portal gun\", \"Plumbus\"]\n\n\ndef test_get_users():\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"Rick\", \"Morty\"]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_path_operation_configurations/__init__.py": "", "tests/test_tutorial/test_path_operation_configurations/test_tutorial006.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_configuration.tutorial006 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/items/\", 200, [{\"name\": \"Foo\", \"price\": 42}]),\n        (\"/users/\", 200, [{\"username\": \"johndoe\"}]),\n        (\"/elements/\", 200, [{\"item_id\": \"Foo\"}]),\n    ],\n)\ndef test_query_params_str_validations(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                }\n            },\n            \"/elements/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Elements\",\n                    \"operationId\": \"read_elements_elements__get\",\n                    \"deprecated\": True,\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_path_operation_configurations/test_tutorial005_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv1, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.path_operation_configuration.tutorial005_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_query_params_str_validations(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 42,\n        \"description\": None,\n        \"tax\": None,\n        \"tags\": [],\n    }\n\n\n@needs_py310\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                        },\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\n                            \"title\": \"Tax\",\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                        },\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_py310\n@needs_pydanticv1\ndef test_openapi_schema_pv1(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"The created item\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_forms_and_files/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_forms_and_files.tutorial001_an import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_form_no_file(client: TestClient):\n    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_file_no_token(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_files_and_token(tmp_path, app: FastAPI):\n    patha = tmp_path / \"test.txt\"\n    pathb = tmp_path / \"testb.txt\"\n    patha.write_text(\"<file content>\")\n    pathb.write_text(\"<file b content>\")\n\n    client = TestClient(app)\n    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n        response = client.post(\n            \"/files/\",\n            data={\"token\": \"foo\"},\n            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"file_size\": 14,\n        \"token\": \"foo\",\n        \"fileb_content_type\": \"text/plain\",\n    }\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\", \"fileb\", \"token\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n                        \"fileb\": {\n                            \"title\": \"Fileb\",\n                            \"type\": \"string\",\n                            \"format\": \"binary\",\n                        },\n                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_forms_and_files/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_forms_and_files.tutorial001 import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_form_no_file(client: TestClient):\n    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_file_no_token(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_files_and_token(tmp_path, app: FastAPI):\n    patha = tmp_path / \"test.txt\"\n    pathb = tmp_path / \"testb.txt\"\n    patha.write_text(\"<file content>\")\n    pathb.write_text(\"<file b content>\")\n\n    client = TestClient(app)\n    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n        response = client.post(\n            \"/files/\",\n            data={\"token\": \"foo\"},\n            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"file_size\": 14,\n        \"token\": \"foo\",\n        \"fileb_content_type\": \"text/plain\",\n    }\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\", \"fileb\", \"token\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n                        \"fileb\": {\n                            \"title\": \"Fileb\",\n                            \"type\": \"string\",\n                            \"format\": \"binary\",\n                        },\n                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_forms_and_files/__init__.py": "", "tests/test_tutorial/test_request_forms_and_files/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_forms_and_files.tutorial001_an_py39 import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_form_no_file(client: TestClient):\n    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_file_no_token(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"fileb\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_files_and_token(tmp_path, app: FastAPI):\n    patha = tmp_path / \"test.txt\"\n    pathb = tmp_path / \"testb.txt\"\n    patha.write_text(\"<file content>\")\n    pathb.write_text(\"<file b content>\")\n\n    client = TestClient(app)\n    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n        response = client.post(\n            \"/files/\",\n            data={\"token\": \"foo\"},\n            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"file_size\": 14,\n        \"token\": \"foo\",\n        \"fileb_content_type\": \"text/plain\",\n    }\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\", \"fileb\", \"token\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n                        \"fileb\": {\n                            \"title\": \"Fileb\",\n                            \"type\": \"string\",\n                            \"format\": \"binary\",\n                        },\n                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_cookies/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_cookies.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.post(\"/cookie/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n    assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"\n", "tests/test_tutorial/test_response_cookies/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_cookies.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.post(\"/cookie-and-object/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n    assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"\n", "tests/test_tutorial/test_response_cookies/__init__.py": "", "tests/test_tutorial/test_custom_docs_ui/test_tutorial001.py": "import os\nfrom pathlib import Path\n\nimport pytest\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(scope=\"module\")\ndef client():\n    static_dir: Path = Path(os.getcwd()) / \"static\"\n    print(static_dir)\n    static_dir.mkdir(exist_ok=True)\n    from docs_src.custom_docs_ui.tutorial001 import app\n\n    with TestClient(app) as client:\n        yield client\n    static_dir.rmdir()\n\n\ndef test_swagger_ui_html(client: TestClient):\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\" in response.text\n    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\" in response.text\n\n\ndef test_swagger_ui_oauth2_redirect_html(client: TestClient):\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 200, response.text\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n\n\ndef test_redoc_html(client: TestClient):\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    assert \"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\" in response.text\n\n\ndef test_api(client: TestClient):\n    response = client.get(\"/users/john\")\n    assert response.status_code == 200, response.text\n    assert response.json()[\"message\"] == \"Hello john\"\n", "tests/test_tutorial/test_custom_docs_ui/test_tutorial002.py": "import os\nfrom pathlib import Path\n\nimport pytest\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(scope=\"module\")\ndef client():\n    static_dir: Path = Path(os.getcwd()) / \"static\"\n    print(static_dir)\n    static_dir.mkdir(exist_ok=True)\n    from docs_src.custom_docs_ui.tutorial002 import app\n\n    with TestClient(app) as client:\n        yield client\n    static_dir.rmdir()\n\n\ndef test_swagger_ui_html(client: TestClient):\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert \"/static/swagger-ui-bundle.js\" in response.text\n    assert \"/static/swagger-ui.css\" in response.text\n\n\ndef test_swagger_ui_oauth2_redirect_html(client: TestClient):\n    response = client.get(\"/docs/oauth2-redirect\")\n    assert response.status_code == 200, response.text\n    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n\n\ndef test_redoc_html(client: TestClient):\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    assert \"/static/redoc.standalone.js\" in response.text\n\n\ndef test_api(client: TestClient):\n    response = client.get(\"/users/john\")\n    assert response.status_code == 200, response.text\n    assert response.json()[\"message\"] == \"Hello john\"\n", "tests/test_tutorial/test_custom_docs_ui/__init__.py": "", "tests/test_tutorial/test_response_headers/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_headers.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/headers/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n    assert response.headers[\"Content-Language\"] == \"en-US\"\n", "tests/test_tutorial/test_response_headers/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_headers.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.get(\"/headers-and-object/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n    assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n", "tests/test_tutorial/test_response_headers/__init__.py": "", "tests/test_tutorial/test_testing_dependencies/test_tutorial001_an.py": "from docs_src.dependency_testing.tutorial001_an import (\n    app,\n    client,\n    test_override_in_items,\n    test_override_in_items_with_params,\n    test_override_in_items_with_q,\n)\n\n\ndef test_override_in_items_run():\n    test_override_in_items()\n\n\ndef test_override_in_items_with_q_run():\n    test_override_in_items_with_q()\n\n\ndef test_override_in_items_with_params_run():\n    test_override_in_items_with_params()\n\n\ndef test_override_in_users():\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_users_with_q():\n    response = client.get(\"/users/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_users_with_params():\n    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_normal_app():\n    app.dependency_overrides = None\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n", "tests/test_tutorial/test_testing_dependencies/test_tutorial001.py": "from docs_src.dependency_testing.tutorial001 import (\n    app,\n    client,\n    test_override_in_items,\n    test_override_in_items_with_params,\n    test_override_in_items_with_q,\n)\n\n\ndef test_override_in_items_run():\n    test_override_in_items()\n\n\ndef test_override_in_items_with_q_run():\n    test_override_in_items_with_q()\n\n\ndef test_override_in_items_with_params_run():\n    test_override_in_items_with_params()\n\n\ndef test_override_in_users():\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_users_with_q():\n    response = client.get(\"/users/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_users_with_params():\n    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_normal_app():\n    app.dependency_overrides = None\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n", "tests/test_tutorial/test_testing_dependencies/__init__.py": "", "tests/test_tutorial/test_testing_dependencies/test_tutorial001_an_py310.py": "from ...utils import needs_py310\n\n\n@needs_py310\ndef test_override_in_items_run():\n    from docs_src.dependency_testing.tutorial001_an_py310 import test_override_in_items\n\n    test_override_in_items()\n\n\n@needs_py310\ndef test_override_in_items_with_q_run():\n    from docs_src.dependency_testing.tutorial001_an_py310 import (\n        test_override_in_items_with_q,\n    )\n\n    test_override_in_items_with_q()\n\n\n@needs_py310\ndef test_override_in_items_with_params_run():\n    from docs_src.dependency_testing.tutorial001_an_py310 import (\n        test_override_in_items_with_params,\n    )\n\n    test_override_in_items_with_params()\n\n\n@needs_py310\ndef test_override_in_users():\n    from docs_src.dependency_testing.tutorial001_an_py310 import client\n\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py310\ndef test_override_in_users_with_q():\n    from docs_src.dependency_testing.tutorial001_an_py310 import client\n\n    response = client.get(\"/users/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py310\ndef test_override_in_users_with_params():\n    from docs_src.dependency_testing.tutorial001_an_py310 import client\n\n    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py310\ndef test_normal_app():\n    from docs_src.dependency_testing.tutorial001_an_py310 import app, client\n\n    app.dependency_overrides = None\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n", "tests/test_tutorial/test_testing_dependencies/test_tutorial001_an_py39.py": "from ...utils import needs_py39\n\n\n@needs_py39\ndef test_override_in_items_run():\n    from docs_src.dependency_testing.tutorial001_an_py39 import test_override_in_items\n\n    test_override_in_items()\n\n\n@needs_py39\ndef test_override_in_items_with_q_run():\n    from docs_src.dependency_testing.tutorial001_an_py39 import (\n        test_override_in_items_with_q,\n    )\n\n    test_override_in_items_with_q()\n\n\n@needs_py39\ndef test_override_in_items_with_params_run():\n    from docs_src.dependency_testing.tutorial001_an_py39 import (\n        test_override_in_items_with_params,\n    )\n\n    test_override_in_items_with_params()\n\n\n@needs_py39\ndef test_override_in_users():\n    from docs_src.dependency_testing.tutorial001_an_py39 import client\n\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py39\ndef test_override_in_users_with_q():\n    from docs_src.dependency_testing.tutorial001_an_py39 import client\n\n    response = client.get(\"/users/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py39\ndef test_override_in_users_with_params():\n    from docs_src.dependency_testing.tutorial001_an_py39 import client\n\n    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py39\ndef test_normal_app():\n    from docs_src.dependency_testing.tutorial001_an_py39 import app, client\n\n    app.dependency_overrides = None\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n", "tests/test_tutorial/test_testing_dependencies/test_tutorial001_py310.py": "from ...utils import needs_py310\n\n\n@needs_py310\ndef test_override_in_items_run():\n    from docs_src.dependency_testing.tutorial001_py310 import test_override_in_items\n\n    test_override_in_items()\n\n\n@needs_py310\ndef test_override_in_items_with_q_run():\n    from docs_src.dependency_testing.tutorial001_py310 import (\n        test_override_in_items_with_q,\n    )\n\n    test_override_in_items_with_q()\n\n\n@needs_py310\ndef test_override_in_items_with_params_run():\n    from docs_src.dependency_testing.tutorial001_py310 import (\n        test_override_in_items_with_params,\n    )\n\n    test_override_in_items_with_params()\n\n\n@needs_py310\ndef test_override_in_users():\n    from docs_src.dependency_testing.tutorial001_py310 import client\n\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py310\ndef test_override_in_users_with_q():\n    from docs_src.dependency_testing.tutorial001_py310 import client\n\n    response = client.get(\"/users/?q=foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py310\ndef test_override_in_users_with_params():\n    from docs_src.dependency_testing.tutorial001_py310 import client\n\n    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Users!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\n@needs_py310\ndef test_normal_app():\n    from docs_src.dependency_testing.tutorial001_py310 import app, client\n\n    app.dependency_overrides = None\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n    }\n", "tests/test_tutorial/test_async_tests/test_main.py": "import pytest\n\nfrom docs_src.async_tests.test_main import test_root\n\n\n@pytest.mark.anyio\nasync def test_async_testing():\n    await test_root()\n", "tests/test_tutorial/test_async_tests/__init__.py": "", "tests/test_tutorial/test_wsgi/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.wsgi.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_flask():\n    response = client.get(\"/v1/\")\n    assert response.status_code == 200, response.text\n    assert response.text == \"Hello, World from Flask!\"\n\n\ndef test_app():\n    response = client.get(\"/v2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello World\"}\n", "tests/test_tutorial/test_wsgi/__init__.py": "", "tests/test_tutorial/test_first_steps/test_tutorial001.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.first_steps.tutorial001 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/\", 200, {\"message\": \"Hello World\"}),\n        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n    ],\n)\ndef test_get_path(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_first_steps/__init__.py": "", "tests/test_tutorial/test_openapi_webhooks/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.openapi_webhooks.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\"Rick\", \"Morty\"]\n\n\ndef test_dummy_webhook():\n    # Just for coverage\n    app.webhooks.routes[0].endpoint({})\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n        \"webhooks\": {\n            \"new-subscription\": {\n                \"post\": {\n                    \"summary\": \"New Subscription\",\n                    \"description\": \"When a new user subscribes to your service we'll send you a POST request with this\\ndata to the URL that you register for the event `new-subscription` in the dashboard.\",\n                    \"operationId\": \"new_subscriptionnew_subscription_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Subscription\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Subscription\": {\n                    \"properties\": {\n                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n                        \"monthly_fee\": {\"type\": \"number\", \"title\": \"Monthly Fee\"},\n                        \"start_date\": {\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                            \"title\": \"Start Date\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"username\", \"monthly_fee\", \"start_date\"],\n                    \"title\": \"Subscription\",\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_openapi_webhooks/__init__.py": "", "tests/test_tutorial/test_templates/test_tutorial001.py": "import os\nimport shutil\n\nfrom fastapi.testclient import TestClient\n\n\ndef test_main():\n    if os.path.isdir(\"./static\"):  # pragma: nocover\n        shutil.rmtree(\"./static\")\n    if os.path.isdir(\"./templates\"):  # pragma: nocover\n        shutil.rmtree(\"./templates\")\n    shutil.copytree(\"./docs_src/templates/templates/\", \"./templates\")\n    shutil.copytree(\"./docs_src/templates/static/\", \"./static\")\n    from docs_src.templates.tutorial001 import app\n\n    client = TestClient(app)\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200, response.text\n    assert (\n        b'<h1><a href=\"http://testserver/items/foo\">Item ID: foo</a></h1>'\n        in response.content\n    )\n    response = client.get(\"/static/styles.css\")\n    assert response.status_code == 200, response.text\n    assert b\"color: green;\" in response.content\n    shutil.rmtree(\"./templates\")\n    shutil.rmtree(\"./static\")\n", "tests/test_tutorial/test_templates/__init__.py": "", "tests/test_tutorial/test_query_params/test_tutorial005.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.query_params.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_foo_needy_very():\n    response = client.get(\"/items/foo?needy=very\")\n    assert response.status_code == 200\n    assert response.json() == {\"item_id\": \"foo\", \"needy\": \"very\"}\n\n\ndef test_foo_no_needy():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User Item\",\n                    \"operationId\": \"read_user_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n                            \"name\": \"needy\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params/test_tutorial006_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params.tutorial006_py310 import app\n\n    c = TestClient(app)\n    return c\n\n\n@needs_py310\ndef test_foo_needy_very(client: TestClient):\n    response = client.get(\"/items/foo?needy=very\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": \"foo\",\n        \"needy\": \"very\",\n        \"skip\": 0,\n        \"limit\": None,\n    }\n\n\n@needs_py310\ndef test_foo_no_needy(client: TestClient):\n    response = client.get(\"/items/foo?skip=a&limit=b\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"a\",\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"b\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n                {\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User Item\",\n                    \"operationId\": \"read_user_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n                            \"name\": \"needy\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Limit\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Limit\", \"type\": \"integer\"}\n                            ),\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_query_params/__init__.py": "", "tests/test_tutorial/test_query_params/test_tutorial006.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.query_params.tutorial006 import app\n\n    c = TestClient(app)\n    return c\n\n\ndef test_foo_needy_very(client: TestClient):\n    response = client.get(\"/items/foo?needy=very\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": \"foo\",\n        \"needy\": \"very\",\n        \"skip\": 0,\n        \"limit\": None,\n    }\n\n\ndef test_foo_no_needy(client: TestClient):\n    response = client.get(\"/items/foo?skip=a&limit=b\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"a\",\n                },\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"b\",\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"needy\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"query\", \"skip\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n                {\n                    \"loc\": [\"query\", \"limit\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User Item\",\n                    \"operationId\": \"read_user_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n                            \"name\": \"needy\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Limit\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Limit\", \"type\": \"integer\"}\n                            ),\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_settings/test_app02.py": "from pytest import MonkeyPatch\n\nfrom ...utils import needs_pydanticv2\n\n\n@needs_pydanticv2\ndef test_settings(monkeypatch: MonkeyPatch):\n    from docs_src.settings.app02 import main\n\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n    settings = main.get_settings()\n    assert settings.app_name == \"Awesome API\"\n    assert settings.items_per_user == 50\n\n\n@needs_pydanticv2\ndef test_override_settings():\n    from docs_src.settings.app02 import test_main\n\n    test_main.test_app()\n", "tests/test_tutorial/test_settings/test_tutorial001_pv1.py": "from fastapi.testclient import TestClient\nfrom pytest import MonkeyPatch\n\nfrom ...utils import needs_pydanticv1\n\n\n@needs_pydanticv1\ndef test_settings(monkeypatch: MonkeyPatch):\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n    from docs_src.settings.tutorial001_pv1 import app\n\n    client = TestClient(app)\n    response = client.get(\"/info\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"admin@example.com\",\n        \"items_per_user\": 50,\n    }\n", "tests/test_tutorial/test_settings/test_tutorial001.py": "from fastapi.testclient import TestClient\nfrom pytest import MonkeyPatch\n\nfrom ...utils import needs_pydanticv2\n\n\n@needs_pydanticv2\ndef test_settings(monkeypatch: MonkeyPatch):\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n    from docs_src.settings.tutorial001 import app\n\n    client = TestClient(app)\n    response = client.get(\"/info\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"admin@example.com\",\n        \"items_per_user\": 50,\n    }\n", "tests/test_tutorial/test_settings/__init__.py": "", "tests/test_tutorial/test_events/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.events.tutorial003 import (\n    app,\n    fake_answer_to_everything_ml_model,\n    ml_models,\n)\n\n\ndef test_events():\n    assert not ml_models, \"ml_models should be empty\"\n    with TestClient(app) as client:\n        assert ml_models[\"answer_to_everything\"] == fake_answer_to_everything_ml_model\n        response = client.get(\"/predict\", params={\"x\": 2})\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"result\": 84.0}\n    assert not ml_models, \"ml_models should be empty\"\n\n\ndef test_openapi_schema():\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/predict\": {\n                    \"get\": {\n                        \"summary\": \"Predict\",\n                        \"operationId\": \"predict_predict_get\",\n                        \"parameters\": [\n                            {\n                                \"required\": True,\n                                \"schema\": {\"title\": \"X\", \"type\": \"number\"},\n                                \"name\": \"x\",\n                                \"in\": \"query\",\n                            }\n                        ],\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                }\n            },\n        }\n", "tests/test_tutorial/test_events/test_tutorial001.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"app\", scope=\"module\")\ndef get_app():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.events.tutorial001 import app\n    yield app\n\n\ndef test_events(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\"name\": \"Fighters\"}\n\n\ndef test_openapi_schema(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/{item_id}\": {\n                    \"get\": {\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__item_id__get\",\n                        \"parameters\": [\n                            {\n                                \"required\": True,\n                                \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                                \"name\": \"item_id\",\n                                \"in\": \"path\",\n                            }\n                        ],\n                    }\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                }\n            },\n        }\n", "tests/test_tutorial/test_events/test_tutorial002.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"app\", scope=\"module\")\ndef get_app():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.events.tutorial002 import app\n    yield app\n\n\ndef test_events(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/items/\")\n        assert response.status_code == 200, response.text\n        assert response.json() == [{\"name\": \"Foo\"}]\n    with open(\"log.txt\") as log:\n        assert \"Application shutdown\" in log.read()\n\n\ndef test_openapi_schema(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/items/\": {\n                    \"get\": {\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\"application/json\": {\"schema\": {}}},\n                            }\n                        },\n                        \"summary\": \"Read Items\",\n                        \"operationId\": \"read_items_items__get\",\n                    }\n                }\n            },\n        }\n", "tests/test_tutorial/test_events/__init__.py": "", "tests/test_tutorial/test_path_params/test_tutorial004.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_params.tutorial004 import app\n\nclient = TestClient(app)\n\n\ndef test_file_path():\n    response = client.get(\"/files/home/johndoe/myfile.txt\")\n    print(response.content)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_path\": \"home/johndoe/myfile.txt\"}\n\n\ndef test_root_file_path():\n    response = client.get(\"/files//home/johndoe/myfile.txt\")\n    print(response.content)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_path\": \"/home/johndoe/myfile.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/{file_path}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read File\",\n                    \"operationId\": \"read_file_files__file_path__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"File Path\", \"type\": \"string\"},\n                            \"name\": \"file_path\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_params/test_tutorial005.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.path_params.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_get_enums_alexnet():\n    response = client.get(\"/models/alexnet\")\n    assert response.status_code == 200\n    assert response.json() == {\"model_name\": \"alexnet\", \"message\": \"Deep Learning FTW!\"}\n\n\ndef test_get_enums_lenet():\n    response = client.get(\"/models/lenet\")\n    assert response.status_code == 200\n    assert response.json() == {\"model_name\": \"lenet\", \"message\": \"LeCNN all the images\"}\n\n\ndef test_get_enums_resnet():\n    response = client.get(\"/models/resnet\")\n    assert response.status_code == 200\n    assert response.json() == {\"model_name\": \"resnet\", \"message\": \"Have some residuals\"}\n\n\ndef test_get_enums_invalid():\n    response = client.get(\"/models/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"enum\",\n                    \"loc\": [\"path\", \"model_name\"],\n                    \"msg\": \"Input should be 'alexnet', 'resnet' or 'lenet'\",\n                    \"input\": \"foo\",\n                    \"ctx\": {\"expected\": \"'alexnet', 'resnet' or 'lenet'\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"enum_values\": [\"alexnet\", \"resnet\", \"lenet\"]},\n                    \"loc\": [\"path\", \"model_name\"],\n                    \"msg\": \"value is not a valid enumeration member; permitted: 'alexnet', 'resnet', 'lenet'\",\n                    \"type\": \"type_error.enum\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/models/{model_name}\": {\n                \"get\": {\n                    \"summary\": \"Get Model\",\n                    \"operationId\": \"get_model_models__model_name__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"$ref\": \"#/components/schemas/ModelName\"},\n                            \"name\": \"model_name\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ModelName\": IsDict(\n                    {\n                        \"title\": \"ModelName\",\n                        \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n                        \"type\": \"string\",\n                    }\n                )\n                | IsDict(\n                    {\n                        # TODO: remove when deprecating Pydantic v1\n                        \"title\": \"ModelName\",\n                        \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n                        \"type\": \"string\",\n                        \"description\": \"An enumeration.\",\n                    }\n                ),\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_params/__init__.py": "", "tests/test_tutorial/test_body/test_tutorial001.py": "from unittest.mock import patch\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture\ndef client():\n    from docs_src.body.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_body_float(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": None,\n        \"tax\": None,\n    }\n\n\ndef test_post_with_str_float(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": None,\n        \"tax\": None,\n    }\n\n\ndef test_post_with_str_float_description(client: TestClient):\n    response = client.post(\n        \"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": \"Some Foo\",\n        \"tax\": None,\n    }\n\n\ndef test_post_with_str_float_description_tax(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\", \"tax\": 0.3},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": \"Some Foo\",\n        \"tax\": 0.3,\n    }\n\n\ndef test_post_with_only_name(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"name\": \"Foo\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_with_only_name_price(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"twenty\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"twenty\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_with_no_data(client: TestClient):\n    response = client.post(\"/items/\", json={})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_with_none(client: TestClient):\n    response = client.post(\"/items/\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_broken_body(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        headers={\"content-type\": \"application/json\"},\n        content=\"{some broken json}\",\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"json_invalid\",\n                    \"loc\": [\"body\", 1],\n                    \"msg\": \"JSON decode error\",\n                    \"input\": {},\n                    \"ctx\": {\n                        \"error\": \"Expecting property name enclosed in double quotes\"\n                    },\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", 1],\n                    \"msg\": \"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\",\n                    \"type\": \"value_error.jsondecode\",\n                    \"ctx\": {\n                        \"msg\": \"Expecting property name enclosed in double quotes\",\n                        \"doc\": \"{some broken json}\",\n                        \"pos\": 1,\n                        \"lineno\": 1,\n                        \"colno\": 2,\n                    },\n                }\n            ]\n        }\n    )\n\n\ndef test_post_form_for_json(client: TestClient):\n    response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": \"name=Foo&price=50.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n\ndef test_explicit_content_type(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n        headers={\"Content-Type\": \"application/json\"},\n    )\n    assert response.status_code == 200, response.text\n\n\ndef test_geo_json(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n        headers={\"Content-Type\": \"application/geo+json\"},\n    )\n    assert response.status_code == 200, response.text\n\n\ndef test_no_content_type_is_json(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"description\": None,\n        \"price\": 50.5,\n        \"tax\": None,\n    }\n\n\ndef test_wrong_headers(client: TestClient):\n    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n\ndef test_other_exceptions(client: TestClient):\n    with patch(\"json.loads\", side_effect=Exception):\n        response = client.post(\"/items/\", json={\"test\": \"test2\"})\n        assert response.status_code == 400, response.text\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body/__init__.py": "", "tests/test_tutorial/test_body/test_tutorial001_py310.py": "from unittest.mock import patch\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture\ndef client():\n    from docs_src.body.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_body_float(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": None,\n        \"tax\": None,\n    }\n\n\n@needs_py310\ndef test_post_with_str_float(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": None,\n        \"tax\": None,\n    }\n\n\n@needs_py310\ndef test_post_with_str_float_description(client: TestClient):\n    response = client.post(\n        \"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": \"Some Foo\",\n        \"tax\": None,\n    }\n\n\n@needs_py310\ndef test_post_with_str_float_description_tax(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\", \"tax\": 0.3},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 50.5,\n        \"description\": \"Some Foo\",\n        \"tax\": 0.3,\n    }\n\n\n@needs_py310\ndef test_post_with_only_name(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {\"name\": \"Foo\"},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_with_only_name_price(client: TestClient):\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"twenty\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"twenty\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_with_no_data(client: TestClient):\n    response = client.post(\"/items/\", json={})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"name\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Field required\",\n                    \"input\": {},\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"name\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_with_none(client: TestClient):\n    response = client.post(\"/items/\", json=None)\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_broken_body(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        headers={\"content-type\": \"application/json\"},\n        content=\"{some broken json}\",\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"json_invalid\",\n                    \"loc\": [\"body\", 1],\n                    \"msg\": \"JSON decode error\",\n                    \"input\": {},\n                    \"ctx\": {\n                        \"error\": \"Expecting property name enclosed in double quotes\"\n                    },\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", 1],\n                    \"msg\": \"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\",\n                    \"type\": \"value_error.jsondecode\",\n                    \"ctx\": {\n                        \"msg\": \"Expecting property name enclosed in double quotes\",\n                        \"doc\": \"{some broken json}\",\n                        \"pos\": 1,\n                        \"lineno\": 1,\n                        \"colno\": 2,\n                    },\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_post_form_for_json(client: TestClient):\n    response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": \"name=Foo&price=50.5\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_explicit_content_type(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n        headers={\"Content-Type\": \"application/json\"},\n    )\n    assert response.status_code == 200, response.text\n\n\n@needs_py310\ndef test_geo_json(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n        headers={\"Content-Type\": \"application/geo+json\"},\n    )\n    assert response.status_code == 200, response.text\n\n\n@needs_py310\ndef test_no_content_type_is_json(client: TestClient):\n    response = client.post(\n        \"/items/\",\n        content='{\"name\": \"Foo\", \"price\": 50.5}',\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"description\": None,\n        \"price\": 50.5,\n        \"tax\": None,\n    }\n\n\n@needs_py310\ndef test_wrong_headers(client: TestClient):\n    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n    response = client.post(\n        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n    )\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"model_attributes_type\",\n                    \"loc\": [\"body\"],\n                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\"],\n                    \"msg\": \"value is not a valid dict\",\n                    \"type\": \"type_error.dict\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_other_exceptions(client: TestClient):\n    with patch(\"json.loads\", side_effect=Exception):\n        response = client.post(\"/items/\", json={\"test\": \"test2\"})\n        assert response.status_code == 400, response.text\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_forms/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_forms.tutorial001_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\"}\n\n\ndef test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login__post\": {\n                    \"title\": \"Body_login_login__post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_forms/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_forms.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\"}\n\n\ndef test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login__post\": {\n                    \"title\": \"Body_login_login__post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_forms/__init__.py": "", "tests/test_tutorial/test_request_forms/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_forms.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_body_form(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"Foo\"}\n\n\n@needs_py39\ndef test_post_body_form_no_password(client: TestClient):\n    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_form_no_username(client: TestClient):\n    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_form_no_data(client: TestClient):\n    response = client.post(\"/login/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"username\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"body\", \"password\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/login/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_login__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_login__post\": {\n                    \"title\": \"Body_login_login__post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_openapi_callbacks/test_tutorial001.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.openapi_callbacks.tutorial001 import app, invoice_notification\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.post(\n        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"msg\": \"Invoice received\"}\n\n\ndef test_dummy_callback():\n    # Just for coverage\n    invoice_notification({})\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/invoices/\": {\n                \"post\": {\n                    \"summary\": \"Create Invoice\",\n                    \"description\": 'Create an invoice.\\n\\nThis will (let\\'s imagine) let the API user (some external developer) create an\\ninvoice.\\n\\nAnd this path operation will:\\n\\n* Send the invoice to the client.\\n* Collect the money from the client.\\n* Send a notification back to the API user (the external developer), as a callback.\\n    * At this point is that the API will somehow send a POST request to the\\n        external API with the notification of the invoice event\\n        (e.g. \"payment successful\").',\n                    \"operationId\": \"create_invoice_invoices__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [\n                                        {\n                                            \"type\": \"string\",\n                                            \"format\": \"uri\",\n                                            \"minLength\": 1,\n                                            \"maxLength\": 2083,\n                                        },\n                                        {\"type\": \"null\"},\n                                    ],\n                                    \"title\": \"Callback Url\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"Callback Url\",\n                                    \"maxLength\": 2083,\n                                    \"minLength\": 1,\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                }\n                            ),\n                            \"name\": \"callback_url\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Invoice\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"callbacks\": {\n                        \"invoice_notification\": {\n                            \"{$callback_url}/invoices/{$request.body.id}\": {\n                                \"post\": {\n                                    \"summary\": \"Invoice Notification\",\n                                    \"operationId\": \"invoice_notification__callback_url__invoices___request_body_id__post\",\n                                    \"requestBody\": {\n                                        \"required\": True,\n                                        \"content\": {\n                                            \"application/json\": {\n                                                \"schema\": {\n                                                    \"$ref\": \"#/components/schemas/InvoiceEvent\"\n                                                }\n                                            }\n                                        },\n                                    },\n                                    \"responses\": {\n                                        \"200\": {\n                                            \"description\": \"Successful Response\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/InvoiceEventReceived\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                        \"422\": {\n                                            \"description\": \"Validation Error\",\n                                            \"content\": {\n                                                \"application/json\": {\n                                                    \"schema\": {\n                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                                    }\n                                                }\n                                            },\n                                        },\n                                    },\n                                }\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Invoice\": {\n                    \"title\": \"Invoice\",\n                    \"required\": [\"id\", \"customer\", \"total\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n                        \"title\": IsDict(\n                            {\n                                \"title\": \"Title\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Title\", \"type\": \"string\"}\n                        ),\n                        \"customer\": {\"title\": \"Customer\", \"type\": \"string\"},\n                        \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n                    },\n                },\n                \"InvoiceEvent\": {\n                    \"title\": \"InvoiceEvent\",\n                    \"required\": [\"description\", \"paid\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"paid\": {\"title\": \"Paid\", \"type\": \"boolean\"},\n                    },\n                },\n                \"InvoiceEventReceived\": {\n                    \"title\": \"InvoiceEventReceived\",\n                    \"required\": [\"ok\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"ok\": {\"title\": \"Ok\", \"type\": \"boolean\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_openapi_callbacks/__init__.py": "", "tests/test_tutorial/test_response_change_status_code/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_change_status_code.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operation():\n    response = client.put(\"/get-or-create-task/foo\")\n    print(response.content)\n    assert response.status_code == 200, response.text\n    assert response.json() == \"Listen to the Bar Fighters\"\n    response = client.put(\"/get-or-create-task/bar\")\n    assert response.status_code == 201, response.text\n    assert response.json() == \"This didn't exist before\"\n", "tests/test_tutorial/test_response_change_status_code/__init__.py": "", "tests/test_tutorial/test_schema_extra_example/test_tutorial004.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.schema_extra_example.tutorial004 import app\n\nclient = TestClient(app)\n\n\n# Test required and embedded body parameters with no bodies sent\ndef test_post_body_example():\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial004_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial004_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n# Test required and embedded body parameters with no bodies sent\n@needs_py310\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial005.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial005 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict({\"$ref\": \"#/components/schemas/Item\"})\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"normal\": {\n                                        \"summary\": \"A normal example\",\n                                        \"description\": \"A **normal** item works correctly.\",\n                                        \"value\": {\n                                            \"name\": \"Foo\",\n                                            \"description\": \"A very nice Item\",\n                                            \"price\": 35.4,\n                                            \"tax\": 3.2,\n                                        },\n                                    },\n                                    \"converted\": {\n                                        \"summary\": \"An example with converted data\",\n                                        \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                                        \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                    },\n                                    \"invalid\": {\n                                        \"summary\": \"Invalid data is rejected with an error\",\n                                        \"value\": {\n                                            \"name\": \"Baz\",\n                                            \"price\": \"thirty five point four\",\n                                        },\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial001_pv1.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv1\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial001_pv1 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv1\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"type\": \"integer\", \"title\": \"Item Id\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\"type\": \"string\", \"title\": \"Description\"},\n                        \"price\": {\"type\": \"number\", \"title\": \"Price\"},\n                        \"tax\": {\"type\": \"number\", \"title\": \"Tax\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"price\"],\n                    \"title\": \"Item\",\n                    \"examples\": [\n                        {\n                            \"name\": \"Foo\",\n                            \"description\": \"A very nice Item\",\n                            \"price\": 35.4,\n                            \"tax\": 3.2,\n                        }\n                    ],\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial001.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv2\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": {\"type\": \"integer\", \"title\": \"Item Id\"},\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\"type\": \"number\", \"title\": \"Price\"},\n                        \"tax\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Tax\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"price\"],\n                    \"title\": \"Item\",\n                    \"examples\": [\n                        {\n                            \"description\": \"A very nice Item\",\n                            \"name\": \"Foo\",\n                            \"price\": 35.4,\n                            \"tax\": 3.2,\n                        }\n                    ],\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial001_py310_pv1.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv1\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial001_py310_pv1 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@needs_pydanticv1\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py310\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"type\": \"integer\", \"title\": \"Item Id\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\"type\": \"string\", \"title\": \"Description\"},\n                        \"price\": {\"type\": \"number\", \"title\": \"Price\"},\n                        \"tax\": {\"type\": \"number\", \"title\": \"Tax\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"price\"],\n                    \"title\": \"Item\",\n                    \"examples\": [\n                        {\n                            \"name\": \"Foo\",\n                            \"description\": \"A very nice Item\",\n                            \"price\": 35.4,\n                            \"tax\": 3.2,\n                        }\n                    ],\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial004_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.schema_extra_example.tutorial004_an import app\n\nclient = TestClient(app)\n\n\n# Test required and embedded body parameters with no bodies sent\ndef test_post_body_example():\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial004_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial004_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n# Test required and embedded body parameters with no bodies sent\n@needs_py39\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/__init__.py": "", "tests/test_tutorial/test_schema_extra_example/test_tutorial004_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial004_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n# Test required and embedded body parameters with no bodies sent\n@needs_py310\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"$ref\": \"#/components/schemas/Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                        \"examples\": [\n                                            {\n                                                \"name\": \"Foo\",\n                                                \"description\": \"A very nice Item\",\n                                                \"price\": 35.4,\n                                                \"tax\": 3.2,\n                                            },\n                                            {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                            {\n                                                \"name\": \"Baz\",\n                                                \"price\": \"thirty five point four\",\n                                            },\n                                        ],\n                                    }\n                                )\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial001_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@needs_pydanticv2\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py310\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                            \"required\": True,\n                            \"schema\": {\"type\": \"integer\", \"title\": \"Item Id\"},\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"properties\": {\n                        \"detail\": {\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                            \"type\": \"array\",\n                            \"title\": \"Detail\",\n                        }\n                    },\n                    \"type\": \"object\",\n                    \"title\": \"HTTPValidationError\",\n                },\n                \"Item\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                        \"price\": {\"type\": \"number\", \"title\": \"Price\"},\n                        \"tax\": {\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            \"title\": \"Tax\",\n                        },\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"name\", \"price\"],\n                    \"title\": \"Item\",\n                    \"examples\": [\n                        {\n                            \"description\": \"A very nice Item\",\n                            \"name\": \"Foo\",\n                            \"price\": 35.4,\n                            \"tax\": 3.2,\n                        }\n                    ],\n                },\n                \"ValidationError\": {\n                    \"properties\": {\n                        \"loc\": {\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                            \"type\": \"array\",\n                            \"title\": \"Location\",\n                        },\n                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n                    },\n                    \"type\": \"object\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"title\": \"ValidationError\",\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial005_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial005_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict({\"$ref\": \"#/components/schemas/Item\"})\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"normal\": {\n                                        \"summary\": \"A normal example\",\n                                        \"description\": \"A **normal** item works correctly.\",\n                                        \"value\": {\n                                            \"name\": \"Foo\",\n                                            \"description\": \"A very nice Item\",\n                                            \"price\": 35.4,\n                                            \"tax\": 3.2,\n                                        },\n                                    },\n                                    \"converted\": {\n                                        \"summary\": \"An example with converted data\",\n                                        \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                                        \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                    },\n                                    \"invalid\": {\n                                        \"summary\": \"Invalid data is rejected with an error\",\n                                        \"value\": {\n                                            \"name\": \"Baz\",\n                                            \"price\": \"thirty five point four\",\n                                        },\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial005_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial005_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict({\"$ref\": \"#/components/schemas/Item\"})\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"normal\": {\n                                        \"summary\": \"A normal example\",\n                                        \"description\": \"A **normal** item works correctly.\",\n                                        \"value\": {\n                                            \"name\": \"Foo\",\n                                            \"description\": \"A very nice Item\",\n                                            \"price\": 35.4,\n                                            \"tax\": 3.2,\n                                        },\n                                    },\n                                    \"converted\": {\n                                        \"summary\": \"An example with converted data\",\n                                        \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                                        \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                    },\n                                    \"invalid\": {\n                                        \"summary\": \"Invalid data is rejected with an error\",\n                                        \"value\": {\n                                            \"name\": \"Baz\",\n                                            \"price\": \"thirty five point four\",\n                                        },\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial005_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial005_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict({\"$ref\": \"#/components/schemas/Item\"})\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"normal\": {\n                                        \"summary\": \"A normal example\",\n                                        \"description\": \"A **normal** item works correctly.\",\n                                        \"value\": {\n                                            \"name\": \"Foo\",\n                                            \"description\": \"A very nice Item\",\n                                            \"price\": 35.4,\n                                            \"tax\": 3.2,\n                                        },\n                                    },\n                                    \"converted\": {\n                                        \"summary\": \"An example with converted data\",\n                                        \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                                        \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                    },\n                                    \"invalid\": {\n                                        \"summary\": \"Invalid data is rejected with an error\",\n                                        \"value\": {\n                                            \"name\": \"Baz\",\n                                            \"price\": \"thirty five point four\",\n                                        },\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_schema_extra_example/test_tutorial005_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.schema_extra_example.tutorial005_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_body_example(client: TestClient):\n    response = client.put(\n        \"/items/5\",\n        json={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2,\n        },\n    )\n    assert response.status_code == 200\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient) -> None:\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict({\"$ref\": \"#/components/schemas/Item\"})\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"allOf\": [\n                                            {\"$ref\": \"#/components/schemas/Item\"}\n                                        ],\n                                        \"title\": \"Item\",\n                                    }\n                                ),\n                                \"examples\": {\n                                    \"normal\": {\n                                        \"summary\": \"A normal example\",\n                                        \"description\": \"A **normal** item works correctly.\",\n                                        \"value\": {\n                                            \"name\": \"Foo\",\n                                            \"description\": \"A very nice Item\",\n                                            \"price\": 35.4,\n                                            \"tax\": 3.2,\n                                        },\n                                    },\n                                    \"converted\": {\n                                        \"summary\": \"An example with converted data\",\n                                        \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                                        \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n                                    },\n                                    \"invalid\": {\n                                        \"summary\": \"Invalid data is rejected with an error\",\n                                        \"value\": {\n                                            \"name\": \"Baz\",\n                                            \"price\": \"thirty five point four\",\n                                        },\n                                    },\n                                },\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_advanced_middleware/test_tutorial003.py": "from fastapi.responses import PlainTextResponse\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.advanced_middleware.tutorial003 import app\n\n\n@app.get(\"/large\")\nasync def large():\n    return PlainTextResponse(\"x\" * 4000, status_code=200)\n\n\nclient = TestClient(app)\n\n\ndef test_middleware():\n    response = client.get(\"/large\", headers={\"accept-encoding\": \"gzip\"})\n    assert response.status_code == 200, response.text\n    assert response.text == \"x\" * 4000\n    assert response.headers[\"Content-Encoding\"] == \"gzip\"\n    assert int(response.headers[\"Content-Length\"]) < 4000\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n", "tests/test_tutorial/test_advanced_middleware/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.advanced_middleware.tutorial001 import app\n\n\ndef test_middleware():\n    client = TestClient(app, base_url=\"https://testserver\")\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n\n    client = TestClient(app)\n    response = client.get(\"/\", follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://testserver/\"\n", "tests/test_tutorial/test_advanced_middleware/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.advanced_middleware.tutorial002 import app\n\n\ndef test_middleware():\n    client = TestClient(app, base_url=\"http://example.com\")\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    client = TestClient(app, base_url=\"http://subdomain.example.com\")\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    client = TestClient(app, base_url=\"http://invalidhost\")\n    response = client.get(\"/\")\n    assert response.status_code == 400, response.text\n", "tests/test_tutorial/test_advanced_middleware/__init__.py": "", "tests/test_tutorial/test_header_params/test_tutorial003.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.header_params.tutorial003 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"X-Token values\": None}),\n        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n        (\n            \"/items\",\n            [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")],\n            200,\n            {\"X-Token values\": [\"foo\", \"bar\"]},\n        ),\n    ],\n)\ndef test(path, headers, expected_status, expected_response):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.header_params.tutorial001_an import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User-Agent\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"user-agent\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial002_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial002_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"strange_header\": None}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n        (\n            \"/items\",\n            {\"strange_header\": \"FastAPI test\"},\n            200,\n            {\"strange_header\": \"FastAPI test\"},\n        ),\n        (\n            \"/items\",\n            {\"strange-header\": \"Not really underscore\"},\n            200,\n            {\"strange_header\": None},\n        ),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema():\n    from docs_src.header_params.tutorial002_py310 import app\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Strange Header\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"strange_header\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial002_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial002_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"strange_header\": None}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n        (\n            \"/items\",\n            {\"strange_header\": \"FastAPI test\"},\n            200,\n            {\"strange_header\": \"FastAPI test\"},\n        ),\n        (\n            \"/items\",\n            {\"strange-header\": \"Not really underscore\"},\n            200,\n            {\"strange_header\": None},\n        ),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py39\ndef test_openapi_schema():\n    from docs_src.header_params.tutorial002_an_py39 import app\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Strange Header\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"strange_header\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial002_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial002_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"strange_header\": None}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n        (\n            \"/items\",\n            {\"strange_header\": \"FastAPI test\"},\n            200,\n            {\"strange_header\": \"FastAPI test\"},\n        ),\n        (\n            \"/items\",\n            {\"strange-header\": \"Not really underscore\"},\n            200,\n            {\"strange_header\": None},\n        ),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Strange Header\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"strange_header\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial003_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.header_params.tutorial003_an import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"X-Token values\": None}),\n        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n        # TODO: fix this, is it a bug?\n        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial003_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial003_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"X-Token values\": None}),\n        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n        # TODO: fix this, is it a bug?\n        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial002_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.header_params.tutorial002_an import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"strange_header\": None}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n        (\n            \"/items\",\n            {\"strange_header\": \"FastAPI test\"},\n            200,\n            {\"strange_header\": \"FastAPI test\"},\n        ),\n        (\n            \"/items\",\n            {\"strange-header\": \"Not really underscore\"},\n            200,\n            {\"strange_header\": None},\n        ),\n    ],\n)\ndef test(path, headers, expected_status, expected_response):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Strange Header\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"strange_header\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial003_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial003_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"X-Token values\": None}),\n        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n        # TODO: fix this, is it a bug?\n        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.header_params.tutorial001 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User-Agent\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"user-agent\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial002.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.header_params.tutorial002 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"strange_header\": None}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n        (\n            \"/items\",\n            {\"strange_header\": \"FastAPI test\"},\n            200,\n            {\"strange_header\": \"FastAPI test\"},\n        ),\n        (\n            \"/items\",\n            {\"strange-header\": \"Not really underscore\"},\n            200,\n            {\"strange_header\": None},\n        ),\n    ],\n)\ndef test(path, headers, expected_status, expected_response):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Strange Header\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"strange_header\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/__init__.py": "", "tests/test_tutorial/test_header_params/test_tutorial001_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User-Agent\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"user-agent\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial003_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial003_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"X-Token values\": None}),\n        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n        # TODO: fix this, is it a bug?\n        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"anyOf\": [\n                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                        {\"type\": \"null\"},\n                                    ],\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\n                                    \"title\": \"X-Token\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                }\n                            ),\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_header_params/test_tutorial001_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.header_params.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,headers,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n    ],\n)\ndef test(path, headers, expected_status, expected_response, client: TestClient):\n    response = client.get(path, headers=headers)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"User-Agent\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"user-agent\",\n                            \"in\": \"header\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_conditional_openapi/test_tutorial001.py": "import importlib\n\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv2\n\n\ndef get_client() -> TestClient:\n    from docs_src.conditional_openapi import tutorial001\n\n    importlib.reload(tutorial001)\n\n    client = TestClient(tutorial001.app)\n    return client\n\n\n@needs_pydanticv2\ndef test_disable_openapi(monkeypatch):\n    monkeypatch.setenv(\"OPENAPI_URL\", \"\")\n    # Load the client after setting the env var\n    client = get_client()\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 404, response.text\n    response = client.get(\"/docs\")\n    assert response.status_code == 404, response.text\n    response = client.get(\"/redoc\")\n    assert response.status_code == 404, response.text\n\n\n@needs_pydanticv2\ndef test_root():\n    client = get_client()\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}\n\n\n@needs_pydanticv2\ndef test_default_openapi():\n    client = get_client()\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/redoc\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/openapi.json\")\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_conditional_openapi/__init__.py": "", "tests/test_tutorial/test_request_files/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_post_files(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\ndef test_get_root():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as bytes\",\n                        }\n                    },\n                },\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as UploadFile\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_02_an_py39.py": "from pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_files.tutorial001_02_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No file sent\"}\n\n\n@needs_py39\ndef test_post_uploadfile_no_body(client: TestClient):\n    response = client.post(\"/uploadfile/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No upload file sent\"}\n\n\n@needs_py39\ndef test_post_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial001_an import app\n\nclient = TestClient(app)\n\n\ndef test_post_form_no_body():\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_json():\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\ndef test_post_large_file(tmp_path):\n    default_pydantic_max_size = 2**16\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_03.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial001_03 import app\n\nclient = TestClient(app)\n\n\ndef test_post_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as bytes\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as UploadFile\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial003_py39.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_files.tutorial003_py39 import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\nfile_required = {\n    \"detail\": [\n        {\n            \"loc\": [\"body\", \"files\"],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\",\n        }\n    ]\n}\n\n\n@needs_py39\ndef test_post_files(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\n@needs_py39\ndef test_get_root(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as bytes\",\n                        }\n                    },\n                },\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as UploadFile\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_02_py310.py": "from pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_files.tutorial001_02_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No file sent\"}\n\n\n@needs_py310\ndef test_post_uploadfile_no_body(client: TestClient):\n    response = client.post(\"/uploadfile/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No upload file sent\"}\n\n\n@needs_py310\ndef test_post_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\n@needs_py310\ndef test_post_upload_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial002_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_files.tutorial002_an_py39 import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_files(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\n@needs_py39\ndef test_get_root(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_03_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial001_03_an import app\n\nclient = TestClient(app)\n\n\ndef test_post_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as bytes\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as UploadFile\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial003_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial003_an import app\n\nclient = TestClient(app)\n\n\ndef test_post_files(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\ndef test_get_root():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as bytes\",\n                        }\n                    },\n                },\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as UploadFile\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial002_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial002_an import app\n\nclient = TestClient(app)\n\n\ndef test_post_form_no_body():\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_json():\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_files(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\ndef test_get_root():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_02_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial001_02_an import app\n\nclient = TestClient(app)\n\n\ndef test_post_form_no_body():\n    response = client.post(\"/files/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No file sent\"}\n\n\ndef test_post_uploadfile_no_body():\n    response = client.post(\"/uploadfile/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No upload file sent\"}\n\n\ndef test_post_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial002_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_files.tutorial002_py39 import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\nfile_required = {\n    \"detail\": [\n        {\n            \"loc\": [\"body\", \"files\"],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\",\n        }\n    ]\n}\n\n\n@needs_py39\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_files(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\n@needs_py39\ndef test_get_root(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial001 import app\n\nclient = TestClient(app)\n\n\nfile_required = {\n    \"detail\": [\n        {\n            \"loc\": [\"body\", \"file\"],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\",\n        }\n    ]\n}\n\n\ndef test_post_form_no_body():\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_json():\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\ndef test_post_large_file(tmp_path):\n    default_pydantic_max_size = 2**16\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial002.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_post_form_no_body():\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_body_json():\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"files\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_post_files(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\ndef test_get_root():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_02.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.request_files.tutorial001_02 import app\n\nclient = TestClient(app)\n\n\ndef test_post_form_no_body():\n    response = client.post(\"/files/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No file sent\"}\n\n\ndef test_post_uploadfile_no_body():\n    response = client.post(\"/uploadfile/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No upload file sent\"}\n\n\ndef test_post_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\ndef test_post_upload_file(tmp_path):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_03_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_files.tutorial001_03_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as bytes\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\n                            \"title\": \"File\",\n                            \"type\": \"string\",\n                            \"description\": \"A file read as UploadFile\",\n                            \"format\": \"binary\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/__init__.py": "", "tests/test_tutorial/test_request_files/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_files.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_body_json(client: TestClient):\n    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"file\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_post_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\n@needs_py39\ndef test_post_large_file(tmp_path, client: TestClient):\n    default_pydantic_max_size = 2**16\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"required\": [\"file\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial003_an_py39.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"app\")\ndef get_app():\n    from docs_src.request_files.tutorial003_an_py39 import app\n\n    return app\n\n\n@pytest.fixture(name=\"client\")\ndef get_client(app: FastAPI):\n    client = TestClient(app)\n    return client\n\n\nfile_required = {\n    \"detail\": [\n        {\n            \"loc\": [\"body\", \"files\"],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\",\n        }\n    ]\n}\n\n\n@needs_py39\ndef test_post_files(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/files/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_sizes\": [14, 15]}\n\n\n@needs_py39\ndef test_post_upload_file(tmp_path, app: FastAPI):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n    path2 = tmp_path / \"test2.txt\"\n    path2.write_bytes(b\"<file content2>\")\n\n    client = TestClient(app)\n    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n        response = client.post(\n            \"/uploadfiles/\",\n            files=(\n                (\"files\", (\"test.txt\", file)),\n                (\"files\", (\"test2.txt\", file2)),\n            ),\n        )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n\n\n@needs_py39\ndef test_get_root(app: FastAPI):\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert b\"<form\" in response.content\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create Files\",\n                    \"operationId\": \"create_files_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfiles/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload Files\",\n                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_files_files__post\": {\n                    \"title\": \"Body_create_files_files__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as bytes\",\n                        }\n                    },\n                },\n                \"Body_create_upload_files_uploadfiles__post\": {\n                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                    \"required\": [\"files\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"files\": {\n                            \"title\": \"Files\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n                            \"description\": \"Multiple files as UploadFile\",\n                        }\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_request_files/test_tutorial001_02_an_py310.py": "from pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.request_files.tutorial001_02_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_form_no_body(client: TestClient):\n    response = client.post(\"/files/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No file sent\"}\n\n\n@needs_py310\ndef test_post_uploadfile_no_body(client: TestClient):\n    response = client.post(\"/uploadfile/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"No upload file sent\"}\n\n\n@needs_py310\ndef test_post_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/files/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"file_size\": 14}\n\n\n@needs_py310\ndef test_post_upload_file(tmp_path: Path, client: TestClient):\n    path = tmp_path / \"test.txt\"\n    path.write_bytes(b\"<file content>\")\n\n    with path.open(\"rb\") as file:\n        response = client.post(\"/uploadfile/\", files={\"file\": file})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"filename\": \"test.txt\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/files/\": {\n                \"post\": {\n                    \"summary\": \"Create File\",\n                    \"operationId\": \"create_file_files__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/uploadfile/\": {\n                \"post\": {\n                    \"summary\": \"Create Upload File\",\n                    \"operationId\": \"create_upload_file_uploadfile__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_create_file_files__post\": {\n                    \"title\": \"Body_create_file_files__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"Body_create_upload_file_uploadfile__post\": {\n                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"file\": IsDict(\n                            {\n                                \"title\": \"File\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"binary\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                        )\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_bigger_applications/test_main_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.bigger_applications.app_an.main import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_users_token_jessica(client: TestClient):\n    response = client.get(\"/users?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\ndef test_users_with_no_token(client: TestClient):\n    response = client.get(\"/users\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_users_foo_token_jessica(client: TestClient):\n    response = client.get(\"/users/foo?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"foo\"}\n\n\ndef test_users_foo_with_no_token(client: TestClient):\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_users_me_token_jessica(client: TestClient):\n    response = client.get(\"/users/me?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}\n\n\ndef test_users_me_with_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_users_token_monica_with_no_jessica(client: TestClient):\n    response = client.get(\"/users?token=monica\")\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"No Jessica token provided\"}\n\n\ndef test_items_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"plumbus\": {\"name\": \"Plumbus\"},\n        \"gun\": {\"name\": \"Portal Gun\"},\n    }\n\n\ndef test_items_with_no_token_jessica(client: TestClient):\n    response = client.get(\"/items\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_items_plumbus_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"}\n\n\ndef test_items_bar_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_items_plumbus_with_no_token(client: TestClient):\n    response = client.get(\n        \"/items/plumbus\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_items_with_invalid_token(client: TestClient):\n    response = client.get(\"/items?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_items_bar_with_invalid_token(client: TestClient):\n    response = client.get(\"/items/bar?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_items_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_items_plumbus_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items/plumbus?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_root_token_jessica(client: TestClient):\n    response = client.get(\"/?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello Bigger Applications!\"}\n\n\ndef test_root_with_no_token(client: TestClient):\n    response = client.get(\"/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_put_no_header(client: TestClient):\n    response = client.put(\"/items/foo\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_put_invalid_header(client: TestClient):\n    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_put(client: TestClient):\n    response = client.put(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n\n\ndef test_put_forbidden(client: TestClient):\n    response = client.put(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n\n\ndef test_admin(client: TestClient):\n    response = client.post(\n        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n\n\ndef test_admin_invalid_header(client: TestClient):\n    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User Me\",\n                    \"operationId\": \"read_user_me_users_me_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{username}\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__username__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n                            \"name\": \"username\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n                \"put\": {\n                    \"tags\": [\"items\", \"custom\"],\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"403\": {\"description\": \"Operation forbidden\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/admin/\": {\n                \"post\": {\n                    \"tags\": [\"admin\"],\n                    \"summary\": \"Update Admin\",\n                    \"operationId\": \"update_admin_admin__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"418\": {\"description\": \"I'm a teapot\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_bigger_applications/test_main.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.bigger_applications.app.main import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_users_token_jessica(client: TestClient):\n    response = client.get(\"/users?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\ndef test_users_with_no_token(client: TestClient):\n    response = client.get(\"/users\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_users_foo_token_jessica(client: TestClient):\n    response = client.get(\"/users/foo?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"foo\"}\n\n\ndef test_users_foo_with_no_token(client: TestClient):\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_users_me_token_jessica(client: TestClient):\n    response = client.get(\"/users/me?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}\n\n\ndef test_users_me_with_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_users_token_monica_with_no_jessica(client: TestClient):\n    response = client.get(\"/users?token=monica\")\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"No Jessica token provided\"}\n\n\ndef test_items_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"plumbus\": {\"name\": \"Plumbus\"},\n        \"gun\": {\"name\": \"Portal Gun\"},\n    }\n\n\ndef test_items_with_no_token_jessica(client: TestClient):\n    response = client.get(\"/items\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_items_plumbus_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"}\n\n\ndef test_items_bar_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_items_plumbus_with_no_token(client: TestClient):\n    response = client.get(\n        \"/items/plumbus\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_items_with_invalid_token(client: TestClient):\n    response = client.get(\"/items?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_items_bar_with_invalid_token(client: TestClient):\n    response = client.get(\"/items/bar?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_items_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_items_plumbus_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items/plumbus?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\ndef test_root_token_jessica(client: TestClient):\n    response = client.get(\"/?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello Bigger Applications!\"}\n\n\ndef test_root_with_no_token(client: TestClient):\n    response = client.get(\"/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_put_no_header(client: TestClient):\n    response = client.put(\"/items/foo\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_put_invalid_header(client: TestClient):\n    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_put(client: TestClient):\n    response = client.put(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n\n\ndef test_put_forbidden(client: TestClient):\n    response = client.put(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n\n\ndef test_admin(client: TestClient):\n    response = client.post(\n        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n\n\ndef test_admin_invalid_header(client: TestClient):\n    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User Me\",\n                    \"operationId\": \"read_user_me_users_me_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{username}\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__username__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n                            \"name\": \"username\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n                \"put\": {\n                    \"tags\": [\"items\", \"custom\"],\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"403\": {\"description\": \"Operation forbidden\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/admin/\": {\n                \"post\": {\n                    \"tags\": [\"admin\"],\n                    \"summary\": \"Update Admin\",\n                    \"operationId\": \"update_admin_admin__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"418\": {\"description\": \"I'm a teapot\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_bigger_applications/__init__.py": "", "tests/test_tutorial/test_bigger_applications/test_main_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.bigger_applications.app_an_py39.main import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_users_token_jessica(client: TestClient):\n    response = client.get(\"/users?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@needs_py39\ndef test_users_with_no_token(client: TestClient):\n    response = client.get(\"/users\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_users_foo_token_jessica(client: TestClient):\n    response = client.get(\"/users/foo?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"foo\"}\n\n\n@needs_py39\ndef test_users_foo_with_no_token(client: TestClient):\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_users_me_token_jessica(client: TestClient):\n    response = client.get(\"/users/me?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}\n\n\n@needs_py39\ndef test_users_me_with_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_users_token_monica_with_no_jessica(client: TestClient):\n    response = client.get(\"/users?token=monica\")\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"No Jessica token provided\"}\n\n\n@needs_py39\ndef test_items_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"plumbus\": {\"name\": \"Plumbus\"},\n        \"gun\": {\"name\": \"Portal Gun\"},\n    }\n\n\n@needs_py39\ndef test_items_with_no_token_jessica(client: TestClient):\n    response = client.get(\"/items\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_items_plumbus_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200\n    assert response.json() == {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"}\n\n\n@needs_py39\ndef test_items_bar_token_jessica(client: TestClient):\n    response = client.get(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\n@needs_py39\ndef test_items_plumbus_with_no_token(client: TestClient):\n    response = client.get(\n        \"/items/plumbus\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_items_with_invalid_token(client: TestClient):\n    response = client.get(\"/items?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_items_bar_with_invalid_token(client: TestClient):\n    response = client.get(\"/items/bar?token=jessica\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_items_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_items_plumbus_with_missing_x_token_header(client: TestClient):\n    response = client.get(\"/items/plumbus?token=jessica\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_root_token_jessica(client: TestClient):\n    response = client.get(\"/?token=jessica\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello Bigger Applications!\"}\n\n\n@needs_py39\ndef test_root_with_no_token(client: TestClient):\n    response = client.get(\"/\")\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_put_no_header(client: TestClient):\n    response = client.put(\"/items/foo\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"query\", \"token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_put_invalid_header(client: TestClient):\n    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_put(client: TestClient):\n    response = client.put(\n        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n\n\n@needs_py39\ndef test_put_forbidden(client: TestClient):\n    response = client.put(\n        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 403, response.text\n    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n\n\n@needs_py39\ndef test_admin(client: TestClient):\n    response = client.post(\n        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n\n\n@needs_py39\ndef test_admin_invalid_header(client: TestClient):\n    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User Me\",\n                    \"operationId\": \"read_user_me_users_me_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/{username}\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__username__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n                            \"name\": \"username\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n                \"put\": {\n                    \"tags\": [\"items\", \"custom\"],\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"404\": {\"description\": \"Not found\"},\n                        \"403\": {\"description\": \"Operation forbidden\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/admin/\": {\n                \"post\": {\n                    \"tags\": [\"admin\"],\n                    \"summary\": \"Update Admin\",\n                    \"operationId\": \"update_admin_admin__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"418\": {\"description\": \"I'm a teapot\"},\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Root\",\n                    \"operationId\": \"root__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n                            \"name\": \"token\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_post_user():\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/UserOut\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"UserOut\": {\n                    \"title\": \"UserOut\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"password\", \"email\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_04.py": "import pytest\nfrom fastapi.exceptions import FastAPIError\n\n\ndef test_invalid_response_model():\n    with pytest.raises(FastAPIError):\n        from docs_src.response_model.tutorial003_04 import app\n\n        assert app  # pragma: no cover\n", "tests/test_tutorial/test_response_model/test_tutorial004_py39.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial004_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\n@pytest.mark.parametrize(\n    \"url,data\",\n    [\n        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n        (\n            \"/items/bar\",\n            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n        ),\n        (\n            \"/items/baz\",\n            {\n                \"name\": \"Baz\",\n                \"description\": None,\n                \"price\": 50.2,\n                \"tax\": 10.5,\n                \"tags\": [],\n            },\n        ),\n    ],\n)\ndef test_get(url, data, client: TestClient):\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\", \"tags\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial004.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial004 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"url,data\",\n    [\n        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n        (\n            \"/items/bar\",\n            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n        ),\n        (\n            \"/items/baz\",\n            {\n                \"name\": \"Baz\",\n                \"description\": None,\n                \"price\": 50.2,\n                \"tax\": 10.5,\n                \"tags\": [],\n            },\n        ),\n    ],\n)\ndef test_get(url, data):\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\", \"tags\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_01.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial003_01 import app\n\nclient = TestClient(app)\n\n\ndef test_post_user():\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/BaseUser\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"BaseUser\": {\n                    \"title\": \"BaseUser\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_03.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial003_03 import app\n\nclient = TestClient(app)\n\n\ndef test_get_portal():\n    response = client.get(\"/teleport\", follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/teleport\": {\n                \"get\": {\n                    \"summary\": \"Get Teleport\",\n                    \"operationId\": \"get_teleport_teleport_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial004_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial004_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"url,data\",\n    [\n        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n        (\n            \"/items/bar\",\n            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n        ),\n        (\n            \"/items/baz\",\n            {\n                \"name\": \"Baz\",\n                \"description\": None,\n                \"price\": 50.2,\n                \"tax\": 10.5,\n                \"tags\": [],\n            },\n        ),\n    ],\n)\ndef test_get(url, data, client: TestClient):\n    response = client.get(url)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\", \"tags\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial005.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_read_item_name():\n    response = client.get(\"/items/bar/name\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n\n\ndef test_read_item_public_data():\n    response = client.get(\"/items/bar/public\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Bar\",\n        \"description\": \"The Bar fighters\",\n        \"price\": 62,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}/name\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Name\",\n                    \"operationId\": \"read_item_name_items__item_id__name_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/items/{item_id}/public\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Public Data\",\n                    \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_01_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial003_01_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_user(client: TestClient):\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/BaseUser\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"BaseUser\": {\n                    \"title\": \"BaseUser\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial003_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_post_user(client: TestClient):\n    response = client.post(\n        \"/user/\",\n        json={\n            \"username\": \"foo\",\n            \"password\": \"fighter\",\n            \"email\": \"foo@example.com\",\n            \"full_name\": \"Grave Dohl\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"foo\",\n        \"email\": \"foo@example.com\",\n        \"full_name\": \"Grave Dohl\",\n    }\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/user/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/UserOut\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_user__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"UserOut\": {\n                    \"title\": \"UserOut\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\", \"email\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"UserIn\": {\n                    \"title\": \"UserIn\",\n                    \"required\": [\"username\", \"password\", \"email\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"email\": {\n                            \"title\": \"Email\",\n                            \"type\": \"string\",\n                            \"format\": \"email\",\n                        },\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial006_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial006_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_read_item_name(client: TestClient):\n    response = client.get(\"/items/bar/name\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n\n\n@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    response = client.get(\"/items/bar/public\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Bar\",\n        \"description\": \"The Bar fighters\",\n        \"price\": 62,\n    }\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}/name\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Name\",\n                    \"operationId\": \"read_item_name_items__item_id__name_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/items/{item_id}/public\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Public Data\",\n                    \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_04_py310.py": "import pytest\nfrom fastapi.exceptions import FastAPIError\n\nfrom ...utils import needs_py310\n\n\n@needs_py310\ndef test_invalid_response_model():\n    with pytest.raises(FastAPIError):\n        from docs_src.response_model.tutorial003_04_py310 import app\n\n        assert app  # pragma: no cover\n", "tests/test_tutorial/test_response_model/__init__.py": "", "tests/test_tutorial/test_response_model/test_tutorial006.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial006 import app\n\nclient = TestClient(app)\n\n\ndef test_read_item_name():\n    response = client.get(\"/items/bar/name\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n\n\ndef test_read_item_public_data():\n    response = client.get(\"/items/bar/public\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Bar\",\n        \"description\": \"The Bar fighters\",\n        \"price\": 62,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}/name\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Name\",\n                    \"operationId\": \"read_item_name_items__item_id__name_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/items/{item_id}/public\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Public Data\",\n                    \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_05_py310.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial003_05_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_get_portal(client: TestClient):\n    response = client.get(\"/portal\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n\n\n@needs_py310\ndef test_get_redirect(client: TestClient):\n    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/portal\": {\n                \"get\": {\n                    \"summary\": \"Get Portal\",\n                    \"operationId\": \"get_portal_portal_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Teleport\",\n                                \"type\": \"boolean\",\n                                \"default\": False,\n                            },\n                            \"name\": \"teleport\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial005_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.response_model.tutorial005_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_read_item_name(client: TestClient):\n    response = client.get(\"/items/bar/name\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n\n\n@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    response = client.get(\"/items/bar/public\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Bar\",\n        \"description\": \"The Bar fighters\",\n        \"price\": 62,\n    }\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}/name\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Name\",\n                    \"operationId\": \"read_item_name_items__item_id__name_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/items/{item_id}/public\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item Public Data\",\n                    \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"description\", \"price\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_02.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial003_02 import app\n\nclient = TestClient(app)\n\n\ndef test_get_portal():\n    response = client.get(\"/portal\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n\n\ndef test_get_redirect():\n    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/portal\": {\n                \"get\": {\n                    \"summary\": \"Get Portal\",\n                    \"operationId\": \"get_portal_portal_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Teleport\",\n                                \"type\": \"boolean\",\n                                \"default\": False,\n                            },\n                            \"name\": \"teleport\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_response_model/test_tutorial003_05.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.response_model.tutorial003_05 import app\n\nclient = TestClient(app)\n\n\ndef test_get_portal():\n    response = client.get(\"/portal\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n\n\ndef test_get_redirect():\n    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/portal\": {\n                \"get\": {\n                    \"summary\": \"Get Portal\",\n                    \"operationId\": \"get_portal_portal_get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Teleport\",\n                                \"type\": \"boolean\",\n                                \"default\": False,\n                            },\n                            \"name\": \"teleport\",\n                            \"in\": \"query\",\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_fields/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_fields.tutorial001_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_items_5(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n    }\n\n\ndef test_items_6(client: TestClient):\n    response = client.put(\n        \"/items/6\",\n        json={\n            \"item\": {\n                \"name\": \"Bar\",\n                \"price\": 0.2,\n                \"description\": \"Some bar\",\n                \"tax\": \"5.4\",\n            }\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 6,\n        \"item\": {\n            \"name\": \"Bar\",\n            \"price\": 0.2,\n            \"description\": \"Some bar\",\n            \"tax\": 5.4,\n        },\n    }\n\n\ndef test_invalid_price(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -3.0,\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0},\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"The description of the item\",\n                                \"anyOf\": [\n                                    {\"maxLength\": 300, \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"The description of the item\",\n                                \"maxLength\": 300,\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"price\": {\n                            \"title\": \"Price\",\n                            \"exclusiveMinimum\": 0.0,\n                            \"type\": \"number\",\n                            \"description\": \"The price must be greater than zero\",\n                        },\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_fields/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_fields.tutorial001 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_items_5(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n    }\n\n\ndef test_items_6(client: TestClient):\n    response = client.put(\n        \"/items/6\",\n        json={\n            \"item\": {\n                \"name\": \"Bar\",\n                \"price\": 0.2,\n                \"description\": \"Some bar\",\n                \"tax\": \"5.4\",\n            }\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 6,\n        \"item\": {\n            \"name\": \"Bar\",\n            \"price\": 0.2,\n            \"description\": \"Some bar\",\n            \"tax\": 5.4,\n        },\n    }\n\n\ndef test_invalid_price(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -3.0,\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0},\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"The description of the item\",\n                                \"anyOf\": [\n                                    {\"maxLength\": 300, \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"The description of the item\",\n                                \"maxLength\": 300,\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"price\": {\n                            \"title\": \"Price\",\n                            \"exclusiveMinimum\": 0.0,\n                            \"type\": \"number\",\n                            \"description\": \"The price must be greater than zero\",\n                        },\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_fields/__init__.py": "", "tests/test_tutorial/test_body_fields/test_tutorial001_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_fields.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_items_5(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n    }\n\n\n@needs_py310\ndef test_items_6(client: TestClient):\n    response = client.put(\n        \"/items/6\",\n        json={\n            \"item\": {\n                \"name\": \"Bar\",\n                \"price\": 0.2,\n                \"description\": \"Some bar\",\n                \"tax\": \"5.4\",\n            }\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 6,\n        \"item\": {\n            \"name\": \"Bar\",\n            \"price\": 0.2,\n            \"description\": \"Some bar\",\n            \"tax\": 5.4,\n        },\n    }\n\n\n@needs_py310\ndef test_invalid_price(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -3.0,\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0},\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"The description of the item\",\n                                \"anyOf\": [\n                                    {\"maxLength\": 300, \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"The description of the item\",\n                                \"maxLength\": 300,\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"price\": {\n                            \"title\": \"Price\",\n                            \"exclusiveMinimum\": 0.0,\n                            \"type\": \"number\",\n                            \"description\": \"The price must be greater than zero\",\n                        },\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_fields/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_fields.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_items_5(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n    }\n\n\n@needs_py39\ndef test_items_6(client: TestClient):\n    response = client.put(\n        \"/items/6\",\n        json={\n            \"item\": {\n                \"name\": \"Bar\",\n                \"price\": 0.2,\n                \"description\": \"Some bar\",\n                \"tax\": \"5.4\",\n            }\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 6,\n        \"item\": {\n            \"name\": \"Bar\",\n            \"price\": 0.2,\n            \"description\": \"Some bar\",\n            \"tax\": 5.4,\n        },\n    }\n\n\n@needs_py39\ndef test_invalid_price(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -3.0,\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0},\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"The description of the item\",\n                                \"anyOf\": [\n                                    {\"maxLength\": 300, \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"The description of the item\",\n                                \"maxLength\": 300,\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"price\": {\n                            \"title\": \"Price\",\n                            \"exclusiveMinimum\": 0.0,\n                            \"type\": \"number\",\n                            \"description\": \"The price must be greater than zero\",\n                        },\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_fields/test_tutorial001_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_fields.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_items_5(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 5,\n        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n    }\n\n\n@needs_py310\ndef test_items_6(client: TestClient):\n    response = client.put(\n        \"/items/6\",\n        json={\n            \"item\": {\n                \"name\": \"Bar\",\n                \"price\": 0.2,\n                \"description\": \"Some bar\",\n                \"tax\": \"5.4\",\n            }\n        },\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"item_id\": 6,\n        \"item\": {\n            \"name\": \"Bar\",\n            \"price\": 0.2,\n            \"description\": \"Some bar\",\n            \"tax\": 5.4,\n        },\n    }\n\n\n@needs_py310\ndef test_invalid_price(client: TestClient):\n    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"greater_than\",\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"Input should be greater than 0\",\n                    \"input\": -3.0,\n                    \"ctx\": {\"gt\": 0.0},\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"ctx\": {\"limit_value\": 0},\n                    \"loc\": [\"body\", \"item\", \"price\"],\n                    \"msg\": \"ensure this value is greater than 0\",\n                    \"type\": \"value_error.number.not_gt\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Update Item\",\n                    \"operationId\": \"update_item_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"The description of the item\",\n                                \"anyOf\": [\n                                    {\"maxLength\": 300, \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"The description of the item\",\n                                \"maxLength\": 300,\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"price\": {\n                            \"title\": \"Price\",\n                            \"exclusiveMinimum\": 0.0,\n                            \"type\": \"number\",\n                            \"description\": \"The price must be greater than zero\",\n                        },\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"Body_update_item_items__item_id__put\": {\n                    \"title\": \"Body_update_item_items__item_id__put\",\n                    \"required\": [\"item\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial003.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_login():\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n\n\ndef test_login_incorrect_password():\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_login_incorrect_username():\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_no_token():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_token():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    }\n\n\ndef test_incorrect_token():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_incorrect_token_type():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_inactive_user():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_token_post\": {\n                    \"title\": \"Body_login_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial006_an.py": "from base64 import b64encode\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial006_an import app\n\nclient = TestClient(app)\n\n\ndef test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n\n\ndef test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n\n\ndef test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial001_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial001_an import app\n\nclient = TestClient(app)\n\n\ndef test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\ndef test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial005_py39.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial005_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef get_access_token(\n    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token\n\n\n@needs_py39\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"\n\n\n@needs_py39\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py39\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py39\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_token(client: TestClient):\n    access_token = get_access_token(scope=\"me\", client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }\n\n\n@needs_py39\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_verify_password():\n    from docs_src.security.tutorial005_py39 import fake_users_db, verify_password\n\n    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n\n\n@needs_py39\ndef test_get_password_hash():\n    from docs_src.security.tutorial005_py39 import get_password_hash\n\n    assert get_password_hash(\"secretalice\")\n\n\n@needs_py39\ndef test_create_access_token():\n    from docs_src.security.tutorial005_py39 import create_access_token\n\n    access_token = create_access_token(data={\"data\": \"foo\"})\n    assert access_token\n\n\n@needs_py39\ndef test_token_no_sub(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_no_username(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_no_scope(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_nonexistent_user(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_inactive_user(client: TestClient):\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py39\ndef test_read_items(client: TestClient):\n    access_token = get_access_token(scope=\"me items\", client=client)\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n\n\n@needs_py39\ndef test_read_system_status(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}\n\n\n@needs_py39\ndef test_read_system_status_no_token(client: TestClient):\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial005.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial005 import (\n    app,\n    create_access_token,\n    fake_users_db,\n    get_password_hash,\n    verify_password,\n)\n\nclient = TestClient(app)\n\n\ndef get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token\n\n\ndef test_login():\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"\n\n\ndef test_login_incorrect_password():\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_login_incorrect_username():\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_no_token():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_token():\n    access_token = get_access_token(scope=\"me\")\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }\n\n\ndef test_incorrect_token():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_incorrect_token_type():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_verify_password():\n    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n\n\ndef test_get_password_hash():\n    assert get_password_hash(\"secretalice\")\n\n\ndef test_create_access_token():\n    access_token = create_access_token(data={\"data\": \"foo\"})\n    assert access_token\n\n\ndef test_token_no_sub():\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_no_username():\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_no_scope():\n    access_token = get_access_token()\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_nonexistent_user():\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_inactive_user():\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\"\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\ndef test_read_items():\n    access_token = get_access_token(scope=\"me items\")\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n\n\ndef test_read_system_status():\n    access_token = get_access_token()\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}\n\n\ndef test_read_system_status_no_token():\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial003_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial003_an import app\n\nclient = TestClient(app)\n\n\ndef test_login():\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n\n\ndef test_login_incorrect_password():\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_login_incorrect_username():\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_no_token():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_token():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    }\n\n\ndef test_incorrect_token():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_incorrect_token_type():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_inactive_user():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_token_post\": {\n                    \"title\": \"Body_login_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial003_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial003_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n\n\n@needs_py310\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    }\n\n\n@needs_py310\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_inactive_user(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_token_post\": {\n                    \"title\": \"Body_login_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial003_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial003_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n\n\n@needs_py310\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    }\n\n\n@needs_py310\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_inactive_user(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_token_post\": {\n                    \"title\": \"Body_login_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_no_token():\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\ndef test_incorrect_token():\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial006_an_py39.py": "from base64 import b64encode\n\nimport pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial006_an import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_security_http_basic(client: TestClient):\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n\n\n@needs_py39\ndef test_security_http_basic_no_credentials(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n\n\n@needs_py39\ndef test_security_http_basic_invalid_credentials(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\n@needs_py39\ndef test_security_http_basic_non_basic_credentials(client: TestClient):\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }\n", "tests/test_tutorial/test_security/__init__.py": "", "tests/test_tutorial/test_security/test_tutorial006.py": "from base64 import b64encode\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial006 import app\n\nclient = TestClient(app)\n\n\ndef test_security_http_basic():\n    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n\n\ndef test_security_http_basic_no_credentials():\n    response = client.get(\"/users/me\")\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n\n\ndef test_security_http_basic_invalid_credentials():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_security_http_basic_non_basic_credentials():\n    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n    auth_header = f\"Basic {payload}\"\n    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n    assert response.status_code == 401, response.text\n    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Current User\",\n                    \"operationId\": \"read_current_user_users_me_get\",\n                    \"security\": [{\"HTTPBasic\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial001_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_no_token(client: TestClient):\n    response = client.get(\"/items\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_token(client: TestClient):\n    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"token\": \"testtoken\"}\n\n\n@needs_py39\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            }\n        },\n        \"components\": {\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial003_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial003_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n\n\n@needs_py39\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py39\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py39\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    }\n\n\n@needs_py39\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_inactive_user(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login\",\n                    \"operationId\": \"login_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me_get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_login_token_post\": {\n                    \"title\": \"Body_login_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial005_an_py39.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial005_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef get_access_token(\n    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token\n\n\n@needs_py39\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"\n\n\n@needs_py39\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py39\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py39\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_token(client: TestClient):\n    access_token = get_access_token(scope=\"me\", client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }\n\n\n@needs_py39\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_verify_password():\n    from docs_src.security.tutorial005_an_py39 import fake_users_db, verify_password\n\n    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n\n\n@needs_py39\ndef test_get_password_hash():\n    from docs_src.security.tutorial005_an_py39 import get_password_hash\n\n    assert get_password_hash(\"secretalice\")\n\n\n@needs_py39\ndef test_create_access_token():\n    from docs_src.security.tutorial005_an_py39 import create_access_token\n\n    access_token = create_access_token(data={\"data\": \"foo\"})\n    assert access_token\n\n\n@needs_py39\ndef test_token_no_sub(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_no_username(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_no_scope(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_nonexistent_user(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py39\ndef test_token_inactive_user(client: TestClient):\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py39\ndef test_read_items(client: TestClient):\n    access_token = get_access_token(scope=\"me items\", client=client)\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n\n\n@needs_py39\ndef test_read_system_status(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}\n\n\n@needs_py39\ndef test_read_system_status_no_token(client: TestClient):\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial005_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial005_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef get_access_token(\n    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token\n\n\n@needs_py310\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"\n\n\n@needs_py310\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_token(client: TestClient):\n    access_token = get_access_token(scope=\"me\", client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }\n\n\n@needs_py310\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_verify_password():\n    from docs_src.security.tutorial005_py310 import fake_users_db, verify_password\n\n    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n\n\n@needs_py310\ndef test_get_password_hash():\n    from docs_src.security.tutorial005_py310 import get_password_hash\n\n    assert get_password_hash(\"secretalice\")\n\n\n@needs_py310\ndef test_create_access_token():\n    from docs_src.security.tutorial005_py310 import create_access_token\n\n    access_token = create_access_token(data={\"data\": \"foo\"})\n    assert access_token\n\n\n@needs_py310\ndef test_token_no_sub(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_no_username(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_no_scope(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_nonexistent_user(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_inactive_user(client: TestClient):\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py310\ndef test_read_items(client: TestClient):\n    access_token = get_access_token(scope=\"me items\", client=client)\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n\n\n@needs_py310\ndef test_read_system_status(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}\n\n\n@needs_py310\ndef test_read_system_status_no_token(client: TestClient):\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial005_an.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.security.tutorial005_an import (\n    app,\n    create_access_token,\n    fake_users_db,\n    get_password_hash,\n    verify_password,\n)\n\nclient = TestClient(app)\n\n\ndef get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token\n\n\ndef test_login():\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"\n\n\ndef test_login_incorrect_password():\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_login_incorrect_username():\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\ndef test_no_token():\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_token():\n    access_token = get_access_token(scope=\"me\")\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }\n\n\ndef test_incorrect_token():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_incorrect_token_type():\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_verify_password():\n    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n\n\ndef test_get_password_hash():\n    assert get_password_hash(\"secretalice\")\n\n\ndef test_create_access_token():\n    access_token = create_access_token(data={\"data\": \"foo\"})\n    assert access_token\n\n\ndef test_token_no_sub():\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_no_username():\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_no_scope():\n    access_token = get_access_token()\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_nonexistent_user():\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\ndef test_token_inactive_user():\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\"\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\ndef test_read_items():\n    access_token = get_access_token(scope=\"me items\")\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n\n\ndef test_read_system_status():\n    access_token = get_access_token()\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}\n\n\ndef test_read_system_status_no_token():\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_security/test_tutorial005_an_py310.py": "import pytest\nfrom dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.security.tutorial005_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef get_access_token(\n    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n):\n    data = {\"username\": username, \"password\": password}\n    if scope:\n        data[\"scope\"] = scope\n    response = client.post(\"/token\", data=data)\n    content = response.json()\n    access_token = content.get(\"access_token\")\n    return access_token\n\n\n@needs_py310\ndef test_login(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n    assert response.status_code == 200, response.text\n    content = response.json()\n    assert \"access_token\" in content\n    assert content[\"token_type\"] == \"bearer\"\n\n\n@needs_py310\ndef test_login_incorrect_password(client: TestClient):\n    response = client.post(\n        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_login_incorrect_username(client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n\n\n@needs_py310\ndef test_no_token(client: TestClient):\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_token(client: TestClient):\n    access_token = get_access_token(scope=\"me\", client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"disabled\": False,\n    }\n\n\n@needs_py310\ndef test_incorrect_token(client: TestClient):\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_incorrect_token_type(client: TestClient):\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_verify_password():\n    from docs_src.security.tutorial005_an_py310 import fake_users_db, verify_password\n\n    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n\n\n@needs_py310\ndef test_get_password_hash():\n    from docs_src.security.tutorial005_an_py310 import get_password_hash\n\n    assert get_password_hash(\"secretalice\")\n\n\n@needs_py310\ndef test_create_access_token():\n    from docs_src.security.tutorial005_an_py310 import create_access_token\n\n    access_token = create_access_token(data={\"data\": \"foo\"})\n    assert access_token\n\n\n@needs_py310\ndef test_token_no_sub(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_no_username(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_no_scope(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not enough permissions\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_nonexistent_user(client: TestClient):\n    response = client.get(\n        \"/users/me\",\n        headers={\n            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n        },\n    )\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n\n\n@needs_py310\ndef test_token_inactive_user(client: TestClient):\n    access_token = get_access_token(\n        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n    )\n    response = client.get(\n        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\n@needs_py310\ndef test_read_items(client: TestClient):\n    access_token = get_access_token(scope=\"me items\", client=client)\n    response = client.get(\n        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n\n\n@needs_py310\ndef test_read_system_status(client: TestClient):\n    access_token = get_access_token(client=client)\n    response = client.get(\n        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"status\": \"ok\"}\n\n\n@needs_py310\ndef test_read_system_status_no_token(client: TestClient):\n    response = client.get(\"/status/\")\n    assert response.status_code == 401, response.text\n    assert response.json() == {\"detail\": \"Not authenticated\"}\n    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/token\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Login For Access Token\",\n                    \"operationId\": \"login_for_access_token_token_post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/users/me/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Users Me\",\n                    \"operationId\": \"read_users_me_users_me__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n                }\n            },\n            \"/users/me/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Own Items\",\n                    \"operationId\": \"read_own_items_users_me_items__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n                }\n            },\n            \"/status/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read System Status\",\n                    \"operationId\": \"read_system_status_status__get\",\n                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": IsOneOf(\n                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"username\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": IsDict(\n                            {\n                                \"title\": \"Email\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Email\", \"type\": \"string\"}\n                        ),\n                        \"full_name\": IsDict(\n                            {\n                                \"title\": \"Full Name\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Full Name\", \"type\": \"string\"}\n                        ),\n                        \"disabled\": IsDict(\n                            {\n                                \"title\": \"Disabled\",\n                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n                        ),\n                    },\n                },\n                \"Token\": {\n                    \"title\": \"Token\",\n                    \"required\": [\"access_token\", \"token_type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n                    },\n                },\n                \"Body_login_for_access_token_token_post\": {\n                    \"title\": \"Body_login_for_access_token_token_post\",\n                    \"required\": [\"username\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"grant_type\": IsDict(\n                            {\n                                \"title\": \"Grant Type\",\n                                \"anyOf\": [\n                                    {\"pattern\": \"password\", \"type\": \"string\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Grant Type\",\n                                \"pattern\": \"password\",\n                                \"type\": \"string\",\n                            }\n                        ),\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n                        \"client_id\": IsDict(\n                            {\n                                \"title\": \"Client Id\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Id\", \"type\": \"string\"}\n                        ),\n                        \"client_secret\": IsDict(\n                            {\n                                \"title\": \"Client Secret\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            },\n            \"securitySchemes\": {\n                \"OAuth2PasswordBearer\": {\n                    \"type\": \"oauth2\",\n                    \"flows\": {\n                        \"password\": {\n                            \"scopes\": {\n                                \"me\": \"Read information about the current user.\",\n                                \"items\": \"Read items.\",\n                            },\n                            \"tokenUrl\": \"token\",\n                        }\n                    },\n                }\n            },\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008c_an_py39.py": "import pytest\nfrom fastapi.exceptions import FastAPIError\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008c_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n\n\n@needs_py39\ndef test_get(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"\n\n\n@needs_py39\ndef test_fastapi_error(client: TestClient):\n    with pytest.raises(FastAPIError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert \"No response object was returned\" in exc_info.value.args[0]\n\n\n@needs_py39\ndef test_internal_server_error():\n    from docs_src.dependencies.tutorial008c_an_py39 import app\n\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"\n", "tests/test_tutorial/test_dependencies/test_tutorial006_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial006_an import app\n\nclient = TestClient(app)\n\n\ndef test_get_no_headers():\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_get_invalid_one_header():\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_get_invalid_second_header():\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\ndef test_get_valid_headers():\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial001_an import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n    ],\n)\ndef test_get(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008c.py": "import pytest\nfrom fastapi.exceptions import FastAPIError\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008c import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n\n\ndef test_get(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"\n\n\ndef test_fastapi_error(client: TestClient):\n    with pytest.raises(FastAPIError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert \"No response object was returned\" in exc_info.value.args[0]\n\n\ndef test_internal_server_error():\n    from docs_src.dependencies.tutorial008c import app\n\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"\n", "tests/test_tutorial/test_dependencies/test_tutorial004.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial004 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/items\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ]\n            },\n        ),\n        (\n            \"/items?q=foo\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ],\n                \"q\": \"foo\",\n            },\n        ),\n        (\n            \"/items?q=foo&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n        ),\n        (\n            \"/items?q=bar&limit=2\",\n            200,\n            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?q=bar&skip=1&limit=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?limit=1&q=bar&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n    ],\n)\ndef test_get(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008d.py": "import pytest\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008d import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n\n\ndef test_get(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"\n\n\ndef test_internal_error(client: TestClient):\n    from docs_src.dependencies.tutorial008d import InternalError\n\n    with pytest.raises(InternalError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert (\n        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n    )\n\n\ndef test_internal_server_error():\n    from docs_src.dependencies.tutorial008d import app\n\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"\n", "tests/test_tutorial/test_dependencies/test_tutorial004_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial004_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/items\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ]\n            },\n        ),\n        (\n            \"/items?q=foo\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ],\n                \"q\": \"foo\",\n            },\n        ),\n        (\n            \"/items?q=foo&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n        ),\n        (\n            \"/items?q=bar&limit=2\",\n            200,\n            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?q=bar&skip=1&limit=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?limit=1&q=bar&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008b_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008b_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\n@needs_py39\ndef test_owner_error(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n\n\n@needs_py39\ndef test_get_item(client: TestClient):\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n", "tests/test_tutorial/test_dependencies/test_tutorial008d_an.py": "import pytest\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008d_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n\n\ndef test_get(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"\n\n\ndef test_internal_error(client: TestClient):\n    from docs_src.dependencies.tutorial008d_an import InternalError\n\n    with pytest.raises(InternalError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert (\n        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n    )\n\n\ndef test_internal_server_error():\n    from docs_src.dependencies.tutorial008d_an import app\n\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"\n", "tests/test_tutorial/test_dependencies/test_tutorial012_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial012_an import app\n\nclient = TestClient(app)\n\n\ndef test_get_no_headers_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_get_no_headers_users():\n    response = client.get(\"/users/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_get_invalid_one_header_items():\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_get_invalid_one_users():\n    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_get_invalid_second_header_items():\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\ndef test_get_invalid_second_header_users():\n    response = client.get(\n        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\ndef test_get_valid_headers_items():\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\ndef test_get_valid_headers_users():\n    response = client.get(\n        \"/users/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008b.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial008b import app\n\nclient = TestClient(app)\n\n\ndef test_get_no_item():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_owner_error():\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n\n\ndef test_get_item():\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n", "tests/test_tutorial/test_dependencies/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial001 import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n    ],\n)\ndef test_get(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial012.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial012 import app\n\nclient = TestClient(app)\n\n\ndef test_get_no_headers_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_get_no_headers_users():\n    response = client.get(\"/users/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_get_invalid_one_header_items():\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_get_invalid_one_users():\n    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_get_invalid_second_header_items():\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\ndef test_get_invalid_second_header_users():\n    response = client.get(\n        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\ndef test_get_valid_headers_items():\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\ndef test_get_valid_headers_users():\n    response = client.get(\n        \"/users/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008d_an_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008d_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n\n\n@needs_py39\ndef test_get(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"\n\n\n@needs_py39\ndef test_internal_error(client: TestClient):\n    from docs_src.dependencies.tutorial008d_an_py39 import InternalError\n\n    with pytest.raises(InternalError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert (\n        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n    )\n\n\n@needs_py39\ndef test_internal_server_error():\n    from docs_src.dependencies.tutorial008d_an_py39 import app\n\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"\n", "tests/test_tutorial/test_dependencies/test_tutorial012_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial012_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_no_headers_items(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_get_no_headers_users(client: TestClient):\n    response = client.get(\"/users/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_get_invalid_one_header_items(client: TestClient):\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_get_invalid_one_users(client: TestClient):\n    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_get_invalid_second_header_items(client: TestClient):\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\n@needs_py39\ndef test_get_invalid_second_header_users(client: TestClient):\n    response = client.get(\n        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\n@needs_py39\ndef test_get_valid_headers_items(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@needs_py39\ndef test_get_valid_headers_users(client: TestClient):\n    response = client.get(\n        \"/users/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial004_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial004_an import app\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/items\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ]\n            },\n        ),\n        (\n            \"/items?q=foo\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ],\n                \"q\": \"foo\",\n            },\n        ),\n        (\n            \"/items?q=foo&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n        ),\n        (\n            \"/items?q=bar&limit=2\",\n            200,\n            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?q=bar&skip=1&limit=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?limit=1&q=bar&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n    ],\n)\ndef test_get(path, expected_status, expected_response):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial004_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial004_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/items\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ]\n            },\n        ),\n        (\n            \"/items?q=foo\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ],\n                \"q\": \"foo\",\n            },\n        ),\n        (\n            \"/items?q=foo&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n        ),\n        (\n            \"/items?q=bar&limit=2\",\n            200,\n            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?q=bar&skip=1&limit=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?limit=1&q=bar&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial006_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial006_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_no_headers(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_get_invalid_one_header(client: TestClient):\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\n@needs_py39\ndef test_get_invalid_second_header(client: TestClient):\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\n@needs_py39\ndef test_get_valid_headers(client: TestClient):\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/__init__.py": "", "tests/test_tutorial/test_dependencies/test_tutorial006.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial006 import app\n\nclient = TestClient(app)\n\n\ndef test_get_no_headers():\n    response = client.get(\"/items/\")\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n                {\n                    \"type\": \"missing\",\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"Field required\",\n                    \"input\": None,\n                },\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"header\", \"x-token\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n                {\n                    \"loc\": [\"header\", \"x-key\"],\n                    \"msg\": \"field required\",\n                    \"type\": \"value_error.missing\",\n                },\n            ]\n        }\n    )\n\n\ndef test_get_invalid_one_header():\n    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_get_invalid_second_header():\n    response = client.get(\n        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n    )\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n\n\ndef test_get_valid_headers():\n    response = client.get(\n        \"/items/\",\n        headers={\n            \"X-Token\": \"fake-super-secret-token\",\n            \"X-Key\": \"fake-super-secret-key\",\n        },\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n                            \"name\": \"x-token\",\n                            \"in\": \"header\",\n                        },\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n                            \"name\": \"x-key\",\n                            \"in\": \"header\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial001_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial004_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial004_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\n            \"/items\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ]\n            },\n        ),\n        (\n            \"/items?q=foo\",\n            200,\n            {\n                \"items\": [\n                    {\"item_name\": \"Foo\"},\n                    {\"item_name\": \"Bar\"},\n                    {\"item_name\": \"Baz\"},\n                ],\n                \"q\": \"foo\",\n            },\n        ),\n        (\n            \"/items?q=foo&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n        ),\n        (\n            \"/items?q=bar&limit=2\",\n            200,\n            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?q=bar&skip=1&limit=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n        (\n            \"/items?limit=1&q=bar&skip=1\",\n            200,\n            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n        ),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial001_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,expected_status,expected_response\",\n    [\n        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n    ],\n)\ndef test_get(path, expected_status, expected_response, client: TestClient):\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Q\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Q\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"q\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dependencies/test_tutorial008b_an.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.dependencies.tutorial008b_an import app\n\nclient = TestClient(app)\n\n\ndef test_get_no_item():\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_owner_error():\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 400, response.text\n    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n\n\ndef test_get_item():\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n", "tests/test_tutorial/test_dependencies/test_tutorial008c_an.py": "import pytest\nfrom fastapi.exceptions import FastAPIError\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.dependencies.tutorial008c_an import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_get_no_item(client: TestClient):\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 404, response.text\n    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n\n\ndef test_get(client: TestClient):\n    response = client.get(\"/items/plumbus\")\n    assert response.status_code == 200, response.text\n    assert response.json() == \"plumbus\"\n\n\ndef test_fastapi_error(client: TestClient):\n    with pytest.raises(FastAPIError) as exc_info:\n        client.get(\"/items/portal-gun\")\n    assert \"No response object was returned\" in exc_info.value.args[0]\n\n\ndef test_internal_server_error():\n    from docs_src.dependencies.tutorial008c_an import app\n\n    client = TestClient(app, raise_server_exceptions=False)\n    response = client.get(\"/items/portal-gun\")\n    assert response.status_code == 500, response.text\n    assert response.text == \"Internal Server Error\"\n", "tests/test_tutorial/test_background_tasks/test_tutorial002_py310.py": "import os\nfrom pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@needs_py310\ndef test():\n    from docs_src.background_tasks.tutorial002_py310 import app\n\n    client = TestClient(app)\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Message sent\"}\n    with open(\"./log.txt\") as f:\n        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n", "tests/test_tutorial/test_background_tasks/test_tutorial002_an_py39.py": "import os\nfrom pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@needs_py39\ndef test():\n    from docs_src.background_tasks.tutorial002_an_py39 import app\n\n    client = TestClient(app)\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Message sent\"}\n    with open(\"./log.txt\") as f:\n        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n", "tests/test_tutorial/test_background_tasks/test_tutorial002_an_py310.py": "import os\nfrom pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@needs_py310\ndef test():\n    from docs_src.background_tasks.tutorial002_an_py310 import app\n\n    client = TestClient(app)\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Message sent\"}\n    with open(\"./log.txt\") as f:\n        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n", "tests/test_tutorial/test_background_tasks/test_tutorial002_an.py": "import os\nfrom pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.background_tasks.tutorial002_an import app\n\nclient = TestClient(app)\n\n\ndef test():\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Message sent\"}\n    with open(\"./log.txt\") as f:\n        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n", "tests/test_tutorial/test_background_tasks/test_tutorial001.py": "import os\nfrom pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.background_tasks.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test():\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Notification sent in the background\"}\n    with open(\"./log.txt\") as f:\n        assert \"notification for foo@example.com: some notification\" in f.read()\n", "tests/test_tutorial/test_background_tasks/test_tutorial002.py": "import os\nfrom pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.background_tasks.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test():\n    log = Path(\"log.txt\")\n    if log.is_file():\n        os.remove(log)  # pragma: no cover\n    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Message sent\"}\n    with open(\"./log.txt\") as f:\n        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n", "tests/test_tutorial/test_background_tasks/__init__.py": "", "tests/test_tutorial/test_sql_databases/test_sql_databases_middleware_py310.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv1\n\n\n@pytest.fixture(scope=\"module\")\ndef client(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./sql_app.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app_py310 import alt_main\n\n    # Ensure import side effects are re-executed\n    importlib.reload(alt_main)\n\n    with TestClient(alt_main.app) as c:\n        yield c\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_user(client):\n    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert test_user[\"email\"] == data[\"email\"]\n    assert \"id\" in data\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 400, response.text\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_user(client):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data\n    assert \"id\" in data\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_nonexistent_user(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404, response.text\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_users(client):\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data[0]\n    assert \"id\" in data[0]\n\n\n@needs_py310\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_create_item(client):\n    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n    response = client.post(\"/users/1/items/\", json=item)\n    assert response.status_code == 200, response.text\n    item_data = response.json()\n    assert item[\"title\"] == item_data[\"title\"]\n    assert item[\"description\"] == item_data[\"description\"]\n    assert \"id\" in item_data\n    assert \"owner_id\" in item_data\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n\n\n@needs_py310\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_read_items(client):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data\n    first_item = data[0]\n    assert \"title\" in first_item\n    assert \"description\" in first_item\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Users Users  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                },\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_users__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item For User\",\n                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ItemCreate\": {\n                    \"title\": \"ItemCreate\",\n                    \"required\": [\"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"id\", \"owner_id\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"},\n                        ),\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"email\", \"id\", \"is_active\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"UserCreate\": {\n                    \"title\": \"UserCreate\",\n                    \"required\": [\"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_sql_databases/test_testing_databases_py39.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\n\nfrom ...utils import needs_py39, needs_pydanticv1\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./test.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app_py39.tests import test_sql_app\n\n    # Ensure import side effects are re-executed\n    importlib.reload(test_sql_app)\n    test_sql_app.test_create_user()\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n", "tests/test_tutorial/test_sql_databases/test_testing_databases.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\n\nfrom ...utils import needs_pydanticv1\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_testing_dbs(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./test.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app.tests import test_sql_app\n\n    # Ensure import side effects are re-executed\n    importlib.reload(test_sql_app)\n    test_sql_app.test_create_user()\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n", "tests/test_tutorial/test_sql_databases/test_sql_databases_py39.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39, needs_pydanticv1\n\n\n@pytest.fixture(scope=\"module\", name=\"client\")\ndef get_client(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./sql_app.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app_py39 import main\n\n    # Ensure import side effects are re-executed\n    importlib.reload(main)\n    with TestClient(main.app) as c:\n        yield c\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_user(client):\n    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert test_user[\"email\"] == data[\"email\"]\n    assert \"id\" in data\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 400, response.text\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_user(client):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data\n    assert \"id\" in data\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_nonexistent_user(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404, response.text\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_users(client):\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data[0]\n    assert \"id\" in data[0]\n\n\n@needs_py39\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_create_item(client):\n    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n    response = client.post(\"/users/1/items/\", json=item)\n    assert response.status_code == 200, response.text\n    item_data = response.json()\n    assert item[\"title\"] == item_data[\"title\"]\n    assert item[\"description\"] == item_data[\"description\"]\n    assert \"id\" in item_data\n    assert \"owner_id\" in item_data\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n\n\n@needs_py39\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_read_items(client):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data\n    first_item = data[0]\n    assert \"title\" in first_item\n    assert \"description\" in first_item\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Users Users  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                },\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_users__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item For User\",\n                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ItemCreate\": {\n                    \"title\": \"ItemCreate\",\n                    \"required\": [\"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"id\", \"owner_id\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"},\n                        ),\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"email\", \"id\", \"is_active\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"UserCreate\": {\n                    \"title\": \"UserCreate\",\n                    \"required\": [\"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_sql_databases/test_sql_databases_middleware_py39.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39, needs_pydanticv1\n\n\n@pytest.fixture(scope=\"module\")\ndef client(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./sql_app.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app_py39 import alt_main\n\n    # Ensure import side effects are re-executed\n    importlib.reload(alt_main)\n\n    with TestClient(alt_main.app) as c:\n        yield c\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_user(client):\n    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert test_user[\"email\"] == data[\"email\"]\n    assert \"id\" in data\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 400, response.text\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_user(client):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data\n    assert \"id\" in data\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_nonexistent_user(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404, response.text\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_users(client):\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data[0]\n    assert \"id\" in data[0]\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_item(client):\n    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n    response = client.post(\"/users/1/items/\", json=item)\n    assert response.status_code == 200, response.text\n    item_data = response.json()\n    assert item[\"title\"] == item_data[\"title\"]\n    assert item[\"description\"] == item_data[\"description\"]\n    assert \"id\" in item_data\n    assert \"owner_id\" in item_data\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_read_items(client):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data\n    first_item = data[0]\n    assert \"title\" in first_item\n    assert \"description\" in first_item\n\n\n@needs_py39\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Users Users  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                },\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_users__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item For User\",\n                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ItemCreate\": {\n                    \"title\": \"ItemCreate\",\n                    \"required\": [\"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"id\", \"owner_id\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"},\n                        ),\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"email\", \"id\", \"is_active\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"UserCreate\": {\n                    \"title\": \"UserCreate\",\n                    \"required\": [\"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_sql_databases/test_sql_databases_middleware.py": "import importlib\nfrom pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv1\n\n\n@pytest.fixture(scope=\"module\")\ndef client():\n    test_db = Path(\"./sql_app.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app import alt_main\n\n    # Ensure import side effects are re-executed\n    importlib.reload(alt_main)\n\n    with TestClient(alt_main.app) as c:\n        yield c\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_user(client):\n    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert test_user[\"email\"] == data[\"email\"]\n    assert \"id\" in data\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 400, response.text\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_user(client):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data\n    assert \"id\" in data\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_nonexistent_user(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404, response.text\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_users(client):\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data[0]\n    assert \"id\" in data[0]\n\n\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_create_item(client):\n    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n    response = client.post(\"/users/1/items/\", json=item)\n    assert response.status_code == 200, response.text\n    item_data = response.json()\n    assert item[\"title\"] == item_data[\"title\"]\n    assert item[\"description\"] == item_data[\"description\"]\n    assert \"id\" in item_data\n    assert \"owner_id\" in item_data\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n\n\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_read_items(client):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data\n    first_item = data[0]\n    assert \"title\" in first_item\n    assert \"description\" in first_item\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Users Users  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                },\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_users__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item For User\",\n                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ItemCreate\": {\n                    \"title\": \"ItemCreate\",\n                    \"required\": [\"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"id\", \"owner_id\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"},\n                        ),\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"email\", \"id\", \"is_active\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"UserCreate\": {\n                    \"title\": \"UserCreate\",\n                    \"required\": [\"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_sql_databases/test_sql_databases_py310.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310, needs_pydanticv1\n\n\n@pytest.fixture(scope=\"module\", name=\"client\")\ndef get_client(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./sql_app.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app_py310 import main\n\n    # Ensure import side effects are re-executed\n    importlib.reload(main)\n    with TestClient(main.app) as c:\n        yield c\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_user(client):\n    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert test_user[\"email\"] == data[\"email\"]\n    assert \"id\" in data\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 400, response.text\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_user(client):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data\n    assert \"id\" in data\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_nonexistent_user(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404, response.text\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_users(client):\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data[0]\n    assert \"id\" in data[0]\n\n\n@needs_py310\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_create_item(client):\n    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n    response = client.post(\"/users/1/items/\", json=item)\n    assert response.status_code == 200, response.text\n    item_data = response.json()\n    assert item[\"title\"] == item_data[\"title\"]\n    assert item[\"description\"] == item_data[\"description\"]\n    assert \"id\" in item_data\n    assert \"owner_id\" in item_data\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n\n\n@needs_py310\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_read_items(client):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data\n    first_item = data[0]\n    assert \"title\" in first_item\n    assert \"description\" in first_item\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Users Users  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                },\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_users__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item For User\",\n                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ItemCreate\": {\n                    \"title\": \"ItemCreate\",\n                    \"required\": [\"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"id\", \"owner_id\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"},\n                        ),\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"email\", \"id\", \"is_active\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"UserCreate\": {\n                    \"title\": \"UserCreate\",\n                    \"required\": [\"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_sql_databases/test_sql_databases.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv1\n\n\n@pytest.fixture(scope=\"module\")\ndef client(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./sql_app.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app import main\n\n    # Ensure import side effects are re-executed\n    importlib.reload(main)\n    with TestClient(main.app) as c:\n        yield c\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_user(client):\n    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert test_user[\"email\"] == data[\"email\"]\n    assert \"id\" in data\n    response = client.post(\"/users/\", json=test_user)\n    assert response.status_code == 400, response.text\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_user(client):\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data\n    assert \"id\" in data\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_nonexistent_user(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404, response.text\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_get_users(client):\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert \"email\" in data[0]\n    assert \"id\" in data[0]\n\n\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_create_item(client):\n    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n    response = client.post(\"/users/1/items/\", json=item)\n    assert response.status_code == 200, response.text\n    item_data = response.json()\n    assert item[\"title\"] == item_data[\"title\"]\n    assert item[\"description\"] == item_data[\"description\"]\n    assert \"id\" in item_data\n    assert \"owner_id\" in item_data\n    response = client.get(\"/users/1\")\n    assert response.status_code == 200, response.text\n    user_data = response.json()\n    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n    assert item_to_check[\"title\"] == item[\"title\"]\n    assert item_to_check[\"description\"] == item[\"description\"]\n\n\n# TODO: pv2 add Pydantic v2 version\n@needs_pydanticv1\ndef test_read_items(client):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data\n    first_item = data[0]\n    assert \"title\" in first_item\n    assert \"description\" in first_item\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Users Users  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Users\",\n                    \"operationId\": \"read_users_users__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                },\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"create_user_users__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                },\n            },\n            \"/users/{user_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read User\",\n                    \"operationId\": \"read_user_users__user_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            },\n            \"/users/{user_id}/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Item For User\",\n                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                            \"name\": \"user_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Skip\",\n                                \"type\": \"integer\",\n                                \"default\": 0,\n                            },\n                            \"name\": \"skip\",\n                            \"in\": \"query\",\n                        },\n                        {\n                            \"required\": False,\n                            \"schema\": {\n                                \"title\": \"Limit\",\n                                \"type\": \"integer\",\n                                \"default\": 100,\n                            },\n                            \"name\": \"limit\",\n                            \"in\": \"query\",\n                        },\n                    ],\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ItemCreate\": {\n                    \"title\": \"ItemCreate\",\n                    \"required\": [\"title\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"title\", \"id\", \"owner_id\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"},\n                        ),\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n                    },\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"email\", \"id\", \"is_active\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"UserCreate\": {\n                    \"title\": \"UserCreate\",\n                    \"required\": [\"email\", \"password\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_sql_databases/__init__.py": "", "tests/test_tutorial/test_sql_databases/test_testing_databases_py310.py": "import importlib\nimport os\nfrom pathlib import Path\n\nimport pytest\n\nfrom ...utils import needs_py310, needs_pydanticv1\n\n\n@needs_py310\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):\n    tmp_path = tmp_path_factory.mktemp(\"data\")\n    cwd = os.getcwd()\n    os.chdir(tmp_path)\n    test_db = Path(\"./test.db\")\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    # Import while creating the client to create the DB after starting the test session\n    from docs_src.sql_databases.sql_app_py310.tests import test_sql_app\n\n    # Ensure import side effects are re-executed\n    importlib.reload(test_sql_app)\n    test_sql_app.test_create_user()\n    if test_db.is_file():  # pragma: nocover\n        test_db.unlink()\n    os.chdir(cwd)\n", "tests/test_tutorial/test_extra_models/test_tutorial003.py": "from dirty_equals import IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.extra_models.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_get_car():\n    response = client.get(\"/items/item1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"description\": \"All my friends drive a low rider\",\n        \"type\": \"car\",\n    }\n\n\ndef test_get_plane():\n    response = client.get(\"/items/item2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Item Items  Item Id  Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/PlaneItem\"},\n                                            {\"$ref\": \"#/components/schemas/CarItem\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"PlaneItem\": {\n                    \"title\": \"PlaneItem\",\n                    \"required\": IsOneOf(\n                        [\"description\", \"type\", \"size\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"description\", \"size\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"plane\"},\n                        \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n                    },\n                },\n                \"CarItem\": {\n                    \"title\": \"CarItem\",\n                    \"required\": IsOneOf(\n                        [\"description\", \"type\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"description\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"car\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_models/test_tutorial005_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.extra_models.tutorial005_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_items(client: TestClient):\n    response = client.get(\"/keyword-weights/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/keyword-weights/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Keyword Weights Keyword Weights  Get\",\n                                        \"type\": \"object\",\n                                        \"additionalProperties\": {\"type\": \"number\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Keyword Weights\",\n                    \"operationId\": \"read_keyword_weights_keyword_weights__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_models/test_tutorial004_py39.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.extra_models.tutorial004_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_get_items(client: TestClient):\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n    ]\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_models/test_tutorial004.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.extra_models.tutorial004 import app\n\nclient = TestClient(app)\n\n\ndef test_get_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n    ]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Items Items  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"description\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_models/test_tutorial005.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.extra_models.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_get_items():\n    response = client.get(\"/keyword-weights/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/keyword-weights/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Keyword Weights Keyword Weights  Get\",\n                                        \"type\": \"object\",\n                                        \"additionalProperties\": {\"type\": \"number\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    \"summary\": \"Read Keyword Weights\",\n                    \"operationId\": \"read_keyword_weights_keyword_weights__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_models/test_tutorial003_py310.py": "import pytest\nfrom dirty_equals import IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.extra_models.tutorial003_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_get_car(client: TestClient):\n    response = client.get(\"/items/item1\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"description\": \"All my friends drive a low rider\",\n        \"type\": \"car\",\n    }\n\n\n@needs_py310\ndef test_get_plane(client: TestClient):\n    response = client.get(\"/items/item2\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    }\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Read Item Items  Item Id  Get\",\n                                        \"anyOf\": [\n                                            {\"$ref\": \"#/components/schemas/PlaneItem\"},\n                                            {\"$ref\": \"#/components/schemas/CarItem\"},\n                                        ],\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Item\",\n                    \"operationId\": \"read_item_items__item_id__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"PlaneItem\": {\n                    \"title\": \"PlaneItem\",\n                    \"required\": IsOneOf(\n                        [\"description\", \"type\", \"size\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"description\", \"size\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"plane\"},\n                        \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n                    },\n                },\n                \"CarItem\": {\n                    \"title\": \"CarItem\",\n                    \"required\": IsOneOf(\n                        [\"description\", \"type\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"description\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"car\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_models/__init__.py": "", "tests/test_tutorial/test_metadata/test_tutorial004.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.metadata.tutorial004 import app\n\nclient = TestClient(app)\n\n\ndef test_path_operations():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    response = client.get(\"/users/\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/users/\": {\n                \"get\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Get Users\",\n                    \"operationId\": \"get_users_users__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"get_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            },\n        },\n        \"tags\": [\n            {\n                \"name\": \"users\",\n                \"description\": \"Operations with users. The **login** logic is also here.\",\n            },\n            {\n                \"name\": \"items\",\n                \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                \"externalDocs\": {\n                    \"description\": \"Items external docs\",\n                    \"url\": \"https://fastapi.tiangolo.com/\",\n                },\n            },\n        ],\n    }\n", "tests/test_tutorial/test_metadata/test_tutorial001_1.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.metadata.tutorial001_1 import app\n\nclient = TestClient(app)\n\n\ndef test_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"name\": \"Katana\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\n            \"title\": \"ChimichangApp\",\n            \"summary\": \"Deadpool's favorite app. Nuff said.\",\n            \"description\": \"\\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\\n\\n## Items\\n\\nYou can **read items**.\\n\\n## Users\\n\\nYou will be able to:\\n\\n* **Create users** (_not implemented_).\\n* **Read users** (_not implemented_).\\n\",\n            \"termsOfService\": \"http://example.com/terms/\",\n            \"contact\": {\n                \"name\": \"Deadpoolio the Amazing\",\n                \"url\": \"http://x-force.example.com/contact/\",\n                \"email\": \"dp@x-force.example.com\",\n            },\n            \"license\": {\n                \"name\": \"Apache 2.0\",\n                \"identifier\": \"MIT\",\n            },\n            \"version\": \"0.0.1\",\n        },\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_metadata/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.metadata.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"name\": \"Katana\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\n            \"title\": \"ChimichangApp\",\n            \"summary\": \"Deadpool's favorite app. Nuff said.\",\n            \"description\": \"\\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\\n\\n## Items\\n\\nYou can **read items**.\\n\\n## Users\\n\\nYou will be able to:\\n\\n* **Create users** (_not implemented_).\\n* **Read users** (_not implemented_).\\n\",\n            \"termsOfService\": \"http://example.com/terms/\",\n            \"contact\": {\n                \"name\": \"Deadpoolio the Amazing\",\n                \"url\": \"http://x-force.example.com/contact/\",\n                \"email\": \"dp@x-force.example.com\",\n            },\n            \"license\": {\n                \"name\": \"Apache 2.0\",\n                \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n            },\n            \"version\": \"0.0.1\",\n        },\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_metadata/__init__.py": "", "tests/test_tutorial/test_configure_swagger_ui/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.configure_swagger_ui.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert (\n        '\"deepLinking\": false,' in response.text\n    ), \"overridden configs should be preserved\"\n    assert (\n        '\"deepLinking\": true' not in response.text\n    ), \"overridden configs should not include the old value\"\n    assert (\n        '\"syntaxHighlight\": false' not in response.text\n    ), \"not used parameters should not be included\"\n    assert (\n        '\"dom_id\": \"#swagger-ui\"' in response.text\n    ), \"default configs should be preserved\"\n    assert \"presets: [\" in response.text, \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.presets.apis,\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"layout\": \"BaseLayout\",' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showCommonExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n\n\ndef test_get_users():\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello foo\"}\n", "tests/test_tutorial/test_configure_swagger_ui/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.configure_swagger_ui.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert (\n        '\"syntaxHighlight\": false' in response.text\n    ), \"syntaxHighlight should be included and converted to JSON\"\n    assert (\n        '\"dom_id\": \"#swagger-ui\"' in response.text\n    ), \"default configs should be preserved\"\n    assert \"presets: [\" in response.text, \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.presets.apis,\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"layout\": \"BaseLayout\",' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"deepLinking\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showCommonExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n\n\ndef test_get_users():\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello foo\"}\n", "tests/test_tutorial/test_configure_swagger_ui/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.configure_swagger_ui.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_swagger_ui():\n    response = client.get(\"/docs\")\n    assert response.status_code == 200, response.text\n    assert (\n        '\"syntaxHighlight\": false' not in response.text\n    ), \"not used parameters should not be included\"\n    assert (\n        '\"syntaxHighlight.theme\": \"obsidian\"' in response.text\n    ), \"parameters with middle dots should be included in a JSON compatible way\"\n    assert (\n        '\"dom_id\": \"#swagger-ui\"' in response.text\n    ), \"default configs should be preserved\"\n    assert \"presets: [\" in response.text, \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.presets.apis,\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"layout\": \"BaseLayout\",' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"deepLinking\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n    assert (\n        '\"showCommonExtensions\": true,' in response.text\n    ), \"default configs should be preserved\"\n\n\ndef test_get_users():\n    response = client.get(\"/users/foo\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Hello foo\"}\n", "tests/test_tutorial/test_configure_swagger_ui/__init__.py": "", "tests/test_tutorial/test_generate_clients/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.generate_clients.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_post_items():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 5})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"Item received\"}\n\n\ndef test_post_users():\n    response = client.post(\n        \"/users/\", json={\"username\": \"Foo\", \"email\": \"foo@example.com\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\"message\": \"User received\"}\n\n\ndef test_get_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Get Items\",\n                    \"operationId\": \"items-get_items\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Items-Get Items\",\n                                        \"type\": \"array\",\n                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                    }\n                                }\n                            },\n                        }\n                    },\n                },\n                \"post\": {\n                    \"tags\": [\"items\"],\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"items-create_item\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseMessage\"\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n            \"/users/\": {\n                \"post\": {\n                    \"tags\": [\"users\"],\n                    \"summary\": \"Create User\",\n                    \"operationId\": \"users-create_user\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ResponseMessage\"\n                                    }\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                    },\n                },\n                \"ResponseMessage\": {\n                    \"title\": \"ResponseMessage\",\n                    \"required\": [\"message\"],\n                    \"type\": \"object\",\n                    \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n                },\n                \"User\": {\n                    \"title\": \"User\",\n                    \"required\": [\"username\", \"email\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_generate_clients/__init__.py": "", "tests/test_tutorial/test_extra_data_types/test_tutorial001_an.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.extra_data_types.tutorial001_an import app\n\nclient = TestClient(app)\n\n\ndef test_extra_types():\n    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n    data = {\n        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n        \"repeat_at\": \"15:30:00\",\n        \"process_after\": 300,\n    }\n    expected_response = data.copy()\n    expected_response.update(\n        {\n            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n            \"duration\": 176_100,\n            \"item_id\": item_id,\n        }\n    )\n    response = client.put(f\"/items/{item_id}\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"format\": \"uuid\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                    }\n                                )\n                            }\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__item_id__put\": {\n                    \"title\": \"Body_read_items_items__item_id__put\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"start_datetime\": {\n                            \"title\": \"Start Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"end_datetime\": {\n                            \"title\": \"End Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"repeat_at\": IsDict(\n                            {\n                                \"title\": \"Repeat At\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"time\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Repeat At\",\n                                \"type\": \"string\",\n                                \"format\": \"time\",\n                            }\n                        ),\n                        \"process_after\": IsDict(\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"string\",\n                                \"format\": \"duration\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"number\",\n                                \"format\": \"time-delta\",\n                            }\n                        ),\n                    },\n                    \"required\": [\"start_datetime\", \"end_datetime\", \"process_after\"],\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_data_types/test_tutorial001.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.extra_data_types.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_extra_types():\n    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n    data = {\n        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n        \"repeat_at\": \"15:30:00\",\n        \"process_after\": 300,\n    }\n    expected_response = data.copy()\n    expected_response.update(\n        {\n            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n            \"duration\": 176_100,\n            \"item_id\": item_id,\n        }\n    )\n    response = client.put(f\"/items/{item_id}\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"format\": \"uuid\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                    }\n                                )\n                            }\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__item_id__put\": {\n                    \"title\": \"Body_read_items_items__item_id__put\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"start_datetime\": {\n                            \"title\": \"Start Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"end_datetime\": {\n                            \"title\": \"End Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"repeat_at\": IsDict(\n                            {\n                                \"title\": \"Repeat At\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"time\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Repeat At\",\n                                \"type\": \"string\",\n                                \"format\": \"time\",\n                            }\n                        ),\n                        \"process_after\": IsDict(\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"string\",\n                                \"format\": \"duration\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"number\",\n                                \"format\": \"time-delta\",\n                            }\n                        ),\n                    },\n                    \"required\": [\"start_datetime\", \"end_datetime\", \"process_after\"],\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_data_types/__init__.py": "", "tests/test_tutorial/test_extra_data_types/test_tutorial001_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.extra_data_types.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_extra_types(client: TestClient):\n    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n    data = {\n        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n        \"repeat_at\": \"15:30:00\",\n        \"process_after\": 300,\n    }\n    expected_response = data.copy()\n    expected_response.update(\n        {\n            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n            \"duration\": 176_100,\n            \"item_id\": item_id,\n        }\n    )\n    response = client.put(f\"/items/{item_id}\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"format\": \"uuid\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                    }\n                                )\n                            }\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__item_id__put\": {\n                    \"title\": \"Body_read_items_items__item_id__put\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"start_datetime\": {\n                            \"title\": \"Start Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"end_datetime\": {\n                            \"title\": \"End Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"repeat_at\": IsDict(\n                            {\n                                \"title\": \"Repeat At\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"time\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Repeat At\",\n                                \"type\": \"string\",\n                                \"format\": \"time\",\n                            }\n                        ),\n                        \"process_after\": IsDict(\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"string\",\n                                \"format\": \"duration\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"number\",\n                                \"format\": \"time-delta\",\n                            }\n                        ),\n                    },\n                    \"required\": [\"start_datetime\", \"end_datetime\", \"process_after\"],\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_data_types/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.extra_data_types.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_extra_types(client: TestClient):\n    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n    data = {\n        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n        \"repeat_at\": \"15:30:00\",\n        \"process_after\": 300,\n    }\n    expected_response = data.copy()\n    expected_response.update(\n        {\n            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n            \"duration\": 176_100,\n            \"item_id\": item_id,\n        }\n    )\n    response = client.put(f\"/items/{item_id}\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == expected_response\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"format\": \"uuid\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                    }\n                                )\n                            }\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__item_id__put\": {\n                    \"title\": \"Body_read_items_items__item_id__put\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"start_datetime\": {\n                            \"title\": \"Start Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"end_datetime\": {\n                            \"title\": \"End Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"repeat_at\": IsDict(\n                            {\n                                \"title\": \"Repeat At\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"time\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Repeat At\",\n                                \"type\": \"string\",\n                                \"format\": \"time\",\n                            }\n                        ),\n                        \"process_after\": IsDict(\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"string\",\n                                \"format\": \"duration\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"number\",\n                                \"format\": \"time-delta\",\n                            }\n                        ),\n                    },\n                    \"required\": [\"start_datetime\", \"end_datetime\", \"process_after\"],\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_extra_data_types/test_tutorial001_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.extra_data_types.tutorial001_py310 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py310\ndef test_extra_types(client: TestClient):\n    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n    data = {\n        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n        \"repeat_at\": \"15:30:00\",\n        \"process_after\": 300,\n    }\n    expected_response = data.copy()\n    expected_response.update(\n        {\n            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n            \"duration\": 176_100,\n            \"item_id\": item_id,\n        }\n    )\n    response = client.put(f\"/items/{item_id}\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/{item_id}\": {\n                \"put\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__item_id__put\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\n                                \"title\": \"Item Id\",\n                                \"type\": \"string\",\n                                \"format\": \"uuid\",\n                            },\n                            \"name\": \"item_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"required\": True,\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": IsDict(\n                                    {\n                                        \"allOf\": [\n                                            {\n                                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                            }\n                                        ],\n                                        \"title\": \"Body\",\n                                    }\n                                )\n                                | IsDict(\n                                    # TODO: remove when deprecating Pydantic v1\n                                    {\n                                        \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n                                    }\n                                )\n                            }\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Body_read_items_items__item_id__put\": {\n                    \"title\": \"Body_read_items_items__item_id__put\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"start_datetime\": {\n                            \"title\": \"Start Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"end_datetime\": {\n                            \"title\": \"End Datetime\",\n                            \"type\": \"string\",\n                            \"format\": \"date-time\",\n                        },\n                        \"repeat_at\": IsDict(\n                            {\n                                \"title\": \"Repeat At\",\n                                \"anyOf\": [\n                                    {\"type\": \"string\", \"format\": \"time\"},\n                                    {\"type\": \"null\"},\n                                ],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Repeat At\",\n                                \"type\": \"string\",\n                                \"format\": \"time\",\n                            }\n                        ),\n                        \"process_after\": IsDict(\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"string\",\n                                \"format\": \"duration\",\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Process After\",\n                                \"type\": \"number\",\n                                \"format\": \"time-delta\",\n                            }\n                        ),\n                    },\n                    \"required\": [\"start_datetime\", \"end_datetime\", \"process_after\"],\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_cookie_params/test_tutorial001_an.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.cookie_params.tutorial001_an import app\n\n\n@pytest.mark.parametrize(\n    \"path,cookies,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"ads_id\": None}),\n        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n        (\n            \"/items\",\n            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n            200,\n            {\"ads_id\": \"ads_track\"},\n        ),\n        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n    ],\n)\ndef test(path, cookies, expected_status, expected_response):\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Ads Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Ads Id\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"ads_id\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_cookie_params/test_tutorial001.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.cookie_params.tutorial001 import app\n\n\n@pytest.mark.parametrize(\n    \"path,cookies,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"ads_id\": None}),\n        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n        (\n            \"/items\",\n            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n            200,\n            {\"ads_id\": \"ads_track\"},\n        ),\n        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n    ],\n)\ndef test(path, cookies, expected_status, expected_response):\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\ndef test_openapi_schema():\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Ads Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Ads Id\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"ads_id\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_cookie_params/__init__.py": "", "tests/test_tutorial/test_cookie_params/test_tutorial001_an_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,cookies,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"ads_id\": None}),\n        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n        (\n            \"/items\",\n            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n            200,\n            {\"ads_id\": \"ads_track\"},\n        ),\n        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n    ],\n)\ndef test(path, cookies, expected_status, expected_response):\n    from docs_src.cookie_params.tutorial001_an_py310 import app\n\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema():\n    from docs_src.cookie_params.tutorial001_an_py310 import app\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Ads Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Ads Id\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"ads_id\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_cookie_params/test_tutorial001_an_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@needs_py39\n@pytest.mark.parametrize(\n    \"path,cookies,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"ads_id\": None}),\n        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n        (\n            \"/items\",\n            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n            200,\n            {\"ads_id\": \"ads_track\"},\n        ),\n        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n    ],\n)\ndef test(path, cookies, expected_status, expected_response):\n    from docs_src.cookie_params.tutorial001_an_py39 import app\n\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py39\ndef test_openapi_schema():\n    from docs_src.cookie_params.tutorial001_an_py39 import app\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Ads Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Ads Id\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"ads_id\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_cookie_params/test_tutorial001_py310.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py310\n\n\n@needs_py310\n@pytest.mark.parametrize(\n    \"path,cookies,expected_status,expected_response\",\n    [\n        (\"/items\", None, 200, {\"ads_id\": None}),\n        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n        (\n            \"/items\",\n            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n            200,\n            {\"ads_id\": \"ads_track\"},\n        ),\n        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n    ],\n)\ndef test(path, cookies, expected_status, expected_response):\n    from docs_src.cookie_params.tutorial001_py310 import app\n\n    client = TestClient(app, cookies=cookies)\n    response = client.get(path)\n    assert response.status_code == expected_status\n    assert response.json() == expected_response\n\n\n@needs_py310\ndef test_openapi_schema():\n    from docs_src.cookie_params.tutorial001_py310 import app\n\n    client = TestClient(app)\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"parameters\": [\n                        {\n                            \"required\": False,\n                            \"schema\": IsDict(\n                                {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                                    \"title\": \"Ads Id\",\n                                }\n                            )\n                            | IsDict(\n                                # TODO: remove when deprecating Pydantic v1\n                                {\"title\": \"Ads Id\", \"type\": \"string\"}\n                            ),\n                            \"name\": \"ads_id\",\n                            \"in\": \"cookie\",\n                        }\n                    ],\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_advanced_configuration.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {},\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial007_pv1.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv1\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.path_operation_advanced_configuration.tutorial007_pv1 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv1\ndef test_post(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Deadpoolio\",\n        \"tags\": [\"x-force\", \"x-men\", \"x-avengers\"],\n    }\n\n\n@needs_pydanticv1\ndef test_post_broken_yaml(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        x - x-force\n        x - x-men\n        x - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    assert response.json() == {\"detail\": \"Invalid YAML\"}\n\n\n@needs_pydanticv1\ndef test_post_invalid(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        - sneaky: object\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    assert response.json() == {\n        \"detail\": [\n            {\"loc\": [\"tags\", 3], \"msg\": \"str type expected\", \"type\": \"type_error.str\"}\n        ]\n    }\n\n\n@needs_pydanticv1\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-yaml\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"required\": [\"name\", \"tags\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                                        \"tags\": {\n                                            \"title\": \"Tags\",\n                                            \"type\": \"array\",\n                                            \"items\": {\"type\": \"string\"},\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial004.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_advanced_configuration.tutorial004 import app\n\nfrom ...utils import needs_pydanticv1, needs_pydanticv2\n\nclient = TestClient(app)\n\n\ndef test_query_params_str_validations():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 42,\n        \"description\": None,\n        \"tax\": None,\n        \"tags\": [],\n    }\n\n\n@needs_pydanticv2\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"title\": \"Description\",\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                        },\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\n                            \"title\": \"Tax\",\n                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                        },\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_openapi_schema_pv1():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create an item\",\n                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                        \"tags\": {\n                            \"title\": \"Tags\",\n                            \"uniqueItems\": True,\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"},\n                            \"default\": [],\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial005.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_advanced_configuration.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                    \"x-aperture-labs-portal\": \"blue\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_advanced_configuration.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"some_specific_id_you_define\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial002.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_advanced_configuration.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial007.py": "import pytest\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv2\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.path_operation_advanced_configuration.tutorial007 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_pydanticv2\ndef test_post(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"name\": \"Deadpoolio\",\n        \"tags\": [\"x-force\", \"x-men\", \"x-avengers\"],\n    }\n\n\n@needs_pydanticv2\ndef test_post_broken_yaml(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        x - x-force\n        x - x-men\n        x - x-avengers\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    assert response.json() == {\"detail\": \"Invalid YAML\"}\n\n\n@needs_pydanticv2\ndef test_post_invalid(client: TestClient):\n    yaml_data = \"\"\"\n        name: Deadpoolio\n        tags:\n        - x-force\n        - x-men\n        - x-avengers\n        - sneaky: object\n        \"\"\"\n    response = client.post(\"/items/\", content=yaml_data)\n    assert response.status_code == 422, response.text\n    # insert_assert(response.json())\n    assert response.json() == {\n        \"detail\": [\n            {\n                \"type\": \"string_type\",\n                \"loc\": [\"tags\", 3],\n                \"msg\": \"Input should be a valid string\",\n                \"input\": {\"sneaky\": \"object\"},\n            }\n        ]\n    }\n\n\n@needs_pydanticv2\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-yaml\": {\n                                \"schema\": {\n                                    \"title\": \"Item\",\n                                    \"required\": [\"name\", \"tags\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                                        \"tags\": {\n                                            \"title\": \"Tags\",\n                                            \"type\": \"array\",\n                                            \"items\": {\"type\": \"string\"},\n                                        },\n                                    },\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_path_operation_advanced_configurations/__init__.py": "", "tests/test_tutorial/test_path_operation_advanced_configurations/test_tutorial006.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.path_operation_advanced_configuration.tutorial006 import app\n\nclient = TestClient(app)\n\n\ndef test_post():\n    response = client.post(\"/items/\", content=b\"this is actually not validated\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"size\": 30,\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"required\": [\"name\", \"price\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\"type\": \"string\"},\n                                        \"price\": {\"type\": \"number\"},\n                                        \"description\": {\"type\": \"string\"},\n                                    },\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_extending_openapi/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.extending_openapi.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"name\": \"Foo\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\n            \"title\": \"Custom title\",\n            \"summary\": \"This is a very custom OpenAPI schema\",\n            \"description\": \"Here's a longer description of the custom **OpenAPI** schema\",\n            \"version\": \"2.5.0\",\n            \"x-logo\": {\n                \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n            },\n        },\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }\n    openapi_schema = response.json()\n    # Request again to test the custom cache\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == openapi_schema\n", "tests/test_tutorial/test_extending_openapi/__init__.py": "", "tests/test_tutorial/test_async_sql_databases/test_tutorial001.py": "import pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_pydanticv1\n\n\n@pytest.fixture(name=\"app\", scope=\"module\")\ndef get_app():\n    with pytest.warns(DeprecationWarning):\n        from docs_src.async_sql_databases.tutorial001 import app\n    yield app\n\n\n# TODO: pv2 add version with Pydantic v2\n@needs_pydanticv1\ndef test_create_read(app: FastAPI):\n    with TestClient(app) as client:\n        note = {\"text\": \"Foo bar\", \"completed\": False}\n        response = client.post(\"/notes/\", json=note)\n        assert response.status_code == 200, response.text\n        data = response.json()\n        assert data[\"text\"] == note[\"text\"]\n        assert data[\"completed\"] == note[\"completed\"]\n        assert \"id\" in data\n        response = client.get(\"/notes/\")\n        assert response.status_code == 200, response.text\n        assert data in response.json()\n\n\ndef test_openapi_schema(app: FastAPI):\n    with TestClient(app) as client:\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200, response.text\n        assert response.json() == {\n            \"openapi\": \"3.1.0\",\n            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n            \"paths\": {\n                \"/notes/\": {\n                    \"get\": {\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"title\": \"Response Read Notes Notes  Get\",\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"$ref\": \"#/components/schemas/Note\"\n                                            },\n                                        }\n                                    }\n                                },\n                            }\n                        },\n                        \"summary\": \"Read Notes\",\n                        \"operationId\": \"read_notes_notes__get\",\n                    },\n                    \"post\": {\n                        \"responses\": {\n                            \"200\": {\n                                \"description\": \"Successful Response\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\"$ref\": \"#/components/schemas/Note\"}\n                                    }\n                                },\n                            },\n                            \"422\": {\n                                \"description\": \"Validation Error\",\n                                \"content\": {\n                                    \"application/json\": {\n                                        \"schema\": {\n                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                        }\n                                    }\n                                },\n                            },\n                        },\n                        \"summary\": \"Create Note\",\n                        \"operationId\": \"create_note_notes__post\",\n                        \"requestBody\": {\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/NoteIn\"}\n                                }\n                            },\n                            \"required\": True,\n                        },\n                    },\n                }\n            },\n            \"components\": {\n                \"schemas\": {\n                    \"NoteIn\": {\n                        \"title\": \"NoteIn\",\n                        \"required\": [\"text\", \"completed\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"text\": {\"title\": \"Text\", \"type\": \"string\"},\n                            \"completed\": {\"title\": \"Completed\", \"type\": \"boolean\"},\n                        },\n                    },\n                    \"Note\": {\n                        \"title\": \"Note\",\n                        \"required\": [\"id\", \"text\", \"completed\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n                            \"text\": {\"title\": \"Text\", \"type\": \"string\"},\n                            \"completed\": {\"title\": \"Completed\", \"type\": \"boolean\"},\n                        },\n                    },\n                    \"ValidationError\": {\n                        \"title\": \"ValidationError\",\n                        \"required\": [\"loc\", \"msg\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"loc\": {\n                                \"title\": \"Location\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                                },\n                            },\n                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                        },\n                    },\n                    \"HTTPValidationError\": {\n                        \"title\": \"HTTPValidationError\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"detail\": {\n                                \"title\": \"Detail\",\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"$ref\": \"#/components/schemas/ValidationError\"\n                                },\n                            }\n                        },\n                    },\n                }\n            },\n        }\n", "tests/test_tutorial/test_async_sql_databases/__init__.py": "", "tests/test_tutorial/test_custom_response/test_tutorial006b.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial006b import app\n\nclient = TestClient(app)\n\n\ndef test_redirect_response_class():\n    response = client.get(\"/fastapi\", follow_redirects=False)\n    assert response.status_code == 307\n    assert response.headers[\"location\"] == \"https://fastapi.tiangolo.com\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/fastapi\": {\n                \"get\": {\n                    \"summary\": \"Redirect Fastapi\",\n                    \"operationId\": \"redirect_fastapi_fastapi_get\",\n                    \"responses\": {\"307\": {\"description\": \"Successful Response\"}},\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial004.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial004 import app\n\nclient = TestClient(app)\n\n\nhtml_contents = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n\n\ndef test_get_custom_response():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.text == html_contents\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"text/html\": {\"schema\": {\"type\": \"string\"}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial005.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial005 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/\")\n    assert response.status_code == 200, response.text\n    assert response.text == \"Hello World\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/\": {\n                \"get\": {\n                    \"summary\": \"Main\",\n                    \"operationId\": \"main__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"text/plain\": {\"schema\": {\"type\": \"string\"}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial006c.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial006c import app\n\nclient = TestClient(app)\n\n\ndef test_redirect_status_code():\n    response = client.get(\"/pydantic\", follow_redirects=False)\n    assert response.status_code == 302\n    assert response.headers[\"location\"] == \"https://docs.pydantic.dev/\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/pydantic\": {\n                \"get\": {\n                    \"summary\": \"Redirect Pydantic\",\n                    \"operationId\": \"redirect_pydantic_pydantic_get\",\n                    \"responses\": {\"302\": {\"description\": \"Successful Response\"}},\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial001.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_get_custom_response():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial009c.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial009c import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/\")\n    assert response.content == b'{\\n  \"message\": \"Hello World\"\\n}'\n", "tests/test_tutorial/test_custom_response/test_tutorial001b.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial001b import app\n\nclient = TestClient(app)\n\n\ndef test_get_custom_response():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200, response.text\n    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"get\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                    \"summary\": \"Read Items\",\n                    \"operationId\": \"read_items_items__get\",\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial007.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial007 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    fake_content = b\"some fake video bytes\"\n    response = client.get(\"/\")\n    assert response.content == fake_content * 10\n", "tests/test_tutorial/test_custom_response/__init__.py": "", "tests/test_tutorial/test_custom_response/test_tutorial006.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_response.tutorial006 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/typer\", follow_redirects=False)\n    assert response.status_code == 307, response.text\n    assert response.headers[\"location\"] == \"https://typer.tiangolo.com\"\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/typer\": {\n                \"get\": {\n                    \"summary\": \"Redirect Typer\",\n                    \"operationId\": \"redirect_typer_typer_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        }\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_custom_response/test_tutorial009.py": "from pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.custom_response import tutorial009\nfrom docs_src.custom_response.tutorial009 import app\n\nclient = TestClient(app)\n\n\ndef test_get(tmp_path: Path):\n    file_path: Path = tmp_path / \"large-video-file.mp4\"\n    tutorial009.some_file_path = str(file_path)\n    test_content = b\"Fake video bytes\"\n    file_path.write_bytes(test_content)\n    response = client.get(\"/\")\n    assert response.content == test_content\n", "tests/test_tutorial/test_custom_response/test_tutorial008.py": "from pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.custom_response import tutorial008\nfrom docs_src.custom_response.tutorial008 import app\n\nclient = TestClient(app)\n\n\ndef test_get(tmp_path: Path):\n    file_path: Path = tmp_path / \"large-video-file.mp4\"\n    tutorial008.some_file_path = str(file_path)\n    test_content = b\"Fake video bytes\"\n    file_path.write_bytes(test_content)\n    response = client.get(\"/\")\n    assert response.content == test_content\n", "tests/test_tutorial/test_custom_response/test_tutorial009b.py": "from pathlib import Path\n\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.custom_response import tutorial009b\nfrom docs_src.custom_response.tutorial009b import app\n\nclient = TestClient(app)\n\n\ndef test_get(tmp_path: Path):\n    file_path: Path = tmp_path / \"large-video-file.mp4\"\n    tutorial009b.some_file_path = str(file_path)\n    test_content = b\"Fake video bytes\"\n    file_path.write_bytes(test_content)\n    response = client.get(\"/\")\n    assert response.content == test_content\n", "tests/test_tutorial/test_custom_request_and_route/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.custom_request_and_route.tutorial003 import app\n\nclient = TestClient(app)\n\n\ndef test_get():\n    response = client.get(\"/\")\n    assert response.json() == {\"message\": \"Not timed\"}\n    assert \"X-Response-Time\" not in response.headers\n\n\ndef test_get_timed():\n    response = client.get(\"/timed\")\n    assert response.json() == {\"message\": \"It's the time of my life\"}\n    assert \"X-Response-Time\" in response.headers\n    assert float(response.headers[\"X-Response-Time\"]) >= 0\n", "tests/test_tutorial/test_custom_request_and_route/test_tutorial001.py": "import gzip\nimport json\n\nimport pytest\nfrom fastapi import Request\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.custom_request_and_route.tutorial001 import app\n\n\n@app.get(\"/check-class\")\nasync def check_gzip_request(request: Request):\n    return {\"request_class\": type(request).__name__}\n\n\nclient = TestClient(app)\n\n\n@pytest.mark.parametrize(\"compress\", [True, False])\ndef test_gzip_request(compress):\n    n = 1000\n    headers = {}\n    body = [1] * n\n    data = json.dumps(body).encode()\n    if compress:\n        data = gzip.compress(data)\n        headers[\"Content-Encoding\"] = \"gzip\"\n    headers[\"Content-Type\"] = \"application/json\"\n    response = client.post(\"/sum\", content=data, headers=headers)\n    assert response.json() == {\"sum\": n}\n\n\ndef test_request_class():\n    response = client.get(\"/check-class\")\n    assert response.json() == {\"request_class\": \"GzipRequest\"}\n", "tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.custom_request_and_route.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_endpoint_works():\n    response = client.post(\"/\", json=[1, 2, 3])\n    assert response.json() == 6\n\n\ndef test_exception_handler_body_access():\n    response = client.post(\"/\", json={\"numbers\": [1, 2, 3]})\n    assert response.json() == IsDict(\n        {\n            \"detail\": {\n                \"errors\": [\n                    {\n                        \"type\": \"list_type\",\n                        \"loc\": [\"body\"],\n                        \"msg\": \"Input should be a valid list\",\n                        \"input\": {\"numbers\": [1, 2, 3]},\n                    }\n                ],\n                \"body\": '{\"numbers\": [1, 2, 3]}',\n            }\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": {\n                \"body\": '{\"numbers\": [1, 2, 3]}',\n                \"errors\": [\n                    {\n                        \"loc\": [\"body\"],\n                        \"msg\": \"value is not a valid list\",\n                        \"type\": \"type_error.list\",\n                    }\n                ],\n            }\n        }\n    )\n", "tests/test_tutorial/test_custom_request_and_route/__init__.py": "", "tests/test_tutorial/test_dataclasses/test_tutorial003.py": "from fastapi.testclient import TestClient\n\nfrom docs_src.dataclasses.tutorial003 import app\n\nfrom ...utils import needs_pydanticv1, needs_pydanticv2\n\nclient = TestClient(app)\n\n\ndef test_post_authors_item():\n    response = client.post(\n        \"/authors/foo/items/\",\n        json=[{\"name\": \"Bar\"}, {\"name\": \"Baz\", \"description\": \"Drop the Baz\"}],\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"foo\",\n        \"items\": [\n            {\"name\": \"Bar\", \"description\": None},\n            {\"name\": \"Baz\", \"description\": \"Drop the Baz\"},\n        ],\n    }\n\n\ndef test_get_authors():\n    response = client.get(\"/authors/\")\n    assert response.status_code == 200\n    assert response.json() == [\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\", \"description\": None},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\", \"description\": None},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n\n\n@needs_pydanticv2\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/authors/{author_id}/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Author Items\",\n                    \"operationId\": \"create_author_items_authors__author_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Author Id\", \"type\": \"string\"},\n                            \"name\": \"author_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Items\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Author\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/authors/\": {\n                \"get\": {\n                    \"summary\": \"Get Authors\",\n                    \"operationId\": \"get_authors_authors__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Get Authors Authors  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Author\"\n                                        },\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Author\": {\n                    \"title\": \"Author\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                        },\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\n                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            \"title\": \"Description\",\n                        },\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n\n\n# TODO: remove when deprecating Pydantic v1\n@needs_pydanticv1\ndef test_openapi_schema_pv1():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/authors/{author_id}/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Author Items\",\n                    \"operationId\": \"create_author_items_authors__author_id__items__post\",\n                    \"parameters\": [\n                        {\n                            \"required\": True,\n                            \"schema\": {\"title\": \"Author Id\", \"type\": \"string\"},\n                            \"name\": \"author_id\",\n                            \"in\": \"path\",\n                        }\n                    ],\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Items\",\n                                    \"type\": \"array\",\n                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Author\"}\n                                }\n                            },\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            },\n            \"/authors/\": {\n                \"get\": {\n                    \"summary\": \"Get Authors\",\n                    \"operationId\": \"get_authors_authors__get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"title\": \"Response Get Authors Authors  Get\",\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Author\"\n                                        },\n                                    }\n                                }\n                            },\n                        }\n                    },\n                }\n            },\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Author\": {\n                    \"title\": \"Author\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"items\": {\n                            \"title\": \"Items\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                        },\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dataclasses/test_tutorial001.py": "from dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dataclasses.tutorial001 import app\n\nclient = TestClient(app)\n\n\ndef test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 3})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Foo\",\n        \"price\": 3,\n        \"description\": None,\n        \"tax\": None,\n    }\n\n\ndef test_post_invalid_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"invalid price\"})\n    assert response.status_code == 422\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"float_parsing\",\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                    \"input\": \"invalid price\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"price\"],\n                    \"msg\": \"value is not a valid float\",\n                    \"type\": \"type_error.float\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/\": {\n                \"post\": {\n                    \"summary\": \"Create Item\",\n                    \"operationId\": \"create_item_items__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                            }\n                        },\n                        \"required\": True,\n                    },\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": [\"name\", \"price\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                },\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_dataclasses/test_tutorial002.py": "from dirty_equals import IsDict, IsOneOf\nfrom fastapi.testclient import TestClient\n\nfrom docs_src.dataclasses.tutorial002 import app\n\nclient = TestClient(app)\n\n\ndef test_get_item():\n    response = client.get(\"/items/next\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n        \"tax\": None,\n    }\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/items/next\": {\n                \"get\": {\n                    \"summary\": \"Read Next Item\",\n                    \"operationId\": \"read_next_item_items_next_get\",\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n                                }\n                            },\n                        }\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"Item\": {\n                    \"title\": \"Item\",\n                    \"required\": IsOneOf(\n                        [\"name\", \"price\", \"tags\", \"description\", \"tax\"],\n                        # TODO: remove when deprecating Pydantic v1\n                        [\"name\", \"price\"],\n                    ),\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n                        \"tags\": IsDict(\n                            {\n                                \"title\": \"Tags\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\n                                \"title\": \"Tags\",\n                                \"type\": \"array\",\n                                \"items\": {\"type\": \"string\"},\n                            }\n                        ),\n                        \"description\": IsDict(\n                            {\n                                \"title\": \"Description\",\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Description\", \"type\": \"string\"}\n                        ),\n                        \"tax\": IsDict(\n                            {\n                                \"title\": \"Tax\",\n                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n                            }\n                        )\n                        | IsDict(\n                            # TODO: remove when deprecating Pydantic v1\n                            {\"title\": \"Tax\", \"type\": \"number\"}\n                        ),\n                    },\n                }\n            }\n        },\n    }\n", "tests/test_tutorial/test_dataclasses/__init__.py": "", "tests/test_tutorial/test_body_nested_models/test_tutorial009_py39.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\nfrom ...utils import needs_py39\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_nested_models.tutorial009_py39 import app\n\n    client = TestClient(app)\n    return client\n\n\n@needs_py39\ndef test_post_body(client: TestClient):\n    data = {\"2\": 2.2, \"3\": 3.3}\n    response = client.post(\"/index-weights/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\n@needs_py39\ndef test_post_invalid_body(client: TestClient):\n    data = {\"foo\": 2.2, \"3\": 3.3}\n    response = client.post(\"/index-weights/\", json=data)\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"body\", \"foo\", \"[key]\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"__key__\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\n@needs_py39\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/index-weights/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Index Weights\",\n                    \"operationId\": \"create_index_weights_index_weights__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Weights\",\n                                    \"type\": \"object\",\n                                    \"additionalProperties\": {\"type\": \"number\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "tests/test_tutorial/test_body_nested_models/__init__.py": "", "tests/test_tutorial/test_body_nested_models/test_tutorial009.py": "import pytest\nfrom dirty_equals import IsDict\nfrom fastapi.testclient import TestClient\n\n\n@pytest.fixture(name=\"client\")\ndef get_client():\n    from docs_src.body_nested_models.tutorial009 import app\n\n    client = TestClient(app)\n    return client\n\n\ndef test_post_body(client: TestClient):\n    data = {\"2\": 2.2, \"3\": 3.3}\n    response = client.post(\"/index-weights/\", json=data)\n    assert response.status_code == 200, response.text\n    assert response.json() == data\n\n\ndef test_post_invalid_body(client: TestClient):\n    data = {\"foo\": 2.2, \"3\": 3.3}\n    response = client.post(\"/index-weights/\", json=data)\n    assert response.status_code == 422, response.text\n    assert response.json() == IsDict(\n        {\n            \"detail\": [\n                {\n                    \"type\": \"int_parsing\",\n                    \"loc\": [\"body\", \"foo\", \"[key]\"],\n                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                    \"input\": \"foo\",\n                }\n            ]\n        }\n    ) | IsDict(\n        # TODO: remove when deprecating Pydantic v1\n        {\n            \"detail\": [\n                {\n                    \"loc\": [\"body\", \"__key__\"],\n                    \"msg\": \"value is not a valid integer\",\n                    \"type\": \"type_error.integer\",\n                }\n            ]\n        }\n    )\n\n\ndef test_openapi_schema(client: TestClient):\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/index-weights/\": {\n                \"post\": {\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"Successful Response\",\n                            \"content\": {\"application/json\": {\"schema\": {}}},\n                        },\n                        \"422\": {\n                            \"description\": \"Validation Error\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                    }\n                                }\n                            },\n                        },\n                    },\n                    \"summary\": \"Create Index Weights\",\n                    \"operationId\": \"create_index_weights_index_weights__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Weights\",\n                                    \"type\": \"object\",\n                                    \"additionalProperties\": {\"type\": \"number\"},\n                                }\n                            }\n                        },\n                        \"required\": True,\n                    },\n                }\n            }\n        },\n        \"components\": {\n            \"schemas\": {\n                \"ValidationError\": {\n                    \"title\": \"ValidationError\",\n                    \"required\": [\"loc\", \"msg\", \"type\"],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"loc\": {\n                            \"title\": \"Location\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n                            },\n                        },\n                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                    },\n                },\n                \"HTTPValidationError\": {\n                    \"title\": \"HTTPValidationError\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"detail\": {\n                            \"title\": \"Detail\",\n                            \"type\": \"array\",\n                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                        }\n                    },\n                },\n            }\n        },\n    }\n", "docs_src/response_change_status_code/tutorial001.py": "from fastapi import FastAPI, Response, status\n\napp = FastAPI()\n\ntasks = {\"foo\": \"Listen to the Bar Fighters\"}\n\n\n@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]\n", "docs_src/path_params/tutorial003b.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]\n", "docs_src/path_params/tutorial004.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n", "docs_src/path_params/tutorial002.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n", "docs_src/path_params/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n", "docs_src/path_params/tutorial005.py": "from enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n", "docs_src/path_params/tutorial003.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n", "docs_src/body_multiple_params/tutorial004.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/body_multiple_params/tutorial004_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/body_multiple_params/tutorial001_py310.py": "from fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n", "docs_src/body_multiple_params/tutorial004_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/body_multiple_params/tutorial003_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n", "docs_src/body_multiple_params/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n", "docs_src/body_multiple_params/tutorial004_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/body_multiple_params/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n", "docs_src/body_multiple_params/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n", "docs_src/body_multiple_params/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n", "docs_src/body_multiple_params/tutorial005_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_multiple_params/tutorial003_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n", "docs_src/body_multiple_params/tutorial003_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n", "docs_src/body_multiple_params/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n", "docs_src/body_multiple_params/tutorial005.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_multiple_params/tutorial003.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n", "docs_src/body_multiple_params/tutorial005_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_multiple_params/tutorial004_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/body_multiple_params/tutorial003_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n", "docs_src/body_multiple_params/tutorial005_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_multiple_params/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n", "docs_src/body_multiple_params/tutorial005_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/sql_databases_peewee/sql_app/crud.py": "from . import models, schemas\n\n\ndef get_user(user_id: int):\n    return models.User.filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(email: str):\n    return models.User.filter(models.User.email == email).first()\n\n\ndef get_users(skip: int = 0, limit: int = 100):\n    return list(models.User.select().offset(skip).limit(limit))\n\n\ndef create_user(user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db_user.save()\n    return db_user\n\n\ndef get_items(skip: int = 0, limit: int = 100):\n    return list(models.Item.select().offset(skip).limit(limit))\n\n\ndef create_user_item(item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db_item.save()\n    return db_item\n", "docs_src/sql_databases_peewee/sql_app/models.py": "import peewee\n\nfrom .database import db\n\n\nclass User(peewee.Model):\n    email = peewee.CharField(unique=True, index=True)\n    hashed_password = peewee.CharField()\n    is_active = peewee.BooleanField(default=True)\n\n    class Meta:\n        database = db\n\n\nclass Item(peewee.Model):\n    title = peewee.CharField(index=True)\n    description = peewee.CharField(index=True)\n    owner = peewee.ForeignKeyField(User, backref=\"items\")\n\n    class Meta:\n        database = db\n", "docs_src/sql_databases_peewee/sql_app/database.py": "from contextvars import ContextVar\n\nimport peewee\n\nDATABASE_NAME = \"test.db\"\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\n\n\nclass PeeweeConnectionState(peewee._ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n\n    def __getattr__(self, name):\n        return self._state.get()[name]\n\n\ndb = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\ndb._state = PeeweeConnectionState()\n", "docs_src/sql_databases_peewee/sql_app/main.py": "import time\nfrom typing import List\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = FastAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n", "docs_src/sql_databases_peewee/sql_app/__init__.py": "", "docs_src/sql_databases_peewee/sql_app/schemas.py": "from typing import Any, List, Union\n\nimport peewee\nfrom pydantic import BaseModel\nfrom pydantic.utils import GetterDict\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n", "docs_src/wsgi/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.middleware.wsgi import WSGIMiddleware\nfrom flask import Flask, request\nfrom markupsafe import escape\n\nflask_app = Flask(__name__)\n\n\n@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"\n\n\napp = FastAPI()\n\n\n@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}\n\n\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n", "docs_src/app_testing/tutorial002.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocket\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()\n\n\ndef test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n\n\ndef test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}\n", "docs_src/app_testing/main.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n", "docs_src/app_testing/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n", "docs_src/app_testing/tutorial003.py": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n\n\ndef test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}\n", "docs_src/app_testing/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n", "docs_src/app_testing/__init__.py": "", "docs_src/app_testing/app_b_an/main.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=400, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n", "docs_src/app_testing/app_b_an/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Item already exists\"}\n", "docs_src/app_testing/app_b_an/__init__.py": "", "docs_src/app_testing/app_b/main.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n", "docs_src/app_testing/app_b/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n", "docs_src/app_testing/app_b/__init__.py": "", "docs_src/app_testing/app_b_an_py39/main.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=400, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n", "docs_src/app_testing/app_b_an_py39/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Item already exists\"}\n", "docs_src/app_testing/app_b_an_py39/__init__.py": "", "docs_src/app_testing/app_b_py310/main.py": "from fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n", "docs_src/app_testing/app_b_py310/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n", "docs_src/app_testing/app_b_py310/__init__.py": "", "docs_src/app_testing/app_b_an_py310/main.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=400, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n", "docs_src/app_testing/app_b_an_py310/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Item already exists\"}\n", "docs_src/app_testing/app_b_an_py310/__init__.py": "", "docs_src/path_operation_configuration/tutorial004.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n", "docs_src/path_operation_configuration/tutorial003_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n", "docs_src/path_operation_configuration/tutorial001_py310.py": "from fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n", "docs_src/path_operation_configuration/tutorial004_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n", "docs_src/path_operation_configuration/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n", "docs_src/path_operation_configuration/tutorial002.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n", "docs_src/path_operation_configuration/tutorial002_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n", "docs_src/path_operation_configuration/tutorial004_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n", "docs_src/path_operation_configuration/tutorial003_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n", "docs_src/path_operation_configuration/tutorial001.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n", "docs_src/path_operation_configuration/tutorial005.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n", "docs_src/path_operation_configuration/tutorial006.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n", "docs_src/path_operation_configuration/tutorial003.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n", "docs_src/path_operation_configuration/tutorial001_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n", "docs_src/path_operation_configuration/tutorial002b.py": "from enum import Enum\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n\n@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n\n@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n", "docs_src/path_operation_configuration/tutorial005_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n", "docs_src/path_operation_configuration/tutorial005_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n", "docs_src/cors/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\norigins = [\n    \"http://localhost.tiangolo.com\",\n    \"https://localhost.tiangolo.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n", "docs_src/handling_errors/tutorial004.py": "from fastapi import FastAPI, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = FastAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n", "docs_src/handling_errors/tutorial002.py": "from fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n", "docs_src/handling_errors/tutorial001.py": "from fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n", "docs_src/handling_errors/tutorial005.py": "from fastapi import FastAPI, Request, status\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n    )\n\n\nclass Item(BaseModel):\n    title: str\n    size: int\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n", "docs_src/handling_errors/tutorial006.py": "from fastapi import FastAPI, HTTPException\nfrom fastapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = FastAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n", "docs_src/handling_errors/tutorial003.py": "from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = FastAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n", "docs_src/bigger_applications/__init__.py": "", "docs_src/bigger_applications/app_an/dependencies.py": "from fastapi import Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n", "docs_src/bigger_applications/app_an/main.py": "from fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = FastAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n", "docs_src/bigger_applications/app_an/__init__.py": "", "docs_src/bigger_applications/app_an/routers/items.py": "from fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n", "docs_src/bigger_applications/app_an/routers/__init__.py": "", "docs_src/bigger_applications/app_an/routers/users.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n", "docs_src/bigger_applications/app_an/internal/admin.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n", "docs_src/bigger_applications/app_an/internal/__init__.py": "", "docs_src/bigger_applications/app/dependencies.py": "from fastapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n", "docs_src/bigger_applications/app/main.py": "from fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = FastAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n", "docs_src/bigger_applications/app/__init__.py": "", "docs_src/bigger_applications/app/routers/items.py": "from fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n", "docs_src/bigger_applications/app/routers/__init__.py": "", "docs_src/bigger_applications/app/routers/users.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n", "docs_src/bigger_applications/app/internal/admin.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n", "docs_src/bigger_applications/app/internal/__init__.py": "", "docs_src/bigger_applications/app_an_py39/dependencies.py": "from typing import Annotated\n\nfrom fastapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n", "docs_src/bigger_applications/app_an_py39/main.py": "from fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = FastAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n", "docs_src/bigger_applications/app_an_py39/__init__.py": "", "docs_src/bigger_applications/app_an_py39/routers/items.py": "from fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n", "docs_src/bigger_applications/app_an_py39/routers/__init__.py": "", "docs_src/bigger_applications/app_an_py39/routers/users.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n", "docs_src/bigger_applications/app_an_py39/internal/admin.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n", "docs_src/bigger_applications/app_an_py39/internal/__init__.py": "", "docs_src/advanced_middleware/tutorial002.py": "from fastapi import FastAPI\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n", "docs_src/advanced_middleware/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n\napp = FastAPI()\n\napp.add_middleware(HTTPSRedirectMiddleware)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n", "docs_src/advanced_middleware/tutorial003.py": "from fastapi import FastAPI\nfrom fastapi.middleware.gzip import GZipMiddleware\n\napp = FastAPI()\n\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n\n\n@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\"\n", "docs_src/response_status_code/tutorial002.py": "from fastapi import FastAPI, status\n\napp = FastAPI()\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n", "docs_src/response_status_code/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n", "docs_src/extending_openapi/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n", "docs_src/query_params/tutorial004.py": "from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n", "docs_src/query_params/tutorial006b.py": "from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n", "docs_src/query_params/tutorial006_py310.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n", "docs_src/query_params/tutorial004_py310.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n", "docs_src/query_params/tutorial002_py310.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n", "docs_src/query_params/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n", "docs_src/query_params/tutorial003_py310.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n", "docs_src/query_params/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]\n", "docs_src/query_params/tutorial005.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n", "docs_src/query_params/tutorial006.py": "from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n", "docs_src/query_params/tutorial003.py": "from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n", "docs_src/sql_databases/__init__.py": "", "docs_src/sql_databases/sql_app_py310/crud.py": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n", "docs_src/sql_databases/sql_app_py310/models.py": "from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n", "docs_src/sql_databases/sql_app_py310/database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n", "docs_src/sql_databases/sql_app_py310/main.py": "from fastapi import Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n", "docs_src/sql_databases/sql_app_py310/__init__.py": "", "docs_src/sql_databases/sql_app_py310/schemas.py": "from pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: str | None = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n", "docs_src/sql_databases/sql_app_py310/alt_main.py": "from fastapi import Depends, FastAPI, HTTPException, Request, Response\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n@app.middleware(\"http\")\nasync def db_session_middleware(request: Request, call_next):\n    response = Response(\"Internal server error\", status_code=500)\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n\n\n# Dependency\ndef get_db(request: Request):\n    return request.state.db\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n", "docs_src/sql_databases/sql_app_py310/tests/test_sql_app.py": "from fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n", "docs_src/sql_databases/sql_app_py310/tests/__init__.py": "", "docs_src/sql_databases/sql_app_py39/crud.py": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n", "docs_src/sql_databases/sql_app_py39/models.py": "from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n", "docs_src/sql_databases/sql_app_py39/database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n", "docs_src/sql_databases/sql_app_py39/main.py": "from fastapi import Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n", "docs_src/sql_databases/sql_app_py39/__init__.py": "", "docs_src/sql_databases/sql_app_py39/schemas.py": "from typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n", "docs_src/sql_databases/sql_app_py39/alt_main.py": "from fastapi import Depends, FastAPI, HTTPException, Request, Response\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n@app.middleware(\"http\")\nasync def db_session_middleware(request: Request, call_next):\n    response = Response(\"Internal server error\", status_code=500)\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n\n\n# Dependency\ndef get_db(request: Request):\n    return request.state.db\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n", "docs_src/sql_databases/sql_app_py39/tests/test_sql_app.py": "from fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n", "docs_src/sql_databases/sql_app_py39/tests/__init__.py": "", "docs_src/sql_databases/sql_app/crud.py": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n", "docs_src/sql_databases/sql_app/models.py": "from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n", "docs_src/sql_databases/sql_app/database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n", "docs_src/sql_databases/sql_app/main.py": "from typing import List\n\nfrom fastapi import Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n", "docs_src/sql_databases/sql_app/__init__.py": "", "docs_src/sql_databases/sql_app/schemas.py": "from typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n", "docs_src/sql_databases/sql_app/alt_main.py": "from typing import List\n\nfrom fastapi import Depends, FastAPI, HTTPException, Request, Response\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n\n@app.middleware(\"http\")\nasync def db_session_middleware(request: Request, call_next):\n    response = Response(\"Internal server error\", status_code=500)\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n\n\n# Dependency\ndef get_db(request: Request):\n    return request.state.db\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n", "docs_src/sql_databases/sql_app/tests/test_sql_app.py": "from fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite://\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n", "docs_src/sql_databases/sql_app/tests/__init__.py": "", "docs_src/security/tutorial002_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n", "docs_src/security/tutorial007.py": "import secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n", "docs_src/security/tutorial004.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n", "docs_src/security/tutorial004_an_py39.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n", "docs_src/security/tutorial004_py310.py": "from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n", "docs_src/security/tutorial003_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n", "docs_src/security/tutorial002_py310.py": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n", "docs_src/security/tutorial004_an.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n", "docs_src/security/tutorial002.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n", "docs_src/security/tutorial007_an.py": "import secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n", "docs_src/security/tutorial001_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n", "docs_src/security/tutorial005_an.py": "from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n", "docs_src/security/tutorial003_py310.py": "from fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n", "docs_src/security/tutorial003_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n", "docs_src/security/tutorial006_an.py": "from fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n", "docs_src/security/tutorial001.py": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n", "docs_src/security/tutorial005.py": "from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n", "docs_src/security/tutorial006.py": "from fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n", "docs_src/security/tutorial006_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n", "docs_src/security/tutorial003.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n", "docs_src/security/tutorial002_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n", "docs_src/security/tutorial005_an_py310.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n", "docs_src/security/tutorial004_an_py310.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n", "docs_src/security/tutorial003_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n", "docs_src/security/tutorial005_an_py39.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n", "docs_src/security/tutorial002_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n", "docs_src/security/tutorial007_an_py39.py": "import secrets\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n", "docs_src/security/tutorial001_an.py": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n", "docs_src/security/tutorial005_py310.py": "from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n", "docs_src/security/tutorial005_py39.py": "from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n", "docs_src/extra_data_types/tutorial001_py310.py": "from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n", "docs_src/extra_data_types/tutorial001_an_py310.py": "from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n", "docs_src/extra_data_types/tutorial001_an_py39.py": "from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n", "docs_src/extra_data_types/tutorial001.py": "from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n", "docs_src/extra_data_types/tutorial001_an.py": "from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n", "docs_src/request_files/tutorial001_02_py310.py": "from fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial002_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial001_02_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial003_py39.py": "from fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial003_an.py": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial001_02_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial001_03_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial002.py": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial002_py39.py": "from fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial001_03.py": "from fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial001_02.py": "from typing import Union\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial001_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial001_03_an.py": "from fastapi import FastAPI, File, UploadFile\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial001.py": "from fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial001_02_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n", "docs_src/request_files/tutorial003.py": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial002_an.py": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial003_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)\n", "docs_src/request_files/tutorial001_an.py": "from fastapi import FastAPI, File, UploadFile\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n", "docs_src/custom_docs_ui/tutorial002.py": "from fastapi import FastAPI\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom fastapi.staticfiles import StaticFiles\n\napp = FastAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n", "docs_src/custom_docs_ui/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = FastAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n", "docs_src/path_operation_advanced_configuration/tutorial007.py": "from typing import List\n\nimport yaml\nfrom fastapi import FastAPI, HTTPException, Request\nfrom pydantic import BaseModel, ValidationError\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n", "docs_src/path_operation_advanced_configuration/tutorial004.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item\n", "docs_src/path_operation_advanced_configuration/tutorial002.py": "from fastapi import FastAPI\nfrom fastapi.routing import APIRoute\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n\ndef use_route_names_as_operation_ids(app: FastAPI) -> None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\n\nuse_route_names_as_operation_ids(app)\n", "docs_src/path_operation_advanced_configuration/tutorial007_pv1.py": "from typing import List\n\nimport yaml\nfrom fastapi import FastAPI, HTTPException, Request\nfrom pydantic import BaseModel, ValidationError\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n", "docs_src/path_operation_advanced_configuration/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n", "docs_src/path_operation_advanced_configuration/tutorial005.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]\n", "docs_src/path_operation_advanced_configuration/tutorial006.py": "from fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\ndef magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n", "docs_src/path_operation_advanced_configuration/tutorial003.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n", "docs_src/response_headers/tutorial002.py": "from fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n", "docs_src/response_headers/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n", "docs_src/path_params_numeric_validations/tutorial002_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial004.py": "from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial004_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial001_py310.py": "from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial003_an.py": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial004_an.py": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial002.py": "from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial005_an.py": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial006_an.py": "from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial005.py": "from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial006.py": "from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial006_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial003.py": "from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial002_an.py": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial003_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial005_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/path_params_numeric_validations/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/header_params/tutorial002_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n", "docs_src/header_params/tutorial003_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n", "docs_src/header_params/tutorial001_py310.py": "from fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n", "docs_src/header_params/tutorial003_an.py": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n", "docs_src/header_params/tutorial002_py310.py": "from fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n", "docs_src/header_params/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n", "docs_src/header_params/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n", "docs_src/header_params/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n", "docs_src/header_params/tutorial003_py310.py": "from fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}\n", "docs_src/header_params/tutorial003_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n    return {\"X-Token values\": x_token}\n", "docs_src/header_params/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n", "docs_src/header_params/tutorial003.py": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n", "docs_src/header_params/tutorial002_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n", "docs_src/header_params/tutorial003_an_py39.py": "from typing import Annotated, List, Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n", "docs_src/header_params/tutorial002_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n):\n    return {\"strange_header\": strange_header}\n", "docs_src/header_params/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n", "docs_src/middleware/tutorial001.py": "import time\n\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n", "docs_src/websockets/tutorial002_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n", "docs_src/websockets/tutorial003_py39.py": "from fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <h2>Your ID: <span id=\"ws-id\"></span></h2>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n", "docs_src/websockets/tutorial002_py310.py": "from fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n", "docs_src/websockets/tutorial002.py": "from typing import Union\n\nfrom fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n", "docs_src/websockets/tutorial001.py": "from fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n", "docs_src/websockets/tutorial003.py": "from typing import List\n\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <h2>Your ID: <span id=\"ws-id\"></span></h2>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n", "docs_src/websockets/tutorial002_an.py": "from typing import Union\n\nfrom fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n", "docs_src/websockets/__init__.py": "", "docs_src/websockets/tutorial002_an_py310.py": "from typing import Annotated\n\nfrom fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n", "docs_src/settings/tutorial001.py": "from fastapi import FastAPI\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = FastAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/tutorial001_pv1.py": "from fastapi import FastAPI\nfrom pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = FastAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app03/config.py": "from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n", "docs_src/settings/app03/main.py": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom . import config\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: config.Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app03/__init__.py": "", "docs_src/settings/app02_an_py39/config.py": "from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n", "docs_src/settings/app02_an_py39/main.py": "from functools import lru_cache\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app02_an_py39/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n", "docs_src/settings/app02_an_py39/__init__.py": "", "docs_src/settings/app02_an/config.py": "from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n", "docs_src/settings/app02_an/main.py": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\nfrom .config import Settings\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app02_an/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n", "docs_src/settings/app02_an/__init__.py": "", "docs_src/settings/app03_an_py39/config.py": "from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n", "docs_src/settings/app03_an_py39/main.py": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\nfrom . import config\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app03_an_py39/__init__.py": "", "docs_src/settings/app02/config.py": "from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n", "docs_src/settings/app02/main.py": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app02/test_main.py": "from fastapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n", "docs_src/settings/app02/__init__.py": "", "docs_src/settings/app03_an/config.py": "from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n", "docs_src/settings/app03_an/main.py": "from functools import lru_cache\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\nfrom . import config\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app03_an/__init__.py": "", "docs_src/settings/app03_an/config_pv1.py": "from pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n", "docs_src/settings/app01/config.py": "from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n", "docs_src/settings/app01/main.py": "from fastapi import FastAPI\n\nfrom .config import settings\n\napp = FastAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n", "docs_src/settings/app01/__init__.py": "", "docs_src/response_directly/tutorial002.py": "from fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"<?xml version=\"1.0\"?>\n    <shampoo>\n    <Header>\n        Apply shampoo here.\n    </Header>\n    <Body>\n        You'll have to use soap here.\n    </Body>\n    </shampoo>\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n", "docs_src/response_directly/tutorial001.py": "from datetime import datetime\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n", "docs_src/additional_responses/tutorial004.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\napp = FastAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n", "docs_src/additional_responses/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\napp = FastAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n", "docs_src/additional_responses/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n", "docs_src/additional_responses/tutorial003.py": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = FastAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n", "docs_src/first_steps/tutorial002.py": "from fastapi import FastAPI\n\nmy_awesome_api = FastAPI()\n\n\n@my_awesome_api.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n", "docs_src/first_steps/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n", "docs_src/first_steps/tutorial003.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n", "docs_src/graphql/tutorial001.py": "import strawberry\nfrom fastapi import FastAPI\nfrom strawberry.asgi import GraphQL\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -> User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n\n\ngraphql_app = GraphQL(schema)\n\napp = FastAPI()\napp.add_route(\"/graphql\", graphql_app)\napp.add_websocket_route(\"/graphql\", graphql_app)\n", "docs_src/sub_applications/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = FastAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n", "docs_src/body_nested_models/tutorial008_py39.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: list[Image]):\n    return images\n", "docs_src/body_nested_models/tutorial007.py": "from typing import List, Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n", "docs_src/body_nested_models/tutorial004.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial003_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial009_py39.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: dict[int, float]):\n    return weights\n", "docs_src/body_nested_models/tutorial006_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial009.py": "from typing import Dict\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n", "docs_src/body_nested_models/tutorial001_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial008.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n", "docs_src/body_nested_models/tutorial004_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial007_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n", "docs_src/body_nested_models/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial002.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial007_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n", "docs_src/body_nested_models/tutorial002_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial004_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial003_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial006_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial005.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial006.py": "from typing import List, Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial003.py": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial005_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_nested_models/tutorial005_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/metadata/tutorial004.py": "from fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://fastapi.tiangolo.com/\",\n        },\n    },\n]\n\napp = FastAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n", "docs_src/metadata/tutorial002.py": "from fastapi import FastAPI\n\napp = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n", "docs_src/metadata/tutorial001.py": "from fastapi import FastAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = FastAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n", "docs_src/metadata/tutorial003.py": "from fastapi import FastAPI\n\napp = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n", "docs_src/metadata/tutorial001_1.py": "from fastapi import FastAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = FastAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n", "docs_src/separate_openapi_schemas/tutorial001_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n", "docs_src/separate_openapi_schemas/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n", "docs_src/separate_openapi_schemas/tutorial002.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = FastAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -> List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n", "docs_src/separate_openapi_schemas/tutorial002_py39.py": "from typing import Optional\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = FastAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n", "docs_src/separate_openapi_schemas/tutorial001.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -> List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n", "docs_src/separate_openapi_schemas/tutorial001_py39.py": "from typing import Optional\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n", "docs_src/openapi_callbacks/tutorial001.py": "from typing import Union\n\nfrom fastapi import APIRouter, FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n", "docs_src/encoder/tutorial001_py310.py": "from datetime import datetime\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n", "docs_src/encoder/tutorial001.py": "from datetime import datetime\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n", "docs_src/background_tasks/tutorial002_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n", "docs_src/background_tasks/tutorial002_py310.py": "from fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n", "docs_src/background_tasks/tutorial002.py": "from typing import Union\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n", "docs_src/background_tasks/tutorial001.py": "from fastapi import BackgroundTasks, FastAPI\n\napp = FastAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n", "docs_src/background_tasks/tutorial002_an.py": "from typing import Union\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n", "docs_src/background_tasks/tutorial002_an_py310.py": "from typing import Annotated\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n", "docs_src/dependencies/tutorial002_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial001_02_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n", "docs_src/dependencies/tutorial008d.py": "from fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n", "docs_src/dependencies/tutorial008c_an.py": "from fastapi import Depends, FastAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n", "docs_src/dependencies/tutorial007.py": "async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n", "docs_src/dependencies/tutorial004.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial012.py": "from fastapi import Depends, FastAPI, Header, HTTPException\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n", "docs_src/dependencies/tutorial011.py": "from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n", "docs_src/dependencies/tutorial009.py": "from fastapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n", "docs_src/dependencies/tutorial004_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial001_py310.py": "from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n", "docs_src/dependencies/tutorial008.py": "from fastapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n", "docs_src/dependencies/tutorial004_py310.py": "from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial008_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n", "docs_src/dependencies/tutorial003_an.py": "from typing import Any, Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial002_py310.py": "from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial001_02_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n", "docs_src/dependencies/tutorial008b_an.py": "from fastapi import Depends, FastAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n", "docs_src/dependencies/tutorial008d_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n", "docs_src/dependencies/tutorial008b.py": "from fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n", "docs_src/dependencies/tutorial004_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial002.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial008c_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n", "docs_src/dependencies/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n", "docs_src/dependencies/tutorial008d_an.py": "from fastapi import Depends, FastAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n", "docs_src/dependencies/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n", "docs_src/dependencies/tutorial005_an.py": "from typing import Union\n\nfrom fastapi import Cookie, Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n", "docs_src/dependencies/tutorial003_py310.py": "from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial011_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n", "docs_src/dependencies/tutorial003_an_py310.py": "from typing import Annotated, Any\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial006_an.py": "from fastapi import Depends, FastAPI, Header, HTTPException\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n", "docs_src/dependencies/tutorial001.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n", "docs_src/dependencies/tutorial005.py": "from typing import Union\n\nfrom fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n", "docs_src/dependencies/tutorial006.py": "from fastapi import Depends, FastAPI, Header, HTTPException\n\napp = FastAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n", "docs_src/dependencies/tutorial008c.py": "from fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n", "docs_src/dependencies/tutorial006_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, Header, HTTPException\n\napp = FastAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n", "docs_src/dependencies/tutorial001_02_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n", "docs_src/dependencies/tutorial003.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial002_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial010.py": "class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n", "docs_src/dependencies/tutorial005_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n", "docs_src/dependencies/tutorial004_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial008b_an_py39.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n", "docs_src/dependencies/tutorial012_an_py39.py": "from fastapi import Depends, FastAPI, Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n", "docs_src/dependencies/tutorial003_an_py39.py": "from typing import Annotated, Any, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial005_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n", "docs_src/dependencies/tutorial012_an.py": "from fastapi import Depends, FastAPI, Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n", "docs_src/dependencies/tutorial002_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n", "docs_src/dependencies/tutorial011_an.py": "from fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n", "docs_src/dependencies/tutorial008_an.py": "from fastapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n", "docs_src/dependencies/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n", "docs_src/dependencies/tutorial005_py310.py": "from fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n", "docs_src/dataclasses/tutorial002.py": "from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom fastapi import FastAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }\n", "docs_src/dataclasses/tutorial001.py": "from dataclasses import dataclass\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n", "docs_src/dataclasses/tutorial003.py": "from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic.dataclasses import dataclass  # (2)\n\n\n@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None\n\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)\n\n\napp = FastAPI()\n\n\n@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)\n\n\n@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n", "docs_src/async_sql_databases/tutorial001.py": "from typing import List\n\nimport databases\nimport sqlalchemy\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n", "docs_src/body_fields/tutorial001_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_fields/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_fields/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_fields/tutorial001.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/body_fields/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/custom_response/tutorial007.py": "from fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n", "docs_src/custom_response/tutorial004.py": "from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n", "docs_src/custom_response/tutorial009b.py": "from fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = FastAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n", "docs_src/custom_response/tutorial006b.py": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/fastapi\", response_class=RedirectResponse)\nasync def redirect_fastapi():\n    return \"https://fastapi.tiangolo.com\"\n", "docs_src/custom_response/tutorial001b.py": "from fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n", "docs_src/custom_response/tutorial009.py": "from fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n", "docs_src/custom_response/tutorial008.py": "from fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n", "docs_src/custom_response/tutorial002.py": "from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n", "docs_src/custom_response/tutorial006c.py": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\"\n", "docs_src/custom_response/tutorial009c.py": "from typing import Any\n\nimport orjson\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -> bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n", "docs_src/custom_response/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n", "docs_src/custom_response/tutorial005.py": "from fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n", "docs_src/custom_response/tutorial006.py": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n", "docs_src/custom_response/tutorial003.py": "from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n", "docs_src/custom_response/tutorial010.py": "from fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n", "docs_src/templates/tutorial001.py": "from fastapi import FastAPI, Request\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\n\napp = FastAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )\n", "docs_src/static_files/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles\n\napp = FastAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n", "docs_src/conditional_openapi/tutorial001.py": "from fastapi import FastAPI\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = FastAPI(openapi_url=settings.openapi_url)\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n", "docs_src/extra_models/tutorial004.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items\n", "docs_src/extra_models/tutorial001_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n", "docs_src/extra_models/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n", "docs_src/extra_models/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n", "docs_src/extra_models/tutorial004_py39.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n", "docs_src/extra_models/tutorial003_py310.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n", "docs_src/extra_models/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n", "docs_src/extra_models/tutorial005.py": "from typing import Dict\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n", "docs_src/extra_models/tutorial003.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n", "docs_src/extra_models/tutorial005_py39.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n", "docs_src/request_forms/tutorial001_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Form\n\napp = FastAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n", "docs_src/request_forms/tutorial001.py": "from fastapi import FastAPI, Form\n\napp = FastAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n", "docs_src/request_forms/tutorial001_an.py": "from fastapi import FastAPI, Form\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n", "docs_src/python_types/tutorial008_py39.py": "def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n", "docs_src/python_types/tutorial007.py": "from typing import Set, Tuple\n\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\n", "docs_src/python_types/tutorial013_py39.py": "from typing import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -> str:\n    return f\"Hello {name}\"\n", "docs_src/python_types/tutorial004.py": "def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n", "docs_src/python_types/tutorial009b.py": "from typing import Union\n\n\ndef say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n", "docs_src/python_types/tutorial012.py": "from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    name: str\n    age: Optional[int]\n", "docs_src/python_types/tutorial011.py": "from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# > 123\n", "docs_src/python_types/tutorial009.py": "from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n", "docs_src/python_types/tutorial009c_py310.py": "def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n", "docs_src/python_types/tutorial008.py": "from typing import Dict\n\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n", "docs_src/python_types/tutorial007_py39.py": "def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s\n", "docs_src/python_types/tutorial013.py": "from typing_extensions import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -> str:\n    return f\"Hello {name}\"\n", "docs_src/python_types/tutorial011_py310.py": "from datetime import datetime\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# > 123\n", "docs_src/python_types/tutorial008b.py": "from typing import Union\n\n\ndef process_item(item: Union[int, str]):\n    print(item)\n", "docs_src/python_types/tutorial002.py": "def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n", "docs_src/python_types/tutorial009c.py": "from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n", "docs_src/python_types/tutorial006_py39.py": "def process_items(items: list[str]):\n    for item in items:\n        print(item)\n", "docs_src/python_types/tutorial008b_py310.py": "def process_item(item: int | str):\n    print(item)\n", "docs_src/python_types/tutorial001.py": "def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n", "docs_src/python_types/tutorial005.py": "def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e\n", "docs_src/python_types/tutorial006.py": "from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n", "docs_src/python_types/tutorial003.py": "def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n", "docs_src/python_types/tutorial010.py": "class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n", "docs_src/python_types/tutorial009_py310.py": "def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n", "docs_src/python_types/tutorial011_py39.py": "from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# > 123\n", "docs_src/events/tutorial002.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n", "docs_src/events/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n", "docs_src/events/tutorial003.py": "from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = FastAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n", "docs_src/schema_extra_example/tutorial004.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial004_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial001_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial004_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial003_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial004_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial005_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial003_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial003_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial001_py310_pv1.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial005.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial001_pv1.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial003.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial005_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial004_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial003_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial005_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/schema_extra_example/tutorial005_py310.py": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n", "docs_src/cookie_params/tutorial001_py310.py": "from fastapi import Cookie, FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n", "docs_src/cookie_params/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Cookie, FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n", "docs_src/cookie_params/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Cookie, FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n", "docs_src/cookie_params/tutorial001.py": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n", "docs_src/cookie_params/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n", "docs_src/nosql_databases/tutorial001.py": "from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# FastAPI specific code\napp = FastAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n", "docs_src/response_cookies/tutorial002.py": "from fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n", "docs_src/response_cookies/tutorial001.py": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n\n@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n", "docs_src/response_model/tutorial001_01_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n", "docs_src/response_model/tutorial003_05_py310.py": "from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n", "docs_src/response_model/tutorial004.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n", "docs_src/response_model/tutorial003_04_py310.py": "from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n", "docs_src/response_model/tutorial006_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n", "docs_src/response_model/tutorial001_py310.py": "from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n", "docs_src/response_model/tutorial004_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n", "docs_src/response_model/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user\n", "docs_src/response_model/tutorial003_04.py": "from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n", "docs_src/response_model/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user\n", "docs_src/response_model/tutorial004_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n", "docs_src/response_model/tutorial003_py310.py": "from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user\n", "docs_src/response_model/tutorial003_05.py": "from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n", "docs_src/response_model/tutorial001_01.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n", "docs_src/response_model/tutorial001.py": "from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n", "docs_src/response_model/tutorial005.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n", "docs_src/response_model/tutorial003_02.py": "from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n", "docs_src/response_model/tutorial006.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n", "docs_src/response_model/tutorial003.py": "from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user\n", "docs_src/response_model/tutorial003_03.py": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/teleport\")\nasync def get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n", "docs_src/response_model/tutorial001_01_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -> Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n", "docs_src/response_model/tutorial001_py39.py": "from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n", "docs_src/response_model/tutorial003_01.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user\n", "docs_src/response_model/tutorial003_01_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    return user\n", "docs_src/response_model/tutorial005_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n", "docs_src/debugging/tutorial001.py": "import uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n", "docs_src/behind_a_proxy/tutorial004.py": "from fastapi import FastAPI, Request\n\napp = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n", "docs_src/behind_a_proxy/tutorial002.py": "from fastapi import FastAPI, Request\n\napp = FastAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n", "docs_src/behind_a_proxy/tutorial001.py": "from fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n", "docs_src/behind_a_proxy/tutorial003.py": "from fastapi import FastAPI, Request\n\napp = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n", "docs_src/additional_status_codes/tutorial001_py310.py": "from fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n", "docs_src/additional_status_codes/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n", "docs_src/additional_status_codes/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n", "docs_src/additional_status_codes/tutorial001.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n", "docs_src/additional_status_codes/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n", "docs_src/configure_swagger_ui/tutorial002.py": "from fastapi import FastAPI\n\napp = FastAPI(swagger_ui_parameters={\"syntaxHighlight.theme\": \"obsidian\"})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n", "docs_src/configure_swagger_ui/tutorial001.py": "from fastapi import FastAPI\n\napp = FastAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n", "docs_src/configure_swagger_ui/tutorial003.py": "from fastapi import FastAPI\n\napp = FastAPI(swagger_ui_parameters={\"deepLinking\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n", "docs_src/body_updates/tutorial001_py310.py": "from fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n", "docs_src/body_updates/tutorial002_py310.py": "from fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n", "docs_src/body_updates/tutorial002.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n", "docs_src/body_updates/tutorial002_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n", "docs_src/body_updates/tutorial001.py": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n", "docs_src/body_updates/tutorial001_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n", "docs_src/openapi_webhooks/tutorial001.py": "from datetime import datetime\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\n@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]\n", "docs_src/custom_request_and_route/tutorial002.py": "from typing import Callable, List\n\nfrom fastapi import Body, FastAPI, HTTPException, Request, Response\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = FastAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n", "docs_src/custom_request_and_route/tutorial001.py": "import gzip\nfrom typing import Callable, List\n\nfrom fastapi import Body, FastAPI, Request, Response\nfrom fastapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = FastAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n", "docs_src/custom_request_and_route/tutorial003.py": "import time\nfrom typing import Callable\n\nfrom fastapi import APIRouter, FastAPI, Request, Response\nfrom fastapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = FastAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n", "docs_src/dependency_testing/tutorial001_py310.py": "from fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n", "docs_src/dependency_testing/tutorial001_an_py310.py": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n", "docs_src/dependency_testing/tutorial001_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n", "docs_src/dependency_testing/tutorial001.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n", "docs_src/dependency_testing/tutorial001_an.py": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n", "docs_src/generate_clients/tutorial004.py": "import json\nfrom pathlib import Path\n\nfile_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())\n\nfor path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id\n\nfile_path.write_text(json.dumps(openapi_content))\n", "docs_src/generate_clients/tutorial003_py39.py": "from fastapi import FastAPI\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n", "docs_src/generate_clients/tutorial002.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n", "docs_src/generate_clients/tutorial002_py39.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n", "docs_src/generate_clients/tutorial001.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n", "docs_src/generate_clients/tutorial003.py": "from typing import List\n\nfrom fastapi import FastAPI\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n", "docs_src/generate_clients/tutorial001_py39.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n", "docs_src/using_request_directly/tutorial001.py": "from fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n", "docs_src/async_tests/main.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}\n", "docs_src/async_tests/test_main.py": "import pytest\nfrom httpx import AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n", "docs_src/async_tests/__init__.py": "", "docs_src/query_params_str_validations/tutorial009_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial014_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n", "docs_src/query_params_str_validations/tutorial010_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006c_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial007.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial004.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial013_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial012.py": "from typing import List\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial004_an_py310_regex.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, regex=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006b.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial013_an.py": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial006b_an.py": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial010_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial009_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial010_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial011.py": "from typing import List, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial009.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial012_py39.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial004_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial001_py310.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial008.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial004_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial008_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial003_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial002_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial013.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial006c_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial011_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] | None = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial004_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial007_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial007_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial008_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006c.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial005_an.py": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial011_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial003_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial011_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[list[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial003_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial014.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n", "docs_src/query_params_str_validations/tutorial014_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n", "docs_src/query_params_str_validations/tutorial006_an.py": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial005.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006d.py": "from fastapi import FastAPI, Query\nfrom pydantic import Required\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=Required, min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial014_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: str | None = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n", "docs_src/query_params_str_validations/tutorial006.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006c_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial003.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial002_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial010_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial009_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial010.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006d_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import Required\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = Required):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial014_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n", "docs_src/query_params_str_validations/tutorial009_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006c_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006d_an.py": "from fastapi import FastAPI, Query\nfrom pydantic import Required\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = Required):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial004_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial012_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial003_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial005_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial006b_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial011_py39.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[list[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial012_an.py": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[List[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial002_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial011_an.py": "from typing import List, Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[List[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n", "docs_src/query_params_str_validations/tutorial008_an.py": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial007_an_py39.py": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial007_an_py310.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/query_params_str_validations/tutorial008_py310.py": "from fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n", "docs_src/body/tutorial004.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n", "docs_src/body/tutorial001_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n", "docs_src/body/tutorial004_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n", "docs_src/body/tutorial002_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n", "docs_src/body/tutorial002.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n", "docs_src/body/tutorial003_py310.py": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n", "docs_src/body/tutorial001.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n", "docs_src/body/tutorial003.py": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n", "docs_src/request_forms_and_files/tutorial001_an_py39.py": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, Form, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n", "docs_src/request_forms_and_files/tutorial001.py": "from fastapi import FastAPI, File, Form, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n", "docs_src/request_forms_and_files/tutorial001_an.py": "from fastapi import FastAPI, File, Form, UploadFile\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n"}