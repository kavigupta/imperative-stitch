{"core.py": "import os\nimport sys\nimport webbrowser\nfrom platform import system\nfrom traceback import print_exc\nfrom typing import Callable\nfrom typing import List\nfrom typing import Tuple\n\n\ndef clear_screen():\n    os.system(\"cls\" if system() == \"Windows\" else \"clear\")\n\n\ndef validate_input(ip, val_range):\n    val_range = val_range or []\n    try:\n        ip = int(ip)\n        if ip in val_range:\n            return ip\n    except Exception:\n        return None\n    return None\n\n\nclass HackingTool(object):\n    # About the HackingTool\n    TITLE: str = \"\"  # used to show info in the menu\n    DESCRIPTION: str = \"\"\n\n    INSTALL_COMMANDS: List[str] = []\n    INSTALLATION_DIR: str = \"\"\n\n    UNINSTALL_COMMANDS: List[str] = []\n\n    RUN_COMMANDS: List[str] = []\n\n    OPTIONS: List[Tuple[str, Callable]] = []\n\n    PROJECT_URL: str = \"\"\n\n    def __init__(self, options = None, installable: bool = True,\n                 runnable: bool = True):\n        options = options or []\n        if isinstance(options, list):\n            self.OPTIONS = []\n            if installable:\n                self.OPTIONS.append(('Install', self.install))\n            if runnable:\n                self.OPTIONS.append(('Run', self.run))\n            self.OPTIONS.extend(options)\n        else:\n            raise Exception(\n                \"options must be a list of (option_name, option_fn) tuples\")\n\n    def show_info(self):\n        desc = self.DESCRIPTION\n        if self.PROJECT_URL:\n            desc += '\\n\\t[*] '\n            desc += self.PROJECT_URL\n        os.system(f'echo \"{desc}\"|boxes -d boy | lolcat')\n\n    def show_options(self, parent = None):\n        clear_screen()\n        self.show_info()\n        for index, option in enumerate(self.OPTIONS):\n            print(f\"[{index + 1}] {option[0]}\")\n        if self.PROJECT_URL:\n            print(f\"[{98}] Open project page\")\n        print(f\"[{99}] Back to {parent.TITLE if parent is not None else 'Exit'}\")\n        option_index = input(\"Select an option : \").strip()\n        try:\n            option_index = int(option_index)\n            if option_index - 1 in range(len(self.OPTIONS)):\n                ret_code = self.OPTIONS[option_index - 1][1]()\n                if ret_code != 99:\n                    input(\"\\n\\nPress ENTER to continue:\").strip()\n            elif option_index == 98:\n                self.show_project_page()\n            elif option_index == 99:\n                if parent is None:\n                    sys.exit()\n                return 99\n        except (TypeError, ValueError):\n            print(\"Please enter a valid option\")\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        except Exception:\n            print_exc()\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        return self.show_options(parent = parent)\n\n    def before_install(self):\n        pass\n\n    def install(self):\n        self.before_install()\n        if isinstance(self.INSTALL_COMMANDS, (list, tuple)):\n            for INSTALL_COMMAND in self.INSTALL_COMMANDS:\n                os.system(INSTALL_COMMAND)\n            self.after_install()\n\n    def after_install(self):\n        print(\"Successfully installed!\")\n\n    def before_uninstall(self) -> bool:\n        \"\"\" Ask for confirmation from the user and return \"\"\"\n        return True\n\n    def uninstall(self):\n        if self.before_uninstall():\n            if isinstance(self.UNINSTALL_COMMANDS, (list, tuple)):\n                for UNINSTALL_COMMAND in self.UNINSTALL_COMMANDS:\n                    os.system(UNINSTALL_COMMAND)\n            self.after_uninstall()\n\n    def after_uninstall(self):\n        pass\n\n    def before_run(self):\n        pass\n\n    def run(self):\n        self.before_run()\n        if isinstance(self.RUN_COMMANDS, (list, tuple)):\n            for RUN_COMMAND in self.RUN_COMMANDS:\n                os.system(RUN_COMMAND)\n            self.after_run()\n\n    def after_run(self):\n        pass\n\n    def is_installed(self, dir_to_check = None):\n        print(\"Unimplemented: DO NOT USE\")\n        return \"?\"\n\n    def show_project_page(self):\n        webbrowser.open_new_tab(self.PROJECT_URL)\n\n\nclass HackingToolsCollection(object):\n    TITLE: str = \"\"  # used to show info in the menu\n    DESCRIPTION: str = \"\"\n    TOOLS = []  # type: List[Any[HackingTool, HackingToolsCollection]]\n\n    def __init__(self):\n        pass\n\n    def show_info(self):\n        os.system(\"figlet -f standard -c {} | lolcat\".format(self.TITLE))\n        # os.system(f'echo \"{self.DESCRIPTION}\"|boxes -d boy | lolcat')\n        # print(self.DESCRIPTION)\n\n    def show_options(self, parent = None):\n        clear_screen()\n        self.show_info()\n        for index, tool in enumerate(self.TOOLS):\n            print(f\"[{index} {tool.TITLE}\")\n        print(f\"[{99}] Back to {parent.TITLE if parent is not None else 'Exit'}\")\n        tool_index = input(\"Choose a tool to proceed: \").strip()\n        try:\n            tool_index = int(tool_index)\n            if tool_index in range(len(self.TOOLS)):\n                ret_code = self.TOOLS[tool_index].show_options(parent = self)\n                if ret_code != 99:\n                    input(\"\\n\\nPress ENTER to continue:\").strip()\n            elif tool_index == 99:\n                if parent is None:\n                    sys.exit()\n                return 99\n        except (TypeError, ValueError):\n            print(\"Please enter a valid option\")\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        except Exception:\n            print_exc()\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        return self.show_options(parent = parent)\n", "hackingtool.py": "#!/usr/bin/env python3\n# Version 1.1.0\nimport os\nimport sys\nimport webbrowser\nfrom platform import system\nfrom time import sleep\n\nfrom core import HackingToolsCollection\nfrom tools.anonsurf import AnonSurfTools\nfrom tools.ddos import DDOSTools\nfrom tools.exploit_frameworks import ExploitFrameworkTools\nfrom tools.forensic_tools import ForensicTools\nfrom tools.information_gathering_tools import InformationGatheringTools\nfrom tools.other_tools import OtherTools\nfrom tools.payload_creator import PayloadCreatorTools\nfrom tools.phising_attack import PhishingAttackTools\nfrom tools.post_exploitation import PostExploitationTools\nfrom tools.remote_administration import RemoteAdministrationTools\nfrom tools.reverse_engineering import ReverseEngineeringTools\nfrom tools.sql_tools import SqlInjectionTools\nfrom tools.steganography import SteganographyTools\nfrom tools.tool_manager import ToolManager\nfrom tools.webattack import WebAttackTools\nfrom tools.wireless_attack_tools import WirelessAttackTools\nfrom tools.wordlist_generator import WordlistGeneratorTools\nfrom tools.xss_attack import XSSAttackTools\n\nlogo = \"\"\"\\033[33m\n   \u2584\u2588    \u2588\u2584       \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2584\u2588   \u2584\u2588\u2584  \u2584\u2588  \u2588\u2588\u2588\u2584\u2584\u2584\u2584      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584           \u2588\u2588\u2588      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588       \n  \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2580 \u2588\u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584   \u2588\u2588\u2588    \u2588\u2588\u2588      \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \n  \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2580    \u2588\u2588\u2588\u2590\u2588\u2588\u2580   \u2588\u2588\u2588\u258c \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2580          \u2580\u2588\u2588\u2588\u2580\u2580\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \n \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2584\u2584   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2584\u2588\u2588\u2588\u2588\u2588\u2580    \u2588\u2588\u2588\u258c \u2588\u2588\u2588   \u2588\u2588\u2588  \u2584\u2588\u2588\u2588                 \u2588\u2588\u2588   \u2580 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \n\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2580  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588        \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2584    \u2588\u2588\u2588\u258c \u2588\u2588\u2588   \u2588\u2588\u2588 \u2580\u2580\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584           \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \n  \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2584    \u2588\u2588\u2588\u2590\u2588\u2588\u2584   \u2588\u2588\u2588  \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588          \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \n  \u2588\u2588\u2588    \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588 \u2580\u2588\u2588\u2588\u2584 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588          \u2588\u2588\u2588     \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584 \n  \u2588\u2588\u2588    \u2588\u2580      \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580    \u2588\u2588\u2588   \u2580\u2588\u2580 \u2588\u2580    \u2580\u2588   \u2588\u2580    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580          \u2584\u2588\u2588\u2588\u2588\u2580    \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588 \n                                         \u2580                                                                            \u2580                             \n                                    \\033[34m[\u2714] https://github.com/Z4nzu/hackingtool   [\u2714]\n                                    \\033[34m[\u2714]            Version 1.1.0               [\u2714]\n                                    \\033[91m[X] Please Don't Use For illegal Activity  [X]\n\\033[97m \"\"\"\n\nall_tools = [\n    AnonSurfTools(),\n    InformationGatheringTools(),\n    WordlistGeneratorTools(),\n    WirelessAttackTools(),\n    SqlInjectionTools(),\n    PhishingAttackTools(),\n    WebAttackTools(),\n    PostExploitationTools(),\n    ForensicTools(),\n    PayloadCreatorTools(),\n    ExploitFrameworkTools(),\n    ReverseEngineeringTools(),\n    DDOSTools(),\n    RemoteAdministrationTools(),\n    XSSAttackTools(),\n    SteganographyTools(),\n    OtherTools(),\n    ToolManager()\n]\n\n\nclass AllTools(HackingToolsCollection):\n    TITLE = \"All tools\"\n    TOOLS = all_tools\n\n    def show_info(self):\n        print(logo + '\\033[0m \\033[97m')\n\n\nif __name__ == \"__main__\":\n    try:\n        if system() == 'Linux':\n            fpath = os.path.expanduser(\"~/hackingtoolpath.txt\")\n            if not os.path.exists(fpath):\n                os.system('clear')\n                # run.menu()\n                print(\"\"\"\n                        [@] Set Path (All your tools will be installed in that directory)\n                        [1] Manual \n                        [2] Default\n                \"\"\")\n                choice = input(\"Z4nzu =>> \").strip()\n\n                if choice == \"1\":\n                    inpath = input(\"Enter Path (with Directory Name) >> \").strip()\n                    with open(fpath, \"w\") as f:\n                        f.write(inpath)\n                    print(\"Successfully Set Path to: {}\".format(inpath))\n                elif choice == \"2\":\n                    autopath = \"/home/hackingtool/\"\n                    with open(fpath, \"w\") as f:\n                        f.write(autopath)\n                    print(\"Your Default Path Is: {}\".format(autopath))\n                    sleep(3)\n                else:\n                    print(\"Try Again..!!\")\n                    sys.exit(0)\n\n            with open(fpath) as f:\n                archive = f.readline()\n                os.makedirs(archive, exist_ok=True)\n                os.chdir(archive)\n                AllTools().show_options()\n\n        # If not Linux and probably Windows\n        elif system() == \"Windows\":\n            print(\n                r\"\\033[91m Please Run This Tool On A Debian System For Best Results\\e[00m\"\n            )\n            sleep(2)\n            webbrowser.open_new_tab(\"https://tinyurl.com/y522modc\")\n\n        else:\n            print(\"Please Check Your System or Open New Issue ...\")\n\n    except KeyboardInterrupt:\n        print(\"\\nExiting ..!!!\")\n        sleep(2)\n", "generate_readme.py": "import re\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom hackingtool import all_tools\n\n\ndef sanitize_anchor(s):\n    return re.sub(r\"\\W\", \"-\", s.lower())\n\n\ndef get_toc(tools, indentation = \"\"):\n    md = \"\"\n    for tool in tools:\n        if isinstance(tool, HackingToolsCollection):\n            md += (indentation + \"- [{}](#{})\\n\".format(\n                tool.TITLE, sanitize_anchor(tool.TITLE)))\n            md += get_toc(tool.TOOLS, indentation = indentation + '    ')\n    return md\n\n\ndef get_tools_toc(tools, indentation = \"##\"):\n    md = \"\"\n    for tool in tools:\n        if isinstance(tool, HackingToolsCollection):\n            md += (indentation + \"# {}\\n\".format(tool.TITLE))\n            md += get_tools_toc(tool.TOOLS, indentation = indentation + '#')\n        elif isinstance(tool, HackingTool):\n            if tool.PROJECT_URL:\n                md += (\"- [{}]({})\\n\".format(tool.TITLE, tool.PROJECT_URL))\n            else:\n                md += (\"- {}\\n\".format(tool.TITLE))\n    return md\n\n\ndef generate_readme():\n    toc = get_toc(all_tools[:-1])\n    tools_desc = get_tools_toc(all_tools[:-1])\n\n    with open(\"README_template.md\") as fh:\n        readme_template = fh.read()\n\n    readme_template = readme_template.replace(\"{{toc}}\", toc)\n    readme_template = readme_template.replace(\"{{tools}}\", tools_desc)\n\n    with open(\"README.md\", \"w\") as fh:\n        fh.write(readme_template)\n\n\nif __name__ == '__main__':\n    generate_readme()\n", "tools/anonsurf.py": "# coding=utf-8\nimport os\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass AnonymouslySurf(HackingTool):\n    TITLE = \"Anonymously Surf\"\n    DESCRIPTION = \"It automatically overwrites the RAM when\\n\" \\\n                  \"the system is shutting down and also change Ip.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Und3rf10w/kali-anonsurf.git\",\n        \"cd kali-anonsurf && sudo ./installer.sh && cd .. && sudo rm -r kali-anonsurf\"\n    ]\n    RUN_COMMANDS = [\"sudo anonsurf start\"]\n    PROJECT_URL = \"https://github.com/Und3rf10w/kali-anonsurf\"\n\n    def __init__(self):\n        super(AnonymouslySurf, self).__init__([('Stop', self.stop)])\n\n    def stop(self):\n        os.system(\"sudo anonsurf stop\")\n\n\nclass Multitor(HackingTool):\n    TITLE = \"Multitor\"\n    DESCRIPTION = \"How to stay in multi places at the same time\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/trimstray/multitor.git\",\n        \"cd multitor;sudo bash setup.sh install\"\n    ]\n    RUN_COMMANDS = [\"multitor --init 2 --user debian-tor --socks-port 9000 --control-port 9900 --proxy privoxy --haproxy\"]\n    PROJECT_URL = \"https://github.com/trimstray/multitor\"\n\n    def __init__(self):\n        super(Multitor, self).__init__(runnable = False)\n\n\nclass AnonSurfTools(HackingToolsCollection):\n    TITLE = \"Anonymously Hiding Tools\"\n    DESCRIPTION = \"\"\n    TOOLS = [\n        AnonymouslySurf(),\n        Multitor()\n    ]\n", "tools/wireless_attack_tools.py": "# coding=utf-8\nimport os\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass WIFIPumpkin(HackingTool):\n    TITLE = \"WiFi-Pumpkin\"\n    DESCRIPTION = \"The WiFi-Pumpkin is a rogue AP framework to easily create \" \\\n                  \"these fake networks\\n\" \\\n                  \"all while forwarding legitimate traffic to and from the \" \\\n                  \"unsuspecting target.\"\n    INSTALL_COMMANDS = [\n        \"sudo apt install libssl-dev libffi-dev build-essential\",\n        \"sudo git clone https://github.com/P0cL4bs/wifipumpkin3.git\",\n        \"chmod -R 755 wifipumpkin3\",\n        \"sudo apt install python3-pyqt5\",\n        \"cd wifipumpkin3;sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"sudo wifipumpkin3\"]\n    PROJECT_URL = \"https://github.com/P0cL4bs/wifipumpkin3\"\n\n\nclass pixiewps(HackingTool):\n    TITLE = \"pixiewps\"\n    DESCRIPTION = \"Pixiewps is a tool written in C used to bruteforce offline \" \\\n                  \"the WPS pin\\n \" \\\n                  \"exploiting the low or non-existing entropy of some Access \" \\\n                  \"Points, the so-called pixie dust attack\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/wiire/pixiewps.git && apt-get -y install build-essential\",\n        \"cd pixiewps*/ && make\",\n        \"cd pixiewps*/ && sudo make install && wget https://pastebin.com/y9Dk1Wjh\"\n    ]\n    PROJECT_URL = \"https://github.com/wiire/pixiewps\"\n\n    def run(self):\n        os.system(\n            'echo \"'\n            '1.> Put your interface into monitor mode using '\n            '\\'airmon-ng start {wireless interface}\\n'\n            '2.> wash -i {monitor-interface like mon0}\\'\\n'\n            '3.> reaver -i {monitor interface} -b {BSSID of router} -c {router channel} -vvv -K 1 -f\"'\n            '| boxes -d boy')\n        print(\"You Have To Run Manually By USing >>pixiewps -h \")\n\n\nclass BluePot(HackingTool):\n    TITLE = \"Bluetooth Honeypot GUI Framework\"\n    DESCRIPTION = \"You need to have at least 1 bluetooth receiver \" \\\n                  \"(if you have many it will work with those, too).\\n\" \\\n                  \"You must install/libbluetooth-dev on \" \\\n                  \"Ubuntu/bluez-libs-devel on Fedora/bluez-devel on openSUSE\"\n    INSTALL_COMMANDS = [\n        \"sudo wget https://raw.githubusercontent.com/andrewmichaelsmith/bluepot/master/bin/bluepot-0.2.tar.gz\"\n        \"sudo tar xfz bluepot-0.2.tar.gz;sudo rm bluepot-0.2.tar.gz\"\n    ]\n    RUN_COMMANDS = [\"cd bluepot && sudo java -jar bluepot.jar\"]\n    PROJECT_URL = \"https://github.com/andrewmichaelsmith/bluepot\"\n\n\nclass Fluxion(HackingTool):\n    TITLE = \"Fluxion\"\n    DESCRIPTION = \"Fluxion is a remake of linset by vk496 with enhanced functionality.\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/FluxionNetwork/fluxion.git\",\n        \"cd fluxion && sudo chmod +x fluxion.sh\",\n    ]\n    RUN_COMMANDS = [\"cd fluxion;sudo bash fluxion.sh -i\"]\n    PROJECT_URL = \"https://github.com/FluxionNetwork/fluxion\"\n\n\nclass Wifiphisher(HackingTool):\n    TITLE = \"Wifiphisher\"\n    DESCRIPTION = \"\"\"\n        Wifiphisher is a rogue Access Point framework for conducting red team engagements or Wi-Fi security testing. \n        Using Wifiphisher, penetration testers can easily achieve a man-in-the-middle position against wireless clients by performing \n        targeted Wi-Fi association attacks. Wifiphisher can be further used to mount victim-customized web phishing attacks against the\n        connected clients in order to capture credentials (e.g. from third party login pages or WPA/WPA2 Pre-Shared Keys) or infect the \n        victim stations with malware..\\n\n        For More Details Visit >> https://github.com/wifiphisher/wifiphisher\n    \"\"\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/wifiphisher/wifiphisher.git\",\n        \"cd wifiphisher;sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"cd wifiphisher;sudo wifiphisher\"]\n    PROJECT_URL = \"https://github.com/wifiphisher/wifiphisher\"\n\n\nclass Wifite(HackingTool):\n    TITLE = \"Wifite\"\n    DESCRIPTION = \"Wifite is an automated wireless attack tool\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/derv82/wifite2.git\",\n        \"cd wifite2 && sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"cd wifite2; sudo wifite\"]\n    PROJECT_URL = \"https://github.com/derv82/wifite2\"\n\n\nclass EvilTwin(HackingTool):\n    TITLE = \"EvilTwin\"\n    DESCRIPTION = \"Fakeap is a script to perform Evil Twin Attack, by getting\" \\\n                  \" credentials using a Fake page and Fake Access Point\"\n    INSTALL_COMMANDS = [\"sudo git clone https://github.com/Z4nzu/fakeap.git\"]\n    RUN_COMMANDS = [\"cd fakeap && sudo bash fakeap.sh\"]\n    PROJECT_URL = \"https://github.com/Z4nzu/fakeap\"\n\n\nclass Fastssh(HackingTool):\n    TITLE = \"Fastssh\"\n    DESCRIPTION = \"Fastssh is an Shell Script to perform multi-threaded scan\" \\\n                  \" \\n and brute force attack against SSH protocol using the \" \\\n                  \"most commonly credentials.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Z4nzu/fastssh.git && cd fastssh && sudo chmod +x fastssh.sh\",\n        \"sudo apt-get install -y sshpass netcat\"\n    ]\n    RUN_COMMANDS = [\"cd fastssh && sudo bash fastssh.sh --scan\"]\n    PROJECT_URL = \"https://github.com/Z4nzu/fastssh\"\n\n\nclass Howmanypeople(HackingTool):\n    TITLE = \"Howmanypeople\"\n    DESCRIPTION = \"Count the number of people around you by monitoring wifi \" \\\n                  \"signals.\\n\" \\\n                  \"[@] WIFI ADAPTER REQUIRED* \\n[*]\" \\\n                  \"It may be illegal to monitor networks for MAC addresses, \\n\" \\\n                  \"especially on networks that you do not own. \" \\\n                  \"Please check your country's laws\"\n    INSTALL_COMMANDS = [\n        \"sudo apt-get install tshark\"\n        \";sudo python3 -m pip install howmanypeoplearearound\"\n    ]\n    RUN_COMMANDS = [\"howmanypeoplearearound\"]\n\n\nclass WirelessAttackTools(HackingToolsCollection):\n    TITLE = \"Wireless attack tools\"\n    DESCRIPTION = \"\"\n    TOOLS = [\n        WIFIPumpkin(),\n        pixiewps(),\n        BluePot(),\n        Fluxion(),\n        Wifiphisher(),\n        Wifite(),\n        EvilTwin(),\n        Fastssh(),\n        Howmanypeople()\n    ]\n", "tools/forensic_tools.py": "# coding=utf-8\nimport os\n\nimport sys\n\n# Fetching parent directory for importing core.py\ncurrent_dir = os.path.dirname(__file__)\nparent_dir = os.path.dirname(current_dir)\nsys.path.append(parent_dir)\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Autopsy(HackingTool):\n    TITLE = \"Autopsy\"\n    DESCRIPTION = \"Autopsy is a platform that is used by Cyber Investigators.\\n\" \\\n                  \"[!] Works in any OS\\n\" \\\n                  \"[!] Recover Deleted Files from any OS & Media \\n\" \\\n                  \"[!] Extract Image Metadata\"\n    RUN_COMMANDS = [\"sudo autopsy\"]\n\n    def __init__(self):\n        super(Autopsy, self).__init__(installable = False)\n\n\nclass Wireshark(HackingTool):\n    TITLE = \"Wireshark\"\n    DESCRIPTION = \"Wireshark is a network capture and analyzer \\n\" \\\n                  \"tool to see what\u2019s happening in your network.\\n \" \\\n                  \"And also investigate Network related incident\"\n    RUN_COMMANDS = [\"sudo wireshark\"]\n\n    def __init__(self):\n        super(Wireshark, self).__init__(installable = False)\n\n\nclass BulkExtractor(HackingTool):\n    TITLE = \"Bulk extractor\"\n    DESCRIPTION = \"Extract useful information without parsing the file system\"\n    PROJECT_URL = \"https://github.com/simsong/bulk_extractor\"\n\n    def __init__(self):\n        super(BulkExtractor, self).__init__([\n            ('GUI Mode (Download required)', self.gui_mode),\n            ('CLI Mode', self.cli_mode)\n        ], installable = False, runnable = False)\n\n    def gui_mode(self):\n        os.system(\n            \"sudo git clone https://github.com/simsong/bulk_extractor.git\")\n        os.system(\"ls src/ && cd .. && cd java_gui && ./BEViewer\")\n        print(\n            \"If you getting error after clone go to /java_gui/src/ And Compile .Jar file && run ./BEViewer\")\n        print(\n            \"Please Visit For More Details About Installation >> https://github.com/simsong/bulk_extractor\")\n\n    def cli_mode(self):\n        os.system(\"sudo apt install bulk-extractor\")\n        print(\"bulk_extractor and options\")\n        os.system(\"bulk_extractor -h\")\n        os.system(\n            'echo \"bulk_extractor [options] imagefile\" | boxes -d headline | lolcat')\n\n\nclass Guymager(HackingTool):\n    TITLE = \"Disk Clone and ISO Image Acquire\"\n    DESCRIPTION = \"Guymager is a free forensic imager for media acquisition.\"\n    INSTALL_COMMANDS = [\"sudo apt install guymager\"]\n    RUN_COMMANDS = [\"sudo guymager\"]\n    PROJECT_URL = \"https://guymager.sourceforge.io/\"\n\n\nclass Toolsley(HackingTool):\n    TITLE = \"Toolsley\"\n    DESCRIPTION = \"Toolsley got more than ten useful tools for investigation.\\n\" \\\n                  \"[+]File signature verifier\\n\" \\\n                  \"[+]File identifier \\n\" \\\n                  \"[+]Hash & Validate \\n\" \\\n                  \"[+]Binary inspector \\n \" \\\n                  \"[+]Encode text \\n\" \\\n                  \"[+]Data URI generator \\n\" \\\n                  \"[+]Password generator\"\n    PROJECT_URL = \"https://www.toolsley.com/\"\n\n    def __init__(self):\n        super(Toolsley, self).__init__(installable = False, runnable = False)\n\n\nclass ForensicTools(HackingToolsCollection):\n    TITLE = \"Forensic tools\"\n    TOOLS = [\n        Autopsy(),\n        Wireshark(),\n        BulkExtractor(),\n        Guymager(),\n        Toolsley()\n    ]\n", "tools/ddos.py": "# coding=utf-8\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass ddos(HackingTool):\n    TITLE = \"ddos\"\n    DESCRIPTION = (\n        \"Best DDoS Attack Script With 36 Plus Methods.\"\n        \"DDoS attacks\\n\\b \"\n        \"for SECURITY TESTING PURPOSES ONLY! \"\n    )\n\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/the-deepnet/ddos.git\",\n        \"cd ddos;sudo pip3 install -r requirements.txt\",\n    ]\n    PROJECT_URL = \"https://github.com/the-deepnet/ddos.git\"\n\n    def run(self):\n        method = input(\"Enter Method >> \")\n        url = input(\"Enter URL >> \")\n        threads = input(\"Enter Threads >> \")\n        proxylist = input(\" Enter ProxyList >> \")\n        multiple = input(\" Enter Multiple >> \")\n        timer = input(\" Enter Timer >> \")\n        os.system(\"cd ddos;\")\n        subprocess.run(\n            [\n                \"sudo\",\n                \"python3 ddos\",\n                method,\n                url,\n                \"socks_type5.4.1\",\n                threads,\n                proxylist,\n                multiple,\n                timer,\n            ]\n        )\n\n\nclass SlowLoris(HackingTool):\n    TITLE = \"SlowLoris\"\n    DESCRIPTION = (\n        \"Slowloris is basically an HTTP Denial of Service attack.\"\n        \"It send lots of HTTP Request\"\n    )\n    INSTALL_COMMANDS = [\"sudo pip3 install slowloris\"]\n\n    def run(self):\n        target_site = input(\"Enter Target Site:- \")\n        subprocess.run([\"slowloris\", target_site])\n\n\nclass Asyncrone(HackingTool):\n    TITLE = \"Asyncrone | Multifunction SYN Flood DDoS Weapon\"\n    DESCRIPTION = (\n        \"aSYNcrone is a C language based, mulltifunction SYN Flood \"\n        \"DDoS Weapon.\\nDisable the destination system by sending a \"\n        \"SYN packet intensively to the destination.\"\n    )\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/fatih4842/aSYNcrone.git\",\n        \"cd aSYNcrone;sudo gcc aSYNcrone.c -o aSYNcrone -lpthread\",\n    ]\n    PROJECT_URL = \"https://github.com/fatihsnsy/aSYNcrone\"\n\n    def run(self):\n        source_port = input(\"Enter Source Port >> \")\n        target_ip = input(\"Enter Target IP >> \")\n        target_port = input(\"Enter Target port >> \")\n        os.system(\"cd aSYNcrone;\")\n        subprocess.run(\n            [\"sudo\", \"./aSYNcrone\", source_port, target_ip, target_port, 1000]\n        )\n\n\nclass UFONet(HackingTool):\n    TITLE = \"UFOnet\"\n    DESCRIPTION = (\n        \"UFONet - is a free software, P2P and cryptographic \"\n        \"-disruptive \\n toolkit- that allows to perform DoS and \"\n        \"DDoS attacks\\n\\b \"\n        \"More Usage Visit\"\n    )\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/epsylon/ufonet.git\",\n        \"cd ufonet;sudo python3 setup.py install;sudo pip3 install GeoIP;sudo pip3 install python-geoip;sudo pip3 install pygeoip;sudo pip3 install requests;sudo pip3 install pycrypto;sudo pip3 install pycurl;sudo pip3 install whois;sudo pip3 install scapy-python3\",\n    ]\n    RUN_COMMANDS = [\"sudo python3 ufonet --gui\"]\n    PROJECT_URL = \"https://github.com/epsylon/ufonet\"\n\n\nclass GoldenEye(HackingTool):\n    TITLE = \"GoldenEye\"\n    DESCRIPTION = (\n        \"GoldenEye is a python3 app for SECURITY TESTING PURPOSES ONLY!\\n\"\n        \"GoldenEye is a HTTP DoS Test Tool.\"\n    )\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/jseidl/GoldenEye.git;\"\n        \"chmod -R 755 GoldenEye\"\n    ]\n    PROJECT_URL = \"https://github.com/jseidl/GoldenEye\"\n\n    def run(self):\n        os.system(\"cd GoldenEye ;sudo ./goldeneye.py\")\n        print(\"\\033[96m Go to Directory \\n [*] USAGE: ./goldeneye.py <url> [OPTIONS]\")\n\n\nclass Saphyra(HackingTool):\n    TITLE = \"SaphyraDDoS\"\n    DESCRIPTION = \"A complex python code to DDoS any website with a very easy usage.!\\n\"\n    INSTALL_COMMANDS = [\n        \"sudo su\",\n        \"git clone https://github.com/anonymous24x7/Saphyra-DDoS.git\",\n        \"cd Saphyra-DDoS\",\n        \"chmod +x saphyra.py\",\n        \"python saphyra.py\",\n    ]\n    PROJECT_URL = \"https://github.com/anonymous24x7/Saphyra-DDoS\"\n\n    def run(self):\n        url = input(\"Enter url>>> \")\n        try:\n            os.system(\"python saphyra.py \" + url)\n        except Exception:\n            print(\"Enter a valid url.\")\n\n\nclass DDOSTools(HackingToolsCollection):\n    TITLE = \"DDOS Attack Tools\"\n    TOOLS = [SlowLoris(), Asyncrone(), UFONet(), GoldenEye(), Saphyra()]\n", "tools/information_gathering_tools.py": "# coding=utf-8\nimport os\nimport socket\nimport subprocess\nimport webbrowser\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom core import clear_screen\n\n\nclass NMAP(HackingTool):\n    TITLE = \"Network Map (nmap)\"\n    DESCRIPTION = \"Free and open source utility for network discovery and security auditing\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/nmap/nmap.git\",\n        \"sudo chmod -R 755 nmap && cd nmap && sudo ./configure && make && sudo make install\"\n    ]\n    PROJECT_URL = \"https://github.com/nmap/nmap\"\n\n    def __init__(self):\n        super(NMAP, self).__init__(runnable = False)\n\n\nclass Dracnmap(HackingTool):\n    TITLE = \"Dracnmap\"\n    DESCRIPTION = \"Dracnmap is an open source program which is using to \\n\" \\\n                  \"exploit the network and gathering information with nmap help.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Screetsec/Dracnmap.git\",\n        \"cd Dracnmap && chmod +x dracnmap-v2.2-dracOs.sh  dracnmap-v2.2.sh\"\n    ]\n    RUN_COMMANDS = [\"cd Dracnmap;sudo ./dracnmap-v2.2.sh\"]\n    PROJECT_URL = \"https://github.com/Screetsec/Dracnmap\"\n\n#    def __init__(self):\n#        super(Dracnmap, self).__init__(runnable = False)\n\n\nclass PortScan(HackingTool):\n    TITLE = \"Port scanning\"\n\n    def __init__(self):\n        super(PortScan, self).__init__(installable = False)\n\n    def run(self):\n        clear_screen()\n        target = input('Select a Target IP: ')\n        subprocess.run([\"sudo\", \"nmap\", \"-O\", \"-Pn\", target])\n\n\nclass Host2IP(HackingTool):\n    TITLE = \"Host to IP \"\n\n    def __init__(self):\n        super(Host2IP, self).__init__(installable = False)\n\n    def run(self):\n        clear_screen()\n        host = input(\"Enter host name (e.g. www.google.com):-  \")\n        ips = socket.gethostbyname(host)\n        print(ips)\n\n\nclass XeroSploit(HackingTool):\n    TITLE = \"Xerosploit\"\n    DESCRIPTION = \"Xerosploit is a penetration testing toolkit whose goal is to perform\\n\" \\\n                  \"man-in-the-middle attacks for testing purposes\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/LionSec/xerosploit.git\",\n        \"cd xerosploit && sudo python install.py\"\n    ]\n    RUN_COMMANDS = [\"sudo xerosploit\"]\n    PROJECT_URL = \"https://github.com/LionSec/xerosploit\"\n\n\nclass RedHawk(HackingTool):\n    TITLE = \"RED HAWK (All In One Scanning)\"\n    DESCRIPTION = \"All in one tool for Information Gathering and Vulnerability Scanning.\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/Tuhinshubhra/RED_HAWK.git\"]\n    RUN_COMMANDS = [\"cd RED_HAWK;php rhawk.php\"]\n    PROJECT_URL = \"https://github.com/Tuhinshubhra/RED_HAWK\"\n\n\nclass ReconSpider(HackingTool):\n    TITLE = \"ReconSpider(For All Scanning)\"\n    DESCRIPTION = \"ReconSpider is most Advanced Open Source Intelligence (OSINT)\" \\\n                  \" Framework for scanning IP Address, Emails, \\n\" \\\n                  \"Websites, Organizations and find out information from\" \\\n                  \" different sources.\\n\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/bhavsec/reconspider.git\",\n        \"sudo apt install python3 python3-pip && cd reconspider && sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"cd reconspider;python3 reconspider.py\"]\n    PROJECT_URL = \"https://github.com/bhavsec/reconspider\"\n\n#    def __init__(self):\n#        super(ReconSpider, self).__init__(runnable = False)\n\n\nclass IsItDown(HackingTool):\n    TITLE = \"IsItDown (Check Website Down/Up)\"\n    DESCRIPTION = \"Check Website Is Online or Not\"\n\n    def __init__(self):\n        super(IsItDown, self).__init__(\n            [('Open', self.open)], installable = False, runnable = False)\n\n    def open(self):\n        webbrowser.open_new_tab(\"https://www.isitdownrightnow.com/\")\n\n\nclass Infoga(HackingTool):\n    TITLE = \"Infoga - Email OSINT\"\n    DESCRIPTION = \"Infoga is a tool gathering email accounts information\\n\" \\\n                  \"(ip, hostname, country,...) from different public source\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/m4ll0k/Infoga.git\",\n        \"cd Infoga;sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"cd Infoga;python3 infoga.py\"]\n    PROJECT_URL = \"https://github.com/m4ll0k/Infoga\"\n\n\nclass ReconDog(HackingTool):\n    TITLE = \"ReconDog\"\n    DESCRIPTION = \"ReconDog Information Gathering Suite\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/s0md3v/ReconDog.git\"]\n    RUN_COMMANDS = [\"cd ReconDog;sudo python dog\"]\n    PROJECT_URL = \"https://github.com/s0md3v/ReconDog\"\n\n\nclass Striker(HackingTool):\n    TITLE = \"Striker\"\n    DESCRIPTION = \"Recon & Vulnerability Scanning Suite\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/s0md3v/Striker.git\",\n        \"cd Striker && pip3 install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/s0md3v/Striker\"\n\n    def run(self):\n        site = input(\"Enter Site Name (example.com) >> \")\n        os.chdir(\"Striker\")\n        subprocess.run([\"sudo\", \"python3\", \"striker.py\", site])\n\n\nclass SecretFinder(HackingTool):\n    TITLE = \"SecretFinder (like API & etc)\"\n    DESCRIPTION = \"SecretFinder - A python script for find sensitive data \\n\" \\\n                  \"like apikeys, accesstoken, authorizations, jwt,..etc \\n \" \\\n                  \"and search anything on javascript files.\\n\\n \" \\\n                  \"Usage: python SecretFinder.py -h\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/m4ll0k/SecretFinder.git secretfinder\",\n        \"cd secretfinder; sudo pip3 install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/m4ll0k/SecretFinder\"\n\n    def __init__(self):\n        super(SecretFinder, self).__init__(runnable = False)\n\n\nclass Shodan(HackingTool):\n    TITLE = \"Find Info Using Shodan\"\n    DESCRIPTION = \"Get ports, vulnerabilities, information, banners,..etc \\n \" \\\n                  \"for any IP with Shodan (no apikey! no rate limit!)\\n\" \\\n                  \"[X] Don't use this tool because your ip will be blocked by Shodan!\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/m4ll0k/Shodanfy.py.git\"]\n    PROJECT_URL = \"https://github.com/m4ll0k/Shodanfy.py\"\n\n    def __init__(self):\n        super(Shodan, self).__init__(runnable = False)\n\n\nclass PortScannerRanger(HackingTool):\n    TITLE = \"Port Scanner - rang3r\"\n    DESCRIPTION = \"rang3r is a python script which scans in multi thread\\n \" \\\n                  \"all alive hosts within your range that you specify.\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/floriankunushevci/rang3r.git;\"\n        \"sudo pip install termcolor\"]\n    PROJECT_URL = \"https://github.com/floriankunushevci/rang3r\"\n\n    def run(self):\n        ip = input(\"Enter Ip >> \")\n        os.chdir(\"rang3r\")\n        subprocess.run([\"sudo\", \"python\", \"rang3r.py\", \"--ip\", ip])\n\n\nclass Breacher(HackingTool):\n    TITLE = \"Breacher\"\n    DESCRIPTION = \"An advanced multithreaded admin panel finder written in python.\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/s0md3v/Breacher.git\"]\n    PROJECT_URL = \"https://github.com/s0md3v/Breacher\"\n    \n    def run(self):\n        domain = input(\"Enter domain (example.com) >> \")\n        os.chdir(\"Breacher\")\n        subprocess.run([\"python3\", \"breacher.py\", \"-u\", domain])\n\nclass InformationGatheringTools(HackingToolsCollection):\n    TITLE = \"Information gathering tools\"\n    TOOLS = [\n        NMAP(),\n        Dracnmap(),\n        PortScan(),\n        Host2IP(),\n        XeroSploit(),\n        RedHawk(),\n        ReconSpider(),\n        IsItDown(),\n        Infoga(),\n        ReconDog(),\n        Striker(),\n        SecretFinder(),\n        Shodan(),\n        PortScannerRanger(),\n        Breacher()\n    ]\n", "tools/xss_attack.py": "# coding=utf-8\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Dalfox(HackingTool):\n    TITLE = \"DalFox(Finder of XSS)\"\n    DESCRIPTION = \"XSS Scanning and Parameter Analysis tool.\"\n    INSTALL_COMMANDS = [\n        \"sudo apt-get install golang\",\n        \"sudo git clone https://github.com/hahwul/dalfox\",\n        \"cd dalfox;go install\"\n    ]\n    RUN_COMMANDS = [\n        \"~/go/bin/dalfox\",\n        'echo \"You Need To Run manually by using [!]~/go/bin/dalfox [options]\"'\n    ]\n    PROJECT_URL = \"https://github.com/hahwul/dalfox\"\n\n\nclass XSSPayloadGenerator(HackingTool):\n    TITLE = \"XSS Payload Generator\"\n    DESCRIPTION = \"XSS PAYLOAD GENERATOR -XSS SCANNER-XSS DORK FINDER\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/capture0x/XSS-LOADER.git\",\n        \"cd XSS-LOADER;sudo pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd XSS-LOADER;sudo python3 payloader.py\"]\n    PROJECT_URL = \"https://github.com/capture0x/XSS-LOADER.git\"\n\n\nclass XSSFinder(HackingTool):\n    TITLE = \"Extended XSS Searcher and Finder\"\n    DESCRIPTION = \"Extended XSS Searcher and Finder\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/Damian89/extended-xss-search.git\"]\n    PROJECT_URL = \"https://github.com/Damian89/extended-xss-search\"\n\n    def after_install(self):\n        print(\"\"\"\\033[96m \n        Follow This Steps After Installation:-\n            \\033[31m [*] Go To extended-xss-search directory,\n                and Rename the example.app-settings.conf to app-settings.conf\n        \"\"\")\n        input(\"Press ENTER to continue\")\n\n    def run(self):\n        print(\"\"\"\\033[96m \n        You have To Add Links to scan\n        \\033[31m[!] Go to extended-xss-search\n            [*] config/urls-to-test.txt\n            [!] python3 extended-xss-search.py\n        \"\"\")\n\n\nclass XSSFreak(HackingTool):\n    TITLE = \"XSS-Freak\"\n    DESCRIPTION = \"XSS-Freak is an XSS scanner fully written in python3 from scratch\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/PR0PH3CY33/XSS-Freak.git\",\n        \"cd XSS-Freak;sudo pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd XSS-Freak;sudo python3 XSS-Freak.py\"]\n    PROJECT_URL = \"https://github.com/PR0PH3CY33/XSS-Freak\"\n\n\nclass XSpear(HackingTool):\n    TITLE = \"XSpear\"\n    DESCRIPTION = \"XSpear is XSS Scanner on ruby gems\"\n    INSTALL_COMMANDS = [\"gem install XSpear\"]\n    RUN_COMMANDS = [\"XSpear -h\"]\n    PROJECT_URL = \"https://github.com/hahwul/XSpear\"\n\n\nclass XSSCon(HackingTool):\n    TITLE = \"XSSCon\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/menkrep1337/XSSCon.git\",\n        \"sudo chmod 755 -R XSSCon\"\n    ]\n    PROJECT_URL = \"https://github.com/menkrep1337/XSSCon\"\n\n    def run(self):\n        website = input(\"Enter Website >> \")\n        os.system(\"cd XSSCon;\")\n        subprocess.run([\"python3\", \"xsscon.py\", \"-u\", website])\n\n\nclass XanXSS(HackingTool):\n    TITLE = \"XanXSS\"\n    DESCRIPTION = \"XanXSS is a reflected XSS searching tool\\n \" \\\n                  \"that creates payloads based from templates\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/Ekultek/XanXSS.git\"]\n    PROJECT_URL = \"https://github.com/Ekultek/XanXSS\"\n\n    def run(self):\n        os.system(\"cd XanXSS ;python xanxss.py -h\")\n        print(\"\\033[96m You Have to run it manually By Using\\n\"\n              \" [!]python xanxss.py [Options]\")\n\n\nclass XSSStrike(HackingTool):\n    TITLE = \"Advanced XSS Detection Suite\"\n    DESCRIPTION = \"XSStrike is a python script designed to detect and exploit XSS vulnerabilities.\"\n    INSTALL_COMMANDS = [\n        \"sudo rm -rf XSStrike\",\n        \"git clone https://github.com/UltimateHackers/XSStrike.git \"\n        \"&& cd XSStrike && pip install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/UltimateHackers/XSStrike\"\n\n    def __init__(self):\n        super(XSSStrike, self).__init__(runnable = False)\n\n\nclass RVuln(HackingTool):\n    TITLE = \"RVuln\"\n    DESCRIPTION = \"RVuln is multi-threaded and Automated Web Vulnerability \" \\\n                  \"Scanner written in Rust\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/iinc0gnit0/RVuln.git;\"\n        \"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh;\"\n        \"source $HOME/.cargo/env;\"\n        \"sudo apt install librust-openssl-dev;\"\n        \"cd RVuln;sudo su;cargo build --release;mv target/release/RVuln\"\n    ]\n    RUN_COMMANDS = [\"RVuln\"]\n    PROJECT_URL = \"https://github.com/iinc0gnit0/RVuln\"\n\n\nclass XSSAttackTools(HackingToolsCollection):\n    TITLE = \"XSS Attack Tools\"\n    TOOLS = [\n        Dalfox(),\n        XSSPayloadGenerator(),\n        XSSFinder(),\n        XSSFreak(),\n        XSpear(),\n        XSSCon(),\n        XanXSS(),\n        XSSStrike(),\n        RVuln()\n    ]\n", "tools/other_tools.py": "# coding=utf-8\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom tools.others.android_attack import AndroidAttackTools\nfrom tools.others.email_verifier import EmailVerifyTools\nfrom tools.others.hash_crack import HashCrackingTools\nfrom tools.others.homograph_attacks import IDNHomographAttackTools\nfrom tools.others.mix_tools import MixTools\nfrom tools.others.payload_injection import PayloadInjectorTools\nfrom tools.others.socialmedia import SocialMediaBruteforceTools\nfrom tools.others.socialmedia_finder import SocialMediaFinderTools\nfrom tools.others.web_crawling import WebCrawlingTools\nfrom tools.others.wifi_jamming import WifiJammingTools\n\n\nclass HatCloud(HackingTool):\n    TITLE = \"HatCloud(Bypass CloudFlare for IP)\"\n    DESCRIPTION = \"HatCloud build in Ruby. It makes bypass in CloudFlare for \" \\\n                  \"discover real IP.\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/HatBashBR/HatCloud.git\"]\n    PROJECT_URL = \"https://github.com/HatBashBR/HatCloud\"\n\n    def run(self):\n        site = input(\"Enter Site >> \")\n        os.chdir(\"HatCloud\")\n        subprocess.run([\"sudo\", \"ruby\", \"hatcloud.rb\", \"-b\", site])\n\n\nclass OtherTools(HackingToolsCollection):\n    TITLE = \"Other tools\"\n    TOOLS = [\n        SocialMediaBruteforceTools(),\n        AndroidAttackTools(),\n        HatCloud(),\n        IDNHomographAttackTools(),\n        EmailVerifyTools(),\n        HashCrackingTools(),\n        WifiJammingTools(),\n        SocialMediaFinderTools(),\n        PayloadInjectorTools(),\n        WebCrawlingTools(),\n        MixTools()\n    ]\n", "tools/payload_creator.py": "import os\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass TheFatRat(HackingTool):\n    TITLE = \"The FatRat\"\n    DESCRIPTION = \"TheFatRat Provides An Easy way to create Backdoors and \\n\" \\\n                  \"Payload which can bypass most anti-virus\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Screetsec/TheFatRat.git\",\n        \"cd TheFatRat && sudo chmod +x setup.sh\"\n    ]\n    RUN_COMMANDS = [\"cd TheFatRat && sudo bash setup.sh\"]\n    PROJECT_URL = \"https://github.com/Screetsec/TheFatRat\"\n\n    def __init__(self):\n        super(TheFatRat, self).__init__([\n            ('Update', self.update),\n            ('Troubleshoot', self.troubleshoot)\n        ])\n\n    def update(self):\n        os.system(\n            \"cd TheFatRat && bash update && chmod +x setup.sh && bash setup.sh\")\n\n    def troubleshoot(self):\n        os.system(\"cd TheFatRat && sudo chmod +x chk_tools && ./chk_tools\")\n\n\nclass Brutal(HackingTool):\n    TITLE = \"Brutal\"\n    DESCRIPTION = \"Brutal is a toolkit to quickly create various payload,\" \\\n                  \"powershell attack,\\nvirus attack and launch listener for \" \\\n                  \"a Human Interface Device\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Screetsec/Brutal.git\",\n        \"cd Brutal && sudo chmod +x Brutal.sh\"\n    ]\n    RUN_COMMANDS = [\"cd Brutal && sudo bash Brutal.sh\"]\n    PROJECT_URL = \"https://github.com/Screetsec/Brutal\"\n\n    def show_info(self):\n        super(Brutal, self).show_info()\n        print(\"\"\"\n        [!] Requirement\n            >> Arduino Software (I used v1.6.7)\n            >> TeensyDuino\n            >> Linux udev rules\n            >> Copy and paste the PaensyLib folder inside your Arduino libraries\n    \n        [!] Kindly Visit below link for Installation for Arduino \n            >> https://github.com/Screetsec/Brutal/wiki/Install-Requirements \n        \"\"\")\n\n\nclass Stitch(HackingTool):\n    TITLE = \"Stitch\"\n    DESCRIPTION = \"Stitch is Cross Platform Python Remote Administrator Tool\\n\\t\" \\\n                  \"[!] Refer Below Link For Wins & MAc Os\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/nathanlopez/Stitch.git\",\n        \"cd Stitch && sudo pip install -r lnx_requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd Stitch && sudo python main.py\"]\n    PROJECT_URL = \"https://nathanlopez.github.io/Stitch\"\n\n\nclass MSFVenom(HackingTool):\n    TITLE = \"MSFvenom Payload Creator\"\n    DESCRIPTION = \"MSFvenom Payload Creator (MSFPC) is a wrapper to generate \\n\" \\\n                  \"multiple types of payloads, based on users choice.\\n\" \\\n                  \"The idea is to be as simple as possible (only requiring \" \\\n                  \"one input) \\nto produce their payload.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/g0tmi1k/msfpc.git\",\n        \"cd msfpc;sudo chmod +x msfpc.sh\"\n    ]\n    RUN_COMMANDS = [\"cd msfpc;sudo bash msfpc.sh -h -v\"]\n    PROJECT_URL = \"https://github.com/g0tmi1k/msfpc\"\n\n\nclass Venom(HackingTool):\n    TITLE = \"Venom Shellcode Generator\"\n    DESCRIPTION = \"venom 1.0.11 (malicious_server) was build to take \" \\\n                  \"advantage of \\n apache2 webserver to deliver payloads \" \\\n                  \"(LAN) using a fake webpage written in html\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/r00t-3xp10it/venom.git\",\n        \"sudo chmod -R 775 venom*/ && cd venom*/ && cd aux && sudo bash setup.sh\",\n        \"sudo ./venom.sh -u\"\n    ]\n    RUN_COMMANDS = [\"cd venom && sudo ./venom.sh\"]\n    PROJECT_URL = \"https://github.com/r00t-3xp10it/venom\"\n\n\nclass Spycam(HackingTool):\n    TITLE = \"Spycam\"\n    DESCRIPTION = \"Script to generate a Win32 payload that takes the webcam \" \\\n                  \"image every 1 minute and send it to the attacker\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/indexnotfound404/spycam.git\",\n        \"cd spycam && bash install.sh && chmod +x spycam\"\n    ]\n    RUN_COMMANDS = [\"cd spycam && ./spycam\"]\n    PROJECT_URL = \"https://github.com/indexnotfound404/spycam\"\n\n\nclass MobDroid(HackingTool):\n    TITLE = \"Mob-Droid\"\n    DESCRIPTION = \"Mob-Droid helps you to generate metasploit payloads in \" \\\n                  \"easy way\\n without typing long commands and save your time\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/kinghacker0/mob-droid.git\"]\n    RUN_COMMANDS = [\"cd mob-droid;sudo python mob-droid.py\"]\n    PROJECT_URL = \"https://github.com/kinghacker0/Mob-Droid\"\n\n\nclass Enigma(HackingTool):\n    TITLE = \"Enigma\"\n    DESCRIPTION = \"Enigma is a Multiplatform payload dropper\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UndeadSec/Enigma.git\"]\n    RUN_COMMANDS = [\"cd Enigma;sudo python enigma.py\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/Enigma\"\n\n\nclass PayloadCreatorTools(HackingToolsCollection):\n    TITLE = \"Payload creation tools\"\n    TOOLS = [\n        TheFatRat(),\n        Brutal(),\n        Stitch(),\n        MSFVenom(),\n        Venom(),\n        Spycam(),\n        MobDroid(),\n        Enigma()\n    ]\n", "tools/remote_administration.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Stitch(HackingTool):\n    TITLE = \"Stitch\"\n    DESCRIPTION = \"Stitch is a cross platform python framework.\\n\" \\\n                  \"which allows you to build custom payloads\\n\" \\\n                  \"For Windows, Mac and Linux.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/nathanlopez/Stitch.git\",\n        \"cd Stitch;sudo pip install -r lnx_requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd Stitch;python main.py\"]\n    PROJECT_URL = \"https://github.com/nathanlopez/Stitch\"\n\n\nclass Pyshell(HackingTool):\n    TITLE = \"Pyshell\"\n    DESCRIPTION = \"Pyshell is a Rat Tool that can be able to download & upload \" \\\n                  \"files,\\n Execute OS Command and more..\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/knassar702/Pyshell.git;\"\n        \"sudo pip install pyscreenshot python-nmap requests\"\n    ]\n    RUN_COMMANDS = [\"cd Pyshell;./Pyshell\"]\n    PROJECT_URL = \"https://github.com/knassar702/pyshell\"\n\n\nclass RemoteAdministrationTools(HackingToolsCollection):\n    TITLE = \"Remote Administrator Tools (RAT)\"\n    TOOLS = [\n        Stitch(),\n        Pyshell()\n    ]\n", "tools/wordlist_generator.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Cupp(HackingTool):\n    TITLE = \"Cupp\"\n    DESCRIPTION = \"WlCreator is a C program that can create all possibilities of passwords,\\n \" \\\n                  \"and you can choose Length, Lowercase, Capital, Numbers and Special Chars\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/Mebus/cupp.git\"]\n    RUN_COMMANDS = [\"cd cupp && python3 cupp.py -i\"]\n    PROJECT_URL = \"https://github.com/Mebus/cupp\"\n\n\nclass WlCreator(HackingTool):\n    TITLE = \"WordlistCreator\"\n    DESCRIPTION = \"WlCreator is a C program that can create all possibilities\" \\\n                  \" of passwords,\\n and you can choose Length, Lowercase, \" \\\n                  \"Capital, Numbers and Special Chars\"\n    INSTALL_COMMANDS = [\"sudo git clone https://github.com/Z4nzu/wlcreator.git\"]\n    RUN_COMMANDS = [\n        \"cd wlcreator && sudo gcc -o wlcreator wlcreator.c && ./wlcreator 5\"]\n    PROJECT_URL = \"https://github.com/Z4nzu/wlcreator\"\n\n\nclass GoblinWordGenerator(HackingTool):\n    TITLE = \"Goblin WordGenerator\"\n    DESCRIPTION = \"Goblin WordGenerator\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UndeadSec/GoblinWordGenerator.git\"]\n    RUN_COMMANDS = [\"cd GoblinWordGenerator && python3 goblin.py\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/GoblinWordGenerator.git\"\n\n\nclass showme(HackingTool):\n    TITLE = \"Password list (1.4 Billion Clear Text Password)\"\n    DESCRIPTION = \"This tool allows you to perform OSINT and reconnaissance on \" \\\n                  \"an organisation or an individual. It allows one to search \" \\\n                  \"1.4 Billion clear text credentials which was dumped as \" \\\n                  \"part of BreachCompilation leak. This database makes \" \\\n                  \"finding passwords faster and easier than ever before.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Viralmaniar/SMWYG-Show-Me-What-You-Got.git\",\n        \"cd SMWYG-Show-Me-What-You-Got && pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd SMWYG-Show-Me-What-You-Got && python SMWYG.py\"]\n    PROJECT_URL = \"https://github.com/Viralmaniar/SMWYG-Show-Me-What-You-Got\"\n\n\nclass WordlistGeneratorTools(HackingToolsCollection):\n    TITLE = \"Wordlist Generator\"\n    TOOLS = [\n        Cupp(),\n        WlCreator(),\n        GoblinWordGenerator(),\n        showme()\n    ]\n", "tools/post_exploitation.py": "# coding=utf-8\nimport os\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Vegile(HackingTool):\n    TITLE = \"Vegile - Ghost In The Shell\"\n    DESCRIPTION = \"This tool will set up your backdoor/rootkits when \" \\\n                  \"backdoor is already setup it will be \\n\" \\\n                  \"hidden your specific process,unlimited your session in \" \\\n                  \"metasploit and transparent.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Screetsec/Vegile.git\",\n        \"cd Vegile && sudo chmod +x Vegile\"\n    ]\n    RUN_COMMANDS = [\"cd Vegile && sudo bash Vegile\"]\n    PROJECT_URL = \"https://github.com/Screetsec/Vegile\"\n\n    def before_run(self):\n        os.system('echo \"You can Use Command: \\n'\n                  '[!] Vegile -i / --inject [backdoor/rootkit] \\n'\n                  '[!] Vegile -u / --unlimited [backdoor/rootkit] \\n'\n                  '[!] Vegile -h / --help\"|boxes -d parchment')\n\n\nclass ChromeKeyLogger(HackingTool):\n    TITLE = \"Chrome Keylogger\"\n    DESCRIPTION = \"Hera Chrome Keylogger\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UndeadSec/HeraKeylogger.git\",\n        \"cd HeraKeylogger && sudo apt-get install python3-pip -y && sudo pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd HeraKeylogger && sudo python3 hera.py\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/HeraKeylogger\"\n\n\nclass PostExploitationTools(HackingToolsCollection):\n    TITLE = \"Post exploitation tools\"\n    TOOLS = [\n        Vegile(),\n        ChromeKeyLogger()\n    ]\n", "tools/reverse_engineering.py": "# coding=utf-8\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass AndroGuard(HackingTool):\n    TITLE = \"Androguard\"\n    DESCRIPTION = \"Androguard is a Reverse engineering, Malware and goodware \" \\\n                  \"analysis of Android applications and more\"\n    INSTALL_COMMANDS = [\"sudo pip3 install -U androguard\"]\n    PROJECT_URL = \"https://github.com/androguard/androguard \"\n\n    def __init__(self):\n        super(AndroGuard, self).__init__(runnable = False)\n\n\nclass Apk2Gold(HackingTool):\n    TITLE = \"Apk2Gold\"\n    DESCRIPTION = \"Apk2Gold is a CLI tool for decompiling Android apps to Java\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/lxdvs/apk2gold.git\",\n        \"cd apk2gold;sudo bash make.sh\"\n    ]\n    PROJECT_URL = \"https://github.com/lxdvs/apk2gold \"\n\n    def run(self):\n        uinput = input(\"Enter (.apk) File >> \")\n        subprocess.run([\"sudo\", \"apk2gold\", uinput])\n\n\nclass Jadx(HackingTool):\n    TITLE = \"JadX\"\n    DESCRIPTION = \"Jadx is Dex to Java decompiler.\\n\" \\\n                  \"[*] decompile Dalvik bytecode to java classes from APK, dex,\" \\\n                  \" aar and zip files\\n\" \\\n                  \"[*] decode AndroidManifest.xml and other resources from \" \\\n                  \"resources.arsc\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/skylot/jadx.git\",\n        \"cd jadx;./gradlew dist\"\n    ]\n    PROJECT_URL = \"https://github.com/skylot/jadx\"\n\n    def __init__(self):\n        super(Jadx, self).__init__(runnable = False)\n\n\nclass ReverseEngineeringTools(HackingToolsCollection):\n    TITLE = \"Reverse engineering tools\"\n    TOOLS = [\n        AndroGuard(),\n        Apk2Gold(),\n        Jadx()\n    ]\n", "tools/tool_manager.py": "# coding=utf-8\nimport os\nimport sys\nfrom time import sleep\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass UpdateTool(HackingTool):\n    TITLE = \"Update Tool or System\"\n    DESCRIPTION = \"Update Tool or System\"\n\n    def __init__(self):\n        super(UpdateTool, self).__init__([\n            (\"Update System\", self.update_sys),\n            (\"Update Hackingtool\", self.update_ht)\n        ], installable = False, runnable = False)\n\n    def update_sys(self):\n        os.system(\"sudo apt update && sudo apt full-upgrade -y\")\n        os.system(\n            \"sudo apt-get install tor openssl curl && sudo apt-get update tor openssl curl\")\n        os.system(\"sudo apt-get install python3-pip\")\n\n    def update_ht(self):\n        os.system(\"sudo chmod +x /etc/;\"\n                  \"sudo chmod +x /usr/share/doc;\"\n                  \"sudo rm -rf /usr/share/doc/hackingtool/;\"\n                  \"cd /etc/;\"\n                  \"sudo rm -rf /etc/hackingtool/;\"\n                  \"mkdir hackingtool;\"\n                  \"cd hackingtool;\"\n                  \"git clone https://github.com/Z4nzu/hackingtool.git;\"\n                  \"cd hackingtool;\"\n                  \"sudo chmod +x install.sh;\"\n                  \"./install.sh\")\n\n\nclass UninstallTool(HackingTool):\n    TITLE = \"Uninstall HackingTool\"\n    DESCRIPTION = \"Uninstall HackingTool\"\n\n    def __init__(self):\n        super(UninstallTool, self).__init__([\n            ('Uninstall', self.uninstall)\n        ], installable = False, runnable = False)\n\n    def uninstall(self):\n        print(\"hackingtool started to uninstall..\\n\")\n        sleep(1)\n        os.system(\"sudo chmod +x /etc/;\"\n                  \"sudo chmod +x /usr/share/doc;\"\n                  \"sudo rm -rf /usr/share/doc/hackingtool/;\"\n                  \"cd /etc/;\"\n                  \"sudo rm -rf /etc/hackingtool/;\")\n        print(\"\\nHackingtool Successfully Uninstalled... Goodbye.\")\n        sys.exit()\n\n\nclass ToolManager(HackingToolsCollection):\n    TITLE = \"Update or Uninstall | Hackingtool\"\n    TOOLS = [\n        UpdateTool(),\n        UninstallTool()\n    ]\n", "tools/exploit_frameworks.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom tools.webattack import Web2Attack\n\n\nclass RouterSploit(HackingTool):\n    TITLE = \"RouterSploit\"\n    DESCRIPTION = \"The RouterSploit Framework is an open-source exploitation \" \\\n                  \"framework dedicated to embedded devices\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/threat9/routersploit.git\",\n        \"cd routersploit && sudo python3 -m pip install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd routersploit && sudo python3 rsf.py\"]\n    PROJECT_URL = \"https://github.com/threat9/routersploit\"\n\n\nclass WebSploit(HackingTool):\n    TITLE = \"WebSploit\"\n    DESCRIPTION = \"Websploit is an advanced MITM framework.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/The404Hacking/websploit.git;cd websploit/Setup;sudo chmod +x install.sh && sudo bash install.sh\"\n    ]\n    RUN_COMMANDS = [\"sudo websploit\"]\n    PROJECT_URL = \"https://github.com/The404Hacking/websploit \"\n\n\nclass Commix(HackingTool):\n    TITLE = \"Commix\"\n    DESCRIPTION = \"Automated All-in-One OS command injection and exploitation \" \\\n                  \"tool.\\nCommix can be used from web developers, penetration \" \\\n                  \"testers or even security researchers\\n in order to test \" \\\n                  \"web-based applications with the view to find bugs,\\n \" \\\n                  \"errors or vulnerabilities related to command injection \" \\\n                  \"attacks.\\n Usage: python commix.py [option(s)]\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/commixproject/commix.git commix\",\n        \"cd commix;sudo python setup.py install\"\n    ]\n    RUN_COMMANDS = [\"sudo python commix.py --wizard\"]\n    PROJECT_URL = \"https://github.com/commixproject/commix\"\n\n    def __init__(self):\n        super(Commix, self).__init__(runnable = False)\n\n\nclass ExploitFrameworkTools(HackingToolsCollection):\n    TITLE = \"Exploit framework\"\n    TOOLS = [\n        RouterSploit(),\n        WebSploit(),\n        Commix(),\n        Web2Attack()\n    ]\n", "tools/steganography.py": "# coding=utf-8\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom core import validate_input\n\n\nclass SteganoHide(HackingTool):\n    TITLE = \"SteganoHide\"\n    INSTALL_COMMANDS = [\"sudo apt-get install steghide -y\"]\n\n    def run(self):\n        choice_run = input(\n            \"[1] Hide\\n\"\n            \"[2] Extract\\n\"\n            \"[99]Cancel\\n\"\n            \">> \")\n        choice_run = validate_input(choice_run, [1, 2, 99])\n        if choice_run is None:\n            print(\"Please choose a valid input\")\n            return self.run()\n\n        if choice_run == 99:\n            return\n\n        if choice_run == 1:\n            file_hide = input(\"Enter Filename you want to Embed (1.txt) >> \")\n            file_to_be_hide = input(\"Enter Cover Filename(test.jpeg) >> \")\n            subprocess.run(\n                [\"steghide\", \"embed\", \"-cf\", file_to_be_hide, \"-ef\", file_hide])\n\n        elif choice_run == \"2\":\n            from_file = input(\"Enter Filename From Extract Data >> \")\n            subprocess.run([\"steghide\", \"extract\", \"-sf\", from_file])\n\n\nclass StegnoCracker(HackingTool):\n    TITLE = \"StegnoCracker\"\n    DESCRIPTION = \"SteganoCracker is a tool that uncover hidden data inside \" \\\n                  \"files\\n using brute-force utility\"\n    INSTALL_COMMANDS = [\n        \"pip3 install stegcracker && pip3 install stegcracker -U --force-reinstall\"]\n\n    def run(self):\n        filename = input(\"Enter Filename:- \")\n        passfile = input(\"Enter Wordlist Filename:- \")\n        subprocess.run([\"stegcracker\", filename, passfile])\n\n        \nclass StegoCracker(HackingTool):\n    TITLE = \"StegoCracker\"\n    DESCRIPTION = \"StegoCracker is a tool that let's you hide data into image or audio files and can retrieve from a file \" \n                  \n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/W1LDN16H7/StegoCracker.git\",\n        \"sudo chmod -R 755 StegoCracker\"\n    ]\n    RUN_COMMANDS = [\"cd StegoCracker && python3 -m pip install -r requirements.txt \",\n                   \"./install.sh\"\n    ]\n    PROJECT_URL = \"https://github.com/W1LDN16H7/StegoCracker\"\n    \n\nclass Whitespace(HackingTool):\n    TITLE = \"Whitespace\"\n    DESCRIPTION = \"Use whitespace and unicode chars for steganography\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/beardog108/snow10.git\",\n        \"sudo chmod -R 755 snow10\"\n    ]\n    RUN_COMMANDS = [\"cd snow10 && ./install.sh\"]\n    PROJECT_URL = \"https://github.com/beardog108/snow10\"\n\n\nclass SteganographyTools(HackingToolsCollection):\n    TITLE = \"Steganograhy tools\"\n    TOOLS = [\n        SteganoHide(),\n        StegnoCracker(),\n        StegoCracker(),\n        Whitespace()\n        \n        \n    ]\n", "tools/webattack.py": "# coding=utf-8\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Web2Attack(HackingTool):\n    TITLE = \"Web2Attack\"\n    DESCRIPTION = \"Web hacking framework with tools, exploits by python\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/santatic/web2attack.git\"]\n    RUN_COMMANDS = [\"cd web2attack && sudo python3 w2aconsole\"]\n    PROJECT_URL = \"https://github.com/santatic/web2attack\"\n\n\nclass Skipfish(HackingTool):\n    TITLE = \"Skipfish\"\n    DESCRIPTION = \"Skipfish \u2013 Fully automated, active web application \" \\\n                  \"security reconnaissance tool \\n \" \\\n                  \"Usage: skipfish -o [FolderName] targetip/site\"\n    RUN_COMMANDS = [\n        \"sudo skipfish -h\",\n        'echo \"skipfish -o [FolderName] targetip/site\"|boxes -d headline | lolcat'\n    ]\n\n    def __init__(self):\n        super(Skipfish, self).__init__(installable = False)\n\n\nclass SubDomainFinder(HackingTool):\n    TITLE = \"SubDomain Finder\"\n    DESCRIPTION = \"Sublist3r is a python tool designed to enumerate \" \\\n                  \"subdomains of websites using OSINT \\n \" \\\n                  \"Usage:\\n\\t\" \\\n                  \"[1] python3 sublist3r.py -d example.com \\n\" \\\n                  \"[2] python3 sublist3r.py -d example.com -p 80,443\"\n    INSTALL_COMMANDS = [\n        \"sudo pip3 install requests argparse dnspython\",\n        \"sudo git clone https://github.com/aboul3la/Sublist3r.git\",\n        \"cd Sublist3r && sudo pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd Sublist3r && python3 sublist3r.py -h\"]\n    PROJECT_URL = \"https://github.com/aboul3la/Sublist3r\"\n\n\nclass CheckURL(HackingTool):\n    TITLE = \"CheckURL\"\n    DESCRIPTION = \"Detect evil urls that uses IDN Homograph Attack.\\n\\t\" \\\n                  \"[!] python3 checkURL.py --url google.com\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UndeadSec/checkURL.git\"]\n    RUN_COMMANDS = [\"cd checkURL && python3 checkURL.py --help\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/checkURL\"\n\n\nclass Blazy(HackingTool):\n    TITLE = \"Blazy(Also Find ClickJacking)\"\n    DESCRIPTION = \"Blazy is a modern login page bruteforcer\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UltimateHackers/Blazy.git\",\n        \"cd Blazy && sudo pip2.7 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd Blazy && sudo python2.7 blazy.py\"]\n    PROJECT_URL = \"https://github.com/UltimateHackers/Blazy\"\n\n\nclass SubDomainTakeOver(HackingTool):\n    TITLE = \"Sub-Domain TakeOver\"\n    DESCRIPTION = \"Sub-domain takeover vulnerability occur when a sub-domain \" \\\n                  \"\\n (subdomain.example.com) is pointing to a service \" \\\n                  \"(e.g: GitHub, AWS/S3,..)\\n\" \\\n                  \"that has been removed or deleted.\\n\" \\\n                  \"Usage:python3 takeover.py -d www.domain.com -v\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/m4ll0k/takeover.git\",\n        \"cd takeover;sudo python3 setup.py install\"\n    ]\n    PROJECT_URL = \"https://github.com/m4ll0k/takeover\"\n\n    def __init__(self):\n        super(SubDomainTakeOver, self).__init__(runnable = False)\n\nclass Dirb(HackingTool):\n    TITLE = \"Dirb\"\n    DESCRIPTION = \"DIRB is a Web Content Scanner. It looks for existing \" \\\n                  \"(and/or hidden) Web Objects.\\n\" \\\n                  \"It basically works by launching a dictionary based \" \\\n                  \"attack against \\n a web server and analyzing the response.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://gitlab.com/kalilinux/packages/dirb.git\",\n        \"cd dirb;sudo bash configure;make\"\n    ]\n    PROJECT_URL = \"https://gitlab.com/kalilinux/packages/dirb\"\n\n    def run(self):\n        uinput = input(\"Enter Url >> \")\n        subprocess.run([\"sudo\", \"dirb\", uinput])\n\n\nclass WebAttackTools(HackingToolsCollection):\n    TITLE = \"Web Attack tools\"\n    DESCRIPTION = \"\"\n    TOOLS = [\n        Web2Attack(),\n        Skipfish(),\n        SubDomainFinder(),\n        CheckURL(),\n        Blazy(),\n        SubDomainTakeOver(),\n        Dirb()\n    ]\n", "tools/phising_attack.py": "# coding=utf-8\nimport os\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\nclass autophisher(HackingTool):\n    TITLE = \"Autophisher RK\"\n    DESCRIPTION = \"Automated Phishing Toolkit\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/CodingRanjith/autophisher.git\",\n        \"cd autophisher\"\n    ]\n    RUN_COMMANDS = [\"cd autophisher;sudo bash autophisher.sh\"]\n    PROJECT_URL = \"https://github.com/CodingRanjith/autophisher\"\n    \nclass Pyphisher(HackingTool):\n    TITLE = \"Pyphisher\"\n    DESCRIPTION = \"Easy to use phishing tool with 77 website templates\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/KasRoudra/PyPhisher\",\n        \"cd PyPhisher/files\",\n        \"pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd PyPhisher;sudo python3 pyphisher.py\"]\n    PROJECT_URL = \"git clone https://github.com/KasRoudra/PyPhisher\"    \n    \nclass AdvPhishing(HackingTool):\n    TITLE = \"AdvPhishing\"\n    DESCRIPTION = \"This is Advance Phishing Tool ! OTP PHISHING\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Ignitetch/AdvPhishing.git\",\n        \"cd AdvPhishing;chmod 777 *;bash Linux-Setup.sh\"]\n    RUN_COMMANDS = [\"cd AdvPhishing && sudo bash AdvPhishing.sh\"]\n    PROJECT_URL = \"https://github.com/Ignitetch/AdvPhishing\"      \n\nclass Setoolkit(HackingTool):\n    TITLE = \"Setoolkit\"\n    DESCRIPTION = \"The Social-Engineer Toolkit is an open-source penetration\\n\" \\\n                  \"testing framework designed for social engine\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/trustedsec/social-engineer-toolkit/\",\n        \"cd social-engineer-toolkit && sudo python3 setup.py\"\n    ]\n    RUN_COMMANDS = [\"sudo setoolkit\"]\n    PROJECT_URL = \"https://github.com/trustedsec/social-engineer-toolkit\"\n\n\nclass SocialFish(HackingTool):\n    TITLE = \"SocialFish\"\n    DESCRIPTION = \"Automated Phishing Tool & Information Collector NOTE: username is 'root' and password is 'pass'\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UndeadSec/SocialFish.git && sudo apt-get install python3 python3-pip python3-dev -y\",\n        \"cd SocialFish && sudo python3 -m pip install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd SocialFish && sudo python3 SocialFish.py root pass\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/SocialFish\"\n\n\nclass HiddenEye(HackingTool):\n    TITLE = \"HiddenEye\"\n    DESCRIPTION = \"Modern Phishing Tool With Advanced Functionality And \" \\\n                  \"Multiple Tunnelling Services \\n\" \\\n                  \"\\t [!]https://github.com/DarkSecDevelopers/HiddenEye\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Morsmalleo/HiddenEye.git ;sudo chmod 777 HiddenEye\",\n        \"cd HiddenEye;sudo pip3 install -r requirements.txt;sudo pip3 install requests;pip3 install pyngrok\"\n    ]\n    RUN_COMMANDS = [\"cd HiddenEye;sudo python3 HiddenEye.py\"]\n    PROJECT_URL = \"https://github.com/Morsmalleo/HiddenEye.git\"\n\n\nclass Evilginx2(HackingTool):\n    TITLE = \"Evilginx2\"\n    DESCRIPTION = \"evilginx2 is a man-in-the-middle attack framework used \" \\\n                  \"for phishing login credentials along with session cookies,\\n\" \\\n                  \"which in turn allows to bypass 2-factor authentication protection.\\n\\n\\t \" \\\n                  \"[+]Make sure you have installed GO of version at least 1.14.0 \\n\" \\\n                  \"[+]After installation, add this to your ~/.profile, assuming that you installed GO in /usr/local/go\\n\\t \" \\\n                  \"[+]export GOPATH=$HOME/go \\n \" \\\n                  \"[+]export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin \\n\" \\\n                  \"[+]Then load it with source ~/.profiles.\"\n    INSTALL_COMMANDS = [\n        \"sudo apt-get install git make;go get -u github.com/kgretzky/evilginx2\",\n        \"cd $GOPATH/src/github.com/kgretzky/evilginx2;make\",\n        \"sudo make install;sudo evilginx\"\n    ]\n    RUN_COMMANDS = [\"sudo evilginx\"]\n    PROJECT_URL = \"https://github.com/kgretzky/evilginx2\"\n\n\nclass ISeeYou(HackingTool):\n    TITLE = \"I-See_You\"\n    DESCRIPTION = \"[!] ISeeYou is a tool to find Exact Location of Victom By\" \\\n                  \" User SocialEngineering or Phishing Engagement..\\n\" \\\n                  \"[!] Users can expose their local servers to the Internet \" \\\n                  \"and decode the location coordinates by looking at the log file\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Viralmaniar/I-See-You.git\",\n        \"cd I-See-You && sudo chmod u+x ISeeYou.sh\"\n    ]\n    RUN_COMMANDS = [\"cd I-See-You && sudo bash ISeeYou.sh\"]\n    PROJECT_URL = \"https://github.com/Viralmaniar/I-See-You\"\n\n\nclass SayCheese(HackingTool):\n    TITLE = \"SayCheese\"\n    DESCRIPTION = \"Take webcam shots from target just sending a malicious link\"\n    INSTALL_COMMANDS = [\"sudo git clone https://github.com/hangetzzu/saycheese\"]\n    RUN_COMMANDS = [\"cd saycheese && sudo bash saycheese.sh\"]\n    PROJECT_URL = \"https://github.com/hangetzzu/saycheese\"\n\n\nclass QRJacking(HackingTool):\n    TITLE = \"QR Code Jacking\"\n    DESCRIPTION = \"QR Code Jacking (Any Website)\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/cryptedwolf/ohmyqr.git && sudo apt -y install scrot\"]\n    RUN_COMMANDS = [\"cd ohmyqr && sudo bash ohmyqr.sh\"]\n    PROJECT_URL = \"https://github.com/cryptedwolf/ohmyqr\"\n    \nclass WifiPhisher(HackingTool):\n    TITLE = \"WifiPhisher\"\n    DESCRIPTION = \"The Rogue Access Point Framework\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/wifiphisher/wifiphisher.git\",\n        \"cd wifiphisher\"]\n    RUN_COMMANDS = [\"cd wifiphisher && sudo python setup.py\"]\n    PROJECT_URL = \"https://github.com/wifiphisher/wifiphisher\"   \n    \nclass BlackEye(HackingTool):\n    TITLE = \"BlackEye\"\n    DESCRIPTION = \"The ultimate phishing tool with 38 websites available!\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/thelinuxchoice/blackeye\",\n        \"cd blackeye \"]\n    RUN_COMMANDS = [\"cd blackeye && sudo bash blackeye.sh\"]\n    PROJECT_URL = \"https://github.com/An0nUD4Y/blackeye\"      \n\nclass ShellPhish(HackingTool):\n    TITLE = \"ShellPhish\"\n    DESCRIPTION = \"Phishing Tool for 18 social media\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/An0nUD4Y/shellphish.git\"]\n    RUN_COMMANDS = [\"cd shellphish;sudo bash shellphish.sh\"]\n    PROJECT_URL = \"https://github.com/An0nUD4Y/shellphish\"\n    \nclass Thanos(HackingTool):\n    TITLE = \"Thanos\"\n    DESCRIPTION = \"Browser to Browser Phishingtoolkit\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/TridevReddy/Thanos.git\",\n        \"cd Thanos && sudo chmod -R 777 Thanos.sh\"\n    ]\n    RUN_COMMANDS = [\"cd Thanos;sudo bash Thanos.sh\"]\n    PROJECT_URL = \"https://github.com/TridevReddy/Thanos\"    \n    \nclass QRLJacking(HackingTool):\n    TITLE = \"QRLJacking\"\n    DESCRIPTION = \"QRLJacking\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/OWASP/QRLJacking.git\",\n        \"cd QRLJacking\",\n        \"git clone https://github.com/mozilla/geckodriver.git\",\n        \"chmod +x geckodriver\",\n        \"sudo mv -f geckodriver /usr/local/share/geckodriver\",\n        \"sudo ln -s /usr/local/share/geckodriver /usr/local/bin/geckodriver\",\n        \"sudo ln -s /usr/local/share/geckodriver /usr/bin/geckodriver\",\n        \"cd QRLJacker;pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd QRLJacking/QRLJacker;python3 QrlJacker.py\"]\n    PROJECT_URL = \"https://github.com/OWASP/QRLJacking\"\n    \nclass Maskphish(HackingTool):\n    TITLE = \"Miskphish\"\n    DESCRIPTION = \"Hide phishing URL under a normal looking URL (google.com or facebook.com)\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/jaykali/maskphish.git\",\n        \"cd maskphish\"]\n    RUN_COMMANDS = [\"cd maskphish;sudo bash maskphish.sh\"]\n    PROJECT_URL = \"https://github.com/jaykali/maskphish\"            \n\n\nclass BlackPhish(HackingTool):\n    TITLE = \"BlackPhish\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/iinc0gnit0/BlackPhish.git\",\n        \"cd BlackPhish;sudo bash install.sh\"\n    ]\n    RUN_COMMANDS = [\"cd BlackPhish;sudo python3 blackphish.py\"]\n    PROJECT_URL = \"https://github.com/iinc0gnit0/BlackPhish\"\n\n    def __init__(self):\n        super(BlackPhish, self).__init__([('Update', self.update)])\n\n    def update(self):\n        os.system(\"cd BlackPhish;sudo bash update.sh\")\n\nclass dnstwist(HackingTool):\n    Title='dnstwist'\n    Install_commands=['sudo git clone https://github.com/elceef/dnstwist.git','cd dnstwist']\n    Run_commands=['cd dnstwist;sudo python3 dnstwist.py']\n    project_url='https://github.com/elceef/dnstwist'\n\n\nclass PhishingAttackTools(HackingToolsCollection):\n    TITLE = \"Phishing attack tools\"\n    TOOLS = [\n        autophisher(),\n        Pyphisher(),\n        AdvPhishing(),\n        Setoolkit(),\n        SocialFish(),\n        HiddenEye(),\n        Evilginx2(),\n        ISeeYou(),\n        SayCheese(),\n        QRJacking(),\n        BlackEye(),\n        ShellPhish(),\n        Thanos(),\n        QRLJacking(),\n        BlackPhish(),\n        Maskphish(),\n        dnstwist()\n    ]\n", "tools/sql_tools.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Sqlmap(HackingTool):\n    TITLE = \"Sqlmap tool\"\n    DESCRIPTION = \"sqlmap is an open source penetration testing tool that \" \\\n                  \"automates the process of \\n\" \\\n                  \"detecting and exploiting SQL injection flaws and taking \" \\\n                  \"over of database servers \\n \" \\\n                  \"[!] python3 sqlmap.py -u [<http://example.com>] --batch --banner \\n \" \\\n                  \"More Usage [!] https://github.com/sqlmapproject/sqlmap/wiki/Usage\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev\"]\n    RUN_COMMANDS = [\"cd sqlmap-dev;python3 sqlmap.py --wizard\"]\n    PROJECT_URL = \"https://github.com/sqlmapproject/sqlmap\"\n\nclass NoSqlMap(HackingTool):\n    TITLE = \"NoSqlMap\"\n    DESCRIPTION = \"NoSQLMap is an open source Python tool designed to \\n \" \\\n                  \"audit for as well as automate injection attacks and exploit.\\n \" \\\n                  \"\\033[91m \" \\\n                  \"[*] Please Install MongoDB \\n \"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/codingo/NoSQLMap.git\",\n        \"sudo chmod -R 755 NoSQLMap;cd NoSQLMap;python setup.py install\"\n    ]\n    RUN_COMMANDS = [\"python NoSQLMap\"]\n    PROJECT_URL = \"https://github.com/codingo/NoSQLMap\"\n\n\nclass SQLiScanner(HackingTool):\n    TITLE = \"Damn Small SQLi Scanner\"\n    DESCRIPTION = \"Damn Small SQLi Scanner (DSSS) is a fully functional SQL \" \\\n                  \"injection\\nvulnerability scanner also supporting GET and \" \\\n                  \"POST parameters.\\n\" \\\n                  \"[*]python3 dsss.py -h[help] | -u[URL]\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/stamparm/DSSS.git\"]\n    PROJECT_URL = \"https://github.com/stamparm/DSSS\"\n\n    def __init__(self):\n        super(SQLiScanner, self).__init__(runnable = False)\n\n\nclass Explo(HackingTool):\n    TITLE = \"Explo\"\n    DESCRIPTION = \"Explo is a simple tool to describe web security issues \" \\\n                  \"in a human and machine readable format.\\n \" \\\n                  \"Usage:- \\n \" \\\n                  \"[1] explo [--verbose|-v] testcase.yaml \\n \" \\\n                  \"[2] explo [--verbose|-v] examples/*.yaml\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/dtag-dev-sec/explo.git\",\n        \"cd explo;sudo python setup.py install\"\n    ]\n    PROJECT_URL = \"https://github.com/dtag-dev-sec/explo\"\n\n    def __init__(self):\n        super(Explo, self).__init__(runnable = False)\n\n\nclass Blisqy(HackingTool):\n    TITLE = \"Blisqy - Exploit Time-based blind-SQL injection\"\n    DESCRIPTION = \"Blisqy is a tool to aid Web Security researchers to find \" \\\n                  \"Time-based Blind SQL injection \\n on HTTP Headers and also \" \\\n                  \"exploitation of the same vulnerability.\\n \" \\\n                  \"For Usage >> \\n\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/JohnTroony/Blisqy.git\"]\n    PROJECT_URL = \"https://github.com/JohnTroony/Blisqy\"\n\n    def __init__(self):\n        super(Blisqy, self).__init__(runnable = False)\n\n\nclass Leviathan(HackingTool):\n    TITLE = \"Leviathan - Wide Range Mass Audit Toolkit\"\n    DESCRIPTION = \"Leviathan is a mass audit toolkit which has wide range \" \\\n                  \"service discovery,\\nbrute force, SQL injection detection \" \\\n                  \"and running custom exploit capabilities. \\n \" \\\n                  \"[*] It Requires API Keys \\n \" \\\n                  \"More Usage [!] https://github.com/utkusen/leviathan/wiki\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/leviathan-framework/leviathan.git\",\n        \"cd leviathan;sudo pip install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd leviathan;python leviathan.py\"]\n    PROJECT_URL = \"https://github.com/leviathan-framework/leviathan\"\n\n\nclass SQLScan(HackingTool):\n    TITLE = \"SQLScan\"\n    DESCRIPTION = \"sqlscan is quick web scanner for find an sql inject point.\" \\\n                  \" not for educational, this is for hacking.\"\n    INSTALL_COMMANDS = [\n        \"sudo apt install php php-bz2 php-curl php-mbstring curl\",\n        \"sudo curl https://raw.githubusercontent.com/Cvar1984/sqlscan/dev/build/main.phar --output /usr/local/bin/sqlscan\",\n        \"chmod +x /usr/local/bin/sqlscan\"\n    ]\n    RUN_COMMANDS = [\"sudo sqlscan\"]\n    PROJECT_URL = \"https://github.com/Cvar1984/sqlscan\"\n\n\nclass SqlInjectionTools(HackingToolsCollection):\n    TITLE = \"SQL Injection Tools\"\n    TOOLS = [\n        Sqlmap(),\n        NoSqlMap(),\n        SQLiScanner(),\n        Explo(),\n        Blisqy(),\n        Leviathan(),\n        SQLScan()\n    ]\n", "tools/others/email_verifier.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass KnockMail(HackingTool):\n    TITLE = \"Knockmail\"\n    DESCRIPTION = \"KnockMail Tool Verify If Email Exists\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/heywoodlh/KnockMail.git\",\n        \"cd KnockMail;sudo pip3 install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd KnockMail;python3 knockmail.py\"]\n    PROJECT_URL = \"https://github.com/heywoodlh/KnockMail\"\n\n\nclass EmailVerifyTools(HackingToolsCollection):\n    TITLE = \"Email Verify tools\"\n    TOOLS = [KnockMail()]\n    \n", "tools/others/web_crawling.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass GoSpider(HackingTool):\n    TITLE = \"Gospider\"\n    DESCRIPTION = \"Gospider - Fast web spider written in Go\"\n    INSTALL_COMMANDS = [\"sudo go get -u github.com/jaeles-project/gospider\"]\n    PROJECT_URL = \"https://github.com/jaeles-project/gospider\"\n\n    def __init__(self):\n        super(GoSpider, self).__init__(runnable = False)\n\n\nclass WebCrawlingTools(HackingToolsCollection):\n    TITLE = \"Web crawling\"\n    TOOLS = [GoSpider()]\n", "tools/others/socialmedia_finder.py": "# coding=utf-8\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass FacialFind(HackingTool):\n    TITLE = \"Find SocialMedia By Facial Recognation System\"\n    DESCRIPTION = \"A Social Media Mapping Tool that correlates profiles\\n \" \\\n                  \"via facial recognition across different sites.\"\n    INSTALL_COMMANDS = [\n        \"sudo apt install -y software-properties-common\",\n        \"sudo add-apt-repository ppa:mozillateam/firefox-next && sudo apt update && sudo apt upgrade\",\n        \"sudo git clone https://github.com/Greenwolf/social_mapper.git\",\n        \"sudo apt install -y build-essential cmake libgtk-3-dev libboost-all-dev\",\n        \"cd social_mapper/setup\",\n        \"sudo python3 -m pip install --no-cache-dir -r requirements.txt\",\n        'echo \"[!]Now You have To do some Manually\\n'\n        '[!] Install the Geckodriver for your operating system\\n'\n        '[!] Copy & Paste Link And Download File As System Configuration\\n'\n        '[#] https://github.com/mozilla/geckodriver/releases\\n'\n        '[!!] On Linux you can place it in /usr/bin \"| boxes | lolcat'\n    ]\n    PROJECT_URL = \"https://github.com/Greenwolf/social_mapper\"\n\n    def run(self):\n        os.system(\"cd social_mapper/setup\")\n        os.system(\"sudo python social_mapper.py -h\")\n        print(\"\"\"\\033[95m \n                You have to set Username and password of your AC Or Any Fack Account\n                [#] Type in Terminal nano social_mapper.py\n        \"\"\")\n        os.system(\n            'echo \"python social_mapper.py -f [<imageFoldername>] -i [<imgFolderPath>] -m fast [<AcName>] -fb -tw\"| boxes | lolcat')\n\n\nclass FindUser(HackingTool):\n    TITLE = \"Find SocialMedia By UserName\"\n    DESCRIPTION = \"Find usernames across over 75 social networks\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/xHak9x/finduser.git\",\n        \"cd finduser && sudo chmod +x finduser.sh\"\n    ]\n    RUN_COMMANDS = [\"cd finduser && sudo bash finduser.sh\"]\n    PROJECT_URL = \"https://github.com/xHak9x/finduser\"\n\n\nclass Sherlock(HackingTool):\n    TITLE = \"Sherlock\"\n    DESCRIPTION = \"Hunt down social media accounts by username across social networks \\n \" \\\n                  \"For More Usage \\n\" \\\n                  \"\\t >>python3 sherlock --help\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/sherlock-project/sherlock.git\",\n        \"cd sherlock;sudo python3 -m pip install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/sherlock-project/sherlock\"\n\n    def run(self):\n        name = input(\"Enter Username >> \")\n        os.chdir('sherlock')\n        subprocess.run([\"sudo\", \"python3\", \"sherlock\", f\"{name}\"])\n\n\nclass SocialScan(HackingTool):\n    TITLE = \"SocialScan | Username or Email\"\n    DESCRIPTION = \"Check email address and username availability on online \" \\\n                  \"platforms with 100% accuracy\"\n    INSTALL_COMMANDS = [\"sudo pip install socialscan\"]\n    PROJECT_URL = \"https://github.com/iojw/socialscan\"\n\n    def run(self):\n        name = input(\n            \"Enter Username or Emailid (if both then please space between email & username) >> \")\n        subprocess.run([\"sudo\", \"socialscan\", f\"{name}\"])\n\n\nclass SocialMediaFinderTools(HackingToolsCollection):\n    TITLE = \"SocialMedia Finder\"\n    TOOLS = [\n        FacialFind(),\n        FindUser(),\n        Sherlock(),\n        SocialScan()\n    ]\n", "tools/others/payload_injection.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass DebInject(HackingTool):\n    TITLE = \"Debinject\"\n    DESCRIPTION = \"Debinject is a tool that inject malicious code into *.debs\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/UndeadSec/Debinject.git\"]\n    RUN_COMMANDS = [\"cd Debinject;python debinject.py\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/Debinject\"\n\n\nclass Pixload(HackingTool):\n    TITLE = \"Pixload\"\n    DESCRIPTION = \"Pixload -- Image Payload Creating tools \\n \" \\\n                  \"Pixload is Set of tools for creating/injecting payload into images.\"\n    INSTALL_COMMANDS = [\n        \"sudo apt install libgd-perl libimage-exiftool-perl libstring-crc32-perl\",\n        \"sudo git clone https://github.com/chinarulezzz/pixload.git\"\n    ]\n    PROJECT_URL = \"https://github.com/chinarulezzz/pixload\"\n\n    def __init__(self):\n        # super(Pixload, self).__init__([\n        #     ('How To Use', self.show_project_page)\n        # ], runnable = False)\n        super(Pixload, self).__init__(runnable = False)\n\n\nclass PayloadInjectorTools(HackingToolsCollection):\n    TITLE = \"Payload Injector\"\n    TOOLS = [\n        DebInject(),\n        Pixload()\n    ]\n", "tools/others/hash_crack.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass HashBuster(HackingTool):\n    TITLE = \"Hash Buster\"\n    DESCRIPTION = \"Features: \\n \" \\\n                  \"Automatic hash type identification \\n \" \\\n                  \"Supports MD5, SHA1, SHA256, SHA384, SHA512\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/s0md3v/Hash-Buster.git\",\n        \"cd Hash-Buster;make install\"\n    ]\n    RUN_COMMANDS = [\"buster -h\"]\n    PROJECT_URL = \"https://github.com/s0md3v/Hash-Buster\"\n\n\nclass HashCrackingTools(HackingToolsCollection):\n    TITLE = \"Hash cracking tools\"\n    TOOLS = [HashBuster()]\n", "tools/others/mix_tools.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass TerminalMultiplexer(HackingTool):\n    TITLE = \"Terminal Multiplexer\"\n    DESCRIPTION = \"Terminal Multiplexer is a tiling terminal emulator that \" \\\n                  \"allows us to open \\n several terminal sessions inside one \" \\\n                  \"single window.\"\n    INSTALL_COMMANDS = [\"sudo apt-get install tilix\"]\n\n    def __init__(self):\n        super(TerminalMultiplexer, self).__init__(runnable = False)\n\n\nclass MixTools(HackingToolsCollection):\n    TITLE = \"Mix tools\"\n    TOOLS = [TerminalMultiplexer()]\n", "tools/others/socialmedia.py": "# coding=utf-8\nimport contextlib\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass InstaBrute(HackingTool):\n    TITLE = \"Instagram Attack\"\n    DESCRIPTION = \"Brute force attack against Instagram\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/chinoogawa/instaBrute.git\",\n        \"cd instaBrute;sudo pip2.7 install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/chinoogawa/instaBrute\"\n\n    def run(self):\n        name = input(\"Enter Username >> \")\n        wordlist = input(\"Enter wordword list >> \")\n        os.chdir(\"instaBrute\")\n        subprocess.run(\n            [\"sudo\", \"python\", \"instaBrute.py\", \"-u\", f\"{name}\", \"-d\",\n             f\"{wordlist}\"])\n\n\nclass BruteForce(HackingTool):\n    TITLE = \"AllinOne SocialMedia Attack\"\n    DESCRIPTION = \"Brute_Force_Attack Gmail Hotmail Twitter Facebook Netflix \\n\" \\\n                  \"[!] python3 Brute_Force.py -g <Account@gmail.com> -l <File_list>\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Matrix07ksa/Brute_Force.git\",\n        \"cd Brute_Force;sudo pip3 install proxylist;pip3 install mechanize\"\n    ]\n    RUN_COMMANDS = [\"cd Brute_Force;python3 Brute_Force.py -h\"]\n    PROJECT_URL = \"https://github.com/Matrix07ksa/Brute_Force\"\n\n\nclass Faceshell(HackingTool):\n    TITLE = \"Facebook Attack\"\n    DESCRIPTION = \"Facebook BruteForcer\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Matrix07ksa/Brute_Force.git\",\n        \"cd Brute_Force;sudo pip3 install proxylist;pip3 install mechanize\"\n    ]\n    PROJECT_URL = \"https://github.com/Matrix07ksa/Brute_Force\"\n\n    def run(self):\n        name = input(\"Enter Username >> \")\n        wordlist = input(\"Enter Wordlist >> \")\n        # Ignore a FileNotFoundError if we are already in the Brute_Force directory\n        with contextlib.suppress(FileNotFoundError):\n            os.chdir(\"Brute_Force\")\n        subprocess.run(\n            [\"python3\", \"Brute_Force.py\", \"-f\", f\"{name}\", \"-l\", f\"{wordlist}\"])\n\n\nclass AppCheck(HackingTool):\n    TITLE = \"Application Checker\"\n    DESCRIPTION = \"Tool to check if an app is installed on the target device through a link.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/jakuta-tech/underhanded.git\",\n        \"cd underhanded && sudo chmod +x underhanded.sh\"\n    ]\n    RUN_COMMANDS = [\"cd underhanded;sudo bash underhanded.sh\"]\n    PROJECT_URL = \"https://github.com/jakuta-tech/underhanded\"\n\n\nclass SocialMediaBruteforceTools(HackingToolsCollection):\n    TITLE = \"SocialMedia Bruteforce\"\n    TOOLS = [\n        InstaBrute(),\n        BruteForce(),\n        Faceshell(),\n        AppCheck()\n    ]\n", "tools/others/wifi_jamming.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass WifiJammerNG(HackingTool):\n    TITLE = \"WifiJammer-NG\"\n    DESCRIPTION = \"Continuously jam all wifi clients and access points within range.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/MisterBianco/wifijammer-ng.git\",\n        \"cd wifijammer-ng;sudo pip install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\n        'echo \"python wifijammer.py [-a AP MAC] [-c CHANNEL] [-d] [-i INTERFACE] [-m MAXIMUM] [-k] [-p PACKETS] [-s SKIP] [-t TIME INTERVAL] [-D]\"| boxes | lolcat',\n        \"cd wifijammer-ng;sudo python wifijammer.py\"\n    ]\n    PROJECT_URL = \"https://github.com/MisterBianco/wifijammer-ng\"\n\n\nclass KawaiiDeauther(HackingTool):\n    TITLE = \"KawaiiDeauther\"\n    DESCRIPTION = \"Kawaii Deauther is a pentest toolkit whose goal is to perform \\n \" \\\n                  \"jam on WiFi clients/routers and spam many fake AP for testing purposes.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/aryanrtm/KawaiiDeauther.git\",\n        \"cd KawaiiDeauther;sudo bash install.sh\"\n    ]\n    RUN_COMMANDS = [\"cd KawaiiDeauther;sudo bash KawaiiDeauther.sh\"]\n    PROJECT_URL = \"https://github.com/aryanrtm/KawaiiDeauther\"\n\n\nclass WifiJammingTools(HackingToolsCollection):\n    TITLE = \"Wifi Deauthenticate\"\n    TOOLS = [\n        WifiJammerNG(),\n        KawaiiDeauther()\n    ]\n", "tools/others/homograph_attacks.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass EvilURL(HackingTool):\n    TITLE = \"EvilURL\"\n    DESCRIPTION = \"Generate unicode evil domains for IDN Homograph Attack \" \\\n                  \"and detect them.\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/UndeadSec/EvilURL.git\"]\n    RUN_COMMANDS = [\"cd EvilURL;python3 evilurl.py\"]\n    PROJECT_URL = \"https://github.com/UndeadSec/EvilURL\"\n\n\nclass IDNHomographAttackTools(HackingToolsCollection):\n    TITLE = \"IDN Homograph Attack\"\n    TOOLS = [EvilURL()]\n", "tools/others/android_attack.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Keydroid(HackingTool):\n    TITLE = \"Keydroid\"\n    DESCRIPTION = \"Android Keylogger + Reverse Shell\\n\" \\\n                  \"[!] You have to install Some Manually Refer Below Link:\\n \" \\\n                  \"[+] https://github.com/F4dl0/keydroid\"\n    INSTALL_COMMANDS = [\"sudo git clone https://github.com/F4dl0/keydroid.git\"]\n    RUN_COMMANDS = [\"cd keydroid && bash keydroid.sh\"]\n    PROJECT_URL = \"https://github.com/F4dl0/keydroid\"\n\n\nclass MySMS(HackingTool):\n    TITLE = \"MySMS\"\n    DESCRIPTION = \"Script that generates an Android App to hack SMS through WAN \\n\" \\\n                  \"[!] You have to install Some Manually Refer Below Link:\\n\\t \" \\\n                  \"[+] https://github.com/papusingh2sms/mysms\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/papusingh2sms/mysms.git\"]\n    RUN_COMMANDS = [\"cd mysms && bash mysms.sh\"]\n    PROJECT_URL = \"https://github.com/papusingh2sms/mysms\"\n\n\nclass LockPhish(HackingTool):\n    TITLE = \"Lockphish (Grab target LOCK PIN)\"\n    DESCRIPTION = \"Lockphish it's the first tool for phishing attacks on the \" \\\n                  \"lock screen, designed to\\n Grab Windows credentials,Android\" \\\n                  \" PIN and iPhone Passcode using a https link.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/JasonJerry/lockphish.git\"]\n    RUN_COMMANDS = [\"cd lockphish && bash lockphish.sh\"]\n    PROJECT_URL = \"https://github.com/JasonJerry/lockphish\"\n\n\nclass Droidcam(HackingTool):\n    TITLE = \"DroidCam (Capture Image)\"\n    DESCRIPTION = \"Powerful Tool For Grab Front Camera Snap Using A Link\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/kinghacker0/WishFish.git;\"\n        \"sudo apt install php wget openssh-client\"\n    ]\n    RUN_COMMANDS = [\"cd WishFish && sudo bash wishfish.sh\"]\n    PROJECT_URL = \"https://github.com/kinghacker0/WishFish\"\n\n\nclass EvilApp(HackingTool):\n    TITLE = \"EvilApp (Hijack Session)\"\n    DESCRIPTION = \"EvilApp is a script to generate Android App that can \" \\\n                  \"hijack authenticated sessions in cookies.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/crypticterminal/EvilApp.git\"]\n    RUN_COMMANDS = [\"cd EvilApp && bash evilapp.sh\"]\n    PROJECT_URL = \"https://github.com/crypticterminal/EvilApp\"\n\n\nclass AndroidAttackTools(HackingToolsCollection):\n    TITLE = \"Android Hacking tools\"\n    TOOLS = [\n        Keydroid(),\n        MySMS(),\n        LockPhish(),\n        Droidcam(),\n        EvilApp()\n    ]\n"}