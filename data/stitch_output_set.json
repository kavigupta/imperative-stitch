[
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil)\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None)\n    (If\n      (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil)))\n      (/seq\n        (While\n          (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n          (/seq\n            (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &l:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content (Name &k:0 Load))\n                    (_starred_content (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil)\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (Assign\n      (list (Name &f:0 Store))\n      (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &y:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Attribute (Name &y:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list\n                (_starred_content (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)))\n                (_starred_content (Name &x:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n      (/seq\n        (While\n          (BinOp\n            (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n            BitAnd\n            (Compare\n              (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None)))\n              (list Gt)\n              (list (Constant i10 None))\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_8 None))\n              )\n              (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &nb_8:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &eights:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &elem:0 Store)\n      (Call (Name g_input Load) nil nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_int Load) (list (_starred_content (Name &elem:0 Load))) nil)\n            (list Eq)\n            (list (Constant i8 None))\n          )\n          (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None)))\n          (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (If\n          (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq Break)\n          (/seq\n            (AugAssign (Name &eights:0 Store) Sub (Constant i1 None))\n            (If\n              (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None)))\n              (/seq\n                (AugAssign (Name &others:0 Store) Sub (Constant i10 None))\n                (AugAssign (Name &answer:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                    (list GtE)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                    (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n                    (AugAssign (Name &answer:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq Break)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_heapq None)))\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (FunctionDef\n      &r:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rm:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rl:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &num:0 Store))\n      (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &num:0 Load)\n            (_slice_content\n              (Call\n                (Name g_int Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Assign\n          (list (Name &tot:0 Store))\n          (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load))\n          None\n        )\n        (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None)\n        (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None)\n        (If\n          (Compare\n            (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)\n            (list LtE)\n            (list (Name &strips:0 Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None)\n            (AugAssign\n              (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store)\n              Sub\n              (Name &strips:0 Load)\n            )\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)\n                FloorDiv\n                (Constant i11 None)\n              )\n            )\n            (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Mod (Constant i11 None))\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (IfExp\n                (Compare\n                  (BinOp\n                    (BinOp\n                      (Name &rem:0 Load)\n                      Add\n                      (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)\n                    )\n                    Sub\n                    (Constant i1 None)\n                  )\n                  (list GtE)\n                  (list (Constant i10 None))\n                )\n                (Constant i1 None)\n                (Constant i0 None)\n              )\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None)))\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n        )\n      )\n      (/seq\n        (AugAssign (Name &s:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &n:0 Store) Sub (Constant i11 None))\n        (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil)\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (If\n      (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load)))\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)))) nil)\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None)))\n          (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None)\n        (If\n          (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &p:0 Load))) nil)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &k:0)) (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) (/seq (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (AugAssign (Name &l:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &k:0 Load)) (_starred_content (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) nil))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) &n:0 &s:0 &p:0)) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &a:0 &y:0 &x:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None))) (_starred_content (Name &x:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (/seq (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_8 None))) (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &nb_8:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &elem:0 Load))) nil) (list Eq) (list (Constant i8 None))) (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (/seq (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq Break))))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias g_heapq None))) (ImportFrom s_decimal (list (alias g_* None)) i0) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)) None) (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) (list LtE) (list (Name &strips:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Sub (Name &strips:0 Load)) (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) FloorDiv (Constant i11 None))) (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Mod (Constant i11 None)) (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) &n:0 &a:0 &k:0)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &a:0)) (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &c:0)) (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &p:0 Load))) nil))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &A:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &A:0 Store))\n          (BinOp\n            (Name &A:0 Load)\n            Add\n            (List\n              (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)))\n              Load\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Call\n                  (Name g_int Load)\n                  (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)))\n                  nil\n                )\n                (list Lt)\n                (list\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)))\n                    nil\n                  )\n                )\n              )\n              (Compare\n                (Call\n                  (Name g_int Load)\n                  (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)))\n                  nil\n                )\n                (list Gt)\n                (list\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_int Load)\n                        (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)))\n                        nil\n                      )\n                      Mult\n                      (BinOp\n                        (BinOp\n                          (Call\n                            (Name g_int Load)\n                            (list\n                              (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n                            )\n                            nil\n                          )\n                          FloorDiv\n                          (Call\n                            (Name g_int Load)\n                            (list\n                              (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))\n                            )\n                            nil\n                          )\n                        )\n                        Add\n                        (Constant i1 None)\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &d:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n              (/seq\n                (If\n                  (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i2 None))))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (Call\n                                    (Attribute (Name g_math Load) s_ceil Load)\n                                    (list (_starred_content (BinOp (Name &r:0 Load) Div (Name &d:0 Load))))\n                                    nil\n                                  )\n                                  Mult\n                                  (Name &d:0 Load)\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (_starred_content (BinOp (Name &r:0 Load) Add (Name &d:0 Load))))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &k:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &d:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (BinOp (Name &r:0 Load) Add (Constant i1 None))))\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                                  Mult\n                                  (Name &d:0 Load)\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                          Mult\n                          (Name &d:0 Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &d:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load))\n                      Mult\n                      (Name &d:0 Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &func:0\n      (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (BinOp (Name &r:1 Load) FloorDiv (Name &d:1 Load)) Add (Constant i1 None))\n                      Mult\n                      (Name &d:1 Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:1 Load))) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &count:2 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (For\n          (Name &_:2 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &count:2 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &arr:2 Store))\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name &func:0 Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_int Load)\n                      (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i0 None)) Load)))\n                      nil\n                    )\n                  )\n                  (_starred_content\n                    (Call\n                      (Name g_int Load)\n                      (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i1 None)) Load)))\n                      nil\n                    )\n                  )\n                  (_starred_content\n                    (Call\n                      (Name g_int Load)\n                      (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i2 None)) Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &inputs:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &r:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i2 None)) Load)))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None)))))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (BinOp (Name &b:0 Load) FloorDiv (Name &c:0 Load)) Add (Constant i1 None))\n                          Mult\n                          (Name &c:0 Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &d:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Constant\n            s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0=\n            None\n          )\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                      Mult\n                      (Name &d:0 Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &d:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None))\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)))\n              None\n            )\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &u:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &d:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load)))\n                  (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                          Mult\n                          (Name &d:0 Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil)))\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %2 Load) FloorDiv (Name %1 Load)) Add (Constant i1 None)) Mult (Name %1 Load)))) nil)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &A:0 Store)) (BinOp (Name &A:0 Load) Add (List (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) Load)) None)) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (BoolOp Or (list (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Lt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Gt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) Mult (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil) FloorDiv (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i2 None)))) nil))) (/seq (If (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))) nil) Mult (Name &d:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Name &d:0 Load)))) nil))))))))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))))) (/seq (If (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load))) (/seq (If (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))))) (fn_1 &d:0 &r:0))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load)) Mult (Name &d:0 Load)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &func:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load))) (fn_1 &d:1 &r:1) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:1 Load))) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &count:2 Load))) nil) (/seq (Assign (list (Name &arr:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &func:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i2 None)) Load))) nil))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Name &inputs:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (fn_1 &c:0 &b:0))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Constant s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load))) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &u:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load))) (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load))))) (fn_1 &d:0 &r:0) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq))))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &m:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &l:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &l:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &l:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ClassDef\n      &D1AddOnATree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &dfs:1\n          (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &start:2 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n            (For\n              (Name &x:2 Store)\n              (Subscript (Attribute (Name &self:2 Load) s_adj Load) (_slice_content (Name &start:2 Load)) Load)\n              (/seq\n                (If\n                  (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &x:2 Load)) Load)\n                  (/seq Continue)\n                  (/seq)\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (_slice_content (Name &x:2 Load)) Store))\n                  (Name &start:2 Load)\n                  None\n                )\n                (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (_starred_content (Name &x:2 Load))) nil))\n              )\n              (/seq)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &solve:1\n          (arguments nil (list (arg &self:3 None None)) None nil nil None nil)\n          (/seq\n            (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0)\n            (Import (list (alias &sys:3 None)))\n            (Expr\n              (Call\n                (Attribute (Name &sys:3 Load) s_setrecursionlimit Load)\n                (list\n                  (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))\n                )\n                nil\n              )\n            )\n            (Assign\n              (list (Name &n:3 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_adj Store))\n              (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_list Load))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_par Store))\n              (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_int Load))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_done Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp (Name &n:3 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store))) Store))\n                  (ListComp\n                    (Call (Name g_int Load) (list (_starred_content (Name &_:4 Load))) nil)\n                    (list\n                      (comprehension\n                        (Name &_:4 Store)\n                        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &u:3 Load)) Load)\n                      s_append\n                      Load\n                    )\n                    (list (_starred_content (Name &v:3 Load)))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &v:3 Load)) Load)\n                      s_append\n                      Load\n                    )\n                    (list (_starred_content (Name &u:3 Load)))\n                    nil\n                  )\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &u:3 Load)) Store)\n                  Add\n                  (Constant i1 None)\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &v:3 Load)) Store)\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (/seq)\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &i:3 Load)) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n                  (/seq)\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              None\n            )\n            (Return None)\n            (Assign\n              (list (Name &v:3 Store))\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content\n                    (GeneratorExp\n                      (Call\n                        (Name g_len Load)\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Attribute (Name &self:3 Load) s_adj Load)\n                              (_slice_content (Name &p:5 Load))\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &p:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list\n                        (_starred_content\n                          (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:3 Load)) Load)\n                        )\n                      )\n                      nil\n                    )\n                    (list Eq)\n                    (list (Name &v:3 Load))\n                  )\n                  (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None)\n            (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (_starred_content (Name &start:3 Load))) nil))\n            (Assign\n              (list (Name &cnt:3 Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp (Name &n:3 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (For\n              (Name &k:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq Continue)\n                  (/seq)\n                )\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list\n                        (_starred_content\n                          (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &k:3 Load)) Load)\n                        )\n                      )\n                      nil\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Name &cnt:3 Load)\n                        (_slice_content\n                          (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)\n                        )\n                        Store\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n            (For\n              (Name &x:3 Store)\n              (Name &cnt:3 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None)))\n                  (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &deg:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &d:0 Store)\n      (Name &deg:0 Load)\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0)\n    (ImportFrom s_math (list (alias g_inf None)) i0)\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (_starred_content (Name g_int Load))\n            (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &cnt:1 Store))\n          (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil)\n          None\n        )\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))\n              (Call (Name &ri:0 Load) nil nil)\n              None\n            )\n            (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Store) Add (Constant i1 None))\n            (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &y:1 Load)) Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &valid:1 Store)) (Constant True None) None)\n        (For\n          (Name &x:1 Store)\n          (Name &cnt:1 Load)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Load)\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &valid:1 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i1 None) None)\n    (While\n      (Name &t:0 Load)\n      (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &tree_nums:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a1:0 Store)) (_starred_content (Name &a2:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (_slice_content (BinOp (Name &a1:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (_slice_content (BinOp (Name &a2:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n          (/seq\n            (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &tree_nums:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq\n                    (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None)\n                    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n                    Break\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (UnaryOp Not (Name &ans_is_no:0 Load))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              (/seq)\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &gr:0 Store))\n      (DictComp\n        (Name &i:1 Load)\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content (Constant i1 None))\n                (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &gr:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &gr:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &gr:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &gr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &arr:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &arr:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &g:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i100001 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &u:0 Load)) Load) s_append Load)\n            (list (_starred_content (Name &v:0 Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &v:0 Load)) Load) s_append Load)\n            (list (_starred_content (Name &u:0 Load)))\n            nil\n          )\n        )\n        (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &edges:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &u:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &v:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Subscript (Name %2 Load) (_slice_content #1) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name %2 Load) (_slice_content #2) Store) Add (Constant i1 None))) (/seq) None))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) (Name &a:0 Load) (Name &b:0 Load) &m:0 &l:0 &b:0 &a:0 &_:0)) (If (Compare (Constant i2 None) (list In) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ClassDef &D1AddOnATree:0 nil nil (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &start:2 Load)) Store)) (Constant i1 None) None) (For (Name &x:2 Store) (Subscript (Attribute (Name &self:2 Load) s_adj Load) (_slice_content (Name &start:2 Load)) Load) (/seq (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &x:2 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (_slice_content (Name &x:2 Load)) Store)) (Name &start:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (_starred_content (Name &x:2 Load))) nil))) (/seq) None)) nil None None) (FunctionDef &solve:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0) (Import (list (alias &sys:3 None))) (Expr (Call (Attribute (Name &sys:3 Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))) nil)) (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_adj Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_par Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_done Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:4 Load))) nil) (list (comprehension (Name &_:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &u:3 Load)) Load) s_append Load) (list (_starred_content (Name &v:3 Load))) nil)) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &v:3 Load)) Load) s_append Load) (list (_starred_content (Name &u:3 Load))) nil)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &u:3 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &v:3 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &i:3 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None) (Return None) (Assign (list (Name &v:3 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:5 Load)) Load))) nil) (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))))) nil) None) (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &p:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:3 Load)) Load))) nil) (list Eq) (list (Name &v:3 Load))) (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break) (/seq))) (/seq) None) (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None) (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (_starred_content (Name &start:3 Load))) nil)) (Assign (list (Name &cnt:3 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &k:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &k:3 Load)) Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &cnt:3 Load) (_slice_content (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &x:3 Store) (Name &cnt:3 Load) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil None None)) nil) (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &deg:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &d:0 Store) (Name &deg:0 Load) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_math (list (alias g_inf None)) i0) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (Call (Name &ri:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &y:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &x:1 Store) (Name &cnt:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None)) (/seq))) (/seq) None) (If (Name &valid:1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) (BinOp (Name &a1:0 Load) Sub (Constant i1 None)) (BinOp (Name &a2:0 Load) Sub (Constant i1 None)) &n:0 &tree_nums:0 &a2:0 &a1:0 &i:0)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &tree_nums:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &ans_is_no:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))))))) nil)",
      "(Module (/seq (/splice (fn_1 (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) (Name &a:0 Load) (Name &b:0 Load) &n:0 &gr:0 &b:0 &a:0 &i:0)) (For (Name &i:0 Store) (Name &gr:0 Load) (/seq (If (Compare (Subscript (Name &gr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) (Name &a:0 Load) (Name &b:0 Load) &n:0 &arr:0 &b:0 &a:0 &_:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i100001 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &u:0 Load)) Load) s_append Load) (list (_starred_content (Name &v:0 Load))) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &v:0 Load)) Load) s_append Load) (list (_starred_content (Name &u:0 Load))) nil)) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &edges:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (AugAssign (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) &n:0 &l:0 &v:0 &u:0 &i:0)) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &min:0 Store))\n          (BinOp\n            (Subscript (Name &arr:0 Load) (_slice_content (Constant i0 None)) Load)\n            Add\n            (Subscript (Name &arr:0 Load) (_slice_content (Constant i1 None)) Load)\n          )\n          None\n        )\n        (Assign (list (Name &pos:0 Store)) (Constant True None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list GtE)\n                (list (Name &min:0 Load))\n              )\n              (/seq\n                (Assign (list (Name &pos:0 Store)) (Constant False None) None)\n                (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None)\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &pos:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None))\n                  (_starred_content (BinOp (Name &posf:0 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n              (/seq\n                (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None))\n                      (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &t:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None)\n            (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &l:0 Load)) Load))\n              )\n              (/seq\n                (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Constant i1 None))\n                      (_starred_content (Constant i2 None))\n                      (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &inp:0 Store))\n      (Call\n        (Attribute\n          (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil)\n          s_split\n          Load\n        )\n        (list (_starred_content (Constant bCg== None)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None)\n    (FunctionDef\n      &debug:0\n      (arguments nil nil (arg &args:1 None None) nil nil None nil)\n      (/seq\n        (If\n          (Name &_DEBUG:0 Load)\n          (/seq\n            (Import (list (alias &inspect:1 None)))\n            (Assign\n              (list (Name &frame:1 Store))\n              (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil)\n              None\n            )\n            (Assign\n              (list (Name &frame:1 Store))\n              (Subscript\n                (Call\n                  (Attribute (Name &inspect:1 Load) s_getouterframes Load)\n                  (list (_starred_content (Name &frame:1 Load)))\n                  nil\n                )\n                (_slice_content (Constant i1 None))\n                Load\n              )\n              None\n            )\n            (Assign\n              (list (Name &string:1 Store))\n              (Call\n                (Attribute\n                  (Subscript\n                    (Attribute\n                      (Call\n                        (Attribute (Name &inspect:1 Load) s_getframeinfo Load)\n                        (list\n                          (_starred_content (Subscript (Name &frame:1 Load) (_slice_content (Constant i0 None)) Load))\n                        )\n                        nil\n                      )\n                      s_code_context\n                      Load\n                    )\n                    (_slice_content (Constant i0 None))\n                    Load\n                  )\n                  s_strip\n                  Load\n                )\n                nil\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &arns:1 Store))\n              (Call\n                (Attribute\n                  (Subscript\n                    (Name &string:1 Load)\n                    (_slice_slice\n                      (Slice\n                        (BinOp\n                          (Call\n                            (Attribute (Name &string:1 Load) s_find Load)\n                            (list (_starred_content (Constant s-WzQwXQ== None)))\n                            nil\n                          )\n                          Add\n                          (Constant i1 None)\n                        )\n                        (UnaryOp USub (Constant i1 None))\n                        None\n                      )\n                    )\n                    Load\n                  )\n                  s_split\n                  Load\n                )\n                (list (_starred_content (Constant s-WzQ0XQ== None)))\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None))\n                )\n                (list (keyword s_end (Constant s-WzMyXQ== None)))\n              )\n            )\n            (For\n              (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &j:1 Store))) Store)\n              (Call\n                (Name g_zip Load)\n                (list (_starred_content (Name &arns:1 Load)) (_starred_content (Name &args:1 Load)))\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Name &i:1 Load))\n                      (_starred_content (Constant s-WzMyLCA2MSwgMzJd None))\n                      (_starred_content (Name &j:1 Load))\n                    )\n                    (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rdln:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Global (list s__ii))\n        (AugAssign (Name g__ii Store) Add (Constant i1 None))\n        (Return (Subscript (Name &inp:0 Load) (_slice_content (Name g__ii Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &inin:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (_starred_content (Call (Name &rdln:0 Load) nil nil))) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &inar:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:2 Store)\n              (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &inst:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None)\n    (For\n      (Name &_t_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &_T_:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None)\n        (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None)\n        (Expr\n          (Call (Name &debug:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil)\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list Gt)\n            (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &A:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n            )\n            (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load))\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Constant i1 None))\n                      (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))\n                      (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n                (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (For\n          (Name &it:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &it:0 Load)) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                  (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                  (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n        )\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &array:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &array:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &array:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr (Call (Name g_input Load) nil nil))\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list Gt)\n            (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (/splice (fn_1 &n:0 &arr:0)) (Assign (list (Name &min:0 Store)) (BinOp (Subscript (Name &arr:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &arr:0 Load) (_slice_content (Constant i1 None)) Load)) None) (Assign (list (Name &pos:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list GtE) (list (Name &min:0 Load))) (/seq (Assign (list (Name &pos:0 Store)) (Constant False None) None) (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None) Break) (/seq))) (/seq) None) (If (Name &pos:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None)) (_starred_content (BinOp (Name &posf:0 Load) Add (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &t:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &l:0 Load)) Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &inp:0 Store)) (Call (Attribute (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_split Load) (list (_starred_content (Constant bCg== None))) nil) None) (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None) (FunctionDef &debug:0 (arguments nil nil (arg &args:1 None None) nil nil None nil) (/seq (If (Name &_DEBUG:0 Load) (/seq (Import (list (alias &inspect:1 None))) (Assign (list (Name &frame:1 Store)) (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil) None) (Assign (list (Name &frame:1 Store)) (Subscript (Call (Attribute (Name &inspect:1 Load) s_getouterframes Load) (list (_starred_content (Name &frame:1 Load))) nil) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name &string:1 Store)) (Call (Attribute (Subscript (Attribute (Call (Attribute (Name &inspect:1 Load) s_getframeinfo Load) (list (_starred_content (Subscript (Name &frame:1 Load) (_slice_content (Constant i0 None)) Load))) nil) s_code_context Load) (_slice_content (Constant i0 None)) Load) s_strip Load) nil nil) None) (Assign (list (Name &arns:1 Store)) (Call (Attribute (Subscript (Name &string:1 Load) (_slice_slice (Slice (BinOp (Call (Attribute (Name &string:1 Load) s_find Load) (list (_starred_content (Constant s-WzQwXQ== None))) nil) Add (Constant i1 None)) (UnaryOp USub (Constant i1 None)) None)) Load) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &j:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &arns:1 Load)) (_starred_content (Name &args:1 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Constant s-WzMyLCA2MSwgMzJd None)) (_starred_content (Name &j:1 Load))) (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil None None) (FunctionDef &rdln:0 (arguments nil nil None nil nil None nil) (/seq (Global (list s__ii)) (AugAssign (Name g__ii Store) Add (Constant i1 None)) (Return (Subscript (Name &inp:0 Load) (_slice_content (Name g__ii Load)) Load))) nil None None) (Assign (list (Name &inin:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (_starred_content (Call (Name &rdln:0 Load) nil nil))) nil)) None) (Assign (list (Name &inar:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &inst:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load) nil nil)) None) (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (For (Name &_t_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &_T_:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None) (Expr (Call (Name &debug:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil)) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (If (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (If (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq))) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &it:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &it:0 Load)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load))) (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil)))) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (/splice (fn_1 &n:0 &array:0)) (If (Compare (BinOp (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &array:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &array:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (BinOp (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &putin:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sol:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &C:1 Store))\n          (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &B:1 Store))\n          (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &q:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &x:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &min_arr:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None)\n        (Assign (list (Name &min_part_sums:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None)\n        (Assign\n          (list (Name &part_sums:1 Store))\n          (List (list (_starred_content (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) Load)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load)))\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &part_sums:1 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                      Add\n                      (Subscript (Name &C:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &elem:1 Store)\n          (Name &B:1 Load)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &min_arr:1 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                      Add\n                      (Name &elem:1 Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &min_part_sums:1 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                      Add\n                      (Subscript (Name &min_part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                (list Gt)\n                (list (Subscript (Name &part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load))\n              )\n              (/seq (Return (Constant i0 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load)\n            (list Gt)\n            (list (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq)\n        )\n        (Assign\n          (list (Name &answer:1 Store))\n          (BinOp\n            (List (list (_starred_content (Constant i1 None))) Load)\n            Mult\n            (BinOp\n              (BinOp\n                (Subscript (Name &part_sums:1 Load) (_slice_content (Constant i0 None)) Load)\n                Sub\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (_starred_content (Constant i0 None))\n                    (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load))\n                  )\n                  nil\n                )\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n          None\n        )\n        (For\n          (Name &k:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &new_answer:1 Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load)\n                    Sub\n                    (Call\n                      (Name g_max Load)\n                      (list\n                        (_starred_content (Constant i0 None))\n                        (_starred_content\n                          (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load)\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              None\n            )\n            (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None)\n            (Assign\n              (list (Name &window:1 Store))\n              (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Store))\n              (Name &window:1 Load)\n              None\n            )\n            (While\n              (Compare\n                (Name &cnt:1 Load)\n                (list LtE)\n                (list\n                  (BinOp\n                    (Call (Name g_len Load) (list (_starred_content (Name &new_answer:1 Load))) nil)\n                    Sub\n                    (Constant i1 None)\n                  )\n                )\n              )\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Constant i1 None))\n                (If\n                  (Compare\n                    (Name &cnt:1 Load)\n                    (list LtE)\n                    (list (Call (Name g_len Load) (list (_starred_content (Name &answer:1 Load))) nil))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Name &window:1 Store)\n                      Add\n                      (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Load)\n                    )\n                  )\n                  (/seq)\n                )\n                (If\n                  (Compare\n                    (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None))\n                    (list Lt)\n                    (list (Name &cnt:1 Load))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Name &window:1 Store)\n                      Sub\n                      (Subscript\n                        (Name &answer:1 Load)\n                        (_slice_content\n                          (BinOp\n                            (BinOp\n                              (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load)\n                              Add\n                              (Constant i1 None)\n                            )\n                            Sub\n                            (Name &cnt:1 Load)\n                          )\n                        )\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n                (Assign\n                  (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Store))\n                  (Name &window:1 Load)\n                  None\n                )\n              )\n              (/seq)\n            )\n            (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &m:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Return\n          (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &answer:1 Load))) nil) Mod (Name &m:1 Load))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &sol:0 Load) nil nil))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &a:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &a:1 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &a:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &a:2 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &Q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i20100 None))\n        (list\n          (comprehension\n            (Name &_:3 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Name &x:0 Load) None)\n    (Assign (list (Name &t:0 Store)) (Name &s:0 Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i20050 None))\n              (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None)))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If (Compare (Name &j:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content\n                        (Call\n                          (Name g_max Load)\n                          (list\n                            (_starred_content\n                              (BinOp\n                                (Name &j:0 Load)\n                                Sub\n                                (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              )\n                            )\n                            (_starred_content (Constant i0 None))\n                          )\n                          nil\n                        )\n                      )\n                      Load\n                    )\n                  )\n                  Sub\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                )\n                Mod\n                (Name &P:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None)))\n                    (_starred_content (Constant i20050 None))\n                  )\n                  nil\n                )\n              )\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (Subscript\n                (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n          (/seq\n            (AugAssign (Name &s:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (AugAssign (Name &t:0 Store) Add (Name &s:0 Load))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                (_slice_content (Constant i0 None))\n                Load\n              )\n              Mod\n              (Name &P:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &MOD:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &c:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:1 Store))\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Add\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &q:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &queries:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None)\n        (For\n          (Name &c1:1 Store)\n          (Name &c:1 Load)\n          (/seq\n            (Assign\n              (list (Name &maxans:1 Store))\n              (BinOp\n                (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None)))\n                Mod\n                (Name &MOD:1 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load)))\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Store)\n              Add\n              (Subscript (Name &b:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load)))\n            nil\n          )\n          (/seq\n            (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load))\n            (Assign\n              (list (Name &lb:1 Store))\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &lb:1 Load))\n                  (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &s:1 Store) (Name &ub:1 Store))\n          (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &s:1 Store)\n              Add\n              (BinOp\n                (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                Sub\n                (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load)\n              )\n            )\n            (Assign\n              (list (Name &ub:1 Store))\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &ub:1 Load))\n                  (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &x:1 Store)\n          (Name &queries:1 Load)\n          (/seq\n            (If\n              (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &maxans:1 Load))) nil)))\n              (/seq\n                (If\n                  (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Load))\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &dp0:1 Store))\n                          (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Constant i10002 None))\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &dp0:1 Load) (_slice_content (Constant i0 None)) Store))\n                          (Constant i0 None)\n                          None\n                        )\n                        (Assign (list (Name &bd:1 Store)) (Constant i0 None) None)\n                        (For\n                          (Name &i:1 Store)\n                          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                          (/seq\n                            (Assign\n                              (list (Name &dp1:1 Store))\n                              (BinOp\n                                (List (list (_starred_content (Constant i0 None))) Load)\n                                Mult\n                                (Constant i10002 None)\n                              )\n                              None\n                            )\n                            (AugAssign\n                              (Name &bd:1 Store)\n                              Add\n                              (BinOp\n                                (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                                Add\n                                (Name &x:1 Load)\n                              )\n                            )\n                            (For\n                              (Name &j:1 Store)\n                              (Call\n                                (Name g_range Load)\n                                (list\n                                  (_starred_content\n                                    (Call\n                                      (Name g_max Load)\n                                      (list (_starred_content (Name &bd:1 Load)) (_starred_content (Constant i0 None)))\n                                      nil\n                                    )\n                                  )\n                                  (_starred_content (Constant i10001 None))\n                                )\n                                nil\n                              )\n                              (/seq\n                                (Assign\n                                  (list\n                                    (Subscript\n                                      (Name &dp1:1 Load)\n                                      (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None)))\n                                      Store\n                                    )\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (BinOp\n                                        (Subscript (Name &dp1:1 Load) (_slice_content (Name &j:1 Load)) Load)\n                                        Add\n                                        (Subscript\n                                          (Name &dp0:1 Load)\n                                          (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None)))\n                                          Load\n                                        )\n                                      )\n                                      Sub\n                                      (Subscript\n                                        (Name &dp0:1 Load)\n                                        (_slice_content\n                                          (Call\n                                            (Name g_max Load)\n                                            (list\n                                              (_starred_content\n                                                (BinOp\n                                                  (Name &j:1 Load)\n                                                  Sub\n                                                  (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                                                )\n                                              )\n                                              (_starred_content (Constant i0 None))\n                                            )\n                                            nil\n                                          )\n                                        )\n                                        Load\n                                      )\n                                    )\n                                    Mod\n                                    (Name &MOD:1 Load)\n                                  )\n                                  None\n                                )\n                              )\n                              (/seq)\n                              None\n                            )\n                            (Assign\n                              (list (Name &dp0:1 Store))\n                              (Subscript (Name &dp1:1 Load) (_slice_slice (Slice None None None)) Load)\n                              None\n                            )\n                          )\n                          (/seq)\n                          None\n                        )\n                        (Assign\n                          (list (Name &a:1 Store))\n                          (Subscript (Name &dp0:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Store))\n                          (Name &a:1 Load)\n                          None\n                        )\n                        (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:1 Load))) nil))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Expr (Call (Name &solve:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &a:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &a:1 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &a:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &a:2 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &Q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i20100 None))\n        (list\n          (comprehension\n            (Name &_:3 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Name &x:0 Load) None)\n    (Assign (list (Name &t:0 Store)) (Name &s:0 Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i20050 None))\n              (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None)))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If (Compare (Name &j:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content\n                        (Call\n                          (Name g_max Load)\n                          (list\n                            (_starred_content\n                              (BinOp\n                                (Name &j:0 Load)\n                                Sub\n                                (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              )\n                            )\n                            (_starred_content (Constant i0 None))\n                          )\n                          nil\n                        )\n                      )\n                      Load\n                    )\n                  )\n                  Sub\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                )\n                Mod\n                (Name &P:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None)))\n                    (_starred_content (Constant i20050 None))\n                  )\n                  nil\n                )\n              )\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (Subscript\n                (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n          (/seq\n            (AugAssign (Name &s:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (AugAssign (Name &t:0 Store) Add (Name &s:0 Load))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                (_slice_content (Constant i0 None))\n                Load\n              )\n              Mod\n              (Name &P:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Import (list (alias g_sys None))) (Assign (list (Name %1 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name %1 Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %3 Load))) nil) (list (comprehension (Name %3 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %6 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %5 Load))) nil) (list (comprehension (Name %5 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %7 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name %1 Load) nil nil))) nil) None) (Assign (list (Name %8 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name %1 Load) nil nil))) nil) None) (Assign (list (Name %9 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name %11 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i20100 None)) (list (comprehension (Name %10 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name %11 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Name %12 Store)) (Constant i0 None) None) (Assign (list (Name %13 Store)) (Name %8 Load) None) (Assign (list (Name %14 Store)) (Name %13 Load) None) (For (Name %16 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) (/seq (For (Name %15 Store) (Call (Name g_range Load) (list (_starred_content (Constant i20050 None)) (_starred_content (BinOp (Name %14 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name %15 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (Name %15 Load)) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name %15 Load) Add (Constant i1 None))) Load) Add (Subscript (Subscript (Name %11 Load) (_slice_content (Name %16 Load)) Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name %15 Load) Sub (Subscript (Name %4 Load) (_slice_content (Name %16 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Sub (Subscript (Subscript (Name %11 Load) (_slice_content (Name %16 Load)) Load) (_slice_content (BinOp (Name %15 Load) Add (Constant i1 None))) Load)) Mod (Name %9 Load)) None)) (/seq) None) (For (Name %15 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name %14 Load) Sub (Constant i1 None))) (_starred_content (Constant i20050 None))) nil)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (Name %15 Load)) Store)) (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name %15 Load) Add (Constant i1 None))) Load) None)) (/seq) None) (If (Compare (Name %16 Load) (list Lt) (list (BinOp (Name %2 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name %13 Store) Add (Subscript (Name %6 Load) (_slice_content (Name %16 Load)) Load)) (AugAssign (Name %14 Store) Add (Name %13 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Name %11 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Mod (Name %9 Load)))) nil)))",
        "sym_arity": 16,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &putin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &sol:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &C:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &min_arr:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None) (Assign (list (Name &min_part_sums:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None) (Assign (list (Name &part_sums:1 Store)) (List (list (_starred_content (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &part_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &C:1 Load) (_slice_content (Name &i:1 Load)) Load)))) nil))) (/seq) None) (For (Name &elem:1 Store) (Name &B:1 Load) (/seq (Expr (Call (Attribute (Name &min_arr:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Name &elem:1 Load)))) nil)) (Expr (Call (Attribute (Name &min_part_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &min_part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))) nil))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Gt) (list (Subscript (Name &part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (Return (Constant i0 None))) (/seq))) (/seq) None) (If (Compare (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load) (list Gt) (list (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Name &answer:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (Constant i0 None)) Load) Sub (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant i1 None))) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &new_answer:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load) Sub (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil)) Add (Constant i1 None))) None) (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None) (Assign (list (Name &window:1 Store)) (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Store)) (Name &window:1 Load) None) (While (Compare (Name &cnt:1 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &new_answer:1 Load))) nil) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)) (If (Compare (Name &cnt:1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name &answer:1 Load))) nil))) (/seq (AugAssign (Name &window:1 Store) Add (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Load))) (/seq)) (If (Compare (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None)) (list Lt) (list (Name &cnt:1 Load))) (/seq (AugAssign (Name &window:1 Store) Sub (Subscript (Name &answer:1 Load) (_slice_content (BinOp (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None)) Sub (Name &cnt:1 Load))) Load))) (/seq)) (Assign (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Store)) (Name &window:1 Load) None)) (/seq)) (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)) (/seq) None) (Assign (list (Name &m:1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Return (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &answer:1 Load))) nil) Mod (Name &m:1 Load)))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &sol:0 Load) nil nil))) nil))) nil)",
      "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &MOD:1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &c:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &b:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &queries:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None) (For (Name &c1:1 Store) (Name &c:1 Load) (/seq (Assign (list (Name &maxans:1 Store)) (BinOp (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None))) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &ans:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &b:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq) None) (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load)) (Assign (list (Name &lb:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &lb:1 Load)) (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))) nil) None)) (/seq) None) (Assign (list (Name &s:1 Store) (Name &ub:1 Store)) (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &s:1 Store) Add (BinOp (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load))) (Assign (list (Name &ub:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ub:1 Load)) (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))) nil) None)) (/seq) None) (For (Name &x:1 Store) (Name &queries:1 Load) (/seq (If (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &maxans:1 Load))) nil))) (/seq (If (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Load))) nil))) (/seq (Assign (list (Name &dp0:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Constant i10002 None)) None) (Assign (list (Subscript (Name &dp0:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (Assign (list (Name &bd:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &dp1:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10002 None)) None) (AugAssign (Name &bd:1 Store) Add (BinOp (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Name &x:1 Load))) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &bd:1 Load)) (_starred_content (Constant i0 None))) nil)) (_starred_content (Constant i10001 None))) nil) (/seq (Assign (list (Subscript (Name &dp1:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (BinOp (Subscript (Name &dp1:1 Load) (_slice_content (Name &j:1 Load)) Load) Add (Subscript (Name &dp0:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load)) Sub (Subscript (Name &dp0:1 Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &j:1 Load) Sub (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &dp0:1 Store)) (Subscript (Name &dp1:1 Load) (_slice_slice (Slice None None None)) Load) None)) (/seq) None) (Assign (list (Name &a:1 Store)) (Subscript (Name &dp0:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Store)) (Name &a:1 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:1 Load))) nil))))))))) (/seq) None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
      "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &num:0 Store))\n            (_starred_content (Name &wiz:0 Store))\n            (_starred_content (Name &per:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare\n        (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None))\n        (list Lt)\n        (list (Name &per:0 Load))\n      )\n      (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &x:0 Store))\n            (_starred_content (Name &y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (AugAssign (Name &y:0 Store) Div (Constant i100 None))\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (If\n          (Compare\n            (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load))\n            (list GtE)\n            (list (Name &y:0 Load))\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &x:0 Store))\n            (_starred_content (Name &y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &z:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &z:0 Load) Sub (Name &x:0 Load)))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &z:0 Store)) (Name g_input Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ImportFrom s_collections (list (alias &*:0 None)) i0)\n    (ImportFrom s_queue (list (alias &*:0 None)) i0)\n    (ImportFrom s_sys (list (alias &*:0 None)) i0)\n    (ImportFrom s_collections (list (alias &*:0 None)) i0)\n    (ImportFrom s_math (list (alias &*:0 None)) i0)\n    (ImportFrom s_heapq (list (alias &*:0 None)) i0)\n    (ImportFrom s_itertools (list (alias &*:0 None)) i0)\n    (ImportFrom s_bisect (list (alias &*:0 None)) i0)\n    (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0)\n    (ImportFrom s_math (list (alias s_factorial &f:0)) i0)\n    (FunctionDef\n      &lcd:0\n      (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load))\n            FloorDiv\n            (Call\n              (Name g_gcd Load)\n              (list (_starred_content (Name &xnum1:1 Load)) (_starred_content (Name &xnum2:1 Load)))\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Constant\n        s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ==\n        None\n      )\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &n:0 Store))\n                (_starred_content (Name &x:0 Store))\n                (_starred_content (Name &y:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None)\n        (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None)\n        (Assign\n          (list (Name &t:0 Store))\n          (Call\n            (Name g_ceil Load)\n            (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (_starred_content (Constant i0 None))\n                    (_starred_content (BinOp (Name &t:0 Load) Sub (Name &x:0 Load)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &x:0 Store))\n            (_starred_content (Name &y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &percentage:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (Constant i0 None))\n                (_starred_content (BinOp (Name &percentage:0 Load) Sub (Name &x:0 Load)))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd\n        None\n      )\n    )\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inlt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &insr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None)\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &s:3 Load)\n                  (_slice_slice\n                    (Slice\n                      None\n                      (BinOp\n                        (Call (Name g_len Load) (list (_starred_content (Name &s:3 Load))) nil)\n                        Sub\n                        (Constant i1 None)\n                      )\n                      None\n                    )\n                  )\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &invr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ImportFrom s_math (list (alias &ceil:0 None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &n:4 Store))\n                    (_starred_content (Name &x:4 Store))\n                    (_starred_content (Name &y:4 Store))\n                  )\n                  Store\n                )\n              )\n              (Call (Name &invr:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_max Load)\n                      (list\n                        (_starred_content (Constant i0 None))\n                        (_starred_content\n                          (BinOp\n                            (Call\n                              (Name &ceil:0 Load)\n                              (list\n                                (_starred_content\n                                  (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None))\n                                )\n                              )\n                              nil\n                            )\n                            Sub\n                            (Name &x:4 Load)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (list\n            (ExceptHandler\n              (Name g_Exception Load)\n              &e:4\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:4 Load))) nil)))\n            )\n          )\n          (/seq)\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:5 Load) s__fd Store))\n              (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:5 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:6 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (_starred_content (Attribute (Name &self:6 Load) s__fd Load))\n                      (_starred_content\n                        (Call\n                          (Name g_max Load)\n                          (list\n                            (_starred_content\n                              (Attribute\n                                (Call\n                                  (Attribute (Name &os:0 Load) s_fstat Load)\n                                  (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load)))\n                                  nil\n                                )\n                                s_st_size\n                                Load\n                              )\n                            )\n                            (_starred_content (Name &BUFSIZE:0 Load))\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) (/seq))\n                (Assign\n                  (list (Name &ptr:6 Store))\n                  (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                          (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None)))\n                          nil\n                        )\n                      )\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                          (list (_starred_content (Name &b:6 Load)))\n                          nil\n                        )\n                      )\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                          (list (_starred_content (Name &ptr:6 Load)))\n                          nil\n                        )\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:7 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (_starred_content (Attribute (Name &self:7 Load) s__fd Load))\n                      (_starred_content\n                        (Call\n                          (Name g_max Load)\n                          (list\n                            (_starred_content\n                              (Attribute\n                                (Call\n                                  (Attribute (Name &os:0 Load) s_fstat Load)\n                                  (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load)))\n                                  nil\n                                )\n                                s_st_size\n                                Load\n                              )\n                            )\n                            (_starred_content (Name &BUFSIZE:0 Load))\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:7 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:7 Load) s_count Load) (list (_starred_content (Constant bCg== None))) nil)\n                    Add\n                    (UnaryOp Not (Name &b:7 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:7 Store))\n                  (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                          (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None)))\n                          nil\n                        )\n                      )\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                          (list (_starred_content (Name &b:7 Load)))\n                          nil\n                        )\n                      )\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                          (list (_starred_content (Name &ptr:7 Load)))\n                          nil\n                        )\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n            )\n            (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:8 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (_starred_content (Attribute (Name &self:8 Load) s__fd Load))\n                      (_starred_content\n                        (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load)\n                          (list (_starred_content (Constant i0 None)))\n                          nil\n                        )\n                      )\n                      (_starred_content\n                        (Call\n                          (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                          (list (_starred_content (Constant i0 None)))\n                          nil\n                        )\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (_starred_content (Name &file:9 Load))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:10 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Attribute (Name &s:10 Load) s_encode Load)\n                        (list (_starred_content (Constant s_ascii None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (_starred_content (Constant s_ascii None)))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (_starred_content (Constant s_ascii None)))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Attribute (Name &sys:0 Load) s_stdin Store))\n            (_starred_content (Attribute (Name &sys:0 Load) s_stdout Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content\n            (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Load))) nil)\n          )\n          (_starred_content\n            (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdout Load))) nil)\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (_starred_content (Constant s-WzEzLCAxMF0= None)))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &x:0 Store))\n            (_starred_content (Name &y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil)\n        (list Gt)\n        (list (Name &x:0 Load))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) Sub (Name &x:0 Load))\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil)\n            (list LtE)\n            (list (Name &x:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq)\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_ceil None)) i0)\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &x:0 Store))\n            (_starred_content (Name &y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp\n                  (Call\n                    (Name g_ceil Load)\n                    (list\n                      (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))\n                    )\n                    nil\n                  )\n                  Sub\n                  (Name &x:0 Load)\n                )\n                (list Gt)\n                (list (Constant i0 None))\n              )\n              (BinOp\n                (Call\n                  (Name g_ceil Load)\n                  (list\n                    (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))\n                  )\n                  nil\n                )\n                Sub\n                (Name &x:0 Load)\n              )\n              (Constant i0 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &x:0 Store))\n            (_starred_content (Name &y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (Call\n                      (Attribute (Name g_math Load) s_ceil Load)\n                      (list\n                        (_starred_content\n                          (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))\n                        )\n                      )\n                      nil\n                    )\n                    Sub\n                    (Name &x:0 Load)\n                  )\n                )\n                (_starred_content (Constant i0 None))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (Call\n                  (Attribute (Name g_math Load) s_ceil Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None))\n                        Sub\n                        (Name &b:0 Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n                (list Gt)\n                (list (Constant i0 None))\n              )\n              (Call\n                (Attribute (Name g_math Load) s_ceil Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None))\n                      Sub\n                      (Name &b:0 Load)\n                    )\n                  )\n                )\n                nil\n              )\n              (Constant i0 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &per:0 &wiz:0 &num:0) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &per:0 Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &y:0 &x:0 &n:0) (AugAssign (Name &y:0 Store) Div (Constant i100 None)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load)) (list GtE) (list (Name &y:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &z:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &z:0 Load) Sub (Name &x:0 Load)))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &z:0 Store)) (Name g_input Load) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_queue (list (alias &*:0 None)) i0) (ImportFrom s_sys (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &*:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_itertools (list (alias &*:0 None)) i0) (ImportFrom s_bisect (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0) (ImportFrom s_math (list (alias s_factorial &f:0)) i0) (FunctionDef &lcd:0 (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load)) FloorDiv (Call (Name g_gcd Load) (list (_starred_content (Name &xnum1:1 Load)) (_starred_content (Name &xnum2:1 Load))) nil)))) nil None None) (Expr (Constant s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ== None)) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil) (/seq (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (Assign (list (Name &t:0 Store)) (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &t:0 Load) Sub (Name &x:0 Load)))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &percentage:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &percentage:0 Load) Sub (Name &x:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd None)) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None) (Return (Call (Name g_list Load) (list (_starred_content (Subscript (Name &s:3 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:3 Load))) nil) Sub (Constant i1 None)) None)) Load))) nil))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &x:4 Store)) (_starred_content (Name &y:4 Store))) Store)) (Call (Name &invr:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Call (Name &ceil:0 Load) (list (_starred_content (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:4 Load)))) nil))) nil))) (list (ExceptHandler (Name g_Exception Load) &e:4 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:4 Load))) nil))))) (/seq) (/seq))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s__fd Store)) (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:5 Load) s_write Store)) (IfExp (Attribute (Name &self:5 Load) s_writable Load) (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load))) nil) s_st_size Load)) (_starred_content (Name &BUFSIZE:0 Load))) nil))) nil) None) (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) (/seq)) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (_starred_content (Name &b:6 Load))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (_starred_content (Name &ptr:6 Load))) nil))) Load))) (/seq)) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load))) nil) s_st_size Load)) (_starred_content (Name &BUFSIZE:0 Load))) nil))) nil) None) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:7 Load) s_count Load) (list (_starred_content (Constant bCg== None))) nil) Add (UnaryOp Not (Name &b:7 Load))) None) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load) (list (_starred_content (Name &b:7 Load))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (_starred_content (Name &ptr:7 Load))) nil))) Load))) (/seq)) (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:8 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (_starred_content (Attribute (Name &self:8 Load) s__fd Load)) (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil))) nil)) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load) (list (_starred_content (Constant i0 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None))) nil))) Load))) (/seq))) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:9 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (_starred_content (Name &file:9 Load))) nil) None) (Assign (list (Attribute (Name &self:9 Load) s_flush Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:9 Load) s_writable Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:9 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:10 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load) (list (_starred_content (Call (Attribute (Name &s:10 Load) s_encode Load) (list (_starred_content (Constant s_ascii None))) nil))) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (_starred_content (Constant s_ascii None))) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (_starred_content (Constant s_ascii None))) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Store)) (_starred_content (Attribute (Name &sys:0 Load) s_stdout Store))) Store)) (Tuple (list (_starred_content (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Load))) nil)) (_starred_content (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdout Load))) nil))) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (_starred_content (Constant s-WzEzLCAxMF0= None))) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))) nil) None) (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) Sub (Name &x:0 Load)))) nil))) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) (list LtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load)) (Constant i0 None)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load))) (_starred_content (Constant i0 None))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &c:0 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load)))) nil) (list Gt) (list (Constant i0 None))) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load)))) nil) (Constant i0 None)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare (Constant s_I None) (list In) (list (Name &s:0 Load)))\n              (Call\n                (Name g_int Load)\n                (list\n                  (_starred_content\n                    (Compare\n                      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n                      (list Eq)\n                      (list (Constant i1 None))\n                    )\n                  )\n                )\n                nil\n              )\n              (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &cows:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &bets:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &i:0 Store))\n      (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n      None\n    )\n    (If\n      (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Attribute (Name &bets:0 Load) s_count Load)\n                      (list (_starred_content (Constant s_A None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare\n                (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n                (list Gt)\n                (list (Constant i1 None))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Name &t:0 Load) s_count Load)\n                          (list (_starred_content (Constant s_A None)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0)))\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &i:0 Store))\n      (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil)\n      None\n    )\n    (If\n      (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)))\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &status:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &allin:0 Store))\n      (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &folded:0 Store))\n      (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &In:0 Store))\n      (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n      None\n    )\n    (If\n      (Compare (Name &In:0 Load) (list Gt) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq)\n    )\n    (If\n      (Compare (Name &In:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq)\n    )\n    (If\n      (Compare (Name &In:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &allin:0 Load))) nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List\n                (list\n                  (_starred_content (Name &a:0 Load))\n                  (_starred_content\n                    (Subscript\n                      (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)\n                      (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i1 None))))\n                      Load\n                    )\n                  )\n                )\n                Load\n              )\n              (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &Is:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_I None))\n          )\n          (/seq (AugAssign (Name &Is:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &Is:0 Load) (list GtE) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &Is:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq\n            (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:0 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)))\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_A None))\n                  )\n                  (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Dict\n        (list (Constant s_A None) (Constant s_F None) (Constant s_I None))\n        (list (Constant i0 None) (Constant i0 None) (Constant i0 None))\n      )\n      None\n    )\n    (For\n      (Name &ch:0 Store)\n      (Call (Name g_input Load) nil nil)\n      (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Name &ch:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Subscript (Name &c:0 Load) (_slice_content (Constant s_I None)) Load)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &c:0 Load) (_slice_content (Constant s_A None)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (Constant s_I None)) Load)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare\n        (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n        (list Eq)\n        (list (Constant i1 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil)\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Name &a:0 Load)\n                      Sub\n                      (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If (Compare #1 (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #2)) nil))) (/seq (If (Compare #1 (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Constant s_I None) (list In) (list (Name &s:0 Load))) (Call (Name g_int Load) (list (_starred_content (Compare (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))))) nil) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None) (fn_1 (Constant i1 None) (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &cows:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &bets:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))))))))) nil)",
      "(Module (/seq (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0))) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (Assign (list (Name &f:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil) None) (fn_1 (Name &i:0 Load) (Name &i:0 Load) (Name &a:0 Load))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &status:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &allin:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &folded:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil) None) (Assign (list (Name &In:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (If (Compare (Name &In:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &allin:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Subscript (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load) (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i1 None)))) Load))) Load) (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &Is:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_I None))) (/seq (AugAssign (Name &Is:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &Is:0 Load) (list GtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &Is:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_A None))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Dict (list (Constant s_A None) (Constant s_F None) (Constant s_I None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &ch:0 Store) (Call (Name g_input Load) nil nil) (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Name &ch:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (fn_1 (Constant i1 None) (Subscript (Name &c:0 Load) (_slice_content (Constant s_I None)) Load) (Subscript (Name &c:0 Load) (_slice_content (Constant s_A None)) Load))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant i0 None))) Load)\n      None\n    )\n    (While\n      (Compare (Name &a:0 Load) (list GtE) (list (Name &b:0 Load)))\n      (/seq\n        (AugAssign (Name &s:0 Store) Add (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)))\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)) Add (BinOp (Name &a:0 Load) Mod (Name &b:0 Load)))\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &c:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &h:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &x:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &b:0 Store) Add (Constant i1 None))\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Name &y:0 Load)))\n          (/seq\n            (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n            (AugAssign (Name &x:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (AugAssign (Name &h:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &h:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &hrs:0 Store)) (Name &a:0 Load) None)\n    (Assign (list (Name &melt:0 Store)) (Name &a:0 Load) None)\n    (While\n      (Compare (Name &melt:0 Load) (list GtE) (list (Name &b:0 Load)))\n      (/seq\n        (AugAssign (Name &hrs:0 Store) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load)))\n        (Assign\n          (list (Name &melt:0 Store))\n          (BinOp\n            (BinOp (Name &melt:0 Load) Mod (Name &b:0 Load))\n            Add\n            (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &hrs:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Name &n:0 Load) None)\n    (Assign (list (Name &l:0 Store)) (Name &n:0 Load) None)\n    (While\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_floor Load)\n            (list (_starred_content (BinOp (Name &l:0 Load) Div (Name &m:0 Load))))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (BinOp (BinOp (Name &l:0 Load) Mod (Name &m:0 Load)) Add (Name &n:0 Load))\n          None\n        )\n        (AugAssign (Name &s:0 Store) Add (Name &n:0 Load))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Name &n:0 Load) None)\n    (Assign (list (Name &d:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Name &m:0 Load)) None)\n        (AugAssign (Name &c:0 Store) Add (Name &x:0 Load))\n        (Assign\n          (list (Name &n:0 Store))\n          (BinOp (Name &x:0 Load) Add (BinOp (Name &n:0 Load) Mod (Name &m:0 Load)))\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq Break) (/seq))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &r:0 Store) (Name &l:0 Store)) (Constant i0 None) None)\n    (While\n      (Name &a:0 Load)\n      (/seq\n        (AugAssign (Name &r:0 Store) Add (Name &a:0 Load))\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) FloorDiv (Name &b:0 Load)))\n              (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) Mod (Name &b:0 Load)))\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &res:0 Store) Add (Name &a:0 Load))\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) FloorDiv (Name &b:0 Load)))\n              (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Mod (Name &b:0 Load)))\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_math (list (alias g_log None)) i0)\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &b:1 Load))) (/seq))\n        (Return\n          (Call\n            (Name &gcd:0 Load)\n            (list (_starred_content (BinOp (Name &b:1 Load) Mod (Name &a:1 Load))) (_starred_content (Name &a:1 Load)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &fast_reader:0 Store))\n      (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Name &fast_writer:0 Store))\n      (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n      None\n    )\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name &fast_reader:0 Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &print:0\n      (arguments nil nil (arg &argv:2 None None) nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &fast_writer:0 Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (GeneratorExp\n                        (Call (Name g_str Load) (list (_starred_content (Name &i:3 Load))) nil)\n                        (list (comprehension (Name &i:3 Store) (Name &argv:2 Load) nil i0))\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp\n        (Name &a:0 Load)\n        Add\n        (BinOp (BinOp (Name &a:0 Load) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))\n      )\n      None\n    )\n    (Expr (Call (Name &print:0 Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (AugAssign (Name &u:0 Store) Add (Name &a:0 Load))\n        (AugAssign (Name &t:0 Store) Add (Name &a:0 Load))\n        (Assign (list (Name &a:0 Store)) (BinOp (Name &u:0 Load) FloorDiv (Name &b:0 Load)) None)\n        (AugAssign (Name &u:0 Store) Sub (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)))\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Sub (Constant i1 None))\n              FloorDiv\n              (BinOp (Name &b:0 Load) Sub (Constant i1 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant i0 None))) Load) None) (While (Compare (Name &a:0 Load) (list GtE) (list (Name &b:0 Load))) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load))) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)) Add (BinOp (Name &a:0 Load) Mod (Name &b:0 Load))) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (Assign (list (Name &h:0 Store)) (Constant i0 None) None) (While (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &x:0 Store) Sub (Constant i1 None)) (AugAssign (Name &b:0 Store) Add (Constant i1 None)) (If (Compare (Name &b:0 Load) (list Eq) (list (Name &y:0 Load))) (/seq (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (AugAssign (Name &x:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &h:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &h:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &hrs:0 Store)) (Name &a:0 Load) None) (Assign (list (Name &melt:0 Store)) (Name &a:0 Load) None) (While (Compare (Name &melt:0 Load) (list GtE) (list (Name &b:0 Load))) (/seq (AugAssign (Name &hrs:0 Store) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))) (Assign (list (Name &melt:0 Store)) (BinOp (BinOp (Name &melt:0 Load) Mod (Name &b:0 Load)) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &hrs:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &m:0 &n:0) (Assign (list (Name &s:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &l:0 Store)) (Name &n:0 Load) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Attribute (Name g_math Load) s_floor Load) (list (_starred_content (BinOp (Name &l:0 Load) Div (Name &m:0 Load)))) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (BinOp (Name &l:0 Load) Mod (Name &m:0 Load)) Add (Name &n:0 Load)) None) (AugAssign (Name &s:0 Store) Add (Name &n:0 Load))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Name &m:0 Load)) None) (AugAssign (Name &c:0 Store) Add (Name &x:0 Load)) (Assign (list (Name &n:0 Store)) (BinOp (Name &x:0 Load) Add (BinOp (Name &n:0 Load) Mod (Name &m:0 Load))) None) (If (Compare (Name &n:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq Break) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &r:0 Store) (Name &l:0 Store)) (Constant i0 None) None) (While (Name &a:0 Load) (/seq (AugAssign (Name &r:0 Store) Add (Name &a:0 Load)) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) FloorDiv (Name &b:0 Load))) (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) Mod (Name &b:0 Load)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &res:0 Store) Add (Name &a:0 Load)) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) FloorDiv (Name &b:0 Load))) (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Mod (Name &b:0 Load)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_math (list (alias g_log None)) i0) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &b:1 Load))) (/seq)) (Return (Call (Name &gcd:0 Load) (list (_starred_content (BinOp (Name &b:1 Load) Mod (Name &a:1 Load))) (_starred_content (Name &a:1 Load))) nil))) nil None None) (Assign (list (Name &fast_reader:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &fast_writer:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) None) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &fast_reader:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &print:0 (arguments nil nil (arg &argv:2 None None) nil nil None nil) (/seq (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_str Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (Name &argv:2 Load) nil i0))))) nil))) nil)) (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &a:0 Load) Add (BinOp (BinOp (Name &a:0 Load) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))) None) (Expr (Call (Name &print:0 Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (AugAssign (Name &u:0 Store) Add (Name &a:0 Load)) (AugAssign (Name &t:0 Store) Add (Name &a:0 Load)) (Assign (list (Name &a:0 Store)) (BinOp (Name &u:0 Load) FloorDiv (Name &b:0 Load)) None) (AugAssign (Name &u:0 Store) Sub (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil)) Break) (/seq))) (/seq))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None))))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a_sum:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b_sum:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c_sum:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a_sum:0 Load) Sub (Name &b_sum:0 Load)))) nil)\n    )\n    (Expr\n      (Call (Name g_print Load) (list (_starred_content (BinOp (Name &b_sum:0 Load) Sub (Name &c_sum:0 Load)))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign (list (Name &l1:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign (list (Name &l2:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &l1:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &l2:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            Break\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            Break\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &y:0 Store))\n              (Subscript (Name &l1:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)\n              Sub\n              (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil)\n              Sub\n              (Call (Name g_sum Load) (list (_starred_content (Name &c:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &li1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &li2:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &li3:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_sum Load) (list (_starred_content (Name &li1:0 Load))) nil)\n              Sub\n              (Call (Name g_sum Load) (list (_starred_content (Name &li2:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_sum Load) (list (_starred_content (Name &li2:0 Load))) nil)\n              Sub\n              (Call (Name g_sum Load) (list (_starred_content (Name &li3:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &flag1:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n            (Assign (list (Name &flag1:0 Store)) (Constant False None) None)\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &flag1:0 Load) (list Eq) (list (Constant True None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n    (Assign (list (Name &flag2:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n            (Assign (list (Name &flag2:0 Store)) (Constant False None) None)\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &flag2:0 Load) (list Eq) (list (Constant True None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &alist:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content\n                            (Call\n                              (Attribute\n                                (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                                s_split\n                                Load\n                              )\n                              nil\n                              nil\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Load\n                )\n                (list NotEq)\n                (list\n                  (Subscript\n                    (Subscript\n                      (Name &alist:0 Load)\n                      (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Subscript\n                          (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Name &j:0 Load))\n                          Load\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (UnaryOp USub (Constant i1 None)))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &initial_len:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &initial_list:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &second_list:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &third_list:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &initial_list:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Name &index:0 Load)\n            (list Eq)\n            (list (Call (Name g_len Load) (list (_starred_content (Name &second_list:0 Load))) nil))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare\n                (Name &item:0 Load)\n                (list NotEq)\n                (list (Subscript (Name &second_list:0 Load) (_slice_content (Name &index:0 Load)) Load))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)) Break)\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &second_list:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Name &index:0 Load)\n            (list Eq)\n            (list (Call (Name g_len Load) (list (_starred_content (Name &third_list:0 Load))) nil))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare\n                (Name &item:0 Load)\n                (list NotEq)\n                (list (Subscript (Name &third_list:0 Load) (_slice_content (Name &index:0 Load)) Load))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)) Break)\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))\n          (_starred_content (BinOp (Name &b:0 Load) Sub (Name &c:0 Load)))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &lst_1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &lst_2:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &lst_3:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &first_mistake:0 Store))\n      (BinOp\n        (Call (Name g_sum Load) (list (_starred_content (Name &lst_1:0 Load))) nil)\n        Sub\n        (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &second_mistake:0 Store))\n      (BinOp\n        (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil)\n        Sub\n        (Call (Name g_sum Load) (list (_starred_content (Name &lst_3:0 Load))) nil)\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (Name &first_mistake:0 Load))\n          (_starred_content (Constant s-WzEwXQ== None))\n          (_starred_content (Name &second_mistake:0 Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:3 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n          None\n        )\n      )\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &y:0 Store))\n          (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) #0 None) (Assign (list (Name %4 Store)) #0 None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) &n:0 &a_sum:0 &b_sum:0 &c_sum:0)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a_sum:0 Load) Sub (Name &b_sum:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &b_sum:0 Load) Sub (Name &c_sum:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &n:0 &l:0 &l1:0 &l2:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (Assign (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l2:0 Load) s_sort Load) nil nil)) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq)) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) None)) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (If (Compare (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq)) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) &t:0 &a:0 &b:0 &c:0)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &c:0 Load))) nil)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) &n:0 &li1:0 &li2:0 &li3:0)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &li1:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &li2:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &li2:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &li3:0 Load))) nil)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) &n:0 &a:0 &b:0 &c:0)) (Assign (list (Name &flag1:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (Assign (list (Name &flag1:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag1:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) (/seq)) (Assign (list (Name &flag2:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (Assign (list (Name &flag2:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag2:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &alist:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (Assign (list (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (list NotEq) (list (Subscript (Subscript (Name &alist:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) None)) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) &initial_len:0 &initial_list:0 &second_list:0 &third_list:0)) (For (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &initial_list:0 Load))) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &second_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil))) (/seq (If (Compare (Name &item:0 Load) (list NotEq) (list (Subscript (Name &second_list:0 Load) (_slice_content (Name &index:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)) Break) (/seq))))) (/seq) None) (For (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &second_list:0 Load))) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &third_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil))) (/seq (If (Compare (Name &item:0 Load) (list NotEq) (list (Subscript (Name &third_list:0 Load) (_slice_content (Name &index:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)) Break) (/seq))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load))) (_starred_content (BinOp (Name &b:0 Load) Sub (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) &a:0 &lst_1:0 &lst_2:0 &lst_3:0)) (Assign (list (Name &first_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &lst_1:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil)) None) (Assign (list (Name &second_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &lst_3:0 Load))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &first_mistake:0 Load)) (_starred_content (Constant s-WzEwXQ== None)) (_starred_content (Name &second_mistake:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:1 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Return (Constant s_0 None))) (/seq))\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Constant s-WzQwXQ== None)\n                      Add\n                      (Call\n                        (Name g_str Load)\n                        (list (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load)))\n                        nil\n                      )\n                    )\n                    Add\n                    (Constant s-WzQzXQ== None)\n                  )\n                  Add\n                  (Call (Name &f:0 Load) (list (_starred_content (Constant i1 None))) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None)\n                  Add\n                  (Call (Name g_str Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Constant i1 None)))) nil)\n                )\n                Add\n                (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)\n              )\n              Add\n              (Call (Name g_str Load) (list (_starred_content (Name &x:1 Load))) nil)\n            )\n            Add\n            (Constant s-WzQxLCA0MSwgNDFd None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &tmp:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)\n            )\n            FloorDiv\n            (Constant i2 None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &re:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)\n            )\n            Sub\n            (BinOp (Constant i2 None) Mult (Name &tmp:1 Load))\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Store) Sub (Name &re:1 Load))\n        (If\n          (Compare (Name &tmp:1 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &tmp:1 Store))\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA0OF0= None)\n                  Add\n                  (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (Constant s-WzQwLCA0MF0= None)\n                        Add\n                        (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)\n                      )\n                      Add\n                      (Constant s-WzQyXQ== None)\n                    )\n                    Add\n                    (Name &ss:1 Load)\n                  )\n                  Add\n                  (Constant s-WzQxXQ== None)\n                )\n                Add\n                (Constant s-WzQzXQ== None)\n              )\n              Add\n              (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &ss:1 Load)) Add (Constant s-WzQzXQ== None))\n              Add\n              (Call (Name &f:0 Load) (list (_starred_content (BinOp (Name &x:1 Load) Add (Constant i1 None)))) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:5 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (ListComp\n        (Subscript\n          (Subscript (Name &c:0 Load) (_slice_content (Name &i:3 Load)) Load)\n          (_slice_content (Constant i0 None))\n          Load\n        )\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &Y:0 Store))\n      (ListComp\n        (Subscript\n          (Subscript (Name &c:0 Load) (_slice_content (Name &i:4 Load)) Load)\n          (_slice_content (Constant i1 None))\n          Load\n        )\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil)))\n        nil\n      )\n    )\n    (Assign (list (Name &X:0 Store)) (Name &Y:0 Load) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &canonise:0\n      (arguments nil (list (arg &t:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &t:1 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA0OCwgNDVd None)\n                  Add\n                  (Call (Name &canonise:0 Load) (list (_starred_content (UnaryOp USub (Name &t:1 Load)))) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Name &ans:1 Store)) (Constant s_ None) None)\n        (While\n          (Compare (Name &t:1 Load) (list Gt) (list (Constant i50 None)))\n          (/seq\n            (AugAssign (Name &ans:1 Store) Add (Constant s-WzQwLCA1MywgNDgsIDQzXQ== None))\n            (AugAssign (Name &t:1 Store) Sub (Constant i50 None))\n          )\n          (/seq)\n        )\n        (Return\n          (BinOp\n            (BinOp (Name &ans:1 Load) Add (Call (Name g_str Load) (list (_starred_content (Name &t:1 Load))) nil))\n            Add\n            (BinOp\n              (Constant s-WzQxXQ== None)\n              Mult\n              (BinOp\n                (Call (Name g_len Load) (list (_starred_content (Name &ans:1 Load))) nil)\n                FloorDiv\n                (Constant i4 None)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &cxes:0 Store)) (List nil Load) None)\n    (Assign (list (Name &cyes:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &x:0 Store))\n                (_starred_content (Name &y:0 Store))\n                (_starred_content (Name &r:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &dx:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n          (/seq\n            (For\n              (Name &dy:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) Mod (Constant i2 None))\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (Compare\n                        (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) Mod (Constant i2 None))\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &cxes:0 Load) s_append Load)\n                        (list\n                          (_starred_content\n                            (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) FloorDiv (Constant i2 None))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &cyes:0 Load) s_append Load)\n                        (list\n                          (_starred_content\n                            (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) FloorDiv (Constant i2 None))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &coeffx:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i2 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &coeffy:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i2 None))\n      )\n      None\n    )\n    (Assign (list (Name &cfx:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &cfy:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (AugAssign\n              (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n              Sub\n              (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n            (AugAssign\n              (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store)\n              Add\n              (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n            (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (AugAssign\n              (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n              Sub\n              (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n            (AugAssign\n              (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store)\n              Add\n              (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n              (/seq\n                (AugAssign\n                  (Name &cfx:0 Store)\n                  Add\n                  (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store)\n                  Add\n                  (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &coeffx:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Store\n                  )\n                  Sub\n                  (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Name &cfy:0 Store)\n                  Add\n                  (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store)\n                  Add\n                  (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &coeffy:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Store\n                  )\n                  Sub\n                  (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store)\n                  Add\n                  (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &coeffx:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Store\n                  )\n                  Sub\n                  (BinOp (Constant i2 None) Mult (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &coeffx:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None)))\n                    Store\n                  )\n                  Add\n                  (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store)\n                  Add\n                  (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &coeffy:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Store\n                  )\n                  Sub\n                  (BinOp (Constant i2 None) Mult (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &coeffy:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None)))\n                    Store\n                  )\n                  Add\n                  (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &rx:0 Store)) (Constant s_ None) None)\n    (Assign (list (Name &ry:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &s:0 Store))\n          (JoinedStr\n            (list\n              (Constant s-Wzk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)\n              (FormattedValue (Name &i:0 Load) i-1 None)\n              (Constant s-WzQxLCA0MV0= None)\n            )\n          )\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign\n              (Name &rx:0 Store)\n              Add\n              (JoinedStr\n                (list\n                  (Constant s-WzQwLCA0MF0= None)\n                  (FormattedValue (Name &s:0 Load) i-1 None)\n                  (Constant s-WzQyXQ== None)\n                  (FormattedValue\n                    (Call\n                      (Name &canonise:0 Load)\n                      (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                      nil\n                    )\n                    i-1\n                    None\n                  )\n                  (Constant s-WzQxLCA0M10= None)\n                )\n              )\n            )\n            (AugAssign\n              (Name &ry:0 Store)\n              Add\n              (JoinedStr\n                (list\n                  (Constant s-WzQwLCA0MF0= None)\n                  (FormattedValue (Name &s:0 Load) i-1 None)\n                  (Constant s-WzQyXQ== None)\n                  (FormattedValue\n                    (Call\n                      (Name &canonise:0 Load)\n                      (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                      nil\n                    )\n                    i-1\n                    None\n                  )\n                  (Constant s-WzQxLCA0M10= None)\n                )\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &rx:0 Store)\n              Add\n              (BinOp\n                (JoinedStr\n                  (list\n                    (Constant s-WzQwXQ== None)\n                    (FormattedValue (Name &s:0 Load) i-1 None)\n                    (Constant s-WzQyXQ== None)\n                    (FormattedValue\n                      (Call\n                        (Name &canonise:0 Load)\n                        (list\n                          (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                        )\n                        nil\n                      )\n                      i-1\n                      None\n                    )\n                    (Constant s-WzQxXQ== None)\n                  )\n                )\n                Add\n                (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n              )\n            )\n            (AugAssign\n              (Name &ry:0 Store)\n              Add\n              (BinOp\n                (JoinedStr\n                  (list\n                    (Constant s-WzQwXQ== None)\n                    (FormattedValue (Name &s:0 Load) i-1 None)\n                    (Constant s-WzQyXQ== None)\n                    (FormattedValue\n                      (Call\n                        (Name &canonise:0 Load)\n                        (list\n                          (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                        )\n                        nil\n                      )\n                      i-1\n                      None\n                    )\n                    (Constant s-WzQxXQ== None)\n                  )\n                )\n                Add\n                (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (JoinedStr\n              (list\n                (Constant s-WzQwXQ== None)\n                (FormattedValue (Name &rx:0 Load) i-1 None)\n                (Constant s-WzQzXQ== None)\n                (FormattedValue\n                  (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfx:0 Load))) nil)\n                  i-1\n                  None\n                )\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (JoinedStr\n              (list\n                (Constant s-WzQwXQ== None)\n                (FormattedValue (Name &ry:0 Load) i-1 None)\n                (Constant s-WzQzXQ== None)\n                (FormattedValue\n                  (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfy:0 Load))) nil)\n                  i-1\n                  None\n                )\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                (_starred_content (Subscript (Name &y:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                (_starred_content (Name &r:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (FunctionDef\n      &sum:0\n      (arguments nil (list (arg &s1:1 None None) (arg &s2:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:1 Load)) Add (Constant s-WzQzXQ== None))\n              Add\n              (Name &s2:1 Load)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &minus:0\n      (arguments nil (list (arg &s1:2 None None) (arg &s2:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:2 Load)) Add (Constant s-WzQ1XQ== None))\n              Add\n              (Name &s2:2 Load)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mult:0\n      (arguments nil (list (arg &s1:3 None None) (arg &s2:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:3 Load)) Add (Constant s-WzQyXQ== None))\n              Add\n              (Name &s2:3 Load)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sabs:0\n      (arguments nil (list (arg &s1:4 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Constant s-Wzk3LCA5OCwgMTE1LCA0MF0= None) Add (Name &s1:4 Load))\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &stand:0\n      (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &sum:0 Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &minus:0 Load)\n                  (list\n                    (_starred_content (Constant s_1 None))\n                    (_starred_content\n                      (Call\n                        (Name &sabs:0 Load)\n                        (list\n                          (_starred_content\n                            (Call\n                              (Name &minus:0 Load)\n                              (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load)))\n                              nil\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              (_starred_content\n                (Call\n                  (Name &sabs:0 Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name &minus:0 Load)\n                        (list\n                          (_starred_content\n                            (Call\n                              (Name &sabs:0 Load)\n                              (list\n                                (_starred_content\n                                  (Call\n                                    (Name &minus:0 Load)\n                                    (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load)))\n                                    nil\n                                  )\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          (_starred_content (Constant s_1 None))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ans:0\n      (arguments nil (list (arg &v:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:6 Store)) (Constant s_ None) None)\n        (For\n          (Name &i:6 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &s:6 Load) (list Eq) (list (Constant s_ None)))\n              (/seq\n                (Assign\n                  (list (Name &s:6 Store))\n                  (Call\n                    (Name &mult:0 Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_str Load)\n                          (list\n                            (_starred_content\n                              (BinOp\n                                (Subscript\n                                  (Name &v:6 Load)\n                                  (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None)))\n                                  Load\n                                )\n                                FloorDiv\n                                (Constant i2 None)\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                      (_starred_content\n                        (Call\n                          (Name &stand:0 Load)\n                          (list\n                            (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &s:6 Store))\n                  (Call\n                    (Name &sum:0 Load)\n                    (list\n                      (_starred_content (Name &s:6 Load))\n                      (_starred_content\n                        (Call\n                          (Name &mult:0 Load)\n                          (list\n                            (_starred_content\n                              (Call\n                                (Name g_str Load)\n                                (list\n                                  (_starred_content\n                                    (BinOp\n                                      (Subscript\n                                        (Name &v:6 Load)\n                                        (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None)))\n                                        Load\n                                      )\n                                      FloorDiv\n                                      (Constant i2 None)\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (_starred_content\n                              (Call\n                                (Name &stand:0 Load)\n                                (list\n                                  (_starred_content\n                                    (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil)\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:6 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &x:0 Load))) nil))\n    (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &y:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &ex:0\n      (arguments nil (list (arg &values:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &e:1 Store)) (Constant None None) None)\n        (For\n          (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &v:1 Store))) Store)\n          (Call (Name g_enumerate Load) (list (_starred_content (Name &values:1 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &e_:1 Store))\n              (JoinedStr\n                (list\n                  (Constant s-WzQwXQ== None)\n                  (FormattedValue (BinOp (Name &v:1 Load) FloorDiv (Constant i2 None)) i-1 None)\n                  (Constant s-WzQyLCA0MCwgNDAsIDQ5LCA0NSwgOTcsIDk4LCAxMTUsIDQwLCA0MCwgMTE2LCA0NV0= None)\n                  (FormattedValue (Name &i:1 Load) i-1 None)\n                  (Constant\n                    s-WzQxLCA0MSwgNDEsIDQzLCA5NywgOTgsIDExNSwgNDAsIDQwLCA0OSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd\n                    None\n                  )\n                  (FormattedValue (Name &i:1 Load) i-1 None)\n                  (Constant s-WzQxLCA0MSwgNDEsIDQxLCA0MSwgNDFd None)\n                )\n              )\n              None\n            )\n            (If\n              (Compare (Name &e:1 Load) (list Is) (list (Constant None None)))\n              (/seq (Assign (list (Name &e:1 Store)) (Name &e_:1 Load) None))\n              (/seq\n                (Assign\n                  (list (Name &e:1 Store))\n                  (JoinedStr\n                    (list\n                      (Constant s-WzQwXQ== None)\n                      (FormattedValue (Name &e:1 Load) i-1 None)\n                      (Constant s-WzQzXQ== None)\n                      (FormattedValue (Name &e_:1 Load) i-1 None)\n                      (Constant s-WzQxXQ== None)\n                    )\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &e:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &circles:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &xs:2 Store))\n          (ListComp\n            (Subscript (Name &c:5 Load) (_slice_content (Constant i0 None)) Load)\n            (list (comprehension (Name &c:5 Store) (Name &circles:2 Load) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &ys:2 Store))\n          (ListComp\n            (Subscript (Name &c:6 Load) (_slice_content (Constant i1 None)) Load)\n            (list (comprehension (Name &c:6 Store) (Name &circles:2 Load) nil i0))\n          )\n          None\n        )\n        (Return\n          (Tuple\n            (list\n              (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &xs:2 Load))) nil))\n              (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &ys:2 Load))) nil))\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &pc:0\n      (arguments nil (list (arg &line:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &t:3 Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Name &line:3 Load) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assert\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &t:3 Load))) nil)\n            (list Eq)\n            (list (Constant i3 None))\n          )\n          (JoinedStr\n            (list\n              (Constant\n                s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgNTgsIDMyXQ==\n                None\n              )\n              (FormattedValue (Name &line:3 Load) i-1 None)\n            )\n          )\n        )\n        (Return (Name &t:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:4 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &circles:4 Store))\n          (ListComp\n            (Call (Name &pc:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n            (list\n              (comprehension\n                (Name &_:7 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &f:4 Store)) (_starred_content (Name &g:4 Store))) Store))\n          (Call (Name &solve:0 Load) (list (_starred_content (Name &circles:4 Load))) nil)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:4 Load))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &g:4 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:1 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Return (Constant s_0 None))) (/seq))\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Constant s-WzQwXQ== None)\n                      Add\n                      (Call\n                        (Name g_str Load)\n                        (list (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load)))\n                        nil\n                      )\n                    )\n                    Add\n                    (Constant s-WzQzXQ== None)\n                  )\n                  Add\n                  (Call (Name &f:0 Load) (list (_starred_content (Constant i1 None))) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None)\n                  Add\n                  (Call (Name g_str Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Constant i1 None)))) nil)\n                )\n                Add\n                (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)\n              )\n              Add\n              (Call (Name g_str Load) (list (_starred_content (Name &x:1 Load))) nil)\n            )\n            Add\n            (Constant s-WzQxLCA0MSwgNDFd None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &tmp:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)\n            )\n            FloorDiv\n            (Constant i2 None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &re:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)\n            )\n            Sub\n            (BinOp (Constant i2 None) Mult (Name &tmp:1 Load))\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Store) Sub (Name &re:1 Load))\n        (If\n          (Compare (Name &tmp:1 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &tmp:1 Store))\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA0OF0= None)\n                  Add\n                  (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (Constant s-WzQwLCA0MF0= None)\n                        Add\n                        (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)\n                      )\n                      Add\n                      (Constant s-WzQyXQ== None)\n                    )\n                    Add\n                    (Name &ss:1 Load)\n                  )\n                  Add\n                  (Constant s-WzQxXQ== None)\n                )\n                Add\n                (Constant s-WzQzXQ== None)\n              )\n              Add\n              (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &ss:1 Load)) Add (Constant s-WzQzXQ== None))\n              Add\n              (Call (Name &f:0 Load) (list (_starred_content (BinOp (Name &x:1 Load) Add (Constant i1 None)))) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:5 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (ListComp\n        (Subscript\n          (Subscript (Name &c:0 Load) (_slice_content (Name &i:3 Load)) Load)\n          (_slice_content (Constant i0 None))\n          Load\n        )\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &Y:0 Store))\n      (ListComp\n        (Subscript\n          (Subscript (Name &c:0 Load) (_slice_content (Name &i:4 Load)) Load)\n          (_slice_content (Constant i1 None))\n          Load\n        )\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil)))\n        nil\n      )\n    )\n    (Assign (list (Name &X:0 Store)) (Name &Y:0 Load) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (/seq (Return (Constant s_0 None))) (/seq)) (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant s-WzQzXQ== None)) Add (Call (Name %3 Load) (list (_starred_content (Constant i1 None))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name %5 Store)) (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None) Add (Call (Name g_str Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None)))) nil)) Add (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)) Add (Call (Name g_str Load) (list (_starred_content (Name %2 Load))) nil)) Add (Constant s-WzQxLCA0MSwgNDFd None)) None) (Assign (list (Name %6 Store)) (BinOp (BinOp (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) Sub (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name %7 Store)) (BinOp (BinOp (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) Sub (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) Sub (BinOp (Constant i2 None) Mult (Name %6 Load))) None) (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Store) Sub (Name %7 Load)) (If (Compare (Name %6 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name %6 Store)) (BinOp (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name %6 Load))) nil)) Add (Constant s-WzQxXQ== None)) None)) (/seq)) (Assign (list (Name %5 Store)) (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name %6 Load))) nil)) Add (Constant s-WzQyXQ== None)) Add (Name %5 Load)) Add (Constant s-WzQxXQ== None)) Add (Constant s-WzQzXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name %6 Load))) nil)) Add (Constant s-WzQxXQ== None)) None) (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name %5 Load)) Add (Constant s-WzQzXQ== None)) Add (Call (Name %3 Load) (list (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil)) Add (Constant s-WzQxXQ== None)))) nil None None) (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %10 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name %9 Load))) nil) (list (comprehension (Name %9 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %4 Store)) (ListComp (Subscript (Subscript (Name %10 Load) (_slice_content (Name %11 Load)) Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name %11 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %13 Store)) (ListComp (Subscript (Subscript (Name %10 Load) (_slice_content (Name %12 Load)) Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name %12 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Constant i0 None))) nil))) nil)) (Assign (list (Name %4 Store)) (Name %13 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Constant i0 None))) nil))) nil)))",
        "sym_arity": 13,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 &n:0 &x:1 &f:0 &X:0 &ss:1 &tmp:1 &re:1 &i:2 &x:5 &c:0 &i:3 &i:4 &Y:0) nil)",
      "(Module (/seq (FunctionDef &canonise:0 (arguments nil (list (arg &t:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &t:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (Constant s-WzQwLCA0OCwgNDVd None) Add (Call (Name &canonise:0 Load) (list (_starred_content (UnaryOp USub (Name &t:1 Load)))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name &ans:1 Store)) (Constant s_ None) None) (While (Compare (Name &t:1 Load) (list Gt) (list (Constant i50 None))) (/seq (AugAssign (Name &ans:1 Store) Add (Constant s-WzQwLCA1MywgNDgsIDQzXQ== None)) (AugAssign (Name &t:1 Store) Sub (Constant i50 None))) (/seq)) (Return (BinOp (BinOp (Name &ans:1 Load) Add (Call (Name g_str Load) (list (_starred_content (Name &t:1 Load))) nil)) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Call (Name g_len Load) (list (_starred_content (Name &ans:1 Load))) nil) FloorDiv (Constant i4 None)))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cxes:0 Store)) (List nil Load) None) (Assign (list (Name &cyes:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (For (Name &dx:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &dy:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Attribute (Name &cxes:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) FloorDiv (Constant i2 None)))) nil)) (Expr (Call (Attribute (Name &cyes:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) FloorDiv (Constant i2 None)))) nil))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &coeffx:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &coeffy:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &cfx:0 Store)) (Constant i0 None) None) (Assign (list (Name &cfy:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))))))) (/seq) None) (Assign (list (Name &rx:0 Store)) (Constant s_ None) None) (Assign (list (Name &ry:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &s:0 Store)) (JoinedStr (list (Constant s-Wzk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzQxLCA0MV0= None))) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &n:0 Load))) (/seq (AugAssign (Name &rx:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxLCA0M10= None)))) (AugAssign (Name &ry:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxLCA0M10= None))))) (/seq (AugAssign (Name &rx:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))))) (AugAssign (Name &ry:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &rx:0 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfx:0 Load))) nil) i-1 None) (Constant s-WzQxXQ== None))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &ry:0 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfy:0 Load))) nil) i-1 None) (Constant s-WzQxXQ== None))))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &y:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &y:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)) (/seq) None) (FunctionDef &sum:0 (arguments nil (list (arg &s1:1 None None) (arg &s2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:1 Load)) Add (Constant s-WzQzXQ== None)) Add (Name &s2:1 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &minus:0 (arguments nil (list (arg &s1:2 None None) (arg &s2:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:2 Load)) Add (Constant s-WzQ1XQ== None)) Add (Name &s2:2 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &mult:0 (arguments nil (list (arg &s1:3 None None) (arg &s2:3 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:3 Load)) Add (Constant s-WzQyXQ== None)) Add (Name &s2:3 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &sabs:0 (arguments nil (list (arg &s1:4 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Constant s-Wzk3LCA5OCwgMTE1LCA0MF0= None) Add (Name &s1:4 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &stand:0 (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (/seq (Return (Call (Name &sum:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_1 None)) (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load))) nil))) nil))) nil)) (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load))) nil))) nil)) (_starred_content (Constant s_1 None))) nil))) nil))) nil))) nil None None) (FunctionDef &ans:0 (arguments nil (list (arg &v:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:6 Store)) (Constant s_ None) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &s:6 Load) (list Eq) (list (Constant s_ None))) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &mult:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Subscript (Name &v:6 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load) FloorDiv (Constant i2 None)))) nil)) (_starred_content (Call (Name &stand:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))) nil))) nil) None)) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &sum:0 Load) (list (_starred_content (Name &s:6 Load)) (_starred_content (Call (Name &mult:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Subscript (Name &v:6 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load) FloorDiv (Constant i2 None)))) nil)) (_starred_content (Call (Name &stand:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))) nil))) nil))) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:6 Load))) nil))) nil None None) (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &ex:0 (arguments nil (list (arg &values:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &e:1 Store)) (Constant None None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &values:1 Load))) nil) (/seq (Assign (list (Name &e_:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (BinOp (Name &v:1 Load) FloorDiv (Constant i2 None)) i-1 None) (Constant s-WzQyLCA0MCwgNDAsIDQ5LCA0NSwgOTcsIDk4LCAxMTUsIDQwLCA0MCwgMTE2LCA0NV0= None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQzLCA5NywgOTgsIDExNSwgNDAsIDQwLCA0OSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQxLCA0MSwgNDFd None))) None) (If (Compare (Name &e:1 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &e:1 Store)) (Name &e_:1 Load) None)) (/seq (Assign (list (Name &e:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &e:1 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Name &e_:1 Load) i-1 None) (Constant s-WzQxXQ== None))) None)))) (/seq) None) (Return (Name &e:1 Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &circles:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &xs:2 Store)) (ListComp (Subscript (Name &c:5 Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &c:5 Store) (Name &circles:2 Load) nil i0))) None) (Assign (list (Name &ys:2 Store)) (ListComp (Subscript (Name &c:6 Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &c:6 Store) (Name &circles:2 Load) nil i0))) None) (Return (Tuple (list (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &xs:2 Load))) nil)) (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &ys:2 Load))) nil))) Load))) nil None None) (FunctionDef &pc:0 (arguments nil (list (arg &line:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &t:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &line:3 Load) s_split Load) nil nil))) nil))) nil) None) (Assert (Compare (Call (Name g_len Load) (list (_starred_content (Name &t:3 Load))) nil) (list Eq) (list (Constant i3 None))) (JoinedStr (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgNTgsIDMyXQ== None) (FormattedValue (Name &line:3 Load) i-1 None)))) (Return (Name &t:3 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &circles:4 Store)) (ListComp (Call (Name &pc:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &f:4 Store)) (_starred_content (Name &g:4 Store))) Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &circles:4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:4 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &g:4 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (fn_1 &n:0 &x:1 &f:0 &X:0 &ss:1 &tmp:1 &re:1 &i:2 &x:5 &c:0 &i:3 &i:4 &Y:0) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign (list (Name &nm:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Subscript (Name &nm:0 Load) (_slice_content (Constant i0 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &m:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Subscript (Name &nm:0 Load) (_slice_content (Constant i1 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &lis:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &inp:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &inp:0 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil))\n        (For\n          (Name &i:0 Store)\n          (Name &inp:0 Load)\n          (/seq\n            (Assign\n              (list (Subscript (Name &lis:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n            (Assign (list (Name &prev:0 Store)) (Name &i:0 Load) None)\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_sum Load) (list (_starred_content (Name &lis:0 Load))) nil)\n        (list Eq)\n        (list (Name &m:0 Load))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &L:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &L:0 Load) s_extend Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (_slice_slice (Slice (Constant i1 None) None None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call\n          (Name g_len Load)\n          (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &L:0 Load))) nil)))\n          nil\n        )\n        (list Eq)\n        (list (Name &m:0 Load))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &bulbs:0 Store))\n      (BinOp (List (list (_starred_content (Constant None None))) Load) Mult (Name &m:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &array:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content\n                (BinOp (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &bulbs:0 Load)\n                  (_slice_content\n                    (BinOp\n                      (Subscript (Name &array:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                      Sub\n                      (Constant i1 None)\n                    )\n                  )\n                  Store\n                )\n              )\n              (Constant i1 None)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &result:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &bulbs:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Is)\n            (list (Constant None None))\n          )\n          (/seq (Assign (list (Name &result:0 Store)) (Constant False None) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Name &result:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (Import (list (alias g_sys None) (alias g_random None)))\n    (FunctionDef\n      &nextInt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &nextStrs:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &nextInts:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list (_starred_content (Name g_int Load)) (_starred_content (Call (Name &nextStrs:0 Load) nil nil)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &m:1 Store))) Store))\n          (Call (Name &nextInts:0 Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &arr:1 Store))\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Mult\n            (BinOp (Name &m:1 Load) Add (Constant i1 None))\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (Assign (list (Name &b:1 Store)) (Call (Name &nextInts:0 Load) nil nil) None)\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content\n                    (BinOp (Subscript (Name &b:1 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &arr:1 Load)\n                      (_slice_content (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                      Store\n                    )\n                  )\n                  (Constant i1 None)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &ok:1 Store)) (Constant True None) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &m:1 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &arr:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq (Assign (list (Name &ok:1 Store)) (Constant False None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &ok:1 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name g_exit Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (BinOp (Constant s-WzMyXQ== None) Mult (Name &n:0 Load))\n      (/seq\n        (AugAssign\n          (Name &a:0 Store)\n          Add\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Subscript\n                  (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                  (_slice_slice (Slice (Constant i1 None) None None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Constant s_YNEOS None)\n              (_slice_slice\n                (Slice\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil)))\n                      nil\n                    )\n                    (list NotEq)\n                    (list (Name &m:0 Load))\n                  )\n                  None\n                  (Constant i2 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &nm:1 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign\n          (list (Name &nm:1 Store))\n          (Call (Attribute (Name &nm:1 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &n:1 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &nm:1 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &m:1 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &nm:1 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &bulbs:1 Store))\n          (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &m:1 Load))\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (Assign (list (Name &b:1 Store)) (Call (Name g_input Load) nil nil) None)\n            (Assign\n              (list (Name &b:1 Store))\n              (Call (Attribute (Name &b:1 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil)\n              None\n            )\n            (For\n              (Name &j:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:1 Load))) nil))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &bulbs:1 Load)\n                      (_slice_content\n                        (BinOp\n                          (Call\n                            (Name g_int Load)\n                            (list\n                              (_starred_content (Subscript (Name &b:1 Load) (_slice_content (Name &j:1 Load)) Load))\n                            )\n                            nil\n                          )\n                          Sub\n                          (Constant i1 None)\n                        )\n                      )\n                      Store\n                    )\n                  )\n                  (Constant True None)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &printed:1 Store)) (Constant False None) None)\n        (For\n          (Name &k:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:1 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &bulbs:1 Load) (_slice_content (Name &k:1 Load)) Load)\n                (list Eq)\n                (list (Constant False None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n                (Assign (list (Name &printed:1 Store)) (Constant True None) None)\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (UnaryOp Not (Name &printed:1 Load))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &used:0 Store))\n      (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &arr:0 Store))\n          (Subscript\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (_slice_slice (Slice (Constant i1 None) None None))\n            Load\n          )\n          None\n        )\n        (For\n          (Name &t:0 Store)\n          (Name &arr:0 Load)\n          (/seq\n            (If\n              (UnaryOp\n                Not\n                (Subscript (Name &used:0 Load) (_slice_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) Load)\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &used:0 Load)\n                      (_slice_content (BinOp (Name &t:0 Load) Sub (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Constant True None)\n                  None\n                )\n                (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &k:0 Load) (list Eq) (list (Name &n:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Name &n:0 Load))\n          (_starred_content (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                        (list (_starred_content (Constant s-WzMyXQ== None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content\n                (BinOp (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n              )\n              (_starred_content (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &x:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list NotIn)\n                (list (Name &ans:0 Load))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq Pass)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_len Load) (list (_starred_content (Name &ans:0 Load))) nil)\n        (list GtE)\n        (list (Name &m:0 Load))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list (_starred_content (Name &z:0 Store)) (_starred_starred (Starred (Name &a:0 Store) Store)))\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Compare (Name &j:0 Load) (list NotIn) (list (Name &s:0 Load)))\n              (/seq\n                (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &j:0 Load))) nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n        (list Eq)\n        (list (Name &m:0 Load))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &s:0 Load) s_update Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Subscript\n                        (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                        (_slice_slice (Slice (Constant i1 None) None None))\n                        Load\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Tuple (list (_starred_content (Constant s_NO None)) (_starred_content (Constant s_YES None))) Load)\n              (_slice_content\n                (Compare\n                  (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                  (list Eq)\n                  (list (Name &m:0 Load))\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &nm:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &nm:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &nm:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &lis:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &inp:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Attribute (Name &inp:0 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil)) (For (Name &i:0 Store) (Name &inp:0 Load) (/seq (Assign (list (Subscript (Name &lis:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None) (Assign (list (Name &prev:0 Store)) (Name &i:0 Load) None)) (/seq) None)) (/seq) None) (fn_1 (Compare (Call (Name g_sum Load) (list (_starred_content (Name &lis:0 Load))) nil) (list Eq) (list (Name &m:0 Load))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &L:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &L:0 Load) s_extend Load) (list (_starred_content (Subscript (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq) None) (fn_1 (Compare (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &L:0 Load))) nil))) nil) (list Eq) (list (Name &m:0 Load))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &bulbs:0 Store)) (BinOp (List (list (_starred_content (Constant None None))) Load) Mult (Name &m:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &array:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &bulbs:0 Load) (_slice_content (BinOp (Subscript (Name &array:0 Load) (_slice_content (Name &j:0 Load)) Load) Sub (Constant i1 None))) Store)) (Constant i1 None) None)) (/seq) None)) (/seq) None) (Assign (list (Name &result:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (If (Compare (Subscript (Name &bulbs:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &result:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (fn_1 (Name &result:0 Load))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Import (list (alias g_sys None) (alias g_random None))) (FunctionDef &nextInt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &nextStrs:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil None None) (FunctionDef &nextInts:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Name &nextStrs:0 Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &m:1 Store))) Store)) (Call (Name &nextInts:0 Load) nil nil) None) (Assign (list (Name &arr:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &b:1 Store)) (Call (Name &nextInts:0 Load) nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Subscript (Name &b:1 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &arr:1 Load) (_slice_content (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load)) Store)) (Constant i1 None) None)) (/seq) None)) (/seq) None) (Assign (list (Name &ok:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:1 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &arr:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &ok:1 Store)) (Constant False None) None)) (/seq))) (/seq) None) (fn_1 (Name &ok:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name g_exit Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (BinOp (Constant s-WzMyXQ== None) Mult (Name &n:0 Load)) (/seq (AugAssign (Name &a:0 Store) Add (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Constant s_YNEOS None) (_slice_slice (Slice (Compare (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (list NotEq) (list (Name &m:0 Load))) None (Constant i2 None))) Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &nm:1 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &nm:1 Store)) (Call (Attribute (Name &nm:1 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &nm:1 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &m:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &nm:1 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &bulbs:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &m:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &b:1 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &b:1 Store)) (Call (Attribute (Name &b:1 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:1 Load))) nil))) nil) (/seq (Assign (list (Subscript (Name &bulbs:1 Load) (_slice_content (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &b:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil) Sub (Constant i1 None))) Store)) (Constant True None) None)) (/seq) None)) (/seq) None) (Assign (list (Name &printed:1 Store)) (Constant False None) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:1 Load))) nil) (/seq (If (Compare (Subscript (Name &bulbs:1 Load) (_slice_content (Name &k:1 Load)) Load) (list Eq) (list (Constant False None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Assign (list (Name &printed:1 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &printed:1 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &used:0 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Assign (list (Name &arr:0 Store)) (Subscript (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (For (Name &t:0 Store) (Name &arr:0 Load) (/seq (If (UnaryOp Not (Subscript (Name &used:0 Load) (_slice_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) Load)) (/seq (Assign (list (Subscript (Name &used:0 Load) (_slice_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) Store)) (Constant True None) None) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (fn_1 (Compare (Name &k:0 Load) (list Eq) (list (Name &n:0 Load))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load)) (_starred_content (Constant i1 None))) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) (_starred_content (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &x:0 Load) (_slice_content (Name &j:0 Load)) Load) (list NotIn) (list (Name &ans:0 Load))) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil))) (/seq Pass))) (/seq) None)) (/seq) None) (fn_1 (Compare (Call (Name g_len Load) (list (_starred_content (Name &ans:0 Load))) nil) (list GtE) (list (Name &m:0 Load))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &z:0 Store)) (_starred_starred (Starred (Name &a:0 Store) Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (For (Name &j:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &j:0 Load) (list NotIn) (list (Name &s:0 Load))) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &j:0 Load))) nil))) (/seq))) (/seq) None)) (/seq) None) (fn_1 (Compare (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) (list Eq) (list (Name &m:0 Load))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_update Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Tuple (list (_starred_content (Constant s_NO None)) (_starred_content (Constant s_YES None))) Load) (_slice_content (Compare (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) (list Eq) (list (Name &m:0 Load)))) Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &l:1 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &l:1 Load) Load))) nil))\n        (For\n          (Name &_:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store))\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Name &l:1 Load)\n                  (_slice_content\n                    (Compare\n                      (Name &a:1 Load)\n                      (list Eq)\n                      (list (Subscript (Name &l:1 Load) (_slice_content (Constant i1 None)) Load))\n                    )\n                  )\n                  Store\n                )\n              )\n              (Name &b:1 Load)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &l:1 Load) Load))) nil))\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &l:0 Store)) (List nil Load) None)\n    (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &s:0 Load))) nil))\n    (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &s:0 Load) s_split Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Name &s:0 Load)\n              (_slice_content\n                (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Name &a:0 Load))) nil)\n              )\n              Store\n            )\n          )\n          (Name &b:0 Load)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &l:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &s:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_starred (Starred (Name &l:0 Load) Load)))\n        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &line:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_str Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list (_starred_content (Name &line:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_str Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare\n                (Name &a:0 Load)\n                (list Eq)\n                (list (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Store))\n                  (Name &b:0 Load)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Name &a:0 Load)\n                    (list Eq)\n                    (list (Subscript (Name &line:0 Load) (_slice_content (Constant i1 None)) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &line:0 Load) (_slice_content (Constant i1 None)) Store))\n                      (Name &b:0 Load)\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                      (list (_starred_content (Name &line:0 Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Name &s:1 Load)\n        (list\n          (comprehension\n            (Name &s:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (GeneratorExp (Name &j:4 Load) (list (comprehension (Name &j:4 Store) (Name &a:0 Load) nil i0)))\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n          (ListComp\n            (Name &s:2 Load)\n            (list\n              (comprehension\n                (Name &s:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Name &x:0 Load))\n          )\n          (/seq\n            (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Store)) (Name &y:0 Load) None)\n          )\n          (/seq\n            (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Store)) (Name &y:0 Load) None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (GeneratorExp (Name &j:3 Load) (list (comprehension (Name &j:3 Store) (Name &a:0 Load) nil i0)))\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &oria:0 Store)) (_starred_content (Name &orib:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &oria:0 Load)) (_starred_content (Name &orib:0 Load)))\n        nil\n      )\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &kill:0 Store)) (_starred_content (Name &newm:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (If\n          (Compare (Name &kill:0 Load) (list Eq) (list (Name &oria:0 Load)))\n          (/seq (Assign (list (Name &oria:0 Store)) (Name &newm:0 Load) None))\n          (/seq (Assign (list (Name &orib:0 Store)) (Name &newm:0 Load) None))\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &oria:0 Load)) (_starred_content (Name &orib:0 Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &c:0 Load)))\n          (/seq (Assign (list (Name &a:0 Store)) (Name &d:0 Load) None))\n          (/seq (Assign (list (Name &b:0 Store)) (Name &d:0 Load) None))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &kill:0 Store)) (_starred_content (Name &ptn:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (If\n          (Compare (Name &kill:0 Load) (list Eq) (list (Name &a:0 Load)))\n          (/seq (Assign (list (Name &a:0 Store)) (Name &ptn:0 Load) None))\n          (/seq (Assign (list (Name &b:0 Store)) (Name &ptn:0 Load) None))\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (List nil Load) None)\n    (Expr\n      (Call\n        (Attribute (Name &res:0 Load) s_append Load)\n        (list\n          (_starred_content (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load))\n        )\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &x:0 Load)))\n          (/seq (Assign (list (Name &x:0 Store)) (Name &b:0 Load) None))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &y:0 Load)))\n              (/seq (Assign (list (Name &y:0 Store)) (Name &b:0 Load) None))\n              (/seq)\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &res:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n      (Name &res:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Constant s-WzMyXQ== None)) Add (Name &b:0 Load)))\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n              (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s1:0 Store)) (_starred_content (Name &s2:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Name &a:0 Load)\n              (_slice_content\n                (Call (Attribute (Name &a:0 Load) s_index Load) (list (_starred_content (Name &s1:0 Load))) nil)\n              )\n              Store\n            )\n          )\n          (Name &s2:0 Load)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &options:1 Store))\n          (Call\n            (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n            nil\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i0 None)) Load))\n              (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i1 None)) Load))\n            )\n            nil\n          )\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple (list (_starred_content (Name &victim:1 Store)) (_starred_content (Name &newguy:1 Store))) Store)\n              )\n              (Call\n                (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &options:1 Load) s_remove Load)\n                (list (_starred_content (Name &victim:1 Load)))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &options:1 Load) s_append Load)\n                (list (_starred_content (Name &newguy:1 Load)))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i0 None)) Load))\n                  (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i1 None)) Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name &solve:0 Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &l:1 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &l:1 Load) Load))) nil)) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &b:1 &a:1) (Assign (list (Subscript (Name &l:1 Load) (_slice_content (Compare (Name &a:1 Load) (list Eq) (list (Subscript (Name &l:1 Load) (_slice_content (Constant i1 None)) Load)))) Store)) (Name &b:1 Load) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &l:1 Load) Load))) nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &l:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &s:0 Load))) nil)) (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &s:0 Load) s_split Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &b:0 &a:0) (Assign (list (Subscript (Name &s:0 Load) (_slice_content (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Name &a:0 Load))) nil)) Store)) (Name &b:0 Load) None) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &s:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &l:0 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
      "(Module (/seq (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &line:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &line:0 Load))) nil))) nil)) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Assign (list (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Store)) (Name &b:0 Load) None)) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Subscript (Name &line:0 Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Subscript (Name &line:0 Load) (_slice_content (Constant i1 None)) Store)) (Name &b:0 Load) None)) (/seq)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &line:0 Load))) nil))) nil))) (/seq) None)) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (ListComp (Name &s:1 Load) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Name &j:4 Load) (list (comprehension (Name &j:4 Store) (Name &a:0 Load) nil i0))))) nil))) nil)) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (ListComp (Name &s:2 Load) (list (comprehension (Name &s:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Name &x:0 Load))) (/seq (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Store)) (Name &y:0 Load) None)) (/seq (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Store)) (Name &y:0 Load) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Name &j:3 Load) (list (comprehension (Name &j:3 Store) (Name &a:0 Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (fn_1 &orib:0 &oria:0) (Expr (Call (Name g_print Load) (list (_starred_content (Name &oria:0 Load)) (_starred_content (Name &orib:0 Load))) nil)) (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (fn_1 &newm:0 &kill:0) (If (Compare (Name &kill:0 Load) (list Eq) (list (Name &oria:0 Load))) (/seq (Assign (list (Name &oria:0 Store)) (Name &newm:0 Load) None)) (/seq (Assign (list (Name &orib:0 Store)) (Name &newm:0 Load) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &oria:0 Load)) (_starred_content (Name &orib:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)) (fn_1 &d:0 &c:0) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &c:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &b:0 Store)) (Name &d:0 Load) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (fn_1 &ptn:0 &kill:0) (If (Compare (Name &kill:0 Load) (list Eq) (list (Name &a:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (Name &ptn:0 Load) None)) (/seq (Assign (list (Name &b:0 Store)) (Name &ptn:0 Load) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &y:0 &x:0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &res:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (fn_1 &b:0 &a:0) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &x:0 Load))) (/seq (Assign (list (Name &x:0 Store)) (Name &b:0 Load) None)) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Name &y:0 Load))) (/seq (Assign (list (Name &y:0 Store)) (Name &b:0 Load) None)) (/seq)))) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load))) nil))) (/seq) None) (For (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &res:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Constant s-WzMyXQ== None)) Add (Name &b:0 Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) (fn_1 &s2:0 &s1:0) (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Call (Attribute (Name &a:0 Load) s_index Load) (list (_starred_content (Name &s1:0 Load))) nil)) Store)) (Name &s2:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &options:1 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &victim:1 Store)) (_starred_content (Name &newguy:1 Store))) Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Attribute (Name &options:1 Load) s_remove Load) (list (_starred_content (Name &victim:1 Load))) nil)) (Expr (Call (Attribute (Name &options:1 Load) s_append Load) (list (_starred_content (Name &newguy:1 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &options:1 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None)) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name &solve:0 Load) nil nil))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &one:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &num:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &twos:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &twos:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &one:0 Load) (list In) (list (Name &twos:0 Load)))\n          (Compare\n            (Subscript (Name &one:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n            (list In)\n            (list (Name &twos:0 Load))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &flag1:0 Store)) (_starred_content (Name &flag2:0 Store))) Store))\n          (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &twos:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (list Eq)\n                (list (Subscript (Name &one:0 Load) (_slice_content (Constant i1 None)) Load))\n              )\n              (/seq (Assign (list (Name &flag1:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &twos:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (list Eq)\n                (list (Subscript (Name &one:0 Load) (_slice_content (Constant i0 None)) Load))\n              )\n              (/seq (Assign (list (Name &flag2:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (BoolOp And (list (Name &flag1:0 Load) (Name &flag2:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &password:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &lex:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &lex:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &YES:0 Store)) (Constant False None) None)\n    (Assign (list (Name &YES1:0 Store)) (Constant False None) None)\n    (Assign (list (Name &YES2:0 Store)) (Constant False None) None)\n    (For\n      (Name &word:0 Store)\n      (Name &lex:0 Load)\n      (/seq\n        (If\n          (Compare (Name &word:0 Load) (list Eq) (list (Name &password:0 Load)))\n          (/seq (Assign (list (Name &YES:0 Store)) (Constant True None) None))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &password:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &word:0 Load) (_slice_content (Constant i1 None)) Load))\n          )\n          (/seq (Assign (list (Name &YES1:0 Store)) (Constant True None) None))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &password:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &word:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (/seq (Assign (list (Name &YES2:0 Store)) (Constant True None) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp And (list (Name &YES1:0 Load) (Name &YES2:0 Load)))\n      (/seq (Assign (list (Name &YES:0 Store)) (Constant True None) None))\n      (/seq)\n    )\n    (If\n      (Name &YES:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &password:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &firstLetter:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &secondLetter:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &found:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &inputStr:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (If\n          (Compare (Name &inputStr:0 Load) (list Eq) (list (Name &password:0 Load)))\n          (/seq (Assign (list (Name &found:0 Store)) (Constant i1 None) None))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &inputStr:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &password:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (/seq (Assign (list (Name &firstLetter:0 Store)) (Constant i1 None) None))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &inputStr:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &password:0 Load) (_slice_content (Constant i1 None)) Load))\n          )\n          (/seq (Assign (list (Name &secondLetter:0 Store)) (Constant i1 None) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp Or (list (Name &found:0 Load) (BoolOp And (list (Name &firstLetter:0 Load) (Name &secondLetter:0 Load)))))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &start:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (Assign (list (Name &end:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (Constant s_ None) None)\n    (Assign (list (Name &hasFound:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (If\n          (Compare (Name &x:0 Load) (list Eq) (list (Name &t:0 Load)))\n          (/seq\n            (Assign (list (Name &hasFound:0 Store)) (Constant i1 None) None)\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n            Break\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &start:0 Load) s_add Load)\n            (list (_starred_content (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &end:0 Load) s_add Load)\n            (list (_starred_content (Subscript (Name &t:0 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &start:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Name &start:0 Load))) nil)\n      None\n    )\n    (Assign (list (Name &end:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &end:0 Load))) nil) None)\n    (If\n      (UnaryOp Not (Name &hasFound:0 Load))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list In)\n                (list (Name &end:0 Load))\n              )\n              (Compare\n                (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list In)\n                (list (Name &start:0 Load))\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &pw:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &kash:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &kash:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n    (For\n      (Name &w:0 Store)\n      (Name &kash:0 Load)\n      (/seq\n        (If\n          (Compare (Name &w:0 Load) (list Eq) (list (Name &pw:0 Load)))\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None) Break)\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &w:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &pw:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (/seq\n            (For\n              (Name &z:0 Store)\n              (Name &kash:0 Load)\n              (/seq\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare (Name &pw:0 Load) (list In) (list (BinOp (Name &w:0 Load) Add (Name &z:0 Load))))\n                      (Compare (Name &pw:0 Load) (list In) (list (BinOp (Name &z:0 Load) Add (Name &w:0 Load))))\n                    )\n                  )\n                  (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &pw:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &words:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &match1:0 Store)) (Constant False None) None)\n    (Assign (list (Name &match2:0 Store)) (Constant False None) None)\n    (If\n      (Compare (Name &pw:0 Load) (list In) (list (Name &words:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq\n        (For\n          (Name &word:0 Store)\n          (Name &words:0 Load)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &pw:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Subscript (Name &word:0 Load) (_slice_content (Constant i1 None)) Load))\n              )\n              (/seq (Assign (list (Name &match1:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n            (If\n              (Compare\n                (Subscript (Name &pw:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list Eq)\n                (list (Subscript (Name &word:0 Load) (_slice_content (Constant i0 None)) Load))\n              )\n              (/seq (Assign (list (Name &match2:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (BoolOp And (list (Name &match1:0 Load) (Name &match2:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &pswd:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &w:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                )\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &pswd:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list In)\n                (list\n                  (ListComp\n                    (Subscript (Name &x:2 Load) (_slice_content (Constant i0 None)) Load)\n                    (list (comprehension (Name &x:2 Store) (Name &w:0 Load) nil i0))\n                  )\n                )\n              )\n              (Compare\n                (Subscript (Name &pswd:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list In)\n                (list\n                  (ListComp\n                    (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load)\n                    (list (comprehension (Name &x:3 Store) (Name &w:0 Load) nil i0))\n                  )\n                )\n              )\n            )\n          )\n          (Compare (Name &pswd:0 Load) (list In) (list (Name &w:0 Load)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_exit None)) i0)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &v:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &v:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Call\n                  (Attribute\n                    (BinOp\n                      (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      Add\n                      (Subscript (Name &v:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    )\n                    s_find\n                    Load\n                  )\n                  (list (_starred_content (Name &s:0 Load)))\n                  nil\n                )\n                (list NotEq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n                (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &res:0 Store))\n      (Call\n        (Name g_any Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Compare\n                (Name &s:0 Load)\n                (list In)\n                (list\n                  (BinOp\n                    (Subscript (Name &l:0 Load) (_slice_content (Name &i:2 Load)) Load)\n                    Add\n                    (Subscript (Name &l:0 Load) (_slice_content (Name &j:3 Load)) Load)\n                  )\n                )\n              )\n              (list\n                (comprehension\n                  (Name &i:2 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                  nil\n                  i0\n                )\n                (comprehension\n                  (Name &j:3 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (IfExp (Name &res:0 Load) (Constant s_YES None) (Constant s_NO None))))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &flag1:0 Store)) (_starred_content (Name &flag2:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (If\n          (Compare (Name &s:0 Load) (list Eq) (list (Name &a:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple (list (_starred_content (Name &flag1:0 Store)) (_starred_content (Name &flag2:0 Store))) Store)\n              )\n              (Tuple (list (_starred_content (Constant True None)) (_starred_content (Constant True None))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n          )\n          (/seq (Assign (list (Name &flag1:0 Store)) (Constant True None) None))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (/seq (Assign (list (Name &flag2:0 Store)) (Constant True None) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp And (list (Name &flag1:0 Load) (Name &flag2:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (If (Compare (Subscript #0 (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name %1 Store)) (Constant True None) None)) (/seq)) (If (Compare (Subscript #0 (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Assign (list (Name %3 Store)) (Constant True None) None)) (/seq)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &one:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &twos:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &twos:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (If (BoolOp Or (list (Compare (Name &one:0 Load) (list In) (list (Name &twos:0 Load))) (Compare (Subscript (Name &one:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) (list In) (list (Name &twos:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Assign (list (Tuple (list (_starred_content (Name &flag1:0 Store)) (_starred_content (Name &flag2:0 Store))) Store)) (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil) (/seq (/splice (fn_1 (Subscript (Name &twos:0 Load) (_slice_content (Name &i:0 Load)) Load) &flag1:0 &one:0 &flag2:0))) (/seq) None) (If (BoolOp And (list (Name &flag1:0 Load) (Name &flag2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &password:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &lex:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &lex:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (Assign (list (Name &YES:0 Store)) (Constant False None) None) (Assign (list (Name &YES1:0 Store)) (Constant False None) None) (Assign (list (Name &YES2:0 Store)) (Constant False None) None) (For (Name &word:0 Store) (Name &lex:0 Load) (/seq (If (Compare (Name &word:0 Load) (list Eq) (list (Name &password:0 Load))) (/seq (Assign (list (Name &YES:0 Store)) (Constant True None) None)) (/seq)) (/splice (fn_1 (Name &password:0 Load) &YES1:0 &word:0 &YES2:0))) (/seq) None) (If (BoolOp And (list (Name &YES1:0 Load) (Name &YES2:0 Load))) (/seq (Assign (list (Name &YES:0 Store)) (Constant True None) None)) (/seq)) (If (Name &YES:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &password:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &firstLetter:0 Store)) (Constant i0 None) None) (Assign (list (Name &secondLetter:0 Store)) (Constant i0 None) None) (Assign (list (Name &found:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &inputStr:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Name &inputStr:0 Load) (list Eq) (list (Name &password:0 Load))) (/seq (Assign (list (Name &found:0 Store)) (Constant i1 None) None)) (/seq)) (If (Compare (Subscript (Name &inputStr:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Name &password:0 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Assign (list (Name &firstLetter:0 Store)) (Constant i1 None) None)) (/seq)) (If (Compare (Subscript (Name &inputStr:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &password:0 Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name &secondLetter:0 Store)) (Constant i1 None) None)) (/seq))) (/seq) None) (If (BoolOp Or (list (Name &found:0 Load) (BoolOp And (list (Name &firstLetter:0 Load) (Name &secondLetter:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &start:0 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &end:0 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Constant s_ None) None) (Assign (list (Name &hasFound:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Name &t:0 Load))) (/seq (Assign (list (Name &hasFound:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break) (/seq)) (Expr (Call (Attribute (Name &start:0 Load) s_add Load) (list (_starred_content (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Attribute (Name &end:0 Load) s_add Load) (list (_starred_content (Subscript (Name &t:0 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None) (Assign (list (Name &start:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &start:0 Load))) nil) None) (Assign (list (Name &end:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &end:0 Load))) nil) None) (If (UnaryOp Not (Name &hasFound:0 Load)) (/seq (If (BoolOp And (list (Compare (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) (list In) (list (Name &end:0 Load))) (Compare (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load) (list In) (list (Name &start:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &pw:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &kash:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &kash:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (Assign (list (Name &flag:0 Store)) (Constant False None) None) (For (Name &w:0 Store) (Name &kash:0 Load) (/seq (If (Compare (Name &w:0 Load) (list Eq) (list (Name &pw:0 Load))) (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None) Break) (/seq)) (If (Compare (Subscript (Name &w:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Name &pw:0 Load) (_slice_content (Constant i0 None)) Load))) (/seq (For (Name &z:0 Store) (Name &kash:0 Load) (/seq (If (BoolOp Or (list (Compare (Name &pw:0 Load) (list In) (list (BinOp (Name &w:0 Load) Add (Name &z:0 Load)))) (Compare (Name &pw:0 Load) (list In) (list (BinOp (Name &z:0 Load) Add (Name &w:0 Load)))))) (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None)) (/seq))) (/seq) None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &pw:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &words:0 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &match1:0 Store)) (Constant False None) None) (Assign (list (Name &match2:0 Store)) (Constant False None) None) (If (Compare (Name &pw:0 Load) (list In) (list (Name &words:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (For (Name &word:0 Store) (Name &words:0 Load) (/seq (/splice (fn_1 (Name &pw:0 Load) &match1:0 &word:0 &match2:0))) (/seq) None) (If (BoolOp And (list (Name &match1:0 Load) (Name &match2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &pswd:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &w:0 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) None) (If (BoolOp Or (list (BoolOp And (list (Compare (Subscript (Name &pswd:0 Load) (_slice_content (Constant i1 None)) Load) (list In) (list (ListComp (Subscript (Name &x:2 Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &x:2 Store) (Name &w:0 Load) nil i0))))) (Compare (Subscript (Name &pswd:0 Load) (_slice_content (Constant i0 None)) Load) (list In) (list (ListComp (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &x:3 Store) (Name &w:0 Load) nil i0))))))) (Compare (Name &pswd:0 Load) (list In) (list (Name &w:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias g_exit None)) i0) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &v:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &v:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Call (Attribute (BinOp (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &v:0 Load) (_slice_content (Name &j:0 Load)) Load)) s_find Load) (list (_starred_content (Name &s:0 Load))) nil) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Name &s:0 Load) (list In) (list (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &i:2 Load)) Load) Add (Subscript (Name &l:0 Load) (_slice_content (Name &j:3 Load)) Load)))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0) (comprehension (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Name &res:0 Load) (Constant s_YES None) (Constant s_NO None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &flag1:0 Store)) (_starred_content (Name &flag2:0 Store))) Store)) (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Name &s:0 Load) (list Eq) (list (Name &a:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &flag1:0 Store)) (_starred_content (Name &flag2:0 Store))) Store)) (Tuple (list (_starred_content (Constant True None)) (_starred_content (Constant True None))) Load) None)) (/seq)) (/splice (fn_1 (Name &s:0 Load) &flag1:0 &a:0 &flag2:0))) (/seq) None) (If (BoolOp And (list (Name &flag1:0 Load) (Name &flag2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &is_prime:0\n      (arguments nil (list (arg &a:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_all Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (BinOp (Name &a:1 Load) Mod (Name &i:3 Load))\n                  (list\n                    (comprehension\n                      (Name &i:3 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list (_starred_content (Constant i2 None)) (_starred_content (Name &a:1 Load)))\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Call (Name &is_prime:0 Load) (list (_starred_content (Name &k:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &k:0 Load) (list In) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil)))\n        )\n      )\n      (/seq\n        (Assign (list (Name &ll:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp (Name &k:0 Load) Mod (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ll:0 Load) s_append Load)\n                    (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Name &k:0 Load)\n                  FloorDiv\n                  (Call (Name g_max Load) (list (_starred_content (Name &ll:0 Load))) nil)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &bucks:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Constant i100 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &bucks:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load)) (list Lt) (list (Name &m:0 Load)))\n            )\n          )\n          (/seq (Assign (list (Name &m:0 Store)) (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load)) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Subscript\n        (Call\n          (Name g_sorted Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_list Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Name g_int Load))\n                        (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load))))\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &k:0 Load)\n              FloorDiv\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_filter Load)\n                      (list\n                        (_starred_content\n                          (Lambda\n                            (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                            (Compare (BinOp (Name &k:0 Load) Mod (Name &x:1 Load)) (list Eq) (list (Constant i0 None)))\n                          )\n                        )\n                        (_starred_content\n                          (Call\n                            (Name g_map Load)\n                            (list\n                              (_starred_content (Name g_int Load))\n                              (_starred_content\n                                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &minTime:0 Store)) (Constant i1000 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &k:0 Load) Div (Name &i:0 Load)) (list Lt) (list (Name &minTime:0 Load)))\n            )\n          )\n          (/seq (Assign (list (Name &minTime:0 Store)) (BinOp (Name &k:0 Load) Div (Name &i:0 Load)) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &minTime:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n          (_starred_content (UnaryOp USub (Constant i1 None)))\n          (_starred_content (UnaryOp USub (Constant i1 None)))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &k:0 Load) Mod (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_exit Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_print Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &k:0 Load)\n                            FloorDiv\n                            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &gc:0 Store)) (List nil Load) None)\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load))))\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias s_stdin g_cin)) i0)\n    (ImportFrom s_sys (list (alias s_stdout g_cout)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Call (Attribute (Call (Attribute (Name g_cin Load) s_readline Load) nil nil) s_split Load) nil nil)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Call (Attribute (Name g_cin Load) s_readline Load) nil nil) s_split Load)\n                        nil\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &o:1 Store)) (Constant i864236415217 None) None)\n        (For\n          (Name &i:1 Store)\n          (Name &a:1 Load)\n          (/seq\n            (If\n              (Compare (BinOp (Name &k:1 Load) Mod (Name &i:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &o:1 Store))\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (_starred_content (Name &o:1 Load))\n                      (_starred_content (BinOp (Name &k:1 Load) FloorDiv (Name &i:1 Load)))\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &o:1 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (List\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil))\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_list Load) s_sort Load)\n        (list (_starred_content (Name &a:0 Load)))\n        (list (keyword s_reverse (Constant True None)))\n      )\n    )\n    (For\n      (Name &j:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &k:0 Load) Mod (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_int Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &k:0 Load)\n                            Div\n                            (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &I:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &II:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (List\n            (list\n              (_starred_starred\n                (Starred\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content\n                        (Call\n                          (Attribute\n                            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)\n                            s_split\n                            Load\n                          )\n                          nil\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Load\n                )\n              )\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &math:0 None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &lst:0 Store)) (Call (Name &LI:0 Load) nil nil) None)\n    (Expr (Call (Attribute (Name &lst:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &k:0 Load) Mod (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Name &k:0 Load)\n                      FloorDiv\n                      (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &is_prime:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Return (Call (Name g_all Load) (list (_starred_content (GeneratorExp (BinOp (Name &a:1 Load) Mod (Name &i:3 Load)) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &a:1 Load))) nil) nil i0))))) nil))) nil None None) (fn_1 &k:0 &n:0) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Call (Name &is_prime:0 Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (If (Compare (Name &k:0 Load) (list In) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))))) (/seq (Assign (list (Name &ll:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Name &k:0 Load) Mod (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ll:0 Load) s_append Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Call (Name g_max Load) (list (_starred_content (Name &ll:0 Load))) nil)))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &bucks:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &m:0 Store)) (Constant i100 None) None) (For (Name &i:0 Store) (Name &bucks:0 Load) (/seq (If (BoolOp And (list (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load)) (list Lt) (list (Name &m:0 Load))))) (/seq (Assign (list (Name &m:0 Store)) (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &k:0 &n:0) (Assign (list (Name &a:0 Store)) (Subscript (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load)))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &k:0 &n:0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Call (Name g_max Load) (list (_starred_content (Call (Name g_filter Load) (list (_starred_content (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Compare (BinOp (Name &k:0 Load) Mod (Name &x:1 Load)) (list Eq) (list (Constant i0 None))))) (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil)))) nil))) nil)",
      "(Module (/seq (fn_1 &k:0 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &minTime:0 Store)) (Constant i1000 None) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (BoolOp And (list (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &k:0 Load) Div (Name &i:0 Load)) (list Lt) (list (Name &minTime:0 Load))))) (/seq (Assign (list (Name &minTime:0 Store)) (BinOp (Name &k:0 Load) Div (Name &i:0 Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &minTime:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (fn_1 &k:0 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name &k:0 Load) Mod (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_exit Load) (list (_starred_content (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &k:0 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &gc:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (BinOp (Name &k:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Name &i:0 Load)))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias s_stdin g_cin)) i0) (ImportFrom s_sys (list (alias s_stdout g_cout)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name g_cin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name g_cin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &o:1 Store)) (Constant i864236415217 None) None) (For (Name &i:1 Store) (Name &a:1 Load) (/seq (If (Compare (BinOp (Name &k:1 Load) Mod (Name &i:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &o:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &o:1 Load)) (_starred_content (BinOp (Name &k:1 Load) FloorDiv (Name &i:1 Load)))) nil) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &o:1 Load))) nil))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (List (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil))) Load) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Attribute (Name g_list Load) s_sort Load) (list (_starred_content (Name &a:0 Load))) (list (keyword s_reverse (Constant True None))))) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (BinOp (Name &k:0 Load) Mod (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Name &k:0 Load) Div (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)))) nil))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &II:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil))) nil))) nil None None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (List (list (_starred_starred (Starred (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) Load))) Load))) nil None None) (Import (list (alias &math:0 None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &lst:0 Store)) (Call (Name &LI:0 Load) nil nil) None) (Expr (Call (Attribute (Name &lst:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (BinOp (Name &k:0 Load) Mod (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil)) Break) (/seq))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &x:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &z:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (BinOp (Name &x:0 Load) Sub (Constant i1 None)))\n              (_starred_content (BinOp (Constant i1000000 None) Sub (Name &x:0 Load)))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Name g_max Load) (list (_starred_content (Name &z:0 Load)) (_starred_content (Name &ans:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &p1:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &p2:0 Store)) (Constant i1000000 None) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &j:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) (list LtE) (list (Name &n:0 Load)))\n      (/seq\n        (Assign\n          (list (Name &t1:0 Store))\n          (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &t2:0 Store))\n          (BinOp\n            (Constant i1000000 None)\n            Sub\n            (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Name &j:0 Load))) Load)\n          )\n          None\n        )\n        (If\n          (Compare (Name &t1:0 Load) (list Lt) (list (Name &t2:0 Load)))\n          (/seq\n            (Assign (list (Name &p1:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n          )\n          (/seq\n            (If\n              (Compare (Name &t1:0 Load) (list Gt) (list (Name &t2:0 Load)))\n              (/seq\n                (Assign\n                  (list (Name &p2:0 Store))\n                  (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Name &j:0 Load))) Load)\n                  None\n                )\n                (AugAssign (Name &j:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (Assign\n                  (list (Name &p1:0 Store))\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  None\n                )\n                (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n                (Assign\n                  (list (Name &p2:0 Store))\n                  (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Name &j:0 Load))) Load)\n                  None\n                )\n                (AugAssign (Name &j:0 Store) Add (Constant i1 None))\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (BinOp (Name &p1:0 Load) Sub (Constant i1 None)))\n                (_starred_content (BinOp (Constant i1000000 None) Sub (Name &p2:0 Load)))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &inputData:0 Store))\n      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &inputData:0 Store))\n      (Call\n        (Attribute (Subscript (Name &inputData:0 Load) (_slice_content (Constant i1 None)) Load) s_split Load)\n        nil\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &inputData:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list (comprehension (Name &x:2 Store) (Name &inputData:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &min1:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &min2:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &pos1:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &pos2:0 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Name &inputData:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &i:0 Load) Sub (BinOp (Constant i10 None) Pow (Constant i6 None)))\n            (list Gt)\n            (list (Name &min2:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &min2:0 Store))\n              (BinOp (Name &i:0 Load) Sub (BinOp (Constant i10 None) Pow (Constant i6 None)))\n              None\n            )\n            (Assign\n              (list (Name &pos2:0 Store))\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Name &i:0 Load))\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &min1:0 Store)) (Name &min2:0 Load) None)\n    (Assign (list (Name &pos1:0 Store)) (Name &min1:0 Load) None)\n    (Assign\n      (list (Name &inputData:0 Store))\n      (ListComp\n        (Name &x:1 Load)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Name &inputData:0 Load)\n            (list (Compare (Name &x:1 Load) (list Gt) (list (Name &min1:0 Load))))\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &centerPoint:0 Store))\n      (BinOp\n        (BinOp\n          (BinOp (Constant i10 None) Pow (Constant i6 None))\n          Add\n          (BinOp (Constant i2 None) Mult (Name &min1:0 Load))\n        )\n        Div\n        (Constant i2 None)\n      )\n      None\n    )\n    (Assign\n      (list (Name &close1:0 Store) (Name &close2:0 Store))\n      (BinOp (Constant i1 None) LShift (Constant i30 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &inputData:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Call\n                  (Name g_abs Load)\n                  (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load))))\n                  nil\n                )\n                (list Lt)\n                (list (Name &close1:0 Load))\n              )\n              (Compare (Name &i:0 Load) (list LtE) (list (Name &centerPoint:0 Load)))\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &close1:0 Store))\n              (Call\n                (Name g_abs Load)\n                (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load))))\n                nil\n              )\n              None\n            )\n            (AugAssign (Name &min1:0 Store) Add (BinOp (Name &i:0 Load) Sub (Name &min1:0 Load)))\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Call\n                      (Name g_abs Load)\n                      (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load))))\n                      nil\n                    )\n                    (list Lt)\n                    (list (Name &close2:0 Load))\n                  )\n                  (Compare (Name &i:0 Load) (list Gt) (list (Name &centerPoint:0 Load)))\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &close2:0 Store))\n                  (Call\n                    (Name g_abs Load)\n                    (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load))))\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &min2:0 Store) Add (BinOp (Name &pos2:0 Load) Sub (Name &i:0 Load)))\n                (Assign (list (Name &pos2:0 Store)) (Name &i:0 Load) None)\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (BinOp (Name &min1:0 Load) Sub (Constant i1 None)))\n                (_starred_content (Name &min2:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &l1:0 Store))\n      (ListComp\n        (BinOp (Name &i:1 Load) Sub (Constant i1 None))\n        (list (comprehension (Name &i:1 Store) (Name &l:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &l2:0 Store))\n      (ListComp\n        (BinOp (Constant i1000000 None) Sub (Name &i:2 Load))\n        (list (comprehension (Name &i:2 Store) (Name &l:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Lt)\n            (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content (Name &ans:0 Load))\n                  (_starred_content (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content (Name &ans:0 Load))\n                  (_starred_content (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                nil\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Call\n                      (Name g_min Load)\n                      (list\n                        (_starred_content (BinOp (Name &a:0 Load) Sub (Constant i1 None)))\n                        (_starred_content\n                          (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Sub (Name &a:0 Load))\n                        )\n                      )\n                      nil\n                    )\n                    (list\n                      (comprehension\n                        (Name &a:0 Store)\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Call\n                      (Name g_min Load)\n                      (list\n                        (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))\n                        (_starred_content\n                          (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Sub (Name &i:1 Load))\n                        )\n                      )\n                      nil\n                    )\n                    (list (comprehension (Name &i:1 Store) (Name &a:0 Load) nil i0))\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp\n        (BinOp\n          (List (list (_starred_content (Constant i0 None))) Load)\n          Add\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        Add\n        (List (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None)))) Load)\n      )\n      None\n    )\n    (Assign\n      (list (Name &m:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &m:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &m:0 Load))\n              (_starred_content\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (_starred_content\n                      (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                    )\n                    (_starred_content\n                      (BinOp\n                        (BinOp (Constant i10 None) Pow (Constant i6 None))\n                        Sub\n                        (Subscript\n                          (Name &a:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i1000001 None))\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &B:0 Load)\n      (/seq (AugAssign (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (Assign (list (Name &lo:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &hi:0 Store)) (Constant i1000000 None) None)\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Subscript (Name &A:0 Load) (_slice_content (Name &lo:0 Load)) Load)\n          (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None)))\n          (/seq)\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (If\n          (Subscript (Name &A:0 Load) (_slice_content (Name &hi:0 Load)) Load)\n          (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None)))\n          (/seq)\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (AugAssign (Name &lo:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &hi:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &t:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &l:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &l:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (BinOp (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                    )\n                    (_starred_content\n                      (BinOp\n                        (Constant i1000000 None)\n                        Sub\n                        (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &list:0 Store))\n      (Call\n        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &dist:0 Store)) (List nil Load) None)\n    (For\n      (Name &el:0 Store)\n      (Name &list:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &dist:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_abs Load)\n                  (list (_starred_content (BinOp (Constant f500000.5 None) Sub (Name &el:0 Load))))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp\n                      (Constant f500000.5 None)\n                      Sub\n                      (Call (Name g_min Load) (list (_starred_content (Name &dist:0 Load))) nil)\n                    )\n                    Sub\n                    (Constant i1 None)\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &z:0 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (Name &x:0 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Constant i1000000 None) Sub (Name &x:0 Load)))) nil) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &z:0 Load)) (_starred_content (Name &ans:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &p1:0 Store)) (Constant i1 None) None) (Assign (list (Name &p2:0 Store)) (Constant i1000000 None) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &j:0 Store)) (Constant i1 None) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) (list LtE) (list (Name &n:0 Load))) (/seq (Assign (list (Name &t1:0 Store)) (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)) None) (Assign (list (Name &t2:0 Store)) (BinOp (Constant i1000000 None) Sub (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Name &j:0 Load))) Load)) None) (If (Compare (Name &t1:0 Load) (list Lt) (list (Name &t2:0 Load))) (/seq (Assign (list (Name &p1:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &t1:0 Load) (list Gt) (list (Name &t2:0 Load))) (/seq (Assign (list (Name &p2:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Name &j:0 Load))) Load) None) (AugAssign (Name &j:0 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &p1:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (Assign (list (Name &p2:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Name &j:0 Load))) Load) None) (AugAssign (Name &j:0 Store) Add (Constant i1 None))))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &p1:0 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Constant i1000000 None) Sub (Name &p2:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &inputData:0 Store)) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil) None) (Assign (list (Name &inputData:0 Store)) (Call (Attribute (Subscript (Name &inputData:0 Load) (_slice_content (Constant i1 None)) Load) s_split Load) nil nil) None) (Assign (list (Name &inputData:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Name &inputData:0 Load) nil i0))) None) (Assign (list (Name &min1:0 Store)) (Constant i0 None) None) (Assign (list (Name &min2:0 Store)) (Constant i0 None) None) (Assign (list (Name &pos1:0 Store)) (Constant i1 None) None) (Assign (list (Name &pos2:0 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None) (For (Name &i:0 Store) (Name &inputData:0 Load) (/seq (If (Compare (BinOp (Name &i:0 Load) Sub (BinOp (Constant i10 None) Pow (Constant i6 None))) (list Gt) (list (Name &min2:0 Load))) (/seq (Assign (list (Name &min2:0 Store)) (BinOp (Name &i:0 Load) Sub (BinOp (Constant i10 None) Pow (Constant i6 None))) None) (Assign (list (Name &pos2:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Name &i:0 Load)) None)) (/seq))) (/seq) None) (Assign (list (Name &min1:0 Store)) (Name &min2:0 Load) None) (Assign (list (Name &pos1:0 Store)) (Name &min1:0 Load) None) (Assign (list (Name &inputData:0 Store)) (ListComp (Name &x:1 Load) (list (comprehension (Name &x:1 Store) (Name &inputData:0 Load) (list (Compare (Name &x:1 Load) (list Gt) (list (Name &min1:0 Load)))) i0))) None) (Assign (list (Name &centerPoint:0 Store)) (BinOp (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (BinOp (Constant i2 None) Mult (Name &min1:0 Load))) Div (Constant i2 None)) None) (Assign (list (Name &close1:0 Store) (Name &close2:0 Store)) (BinOp (Constant i1 None) LShift (Constant i30 None)) None) (For (Name &i:0 Store) (Name &inputData:0 Load) (/seq (If (BoolOp And (list (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load)))) nil) (list Lt) (list (Name &close1:0 Load))) (Compare (Name &i:0 Load) (list LtE) (list (Name &centerPoint:0 Load))))) (/seq (Assign (list (Name &close1:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load)))) nil) None) (AugAssign (Name &min1:0 Store) Add (BinOp (Name &i:0 Load) Sub (Name &min1:0 Load)))) (/seq (If (BoolOp And (list (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load)))) nil) (list Lt) (list (Name &close2:0 Load))) (Compare (Name &i:0 Load) (list Gt) (list (Name &centerPoint:0 Load))))) (/seq (Assign (list (Name &close2:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &centerPoint:0 Load)))) nil) None) (AugAssign (Name &min2:0 Store) Add (BinOp (Name &pos2:0 Load) Sub (Name &i:0 Load))) (Assign (list (Name &pos2:0 Store)) (Name &i:0 Load) None)) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &min1:0 Load) Sub (Constant i1 None))) (_starred_content (Name &min2:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &l:0)) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Assign (list (Name &l1:0 Store)) (ListComp (BinOp (Name &i:1 Load) Sub (Constant i1 None)) (list (comprehension (Name &i:1 Store) (Name &l:0 Load) nil i0))) None) (Assign (list (Name &l2:0 Store)) (ListComp (BinOp (Constant i1000000 None) Sub (Name &i:2 Load)) (list (comprehension (Name &i:2 Store) (Name &l:0 Load) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_min Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Sub (Name &a:0 Load)))) nil) (list (comprehension (Name &a:0 Store) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_min Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Sub (Name &i:1 Load)))) nil) (list (comprehension (Name &i:1 Store) (Name &a:0 Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil)) Add (List (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None)))) Load)) None) (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &m:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &m:0 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Sub (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)))) nil))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i1000001 None)) None) (Assign (list (Name &B:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (For (Name &i:0 Store) (Name &B:0 Load) (/seq (AugAssign (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &lo:0 Store)) (Constant i1 None) None) (Assign (list (Name &hi:0 Store)) (Constant i1000000 None) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Subscript (Name &A:0 Load) (_slice_content (Name &lo:0 Load)) Load) (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None))) (/seq)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (If (Subscript (Name &A:0 Load) (_slice_content (Name &hi:0 Load)) Load) (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None))) (/seq)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (AugAssign (Name &lo:0 Store) Add (Constant i1 None)) (AugAssign (Name &hi:0 Store) Sub (Constant i1 None)) (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil)) (Assign (list (Name &l:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil))) nil) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) (_starred_content (BinOp (Constant i1000000 None) Sub (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &list:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (Assign (list (Name &dist:0 Store)) (List nil Load) None) (For (Name &el:0 Store) (Name &list:0 Load) (/seq (Expr (Call (Attribute (Name &dist:0 Load) s_append Load) (list (_starred_content (Call (Name g_abs Load) (list (_starred_content (BinOp (Constant f500000.5 None) Sub (Name &el:0 Load)))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Constant f500000.5 None) Sub (Call (Name g_min Load) (list (_starred_content (Name &dist:0 Load))) nil)) Sub (Constant i1 None)))) nil))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &S:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &t:0 Store)\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (JoinedStr\n                  (list\n                    (FormattedValue (Name &t:0 Load) i-1 None)\n                    (Constant s-WzMyLCAxMjAsIDMyXQ== None)\n                    (FormattedValue\n                      (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Name &t:0 Load))) nil)\n                      i-1\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Dict\n        (list (Constant s_AC None) (Constant s_WA None) (Constant s_TLE None) (Constant s_RE None))\n        (list (Constant i0 None) (Constant i0 None) (Constant i0 None) (Constant i0 None))\n      )\n      None\n    )\n    (For\n      (Name &n:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &s:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &s:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Name &s:0 Load) Add (Constant s-WzMyLCAxMjAsIDMyXQ== None))\n                  Add\n                  (Call\n                    (Name g_str Load)\n                    (list (_starred_content (Subscript (Name &d:0 Load) (_slice_content (Name &s:0 Load)) Load)))\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &ans:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Constant s_x None))\n              (_starred_content\n                (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &count:0 Store))\n      (Dict\n        (list (Constant s_AC None) (Constant s_WA None) (Constant s_TLE None) (Constant s_RE None))\n        (list (Constant i0 None) (Constant i0 None) (Constant i0 None) (Constant i0 None))\n      )\n      None\n    )\n    (For\n      (Name &n:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &count:0 Load) (_slice_content (Call (Name g_input Load) nil nil)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &count:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Constant s_x None))\n              (_starred_content (Subscript (Name &count:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_starred (Starred (Name &s:0 Store) Store))) Store)\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_str Load))\n          (_starred_content\n            (Call\n              (Attribute\n                (Call\n                  (Attribute (Call (Name g_open Load) (list (_starred_content (Constant i0 None))) nil) s_read Load)\n                  nil\n                  nil\n                )\n                s_split\n                Load\n              )\n              nil\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    Add\n                    (Constant s-WzMyLCAxMjAsIDMyXQ== None)\n                  )\n                  Add\n                  (Call\n                    (Name g_str Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Name &s:0 Load) s_count Load)\n                          (list (_starred_content (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &v:0 Store)\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (JoinedStr\n                  (list\n                    (FormattedValue (Name &v:0 Load) i-1 None)\n                    (Constant s-WzMyLCAxMjAsIDMyXQ== None)\n                    (FormattedValue\n                      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &v:0 Load))) nil)\n                      i-1\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Tuple\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &t:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Constant s_x None))\n              (_starred_content\n                (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &lst:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &V:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &v:0 Store)\n      (Name &V:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIwLCAzMiwgMTIzLCAxMjVd None) s_format Load)\n                  (list\n                    (_starred_content (Name &v:0 Load))\n                    (_starred_content\n                      (Call (Attribute (Name &lst:0 Load) s_count Load) (list (_starred_content (Name &v:0 Load))) nil)\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &_i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &x:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Constant s_x None))\n              (_starred_content\n                (Call (Attribute (Name &y:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_input Load) nil nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &v:0 Store)\n      (List\n        (list\n          (_starred_content (Constant s_AC None))\n          (_starred_content (Constant s_WA None))\n          (_starred_content (Constant s_TLE None))\n          (_starred_content (Constant s_RE None))\n        )\n        Load\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (JoinedStr\n                  (list\n                    (FormattedValue (Name &v:0 Load) i-1 None)\n                    (Constant s-WzMyLCAxMjAsIDMyXQ== None)\n                    (FormattedValue\n                      (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &v:0 Load))) nil)\n                      i-1\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &S:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (For (Name &t:0 Store) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &t:0 Load) i-1 None) (Constant s-WzMyLCAxMjAsIDMyXQ== None) (FormattedValue (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Name &t:0 Load))) nil) i-1 None))))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &d:0 Store)) (Dict (list (Constant s_AC None) (Constant s_WA None) (Constant s_TLE None) (Constant s_RE None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &s:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &s:0 Store) (Name &d:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name &s:0 Load) Add (Constant s-WzMyLCAxMjAsIDMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &d:0 Load) (_slice_content (Name &s:0 Load)) Load))) nil)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &i:1 &s:0 /nothing)) (Assign (list (Name &ans:0 Store)) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) None) (For (Name &i:0 Store) (Name &ans:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_x None)) (_starred_content (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &count:0 Store)) (Dict (list (Constant s_AC None) (Constant s_WA None) (Constant s_TLE None) (Constant s_RE None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (AugAssign (Subscript (Name &count:0 Load) (_slice_content (Call (Name g_input Load) nil nil)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &count:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_x None)) (_starred_content (Subscript (Name &count:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_starred (Starred (Name &s:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_open Load) (list (_starred_content (Constant i0 None))) nil) s_read Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant s-WzMyLCAxMjAsIDMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &N:0 &i:1 &s:0 /nothing)) (For (Name &v:0 Store) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &v:0 Load) i-1 None) (Constant s-WzMyLCAxMjAsIDMyXQ== None) (FormattedValue (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &v:0 Load))) nil) i-1 None))))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &_:1 &s:0 /nothing)) (Assign (list (Name &t:0 Store)) (Tuple (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) None) (For (Name &i:0 Store) (Name &t:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_x None)) (_starred_content (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &N:0 &_:1 &lst:0 /nothing)) (Assign (list (Name &V:0 Store)) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) None) (For (Name &v:0 Store) (Name &V:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIwLCAzMiwgMTIzLCAxMjVd None) s_format Load) (list (_starred_content (Name &v:0 Load)) (_starred_content (Call (Attribute (Name &lst:0 Load) s_count Load) (list (_starred_content (Name &v:0 Load))) nil))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &_i:1 &y:0 (Assign (list (Name &x:0 Store)) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) None))) (For (Name &i:0 Store) (Name &x:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_x None)) (_starred_content (Call (Attribute (Name &y:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &i:1 &a:0 /nothing)) (For (Name &v:0 Store) (List (list (_starred_content (Constant s_AC None)) (_starred_content (Constant s_WA None)) (_starred_content (Constant s_TLE None)) (_starred_content (Constant s_RE None))) Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &v:0 Load) i-1 None) (Constant s-WzMyLCAxMjAsIDMyXQ== None) (FormattedValue (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &v:0 Load))) nil) i-1 None))))) nil))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Constant s_a None) None)\n    (Expr\n      (Call\n        (Name g_exec Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant\n                s-Wzk3LCA2MSwgOTEsIDExNSwgNDMsIDk5LCAxMDQsIDExNCwgNDAsIDk5LCA0MSwgMTAyLCAxMTEsIDExNCwgMzIsIDExNSwgMzIsIDEwNSwgMTEwLCAzMiwgOTcsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgOTksIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCA1NywgNTUsIDQ0LCAxMTEsIDExNCwgMTAwLCA0MCwgMTA5LCA5NywgMTIwLCA0MCwgMTE1LCA0MSwgNDEsIDQzLCA1MCwgNDEsIDkzLCA1OV0=\n                None\n              )\n              Mult\n              (UnaryOp\n                Invert\n                (UnaryOp USub (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (FunctionDef\n      &dfs:0\n      (arguments nil (list (arg &S:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil)\n            (list Eq)\n            (list (Name &N:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &S:1 Load))) nil)))\n          (/seq\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i97 None))\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_ord Load)\n                        (list\n                          (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &S:1 Load))) nil))\n                        )\n                        nil\n                      )\n                      Add\n                      (Constant i2 None)\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name &dfs:0 Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Name &S:1 Load)\n                          Add\n                          (Call (Name g_chr Load) (list (_starred_content (Name &i:1 Load))) nil)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &dfs:0 Load) (list (_starred_content (Constant s_a None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &r:0 Store)) (Tuple (list (_starred_content (Constant s_a None))) Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &r:0 Store))\n          (ListComp\n            (BinOp (Name &s:1 Load) Add (Name &c:2 Load))\n            (list\n              (comprehension (Name &s:1 Store) (Name &r:0 Load) nil i0)\n              (comprehension\n                (Name &c:2 Store)\n                (Call\n                  (Name g_set Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Name &s:1 Load)\n                        Add\n                        (Call\n                          (Name g_chr Load)\n                          (list\n                            (_starred_content\n                              (BinOp\n                                (Call\n                                  (Name g_ord Load)\n                                  (list\n                                    (_starred_content\n                                      (Call (Name g_max Load) (list (_starred_content (Name &s:1 Load))) nil)\n                                    )\n                                  )\n                                  nil\n                                )\n                                Add\n                                (Constant i1 None)\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_starred (Starred (Call (Name g_sorted Load) (list (_starred_content (Name &r:0 Load))) nil) Load))\n        )\n        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i7 None))))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (FunctionDef\n      &dfs:0\n      (arguments nil (list (arg &s:1 None None) (arg &mx:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil)\n            (list Eq)\n            (list (Name &n:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)))\n          (/seq\n            (For\n              (Name &i:1 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &mx:1 Load))) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Name &dfs:0 Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Name &s:1 Load)\n                          Add\n                          (Call\n                            (Name g_chr Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)\n                                  Add\n                                  (Name &i:1 Load)\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (_starred_content (Name &mx:1 Load))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr\n              (Call\n                (Name &dfs:0 Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Name &s:1 Load)\n                      Add\n                      (Call\n                        (Name g_chr Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)\n                              Add\n                              (Name &mx:1 Load)\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (_starred_content (BinOp (Name &mx:1 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call (Name &dfs:0 Load) (list (_starred_content (Constant s_a None)) (_starred_content (Constant i1 None))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &alp:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None)\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &N:1 None None) (arg &s:1 None None) (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil)\n            (list Eq)\n            (list (Name &N:1 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)) (Return None))\n          (/seq)\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &x:1 Load) Add (Constant i2 None)))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name &f:0 Load)\n                (list\n                  (_starred_content (Name &N:1 Load))\n                  (_starred_content\n                    (BinOp (Name &s:1 Load) Add (Subscript (Name &alp:0 Load) (_slice_content (Name &i:1 Load)) Load))\n                  )\n                  (_starred_content\n                    (Call\n                      (Name g_max Load)\n                      (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &i:1 Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name &f:0 Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n          (_starred_content (Constant s_a None))\n          (_starred_content (Constant i0 None))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (FunctionDef\n      &standard:0\n      (arguments nil (list (arg &n:1 None None) (arg &cur:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &cur:1 Load))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &newC:1 Store))\n              (Call\n                (Name g_chr Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_ord Load)\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Call (Name g_sorted Load) (list (_starred_content (Name &cur:1 Load))) nil)\n                              (_slice_content (UnaryOp USub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (For\n              (Name &c:1 Store)\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_set Load)\n                      (list\n                        (_starred_content\n                          (BinOp (Name &cur:1 Load) Add (List (list (_starred_content (Name &newC:1 Load))) Load))\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name &standard:0 Load)\n                    (list\n                      (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))\n                      (_starred_content\n                        (BinOp (Name &cur:1 Load) Add (List (list (_starred_content (Name &c:1 Load))) Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name &standard:0 Load)\n        (list\n          (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))\n          (_starred_content (List (list (_starred_content (Constant s_a None))) Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &word:1 None None) (arg &N:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &word:1 Load))) nil)\n            (list Eq)\n            (list (Name &n:0 Load))\n          )\n          (/seq (Return (Call (Name g_print Load) (list (_starred_content (Name &word:1 Load))) nil)))\n          (/seq\n            (For\n              (Name &i:1 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:1 Load) Add (Constant i1 None)))) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Name &f:0 Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Name &word:1 Load)\n                          Add\n                          (Call\n                            (Name g_chr Load)\n                            (list (_starred_content (BinOp (Constant i97 None) Add (Name &i:1 Load))))\n                            nil\n                          )\n                        )\n                      )\n                      (_starred_content\n                        (IfExp\n                          (Compare (Name &i:1 Load) (list Eq) (list (Name &N:1 Load)))\n                          (BinOp (Name &N:1 Load) Add (Constant i1 None))\n                          (Name &N:1 Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call (Name &f:0 Load) (list (_starred_content (Constant s_ None)) (_starred_content (Constant i0 None))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &word:1 None None) (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &word:1 Load))) nil)\n            (list Eq)\n            (list (Name &N:0 Load))\n          )\n          (/seq (Return (Call (Name g_print Load) (list (_starred_content (Name &word:1 Load))) nil)))\n          (/seq\n            (For\n              (Name &i:1 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Name &f:0 Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Name &word:1 Load)\n                          Add\n                          (Call\n                            (Name g_chr Load)\n                            (list (_starred_content (BinOp (Constant i97 None) Add (Name &i:1 Load))))\n                            nil\n                          )\n                        )\n                      )\n                      (_starred_content\n                        (IfExp\n                          (Compare (Name &i:1 Load) (list Eq) (list (Name &n:1 Load)))\n                          (BinOp (Name &n:1 Load) Add (Constant i1 None))\n                          (Name &n:1 Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call (Name &f:0 Load) (list (_starred_content (Constant s_ None)) (_starred_content (Constant i0 None))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a_num:0 Store)) (Constant i97 None) None)\n    (FunctionDef\n      &dfs:0\n      (arguments nil (list (arg &s:1 None None) (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)) (Return None))\n          (/seq)\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil))\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_ord Load)\n                    (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &s:1 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name &dfs:0 Load)\n                (list\n                  (_starred_content\n                    (BinOp (Name &s:1 Load) Add (Call (Name g_chr Load) (list (_starred_content (Name &i:1 Load))) nil))\n                  )\n                  (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name &dfs:0 Load)\n        (list (_starred_content (Constant s_a None)) (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_string None)))\n    (Assign (list (Name &S:0 Store)) (Attribute (Name g_string Load) s_ascii_lowercase Load) None)\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (FunctionDef\n      &a:0\n      (arguments\n        nil\n        (list (arg &s:1 None None) (arg &distinct:1 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant s_ None) (Constant i0 None))\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil)\n            (list Eq)\n            (list (Name &N:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)) (Return None))\n          (/seq)\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (BinOp (Name &distinct:1 Load) Add (Constant i1 None))))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &c:1 Store)) (Subscript (Name &S:0 Load) (_slice_content (Name &i:1 Load)) Load) None)\n            (Expr\n              (Call\n                (Name &a:0 Load)\n                (list\n                  (_starred_content (BinOp (Name &s:1 Load) Add (Name &c:1 Load)))\n                  (_starred_content\n                    (BinOp\n                      (Name &distinct:1 Load)\n                      Add\n                      (IfExp\n                        (Compare (Name &c:1 Load) (list NotIn) (list (Name &s:1 Load)))\n                        (Constant i1 None)\n                        (Constant i0 None)\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &a:0 Load) nil nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %1 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) (list Eq) (list (Name %5 Load))) (/seq (Return (Call (Name g_print Load) (list (_starred_content (Name %3 Load))) nil))) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (Expr (Call (Name %4 Load) (list (_starred_content (BinOp (Name %3 Load) Add (Call (Name g_chr Load) (list (_starred_content (BinOp (Constant i97 None) Add (Name %2 Load)))) nil))) (_starred_content (IfExp (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (BinOp (Name %1 Load) Add (Constant i1 None)) (Name %1 Load)))) nil))) (/seq) None)))) nil None None) (Assign (list (Name %5 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name %4 Load) (list (_starred_content (Constant s_ None)) (_starred_content (Constant i0 None))) nil)))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Constant s_a None) None) (Expr (Call (Name g_exec Load) (list (_starred_content (BinOp (Constant s-Wzk3LCA2MSwgOTEsIDExNSwgNDMsIDk5LCAxMDQsIDExNCwgNDAsIDk5LCA0MSwgMTAyLCAxMTEsIDExNCwgMzIsIDExNSwgMzIsIDEwNSwgMTEwLCAzMiwgOTcsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgOTksIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCA1NywgNTUsIDQ0LCAxMTEsIDExNCwgMTAwLCA0MCwgMTA5LCA5NywgMTIwLCA0MCwgMTE1LCA0MSwgNDEsIDQzLCA1MCwgNDEsIDkzLCA1OV0= None) Mult (UnaryOp Invert (UnaryOp USub (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (FunctionDef &dfs:0 (arguments nil (list (arg &S:1 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil) (list Eq) (list (Name &N:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &S:1 Load))) nil))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i97 None)) (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &S:1 Load))) nil))) nil) Add (Constant i2 None)))) nil) (/seq (Expr (Call (Name &dfs:0 Load) (list (_starred_content (BinOp (Name &S:1 Load) Add (Call (Name g_chr Load) (list (_starred_content (Name &i:1 Load))) nil)))) nil))) (/seq) None)))) nil None None) (Expr (Call (Name &dfs:0 Load) (list (_starred_content (Constant s_a None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &r:0 Store)) (Tuple (list (_starred_content (Constant s_a None))) Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &r:0 Store)) (ListComp (BinOp (Name &s:1 Load) Add (Name &c:2 Load)) (list (comprehension (Name &s:1 Store) (Name &r:0 Load) nil i0) (comprehension (Name &c:2 Store) (Call (Name g_set Load) (list (_starred_content (BinOp (Name &s:1 Load) Add (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &s:1 Load))) nil))) nil) Add (Constant i1 None)))) nil)))) nil) nil i0))) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name g_sorted Load) (list (_starred_content (Name &r:0 Load))) nil) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i7 None)))) nil)) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (FunctionDef &dfs:0 (arguments nil (list (arg &s:1 None None) (arg &mx:1 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) (list Eq) (list (Name &n:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &mx:1 Load))) nil) (/seq (Expr (Call (Name &dfs:0 Load) (list (_starred_content (BinOp (Name &s:1 Load) Add (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil) Add (Name &i:1 Load)))) nil))) (_starred_content (Name &mx:1 Load))) nil))) (/seq) None) (Expr (Call (Name &dfs:0 Load) (list (_starred_content (BinOp (Name &s:1 Load) Add (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil) Add (Name &mx:1 Load)))) nil))) (_starred_content (BinOp (Name &mx:1 Load) Add (Constant i1 None)))) nil))))) nil None None) (Expr (Call (Name &dfs:0 Load) (list (_starred_content (Constant s_a None)) (_starred_content (Constant i1 None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &alp:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None) (FunctionDef &f:0 (arguments nil (list (arg &N:1 None None) (arg &s:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) (list Eq) (list (Name &N:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)) (Return None)) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &x:1 Load) Add (Constant i2 None)))) nil) (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Name &N:1 Load)) (_starred_content (BinOp (Name &s:1 Load) Add (Subscript (Name &alp:0 Load) (_slice_content (Name &i:1 Load)) Load))) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &i:1 Load))) nil))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &f:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (Constant s_a None)) (_starred_content (Constant i0 None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (FunctionDef &standard:0 (arguments nil (list (arg &n:1 None None) (arg &cur:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &cur:1 Load))) nil))) nil))) (/seq (Assign (list (Name &newC:1 Store)) (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Subscript (Call (Name g_sorted Load) (list (_starred_content (Name &cur:1 Load))) nil) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil) Add (Constant i1 None)))) nil) None) (For (Name &c:1 Store) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (BinOp (Name &cur:1 Load) Add (List (list (_starred_content (Name &newC:1 Load))) Load)))) nil))) nil) (/seq (Expr (Call (Name &standard:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &cur:1 Load) Add (List (list (_starred_content (Name &c:1 Load))) Load)))) nil))) (/seq) None)))) nil None None) (Expr (Call (Name &standard:0 Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) (_starred_content (List (list (_starred_content (Constant s_a None))) Load))) nil))) nil)",
      "(Module (fn_1 &N:1 &i:1 &word:1 &f:0 &n:0) nil)",
      "(Module (fn_1 &n:1 &i:1 &word:1 &f:0 &N:0) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a_num:0 Store)) (Constant i97 None) None) (FunctionDef &dfs:0 (arguments nil (list (arg &s:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)) (Return None)) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)) (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &s:1 Load))) nil))) nil) Add (Constant i2 None)))) nil) (/seq (Expr (Call (Name &dfs:0 Load) (list (_starred_content (BinOp (Name &s:1 Load) Add (Call (Name g_chr Load) (list (_starred_content (Name &i:1 Load))) nil))) (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &dfs:0 Load) (list (_starred_content (Constant s_a None)) (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_string None))) (Assign (list (Name &S:0 Store)) (Attribute (Name g_string Load) s_ascii_lowercase Load) None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (FunctionDef &a:0 (arguments nil (list (arg &s:1 None None) (arg &distinct:1 None None)) None nil nil None (list (Constant s_ None) (Constant i0 None))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) (list Eq) (list (Name &N:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) nil)) (Return None)) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &distinct:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &c:1 Store)) (Subscript (Name &S:0 Load) (_slice_content (Name &i:1 Load)) Load) None) (Expr (Call (Name &a:0 Load) (list (_starred_content (BinOp (Name &s:1 Load) Add (Name &c:1 Load))) (_starred_content (BinOp (Name &distinct:1 Load) Add (IfExp (Compare (Name &c:1 Load) (list NotIn) (list (Name &s:1 Load))) (Constant i1 None) (Constant i0 None))))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &a:0 Load) nil nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (IfExp\n        (BoolOp\n          And\n          (list\n            (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None)))\n            (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None)))\n          )\n        )\n        (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)))) nil)\n        (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &A:0 Load))) nil)\n                (list Eq Eq)\n                (list (Call (Name g_len Load) (list (_starred_content (Name &B:0 Load))) nil) (Constant i1 None))\n              )\n              (BinOp\n                (Call (Name g_int Load) (list (_starred_content (Name &A:0 Load))) nil)\n                Mult\n                (Call (Name g_int Load) (list (_starred_content (Name &B:0 Load))) nil)\n              )\n              (UnaryOp USub (Constant i1 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil)\n        (list GtE)\n        (list (Constant i10 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &A:0 Load) Mult (Name &B:0 Load)))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None)))\n                  (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None)))\n                )\n              )\n              (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))\n              (UnaryOp USub (Constant i1 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &A:0 Load) (list Lt) (list (Constant i10 None)))\n          (Compare (Name &B:0 Load) (list Lt) (list (Constant i10 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &A:0 Load) Mult (Name &B:0 Load)))) nil))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None)))\n                  (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None)))\n                )\n              )\n              (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))\n              (UnaryOp USub (Constant i1 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Lt) (list (Constant i10 None)))\n                  (Compare (Name &b:0 Load) (list Lt) (list (Constant i10 None)))\n                )\n              )\n              (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))\n              (UnaryOp USub (Constant i1 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (IfExp\n        (BoolOp\n          And\n          (list\n            (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None)))\n            (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None)))\n          )\n        )\n        (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)))) nil)\n        (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &n:0 Load) (list Lt) (list (Constant i10 None)))\n                  (Compare (Name &m:0 Load) (list Lt) (list (Constant i10 None)))\n                )\n              )\n              (BinOp (Name &n:0 Load) Mult (Name &m:0 Load))\n              (UnaryOp USub (Constant i1 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (IfExp\n        (BoolOp\n          And\n          (list\n            (Compare (Name &A:0 Load) (list Lt) (list (Constant i10 None)))\n            (Compare (Name &B:0 Load) (list Lt) (list (Constant i10 None)))\n          )\n        )\n        (Call (Name g_print Load) (list (_starred_content (BinOp (Name &A:0 Load) Mult (Name &B:0 Load)))) nil)\n        (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (IfExp (BoolOp And (list (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None))) (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None))))) (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)))) nil) (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Call (Name g_len Load) (list (_starred_content (Name &A:0 Load))) nil) (list Eq Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &B:0 Load))) nil) (Constant i1 None))) (BinOp (Call (Name g_int Load) (list (_starred_content (Name &A:0 Load))) nil) Mult (Call (Name g_int Load) (list (_starred_content (Name &B:0 Load))) nil)) (UnaryOp USub (Constant i1 None))))) nil))) nil)",
      "(Module (/seq (fn_1 &B:0 &A:0) (If (Compare (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil) (list GtE) (list (Constant i10 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &A:0 Load) Mult (Name &B:0 Load)))) nil))))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None))) (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None))))) (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) (UnaryOp USub (Constant i1 None))))) nil))) nil)",
      "(Module (/seq (fn_1 &B:0 &A:0) (If (BoolOp And (list (Compare (Name &A:0 Load) (list Lt) (list (Constant i10 None))) (Compare (Name &B:0 Load) (list Lt) (list (Constant i10 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &A:0 Load) Mult (Name &B:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None))) (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None))))) (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) (UnaryOp USub (Constant i1 None))))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &a:0 Load) (list Lt) (list (Constant i10 None))) (Compare (Name &b:0 Load) (list Lt) (list (Constant i10 None))))) (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) (UnaryOp USub (Constant i1 None))))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (IfExp (BoolOp And (list (Compare (Name &a:0 Load) (list LtE) (list (Constant i9 None))) (Compare (Name &b:0 Load) (list LtE) (list (Constant i9 None))))) (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)))) nil) (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))) nil)",
      "(Module (/seq (fn_1 &m:0 &n:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &n:0 Load) (list Lt) (list (Constant i10 None))) (Compare (Name &m:0 Load) (list Lt) (list (Constant i10 None))))) (BinOp (Name &n:0 Load) Mult (Name &m:0 Load)) (UnaryOp USub (Constant i1 None))))) nil))) nil)",
      "(Module (/seq (fn_1 &B:0 &A:0) (Expr (IfExp (BoolOp And (list (Compare (Name &A:0 Load) (list Lt) (list (Constant i10 None))) (Compare (Name &B:0 Load) (list Lt) (list (Constant i10 None))))) (Call (Name g_print Load) (list (_starred_content (BinOp (Name &A:0 Load) Mult (Name &B:0 Load)))) nil) (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a_list:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i1 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &a_list:0 Load)\n      (/seq\n        (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &a:0 Load)) Store)) (Constant i0 None) None)\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (BinOp\n                (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                Add\n                (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript (Name &dp:0 Load) (_slice_content (Name &n:0 Load)) Load)\n              Mod\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_set Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              (list\n                (comprehension\n                  (Name &_:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n            )\n            Mod\n            (Constant i1000000007 None)\n          )\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list In) (list (Name &a:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant i0 None)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &n:0 Load)) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_set Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              (list\n                (comprehension\n                  (Name &i:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (If\n      (Compare (Constant i1 None) (list NotIn) (list (Name &a:0 Load)))\n      (/seq\n        (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None)\n      )\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotIn) (list (Name &a:0 Load)))\n          (/seq\n            (AugAssign\n              (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)\n              Add\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n                  Add\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &G:0 Store)) (_starred_content (Name &N:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &_:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ret:0 Store)) (Tuple nil Load) None)\n    (Assign\n      (list (Name &T:0 Store))\n      (BinOp\n        (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load)\n        Mult\n        (BinOp (Name &G:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Name &t:0 Load)) Store)) (Constant i0 None) None)\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &G:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &T:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (UnaryOp USub (Constant i1 None)))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &T:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &T:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                  Add\n                  (Subscript (Name &T:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n                )\n                Mod\n                (Constant i1000000007 None)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &T:0 Load) (_slice_content (Name &G:0 Load)) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &M:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &p:0 Store))\n            (_starred_content (Name &q:0 Store))\n            (_starred_content (Name &n:0 Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (While\n          (Compare (Name &n:0 Load) (list LtE) (list (Name &a:0 Load)))\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &q:0 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &q:0 Load))\n                  (_starred_content (BinOp (Name &p:0 Load) Add (Name &q:0 Load)))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &n:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Assign (list (Name &q:0 Store)) (Constant i0 None) None)\n      )\n      (/seq)\n      None\n    )\n    (While\n      (Compare (Name &n:0 Load) (list LtE) (list (Name &N:0 Load)))\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &q:0 Store))) Store))\n          (Tuple\n            (list (_starred_content (Name &q:0 Load)) (_starred_content (BinOp (Name &p:0 Load) Add (Name &q:0 Load))))\n            Load\n          )\n          None\n        )\n        (AugAssign (Name &n:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &q:0 Load) Mod (Name &MOD:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &M:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_set Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              (list\n                (comprehension\n                  (Name &i:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &N:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &ans:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list In) (list (Name &a:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &ans:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant i0 None)\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &ans:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &ans:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                  Add\n                  (Subscript (Name &ans:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n                )\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Name &N:0 Load)) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &M:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &step:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i1 None))) Load)\n        Mult\n        (BinOp (Name &N:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &A:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Subscript (Name &step:0 Load) (_slice_content (Name &A:0 Load)) Store)) (Constant i0 None) None)\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &step:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq Continue)\n          (/seq)\n        )\n        (Assign\n          (list (Subscript (Name &step:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &step:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n              Add\n              (Subscript (Name &step:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n            )\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript (Name &step:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n              Mod\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list (_starred_content (Name g_int Load)) (_starred_content (Attribute (Name g_sys Load) s_stdin Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil))\n    (Assign (list (Name &prev:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &cur:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &m:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load)\n            (list Eq)\n            (list (Name &i:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &prev:0 Store)) (_starred_content (Name &cur:0 Store))) Store))\n              (Tuple (list (_starred_content (Name &cur:0 Load)) (_starred_content (Constant i0 None))) Load)\n              None\n            )\n            (AugAssign (Name &m:0 Store) Add (Constant i1 None))\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &prev:0 Store)) (_starred_content (Name &cur:0 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &cur:0 Load))\n                  (_starred_content\n                    (BinOp (BinOp (Name &cur:0 Load) Add (Name &prev:0 Load)) Mod (Constant i1000000007 None))\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cur:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &M:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_set Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              (list\n                (comprehension\n                  (Name &_:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &N:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list In) (list (Name &A:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant i0 None)\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                  Add\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n                )\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_set Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              (list\n                (comprehension\n                  (Name &i:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)\n            )\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list In) (list (Name &a:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant i0 None)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &n:0 Load)) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content #0)) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_set Load) (list (_starred_content #1)) nil) None) (Assign (list (Name %4 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %2 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name %4 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil) (/seq ?0 (If (Compare (Name %5 Load) (list In) (list (Name %3 Load))) (/seq (Assign (list (Subscript (Name %4 Load) (_slice_content (Name %5 Load)) Store)) (Constant i0 None) None)) (/seq ?1))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load))) nil)))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a_list:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (Assign (list (Name &dp:0 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &a:0 Store) (Name &a_list:0 Load) (/seq (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &a:0 Load)) Store)) (Constant i0 None) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Name &dp:0 Load) (_slice_content (Name &n:0 Load)) Load) Mod (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))))) nil))) nil)",
      "(Module (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) &m:0 &n:0 &a:0 &dp:0 &i:0 (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load) Add (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) Mod (Constant i1000000007 None)) None) /nothing) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))))) nil) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &dp:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (If (Compare (Constant i1 None) (list NotIn) (list (Name &a:0 Load))) (/seq (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Name &a:0 Load))) (/seq (AugAssign (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (BinOp (BinOp (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load) Add (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) Mod (Name &mod:0 Load)))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &G:0 Store)) (_starred_content (Name &N:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:1 Load))) nil) (list (comprehension (Name &_:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Assign (list (Name &ret:0 Store)) (Tuple nil Load) None) (Assign (list (Name &T:0 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (BinOp (Name &G:0 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Name &t:0 Load)) Store)) (Constant i0 None) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &G:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &T:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &T:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &T:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &T:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)) Mod (Constant i1000000007 None)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &T:0 Load) (_slice_content (Name &G:0 Load)) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &M:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &q:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &n:0 Load) (list LtE) (list (Name &a:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &q:0 Store))) Store)) (Tuple (list (_starred_content (Name &q:0 Load)) (_starred_content (BinOp (Name &p:0 Load) Add (Name &q:0 Load)))) Load) None) (AugAssign (Name &n:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &q:0 Store)) (Constant i0 None) None)) (/seq) None) (While (Compare (Name &n:0 Load) (list LtE) (list (Name &N:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &q:0 Store))) Store)) (Tuple (list (_starred_content (Name &q:0 Load)) (_starred_content (BinOp (Name &p:0 Load) Add (Name &q:0 Load)))) Load) None) (AugAssign (Name &n:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &q:0 Load) Mod (Name &MOD:0 Load)))) nil))) nil)",
      "(Module (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil) nil i0))) &M:0 &N:0 &a:0 &ans:0 &i:0 /nothing (Assign (list (Subscript (Name &ans:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &ans:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &ans:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)) Mod (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &M:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &step:0 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil) (/seq (Assign (list (Name &A:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Subscript (Name &step:0 Load) (_slice_content (Name &A:0 Load)) Store)) (Constant i0 None) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &step:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (Assign (list (Subscript (Name &step:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &step:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &step:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)) Mod (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Name &step:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Mod (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Attribute (Name g_sys Load) s_stdin Load))) nil))) nil) None) (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil)) (Assign (list (Name &prev:0 Store)) (Constant i0 None) None) (Assign (list (Name &cur:0 Store)) (Constant i1 None) None) (Assign (list (Name &m:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load) (list Eq) (list (Name &i:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &prev:0 Store)) (_starred_content (Name &cur:0 Store))) Store)) (Tuple (list (_starred_content (Name &cur:0 Load)) (_starred_content (Constant i0 None))) Load) None) (AugAssign (Name &m:0 Store) Add (Constant i1 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &prev:0 Store)) (_starred_content (Name &cur:0 Store))) Store)) (Tuple (list (_starred_content (Name &cur:0 Load)) (_starred_content (BinOp (BinOp (Name &cur:0 Load) Add (Name &prev:0 Load)) Mod (Constant i1000000007 None)))) Load) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cur:0 Load))) nil))) nil)",
      "(Module (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil) nil i0))) &M:0 &N:0 &A:0 &dp:0 &i:0 /nothing (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)) Mod (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))) None)) nil)",
      "(Module (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) &m:0 &n:0 &a:0 &dp:0 &i:0 (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load)) Mod (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))) None) /nothing) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &read:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load)\n      None\n    )\n    (Assign\n      (list (Name &readline:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Name &readlines:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readlines Load)\n      None\n    )\n    (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0)\n    (ImportFrom s_collections (list (alias &defaultdict:0 None)) i0)\n    (Expr\n      (Constant\n        s-WzEwLCAxMjUzOSwgMjYzNjgsIDIzNTY3LCAyMDUxNiwgMTIzOTgsIDEyMzU0LCAxMjQyNywgMjI1ODAsIDI1MTUyLCAxMjQzNCwgMzU1MTksIDEyNDA5LCAxMjQyNywgMTIyOTAsIDI0MDM4LCAyMTQ5MSwgMTIzOTUsIDEyNDE0LCAxMjM4MywgMTIzNjQsIDEyNDI3LCAzNjc5NCwgMTIzOTksIDMyMDgwLCAxMjQwMCwgMTIzOTQsIDEyMzU2LCAxMjI5MCwgMTAsIDEyNTM5LCAyNjM2OCwgMjM1NjcsIDIwNTE2LCAxMjM5OCwgMjAwMDEsIDM4NTYzLCAxMjM5OSwgMjQ1MTcsIDEyMzc4LCAyNjM2OCwgMjM1NjcsIDIwNTE2LCAxMjM5MiwgMzIwODAsIDEyNDA2LCAxMjI5MCwgMTAsIDEyNTM5LCAzMjA4MCwgMTI0MzUsIDEyMzg0LCAxMjM1NCwgMTIzOTIsIDQ5LCAyODg1NywgMTIzOTUsIDMyMzAyLCAzMjAwNCwgMTIzNzUsIDEyMzkwLCAxMjM1NiwgMTIzNjcsIDEyMjkwLCAxMF0=\n        None\n      )\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &N:0 Store))\n            (_starred_content (Name &D:0 Store))\n            (_starred_starred (Starred (Name &A:0 Store) Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name &read:0 Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (BinOp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Name &A:0 Load))\n        Add\n        (List (list (_starred_content (Constant i0 None))) Load)\n      )\n      None\n    )\n    (Assign\n      (list (Name &mask:0 Store))\n      (BinOp (BinOp (Constant i1 None) LShift (Constant i32 None)) Sub (Constant i1 None))\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (ListComp\n        (BinOp (BinOp (Name &x:1 Load) LShift (Constant i32 None)) Add (Name &i:1 Load))\n        (list\n          (comprehension\n            (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &x:1 Store))) Store)\n            (Call\n              (Name g_enumerate Load)\n              (list\n                (_starred_content\n                  (Subscript\n                    (Name &A:0 Load)\n                    (_slice_slice (Slice (Constant i1 None) (UnaryOp USub (Constant i1 None)) None))\n                    Load\n                  )\n                )\n                (_starred_content (Constant i1 None))\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Name &heapify:0 Load) (list (_starred_content (Name &q:0 Load))) nil))\n    (Assign\n      (list (Name &removed:0 Store))\n      (Call (Name &defaultdict:0 Load) (list (_starred_content (Name g_int Load))) nil)\n      None\n    )\n    (Assign (list (Name &cost:0 Store)) (List nil Load) None)\n    (While\n      (Name &q:0 Load)\n      (/seq\n        (While\n          (Name &q:0 Load)\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &q:0 Load) (_slice_content (Constant i0 None)) Load) None)\n            (If\n              (UnaryOp Not (Subscript (Name &removed:0 Load) (_slice_content (Name &x:0 Load)) Load))\n              (/seq Break)\n              (/seq)\n            )\n            (Expr (Call (Name &heappop:0 Load) (list (_starred_content (Name &q:0 Load))) nil))\n            (AugAssign\n              (Subscript (Name &removed:0 Load) (_slice_content (Name &x:0 Load)) Store)\n              Sub\n              (Constant i1 None)\n            )\n          )\n          (/seq)\n        )\n        (If (UnaryOp Not (Name &q:0 Load)) (/seq Break) (/seq))\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name &heappop:0 Load) (list (_starred_content (Name &q:0 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &val:0 Store)) (_starred_content (Name &ind:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (BinOp (Name &x:0 Load) RShift (Constant i32 None)))\n              (_starred_content (BinOp (Name &x:0 Load) BitAnd (Name &mask:0 Load)))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &L:0 Store))\n          (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &ind:0 Load) Sub (Constant i1 None))) Load)\n          None\n        )\n        (Assign\n          (list (Name &R:0 Store))\n          (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &ind:0 Load) Add (Constant i1 None))) Load)\n          None\n        )\n        (If\n          (Name &L:0 Load)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &cost:0 Load) s_append Load)\n                (list (_starred_content (BinOp (BinOp (Name &L:0 Load) Add (Name &val:0 Load)) Add (Name &D:0 Load))))\n                nil\n              )\n            )\n            (Assign (list (Name &newL:0 Store)) (BinOp (Name &val:0 Load) Add (Name &D:0 Load)) None)\n            (If\n              (Compare (Name &L:0 Load) (list Gt) (list (Name &newL:0 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &A:0 Load)\n                      (_slice_content (BinOp (Name &ind:0 Load) Sub (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Name &newL:0 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &removed:0 Load)\n                    (_slice_content\n                      (BinOp\n                        (BinOp (Name &L:0 Load) LShift (Constant i32 None))\n                        Add\n                        (BinOp (Name &ind:0 Load) Sub (Constant i1 None))\n                      )\n                    )\n                    Store\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n                (Expr\n                  (Call\n                    (Name &heappush:0 Load)\n                    (list\n                      (_starred_content (Name &q:0 Load))\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &newL:0 Load) LShift (Constant i32 None))\n                          Add\n                          (BinOp (Name &ind:0 Load) Sub (Constant i1 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Name &R:0 Load)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &cost:0 Load) s_append Load)\n                (list (_starred_content (BinOp (BinOp (Name &R:0 Load) Add (Name &val:0 Load)) Add (Name &D:0 Load))))\n                nil\n              )\n            )\n            (Assign (list (Name &newR:0 Store)) (BinOp (Name &val:0 Load) Add (Name &D:0 Load)) None)\n            (If\n              (Compare (Name &R:0 Load) (list Gt) (list (Name &newR:0 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &A:0 Load)\n                      (_slice_content (BinOp (Name &ind:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Name &newR:0 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript\n                    (Name &removed:0 Load)\n                    (_slice_content\n                      (BinOp\n                        (BinOp (Name &R:0 Load) LShift (Constant i32 None))\n                        Add\n                        (BinOp (Name &ind:0 Load) Add (Constant i1 None))\n                      )\n                    )\n                    Store\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n                (Expr\n                  (Call\n                    (Name &heappush:0 Load)\n                    (list\n                      (_starred_content (Name &q:0 Load))\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &newR:0 Load) LShift (Constant i32 None))\n                          Add\n                          (BinOp (Name &ind:0 Load) Add (Constant i1 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Name &ind:0 Load)) Store)) (Constant i0 None) None)\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &answer:0 Store))\n      (Call (Name g_sum Load) (list (_starred_content (Name &cost:0 Load))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_operator (list (alias g_itemgetter None)) i0)\n    (Import (list (alias g_itertools None)))\n    (FunctionDef\n      &inpl:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &cost:0\n      (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Name &y:1 Load)))\n          (/seq (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))\n          (/seq)\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp\n                (Name &D:0 Load)\n                Mult\n                (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Name &y:1 Load)))) nil)\n              )\n              Add\n              (Subscript (Name &A:0 Load) (_slice_content (Name &x:1 Load)) Load)\n            )\n            Add\n            (Subscript (Name &A:0 Load) (_slice_content (Name &y:1 Load)) Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &D:0 Store))) Store))\n      (Call (Name &inpl:0 Load) nil nil)\n      None\n    )\n    (Assign (list (Name &A:0 Store)) (Call (Name &inpl:0 Load) nil nil) None)\n    (Assign\n      (list (Name &Right:0 Store))\n      (ListComp\n        (Tuple\n          (list\n            (_starred_content (BinOp (Name &v:2 Load) Sub (BinOp (Name &i:2 Load) Mult (Name &D:0 Load))))\n            (_starred_content (Name &i:2 Load))\n          )\n          Load\n        )\n        (list\n          (comprehension\n            (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &v:2 Store))) Store)\n            (Call (Name g_enumerate Load) (list (_starred_content (Name &A:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &Left:0 Store))\n      (Subscript\n        (ListComp\n          (Tuple\n            (list\n              (_starred_content (BinOp (Name &v:3 Load) Add (BinOp (Name &i:3 Load) Mult (Name &D:0 Load))))\n              (_starred_content (Name &i:3 Load))\n            )\n            Load\n          )\n          (list\n            (comprehension\n              (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Name &v:3 Store))) Store)\n              (Call (Name g_enumerate Load) (list (_starred_content (Name &A:0 Load))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &Right:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil))\n                (_starred_content\n                  (Call\n                    (Attribute (Name g_itertools Load) s_accumulate Load)\n                    (list (_starred_content (Name &Right:0 Load)) (_starred_content (Name g_min Load)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &Left:0 Store))\n      (Subscript\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil))\n                  (_starred_content\n                    (Call\n                      (Attribute (Name g_itertools Load) s_accumulate Load)\n                      (list (_starred_content (Name &Left:0 Load)) (_starred_content (Name g_min Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &hub:0 Store)) (List nil Load) None)\n    (For\n      (Tuple\n        (list\n          (_starred_content (Name &i:0 Store))\n          (_starred_content\n            (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)\n          )\n        )\n        Store\n      )\n      (Call\n        (Name g_enumerate Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_zip Load)\n              (list (_starred_content (Name &Left:0 Load)) (_starred_content (Name &Right:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq Eq) (list (Name &l:0 Load) (Name &r:0 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &hub:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name &cost:0 Load)\n                      (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &r:0 Load)))\n                      nil\n                    )\n                  )\n                  (_starred_content\n                    (Call\n                      (Name &cost:0 Load)\n                      (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &l:0 Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &ans:0 Load)\n              Add\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (ListComp\n                      (Call\n                        (Name &cost:0 Load)\n                        (list (_starred_content (Name &i:4 Load)) (_starred_content (Name &j:4 Load)))\n                        nil\n                      )\n                      (list\n                        (comprehension\n                          (Tuple (list (_starred_content (Name &i:4 Store)) (_starred_content (Name &j:4 Store))) Store)\n                          (Call\n                            (Name g_zip Load)\n                            (list\n                              (_starred_content (Name &hub:0 Load))\n                              (_starred_content\n                                (Subscript (Name &hub:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                              )\n                            )\n                            nil\n                          )\n                          nil\n                          i0\n                        )\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &D:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A_list:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &B_list:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &B_list:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            Add\n            (BinOp (Name &D:0 Load) Mult (Name &i:0 Load))\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &C_list:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &C_list:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            Add\n            (BinOp (Name &D:0 Load) Mult (BinOp (Name &N:0 Load) Sub (Name &i:0 Load)))\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &B_cummmin:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &R:0 Store))\n      (Subscript (Name &B_list:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load)\n      None\n    )\n    (Assign (list (Name &BA:0 Store)) (BinOp (Name &N:0 Load) Sub (Constant i1 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))\n          (_starred_content (UnaryOp USub (Constant i1 None)))\n          (_starred_content (UnaryOp USub (Constant i1 None)))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &B_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list LtE)\n            (list (Name &R:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &R:0 Store))\n              (Subscript (Name &B_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              None\n            )\n            (Assign (list (Name &BA:0 Store)) (Name &i:0 Load) None)\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Subscript (Name &B_cummmin:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Name &BA:0 Load)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &C_cummmin:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign (list (Name &R:0 Store)) (Subscript (Name &C_list:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &CA:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &C_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list LtE)\n            (list (Name &R:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &R:0 Store))\n              (Subscript (Name &C_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              None\n            )\n            (Assign (list (Name &CA:0 Store)) (Name &i:0 Load) None)\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Subscript (Name &C_cummmin:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Name &CA:0 Load)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &start:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &start:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n      (/seq\n        (Assign\n          (list (Name &end:0 Store))\n          (Subscript (Name &B_cummmin:0 Load) (_slice_content (BinOp (Name &start:0 Load) Add (Constant i1 None))) Load)\n          None\n        )\n        (Assign\n          (list (Name &target:0 Store))\n          (Subscript (Name &C_cummmin:0 Load) (_slice_content (Name &start:0 Load)) Load)\n          None\n        )\n        (AugAssign\n          (Name &res:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (BinOp (Name &D:0 Load) Mult (BinOp (Name &end:0 Load) Sub (Name &target:0 Load)))\n              Add\n              (Subscript (Name &A_list:0 Load) (_slice_content (Name &target:0 Load)) Load)\n            )\n            Add\n            (Subscript (Name &A_list:0 Load) (_slice_content (Name &end:0 Load)) Load)\n          )\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &start:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &end:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &ds:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp (Name &D:0 Load) Mult (BinOp (Name &i:0 Load) Sub (Name &target:0 Load)))\n                  Add\n                  (Subscript (Name &A_list:0 Load) (_slice_content (Name &target:0 Load)) Load)\n                )\n                Add\n                (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &de:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp (Name &D:0 Load) Mult (BinOp (Name &end:0 Load) Sub (Name &i:0 Load)))\n                  Add\n                  (Subscript (Name &A_list:0 Load) (_slice_content (Name &end:0 Load)) Load)\n                )\n                Add\n                (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              )\n              None\n            )\n            (AugAssign\n              (Name &res:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list (_starred_content (Name &ds:0 Load)) (_starred_content (Name &de:0 Load)))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &start:0 Store)) (Name &end:0 Load) None)\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias g_accumulate None)) i0)\n    (ImportFrom s_operator (list (alias g_itemgetter None)) i0)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &d:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &aaa:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &costs_l:0 Store))\n      (ListComp\n        (Tuple\n          (list\n            (_starred_content\n              (BinOp (BinOp (UnaryOp USub (Name &i:1 Load)) Mult (Name &d:0 Load)) Add (Name &a:1 Load))\n            )\n            (_starred_content (Name &i:1 Load))\n          )\n          Load\n        )\n        (list\n          (comprehension\n            (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &a:1 Store))) Store)\n            (Call (Name g_enumerate Load) (list (_starred_content (Name &aaa:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &costs_r:0 Store))\n      (ListComp\n        (Tuple\n          (list\n            (_starred_content (BinOp (BinOp (Name &i:2 Load) Mult (Name &d:0 Load)) Add (Name &a:2 Load)))\n            (_starred_content (Name &i:2 Load))\n          )\n          Load\n        )\n        (list\n          (comprehension\n            (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &a:2 Store))) Store)\n            (Call (Name g_enumerate Load) (list (_starred_content (Name &aaa:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &costs_l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_accumulate Load)\n              (list (_starred_content (Name &costs_l:0 Load)) (_starred_content (Name g_min Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &costs_r:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_accumulate Load)\n              (list\n                (_starred_content (Call (Name g_reversed Load) (list (_starred_content (Name &costs_r:0 Load))) nil))\n                (_starred_content (Name g_min Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &costs_r:0 Load) s_reverse Load) nil nil))\n    (Assign\n      (list (Name &hubs:0 Store))\n      (Call\n        (Name g_set Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil))\n                (_starred_content (Name &costs_l:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &hubs:0 Load) s_intersection_update Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil))\n                (_starred_content (Name &costs_r:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Attribute (Name &hubs:0 Load) s_add Load) (list (_starred_content (Constant i0 None))) nil))\n    (Expr\n      (Call\n        (Attribute (Name &hubs:0 Load) s_add Load)\n        (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &hubs:0 Store))\n      (Call (Name g_sorted Load) (list (_starred_content (Name &hubs:0 Load))) nil)\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp\n        (Call (Name g_sum Load) (list (_starred_content (Name &aaa:0 Load))) nil)\n        Sub\n        (Subscript (Name &aaa:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Subscript (Name &hubs:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (For\n      (Name &t:0 Store)\n      (Subscript (Name &hubs:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n      (/seq\n        (Assign\n          (list (Name &cls:0 Store))\n          (Subscript\n            (Subscript (Name &costs_l:0 Load) (_slice_content (Name &s:0 Load)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &crt:0 Store))\n          (Subscript\n            (Subscript (Name &costs_r:0 Load) (_slice_content (Name &t:0 Load)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (Name &crt:0 Load) Sub (BinOp (Name &s:0 Load) Mult (Name &d:0 Load)))\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (Call\n            (Name g_sum Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (_starred_content (BinOp (Name &cls:0 Load) Add (BinOp (Name &i:3 Load) Mult (Name &d:0 Load))))\n                      (_starred_content (BinOp (Name &crt:0 Load) Sub (BinOp (Name &i:3 Load) Mult (Name &d:0 Load))))\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &i:3 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (BinOp (Name &s:0 Load) Add (Constant i1 None)))\n                          (_starred_content (Name &t:0 Load))\n                        )\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Assign (list (Name &s:0 Store)) (Name &t:0 Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &read:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) None) (Assign (list (Name &readline:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &readlines:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readlines Load) None) (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0) (ImportFrom s_collections (list (alias &defaultdict:0 None)) i0) (Expr (Constant s-WzEwLCAxMjUzOSwgMjYzNjgsIDIzNTY3LCAyMDUxNiwgMTIzOTgsIDEyMzU0LCAxMjQyNywgMjI1ODAsIDI1MTUyLCAxMjQzNCwgMzU1MTksIDEyNDA5LCAxMjQyNywgMTIyOTAsIDI0MDM4LCAyMTQ5MSwgMTIzOTUsIDEyNDE0LCAxMjM4MywgMTIzNjQsIDEyNDI3LCAzNjc5NCwgMTIzOTksIDMyMDgwLCAxMjQwMCwgMTIzOTQsIDEyMzU2LCAxMjI5MCwgMTAsIDEyNTM5LCAyNjM2OCwgMjM1NjcsIDIwNTE2LCAxMjM5OCwgMjAwMDEsIDM4NTYzLCAxMjM5OSwgMjQ1MTcsIDEyMzc4LCAyNjM2OCwgMjM1NjcsIDIwNTE2LCAxMjM5MiwgMzIwODAsIDEyNDA2LCAxMjI5MCwgMTAsIDEyNTM5LCAzMjA4MCwgMTI0MzUsIDEyMzg0LCAxMjM1NCwgMTIzOTIsIDQ5LCAyODg1NywgMTIzOTUsIDMyMzAyLCAzMjAwNCwgMTIzNzUsIDEyMzkwLCAxMjM1NiwgMTIzNjcsIDEyMjkwLCAxMF0= None)) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &D:0 Store)) (_starred_starred (Starred (Name &A:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &read:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Name &A:0 Load)) Add (List (list (_starred_content (Constant i0 None))) Load)) None) (Assign (list (Name &mask:0 Store)) (BinOp (BinOp (Constant i1 None) LShift (Constant i32 None)) Sub (Constant i1 None)) None) (Assign (list (Name &q:0 Store)) (ListComp (BinOp (BinOp (Name &x:1 Load) LShift (Constant i32 None)) Add (Name &i:1 Load)) (list (comprehension (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &x:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Subscript (Name &A:0 Load) (_slice_slice (Slice (Constant i1 None) (UnaryOp USub (Constant i1 None)) None)) Load)) (_starred_content (Constant i1 None))) nil) nil i0))) None) (Expr (Call (Name &heapify:0 Load) (list (_starred_content (Name &q:0 Load))) nil)) (Assign (list (Name &removed:0 Store)) (Call (Name &defaultdict:0 Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Name &cost:0 Store)) (List nil Load) None) (While (Name &q:0 Load) (/seq (While (Name &q:0 Load) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &q:0 Load) (_slice_content (Constant i0 None)) Load) None) (If (UnaryOp Not (Subscript (Name &removed:0 Load) (_slice_content (Name &x:0 Load)) Load)) (/seq Break) (/seq)) (Expr (Call (Name &heappop:0 Load) (list (_starred_content (Name &q:0 Load))) nil)) (AugAssign (Subscript (Name &removed:0 Load) (_slice_content (Name &x:0 Load)) Store) Sub (Constant i1 None))) (/seq)) (If (UnaryOp Not (Name &q:0 Load)) (/seq Break) (/seq)) (Assign (list (Name &x:0 Store)) (Call (Name &heappop:0 Load) (list (_starred_content (Name &q:0 Load))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &val:0 Store)) (_starred_content (Name &ind:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &x:0 Load) RShift (Constant i32 None))) (_starred_content (BinOp (Name &x:0 Load) BitAnd (Name &mask:0 Load)))) Load) None) (Assign (list (Name &L:0 Store)) (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &ind:0 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &R:0 Store)) (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &ind:0 Load) Add (Constant i1 None))) Load) None) (If (Name &L:0 Load) (/seq (Expr (Call (Attribute (Name &cost:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &L:0 Load) Add (Name &val:0 Load)) Add (Name &D:0 Load)))) nil)) (Assign (list (Name &newL:0 Store)) (BinOp (Name &val:0 Load) Add (Name &D:0 Load)) None) (If (Compare (Name &L:0 Load) (list Gt) (list (Name &newL:0 Load))) (/seq (Assign (list (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &ind:0 Load) Sub (Constant i1 None))) Store)) (Name &newL:0 Load) None) (AugAssign (Subscript (Name &removed:0 Load) (_slice_content (BinOp (BinOp (Name &L:0 Load) LShift (Constant i32 None)) Add (BinOp (Name &ind:0 Load) Sub (Constant i1 None)))) Store) Add (Constant i1 None)) (Expr (Call (Name &heappush:0 Load) (list (_starred_content (Name &q:0 Load)) (_starred_content (BinOp (BinOp (Name &newL:0 Load) LShift (Constant i32 None)) Add (BinOp (Name &ind:0 Load) Sub (Constant i1 None))))) nil))) (/seq))) (/seq)) (If (Name &R:0 Load) (/seq (Expr (Call (Attribute (Name &cost:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &R:0 Load) Add (Name &val:0 Load)) Add (Name &D:0 Load)))) nil)) (Assign (list (Name &newR:0 Store)) (BinOp (Name &val:0 Load) Add (Name &D:0 Load)) None) (If (Compare (Name &R:0 Load) (list Gt) (list (Name &newR:0 Load))) (/seq (Assign (list (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &ind:0 Load) Add (Constant i1 None))) Store)) (Name &newR:0 Load) None) (AugAssign (Subscript (Name &removed:0 Load) (_slice_content (BinOp (BinOp (Name &R:0 Load) LShift (Constant i32 None)) Add (BinOp (Name &ind:0 Load) Add (Constant i1 None)))) Store) Add (Constant i1 None)) (Expr (Call (Name &heappush:0 Load) (list (_starred_content (Name &q:0 Load)) (_starred_content (BinOp (BinOp (Name &newR:0 Load) LShift (Constant i32 None)) Add (BinOp (Name &ind:0 Load) Add (Constant i1 None))))) nil))) (/seq))) (/seq)) (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Name &ind:0 Load)) Store)) (Constant i0 None) None)) (/seq)) (Assign (list (Name &answer:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &cost:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_operator (list (alias g_itemgetter None)) i0) (Import (list (alias g_itertools None))) (FunctionDef &inpl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &cost:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:1 Load) (list Eq) (list (Name &y:1 Load))) (/seq (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq)) (Return (BinOp (BinOp (BinOp (Name &D:0 Load) Mult (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Name &y:1 Load)))) nil)) Add (Subscript (Name &A:0 Load) (_slice_content (Name &x:1 Load)) Load)) Add (Subscript (Name &A:0 Load) (_slice_content (Name &y:1 Load)) Load)))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &D:0 Store))) Store)) (Call (Name &inpl:0 Load) nil nil) None) (Assign (list (Name &A:0 Store)) (Call (Name &inpl:0 Load) nil nil) None) (Assign (list (Name &Right:0 Store)) (ListComp (Tuple (list (_starred_content (BinOp (Name &v:2 Load) Sub (BinOp (Name &i:2 Load) Mult (Name &D:0 Load)))) (_starred_content (Name &i:2 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &v:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &A:0 Load))) nil) nil i0))) None) (Assign (list (Name &Left:0 Store)) (Subscript (ListComp (Tuple (list (_starred_content (BinOp (Name &v:3 Load) Add (BinOp (Name &i:3 Load) Mult (Name &D:0 Load)))) (_starred_content (Name &i:3 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Name &v:3 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &A:0 Load))) nil) nil i0))) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (Assign (list (Name &Right:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil)) (_starred_content (Call (Attribute (Name g_itertools Load) s_accumulate Load) (list (_starred_content (Name &Right:0 Load)) (_starred_content (Name g_min Load))) nil))) nil))) nil) None) (Assign (list (Name &Left:0 Store)) (Subscript (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil)) (_starred_content (Call (Attribute (Name g_itertools Load) s_accumulate Load) (list (_starred_content (Name &Left:0 Load)) (_starred_content (Name g_min Load))) nil))) nil))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &hub:0 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_content (Name &Left:0 Load)) (_starred_content (Name &Right:0 Load))) nil))) nil) (/seq (If (Compare (Name &i:0 Load) (list Eq Eq) (list (Name &l:0 Load) (Name &r:0 Load))) (/seq (Expr (Call (Attribute (Name &hub:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq (AugAssign (Name &ans:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Call (Name &cost:0 Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &r:0 Load))) nil)) (_starred_content (Call (Name &cost:0 Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &l:0 Load))) nil))) nil))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Add (Call (Name g_sum Load) (list (_starred_content (ListComp (Call (Name &cost:0 Load) (list (_starred_content (Name &i:4 Load)) (_starred_content (Name &j:4 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &i:4 Store)) (_starred_content (Name &j:4 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &hub:0 Load)) (_starred_content (Subscript (Name &hub:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) nil i0))))) nil)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &D:0 &N:0 &A_list:0)) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &B_list:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Subscript (Name &B_list:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (BinOp (Name &D:0 Load) Mult (Name &i:0 Load))) None)) (/seq) None) (Assign (list (Name &C_list:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Subscript (Name &C_list:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (BinOp (Name &D:0 Load) Mult (BinOp (Name &N:0 Load) Sub (Name &i:0 Load)))) None)) (/seq) None) (Assign (list (Name &B_cummmin:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &R:0 Store)) (Subscript (Name &B_list:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &BA:0 Store)) (BinOp (Name &N:0 Load) Sub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &B_list:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Name &R:0 Load))) (/seq (Assign (list (Name &R:0 Store)) (Subscript (Name &B_list:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Name &BA:0 Store)) (Name &i:0 Load) None)) (/seq)) (Assign (list (Subscript (Name &B_cummmin:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Name &BA:0 Load) None)) (/seq) None) (Assign (list (Name &C_cummmin:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &R:0 Store)) (Subscript (Name &C_list:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &CA:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (If (Compare (Subscript (Name &C_list:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Name &R:0 Load))) (/seq (Assign (list (Name &R:0 Store)) (Subscript (Name &C_list:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Name &CA:0 Store)) (Name &i:0 Load) None)) (/seq)) (Assign (list (Subscript (Name &C_cummmin:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Name &CA:0 Load) None)) (/seq) None) (Assign (list (Name &start:0 Store)) (Constant i0 None) None) (While (Compare (Name &start:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) (/seq (Assign (list (Name &end:0 Store)) (Subscript (Name &B_cummmin:0 Load) (_slice_content (BinOp (Name &start:0 Load) Add (Constant i1 None))) Load) None) (Assign (list (Name &target:0 Store)) (Subscript (Name &C_cummmin:0 Load) (_slice_content (Name &start:0 Load)) Load) None) (AugAssign (Name &res:0 Store) Add (BinOp (BinOp (BinOp (Name &D:0 Load) Mult (BinOp (Name &end:0 Load) Sub (Name &target:0 Load))) Add (Subscript (Name &A_list:0 Load) (_slice_content (Name &target:0 Load)) Load)) Add (Subscript (Name &A_list:0 Load) (_slice_content (Name &end:0 Load)) Load))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &start:0 Load) Add (Constant i1 None))) (_starred_content (Name &end:0 Load))) nil) (/seq (Assign (list (Name &ds:0 Store)) (BinOp (BinOp (BinOp (Name &D:0 Load) Mult (BinOp (Name &i:0 Load) Sub (Name &target:0 Load))) Add (Subscript (Name &A_list:0 Load) (_slice_content (Name &target:0 Load)) Load)) Add (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load)) None) (Assign (list (Name &de:0 Store)) (BinOp (BinOp (BinOp (Name &D:0 Load) Mult (BinOp (Name &end:0 Load) Sub (Name &i:0 Load))) Add (Subscript (Name &A_list:0 Load) (_slice_content (Name &end:0 Load)) Load)) Add (Subscript (Name &A_list:0 Load) (_slice_content (Name &i:0 Load)) Load)) None) (AugAssign (Name &res:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Name &ds:0 Load)) (_starred_content (Name &de:0 Load))) nil))) (/seq) None) (Assign (list (Name &start:0 Store)) (Name &end:0 Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_itertools (list (alias g_accumulate None)) i0) (ImportFrom s_operator (list (alias g_itemgetter None)) i0) (/splice (fn_1 &d:0 &n:0 &aaa:0)) (Assign (list (Name &costs_l:0 Store)) (ListComp (Tuple (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &i:1 Load)) Mult (Name &d:0 Load)) Add (Name &a:1 Load))) (_starred_content (Name &i:1 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &aaa:0 Load))) nil) nil i0))) None) (Assign (list (Name &costs_r:0 Store)) (ListComp (Tuple (list (_starred_content (BinOp (BinOp (Name &i:2 Load) Mult (Name &d:0 Load)) Add (Name &a:2 Load))) (_starred_content (Name &i:2 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &a:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &aaa:0 Load))) nil) nil i0))) None) (Assign (list (Name &costs_l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_accumulate Load) (list (_starred_content (Name &costs_l:0 Load)) (_starred_content (Name g_min Load))) nil))) nil) None) (Assign (list (Name &costs_r:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_accumulate Load) (list (_starred_content (Call (Name g_reversed Load) (list (_starred_content (Name &costs_r:0 Load))) nil)) (_starred_content (Name g_min Load))) nil))) nil) None) (Expr (Call (Attribute (Name &costs_r:0 Load) s_reverse Load) nil nil)) (Assign (list (Name &hubs:0 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil)) (_starred_content (Name &costs_l:0 Load))) nil))) nil) None) (Expr (Call (Attribute (Name &hubs:0 Load) s_intersection_update Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil)) (_starred_content (Name &costs_r:0 Load))) nil))) nil)) (Expr (Call (Attribute (Name &hubs:0 Load) s_add Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Attribute (Name &hubs:0 Load) s_add Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) (Assign (list (Name &hubs:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &hubs:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &aaa:0 Load))) nil) Sub (Subscript (Name &aaa:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) None) (Assign (list (Name &s:0 Store)) (Subscript (Name &hubs:0 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &t:0 Store) (Subscript (Name &hubs:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &cls:0 Store)) (Subscript (Subscript (Name &costs_l:0 Load) (_slice_content (Name &s:0 Load)) Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &crt:0 Store)) (Subscript (Subscript (Name &costs_r:0 Load) (_slice_content (Name &t:0 Load)) Load) (_slice_content (Constant i0 None)) Load) None) (AugAssign (Name &ans:0 Store) Add (BinOp (Name &crt:0 Load) Sub (BinOp (Name &s:0 Load) Mult (Name &d:0 Load)))) (AugAssign (Name &ans:0 Store) Add (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_min Load) (list (_starred_content (BinOp (Name &cls:0 Load) Add (BinOp (Name &i:3 Load) Mult (Name &d:0 Load)))) (_starred_content (BinOp (Name &crt:0 Load) Sub (BinOp (Name &i:3 Load) Mult (Name &d:0 Load))))) nil) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Constant i1 None))) (_starred_content (Name &t:0 Load))) nil) nil i0))))) nil)) (Assign (list (Name &s:0 Store)) (Name &t:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (Call\n                  (Name g_sum Load)\n                  (list\n                    (_starred_content\n                      (ListComp\n                        (BinOp\n                          (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil)\n                          Mod\n                          (Constant i2 None)\n                        )\n                        (list\n                          (comprehension\n                            (Name &i:0 Store)\n                            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (Constant s_Odd None)\n              (Constant s_Even None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None))\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n              (Constant s_Odd None)\n              (Constant s_Even None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (IfExp\n        (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None))\n        (Call (Name g_print Load) (list (_starred_content (Constant s_Odd None))) nil)\n        (Call (Name g_print Load) (list (_starred_content (Constant s_Even None))) nil)\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List (list (_starred_content (Constant s_Even None)) (_starred_content (Constant s_Odd None))) Load)\n              (_slice_content (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None)))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List (list (_starred_content (Constant s_Even None)) (_starred_content (Constant s_Odd None))) Load)\n              (_slice_content\n                (BinOp\n                  (Call\n                    (Name g_eval Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Call (Name g_input Load) nil nil) s_replace Load)\n                          (list\n                            (_starred_content (Constant s-WzMyXQ== None))\n                            (_starred_content (Constant s-WzQyXQ== None))\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Mod\n                  (Constant i2 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Constant s_EOvdedn None)\n              (_slice_slice\n                (Slice\n                  (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None))\n                  None\n                  (Constant i2 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (IfExp\n        (Compare\n          (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None))\n          (list Eq)\n          (list (Constant i0 None))\n        )\n        (Constant s_Even None)\n        (Constant s_Odd None)\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) BitAnd (Constant i1 None))\n              (Constant s_Odd None)\n              (Constant s_Even None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare (BinOp (Name &c:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Constant s_Even None)\n              (Constant s_Odd None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Odd None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Even None))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil) Mod (Constant i2 None)) (list (comprehension (Name &i:0 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) nil) (list Eq) (list (Constant i2 None))) (Constant s_Odd None) (Constant s_Even None)))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None))) (Constant s_Odd None) (Constant s_Even None)))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (IfExp (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None)) (Call (Name g_print Load) (list (_starred_content (Constant s_Odd None))) nil) (Call (Name g_print Load) (list (_starred_content (Constant s_Even None))) nil)))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_Even None)) (_starred_content (Constant s_Odd None))) Load) (_slice_content (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None))) Load))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_Even None)) (_starred_content (Constant s_Odd None))) Load) (_slice_content (BinOp (Call (Name g_eval Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_replace Load) (list (_starred_content (Constant s-WzMyXQ== None)) (_starred_content (Constant s-WzQyXQ== None))) nil))) nil) Mod (Constant i2 None))) Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Constant s_EOvdedn None) (_slice_slice (Slice (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None)) None (Constant i2 None))) Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &ans:0 Store)) (IfExp (Compare (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant s_Even None) (Constant s_Odd None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) BitAnd (Constant i1 None)) (Constant s_Odd None) (Constant s_Even None)))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &c:0 Store)) (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Name &c:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant s_Even None) (Constant s_Odd None)))) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (If (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Mod (Constant i2 None)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Odd None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Even None))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &p:0 Load)\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (ListComp\n            (BinOp\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n                      Sub\n                      (Subscript\n                        (Subscript (Name &c:0 Load) (_slice_content (Name &j:3 Load)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n              Add\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load)\n                      Sub\n                      (Subscript\n                        (Subscript (Name &c:0 Load) (_slice_content (Name &j:3 Load)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (list\n              (comprehension\n                (Name &j:3 Store)\n                (Call\n                  (Name g_range Load)\n                  (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil)))\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name &d:0 Load) s_index Load)\n                    (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &d:0 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &c:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &c:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &k:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &tmp:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &tmp:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load)\n                                (_slice_content (Constant i0 None))\n                                Load\n                              )\n                              Sub\n                              (Subscript\n                                (Subscript (Name &c:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                                (_slice_content (Constant i0 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Add\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                              Sub\n                              (Subscript\n                                (Subscript (Name &c:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name &tmp:0 Load) s_index Load)\n                    (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &tmp:0 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &m:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load))\n              (_starred_content (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &md:0 Store))\n          (ListComp\n            (BinOp\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp (Subscript (Name &c:3 Load) (_slice_content (Constant i0 None)) Load) Sub (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n              Add\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp (Subscript (Name &c:3 Load) (_slice_content (Constant i1 None)) Load) Sub (Name &b:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n            (list (comprehension (Name &c:3 Store) (Name &m:0 Load) nil i0))\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name &md:0 Load) s_index Load)\n                    (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &md:0 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign (list (Name &t:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &c:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &j:0 Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign\n              (list (Name &k:0 Store))\n              (BinOp\n                (Call\n                  (Name g_abs Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n                        Sub\n                        (Subscript (Name &j:0 Load) (_slice_content (Constant i0 None)) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Call\n                  (Name g_abs Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load)\n                        Sub\n                        (Subscript (Name &j:0 Load) (_slice_content (Constant i1 None)) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (If\n              (Compare (Name &t:0 Load) (list Gt) (list (Name &k:0 Load)))\n              (/seq\n                (Assign (list (Name &ans:0 Store)) (Name &c:0 Load) None)\n                (Assign (list (Name &t:0 Store)) (Name &k:0 Load) None)\n              )\n              (/seq)\n            )\n            (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &ans:0 Store))\n          (ListComp\n            (BinOp\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n                      Sub\n                      (Subscript (Name &j:3 Load) (_slice_content (Constant i0 None)) Load)\n                    )\n                  )\n                )\n                nil\n              )\n              Add\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load)\n                      Sub\n                      (Subscript (Name &j:3 Load) (_slice_content (Constant i1 None)) Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (list (comprehension (Name &j:3 Store) (Name &c:0 Load) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans_min:0 Store))\n          (Call (Name g_min Load) (list (_starred_content (Name &ans:0 Load))) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_index Load)\n                    (list (_starred_content (Name &ans_min:0 Load)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ab:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &cd:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &res:0 Store)) (List nil Load) None)\n        (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &res:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &ab:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                                (_slice_content (Constant i0 None))\n                                Load\n                              )\n                              Sub\n                              (Subscript\n                                (Subscript (Name &cd:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                                (_slice_content (Constant i0 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Add\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &ab:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                              Sub\n                              (Subscript\n                                (Subscript (Name &cd:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call\n            (Attribute (Name &res:0 Load) s_index Load)\n            (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &res:0 Load))) nil)))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Add (Constant i1 None)))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &st:0 Store)) (List nil Load) None)\n    (Assign (list (Name &pt:0 Store)) (List nil Load) None)\n    (Assign (list (Name &ch:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &st:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &pt:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Name &st:0 Load)\n      (/seq\n        (For\n          (Name &k:0 Store)\n          (Name &pt:0 Load)\n          (/seq\n            (Assign\n              (list (Name &d:0 Store))\n              (BinOp\n                (Call\n                  (Name g_abs Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Subscript (Name &j:0 Load) (_slice_content (Constant i0 None)) Load)\n                        Sub\n                        (Subscript (Name &k:0 Load) (_slice_content (Constant i0 None)) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Call\n                  (Name g_abs Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Subscript (Name &j:0 Load) (_slice_content (Constant i1 None)) Load)\n                        Sub\n                        (Subscript (Name &k:0 Load) (_slice_content (Constant i1 None)) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &ch:0 Load) s_append Load) (list (_starred_content (Name &d:0 Load))) nil))\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name &ch:0 Load) s_index Load)\n                    (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &ch:0 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Assign (list (Name &ch:0 Store)) (List nil Load) None)\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &cnt:0 Store))\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i16 None)))\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Call\n                    (Name g_abs Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n                          Sub\n                          (Subscript\n                            (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                            (_slice_content (Constant i0 None))\n                            Load\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Add\n                  (Call\n                    (Name g_abs Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load)\n                          Sub\n                          (Subscript\n                            (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                            (_slice_content (Constant i1 None))\n                            Load\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n                (list Lt)\n                (list (Name &cnt:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &cnt:0 Store))\n                  (BinOp\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n                            Sub\n                            (Subscript\n                              (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                              (_slice_content (Constant i0 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    Add\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load)\n                            Sub\n                            (Subscript\n                              (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                              (_slice_content (Constant i1 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Assign (list (Name &ans:0 Store)) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &c:0 Store)) (List nil Load) None)\n        (For\n          (Name &y:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &c:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &p:0 Load) (_slice_content (Name &x:0 Load)) Load)\n                                (_slice_content (Constant i0 None))\n                                Load\n                              )\n                              Sub\n                              (Subscript\n                                (Subscript (Name &q:0 Load) (_slice_content (Name &y:0 Load)) Load)\n                                (_slice_content (Constant i0 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Add\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &p:0 Load) (_slice_content (Name &x:0 Load)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                              Sub\n                              (Subscript\n                                (Subscript (Name &q:0 Load) (_slice_content (Name &y:0 Load)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name &c:0 Load) s_index Load)\n                    (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &c:0 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ab:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &cd:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n      (Name &ab:0 Load)\n      (/seq\n        (Assign (list (Name &ma:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None)\n        (Assign (list (Name &tp:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Name &ma:0 Load)\n                (list Gt)\n                (list\n                  (BinOp\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &a:0 Load)\n                            Sub\n                            (Subscript\n                              (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (Constant i0 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    Add\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &b:0 Load)\n                            Sub\n                            (Subscript\n                              (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (Constant i1 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &ma:0 Store))\n                  (BinOp\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &a:0 Load)\n                            Sub\n                            (Subscript\n                              (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (Constant i0 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    Add\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &b:0 Load)\n                            Sub\n                            (Subscript\n                              (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (Constant i1 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Assign (list (Name &tp:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &tp:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) nil i0))) None) (Assign (list (Name %6 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
        "sym_arity": 6,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &_:1 &p:0 &_:2 &c:0)) (For (Name &i:0 Store) (Name &p:0 Load) (/seq (Assign (list (Name &d:0 Store)) (ListComp (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &j:3 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &j:3 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)) (list (comprehension (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name &d:0 Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &d:0 Load))) nil))) nil) Add (Constant i1 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &c:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &tmp:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &tmp:0 Load) s_append Load) (list (_starred_content (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name &tmp:0 Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &tmp:0 Load))) nil))) nil) Add (Constant i1 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &m:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load))) Load) None) (Assign (list (Name &md:0 Store)) (ListComp (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &c:3 Load) (_slice_content (Constant i0 None)) Load) Sub (Name &a:0 Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &c:3 Load) (_slice_content (Constant i1 None)) Load) Sub (Name &b:0 Load)))) nil)) (list (comprehension (Name &c:3 Store) (Name &m:0 Load) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name &md:0 Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &md:0 Load))) nil))) nil) Add (Constant i1 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &i:1 &a:0 &i:2 &b:0)) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &t:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &c:0 Store)) (Constant i1 None) None) (For (Name &j:0 Store) (Name &b:0 Load) (/seq (Assign (list (Name &k:0 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &j:0 Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &j:0 Load) (_slice_content (Constant i1 None)) Load)))) nil)) None) (If (Compare (Name &t:0 Load) (list Gt) (list (Name &k:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &c:0 Load) None) (Assign (list (Name &t:0 Store)) (Name &k:0 Load) None)) (/seq)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &i:1 &a:0 &i:2 &c:0)) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &ans:0 Store)) (ListComp (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &j:3 Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &j:3 Load) (_slice_content (Constant i1 None)) Load)))) nil)) (list (comprehension (Name &j:3 Store) (Name &c:0 Load) nil i0))) None) (Assign (list (Name &ans_min:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ans:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name &ans:0 Load) s_index Load) (list (_starred_content (Name &ans_min:0 Load))) nil) Add (Constant i1 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &_:1 &ab:0 &_:2 &cd:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &res:0 Store)) (List nil Load) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (_starred_content (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &ab:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &cd:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &ab:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &cd:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)))) nil))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Call (Attribute (Name &res:0 Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &res:0 Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Add (Constant i1 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &st:0 Store)) (List nil Load) None) (Assign (list (Name &pt:0 Store)) (List nil Load) None) (Assign (list (Name &ch:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &st:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &pt:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (For (Name &j:0 Store) (Name &st:0 Load) (/seq (For (Name &k:0 Store) (Name &pt:0 Load) (/seq (Assign (list (Name &d:0 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &j:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &k:0 Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &j:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &k:0 Load) (_slice_content (Constant i1 None)) Load)))) nil)) None) (Expr (Call (Attribute (Name &ch:0 Load) s_append Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name &ch:0 Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &ch:0 Load))) nil))) nil) Add (Constant i1 None)))) nil)) (Assign (list (Name &ch:0 Store)) (List nil Load) None)) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &i:1 &a:0 &i:2 &b:0)) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &cnt:0 Store)) (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i16 None))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)) (list Lt) (list (Name &cnt:0 Load))) (/seq (Assign (list (Name &cnt:0 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &i:1 &p:0 &i:2 &q:0)) (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &c:0 Store)) (List nil Load) None) (For (Name &y:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (_starred_content (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &x:0 Load)) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &q:0 Load) (_slice_content (Name &y:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &x:0 Load)) Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &q:0 Load) (_slice_content (Name &y:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name &c:0 Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &c:0 Load))) nil))) nil) Add (Constant i1 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &_:1 &ab:0 &i:2 &cd:0)) (For (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &ab:0 Load) (/seq (Assign (list (Name &ma:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None) (Assign (list (Name &tp:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (If (Compare (Name &ma:0 Load) (list Gt) (list (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Subscript (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &b:0 Load) Sub (Subscript (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)))) (/seq (Assign (list (Name &ma:0 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Subscript (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) nil) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &b:0 Load) Sub (Subscript (Subscript (Name &cd:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) nil)) None) (Assign (list (Name &tp:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &tp:0 Load))) nil))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp\n                  (Subscript (Name &l:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &l:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list Eq)\n                (list (Subscript (Name &l:0 Load) (_slice_content (Constant i2 None)) Load))\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                (list Eq)\n                (list\n                  (Call\n                    (Name g_sum Load)\n                    (list\n                      (_starred_content\n                        (Subscript\n                          (Name &a:0 Load)\n                          (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None))\n                          Load\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Constant s_YNeos None)\n              (_slice_slice\n                (Slice\n                  (Compare\n                    (BinOp (Name &a:0 Load) Add (Name &b:0 Load))\n                    (list NotEq NotEq)\n                    (list\n                      (Name &c:0 Load)\n                      (Call\n                        (Name g_abs Load)\n                        (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load))))\n                        nil\n                      )\n                    )\n                  )\n                  None\n                  (Constant i2 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)\n                (list Eq)\n                (list\n                  (BinOp\n                    (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil)\n                    Mult\n                    (Constant i2 None)\n                  )\n                )\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp (Constant i2 None) Mult (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load))) nil))\n                (list Eq)\n                (list (Call (Name g_sum Load) (list (_starred_content (Name &A:0 Load))) nil))\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load)\n              (_slice_content\n                (Compare\n                  (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)\n                  (list Eq)\n                  (list\n                    (BinOp\n                      (Constant i2 None)\n                      Mult\n                      (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil)\n                    )\n                  )\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp\n                  (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list Eq)\n                (list (Subscript (Name &A:0 Load) (_slice_content (Constant i2 None)) Load))\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_starred (Starred (Name &a:0 Store) Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Constant s_YNeos None)\n              (_slice_slice\n                (Slice\n                  (Compare\n                    (BinOp\n                      (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)\n                      Div\n                      (Constant i2 None)\n                    )\n                    (list NotEq)\n                    (list (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil))\n                  )\n                  None\n                  (Constant i2 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp\n                  (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list Eq)\n                (list (Subscript (Name &x:0 Load) (_slice_content (Constant i2 None)) Load))\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (BinOp\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (_starred_content (Name &a:0 Load))\n                      (_starred_content (Name &b:0 Load))\n                      (_starred_content (Name &c:0 Load))\n                    )\n                    nil\n                  )\n                  Mult\n                  (Constant i2 None)\n                )\n                (list Eq)\n                (list (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)))\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_sorted Load) (list (_starred_content #0)) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)) (list Eq) (list (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) (Constant s_Yes None) (Constant s_No None)))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) &l:0) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load))) nil))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Constant s_YNeos None) (_slice_slice (Slice (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list NotEq NotEq) (list (Name &c:0 Load) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil))) None (Constant i2 None))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) (list Eq) (list (BinOp (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) Mult (Constant i2 None)))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Constant i2 None) Mult (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load))) nil)) (list Eq) (list (Call (Name g_sum Load) (list (_starred_content (Name &A:0 Load))) nil))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load) (_slice_content (Compare (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) (list Eq) (list (BinOp (Constant i2 None) Mult (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil))))) Load))) nil))) nil)",
      "(Module (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) &A:0) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_starred (Starred (Name &a:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Constant s_YNeos None) (_slice_slice (Slice (Compare (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) Div (Constant i2 None)) (list NotEq) (list (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil))) None (Constant i2 None))) Load))) nil))) nil)",
      "(Module (fn_1 (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) &x:0) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil) Mult (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &bubble_sort:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &arr:1 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (For\n              (Name &j:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))\n                  (_starred_content (Name &i:1 Load))\n                  (_starred_content (UnaryOp USub (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &arr:1 Load) (_slice_content (Name &j:1 Load)) Load)\n                    (list Lt)\n                    (list\n                      (Subscript\n                        (Name &arr:1 Load)\n                        (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &arr:1 Load) (_slice_content (Name &j:1 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &arr:1 Load)\n                                (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &arr:1 Load)\n                              (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &arr:1 Load) (_slice_content (Name &j:1 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &cnt:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &cnt:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name &bubble_sort:0 Load) (list (_starred_content (Name &n:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &b_sort:0\n      (arguments nil (list (arg &lst:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &limit:1 Store))\n          (BinOp (Call (Name g_len Load) (list (_starred_content (Name &lst:1 Load))) nil) Sub (Constant i1 None))\n          None\n        )\n        (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &limit:1 Load)\n          (/seq\n            (For\n              (Name &i:1 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &limit:1 Load))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &lst:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                    (list Gt)\n                    (list\n                      (Subscript\n                        (Name &lst:1 Load)\n                        (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &lst:1 Load) (_slice_content (Name &i:1 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &lst:1 Load)\n                                (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &lst:1 Load)\n                              (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &lst:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &cnt:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (AugAssign (Name &limit:1 Store) Sub (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Return (Name &cnt:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &alst:0 Store)) (List nil Load) None)\n        (For\n          (Name &_:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &alst:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name &b_sort:0 Load) (list (_starred_content (Name &alst:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &bubble_sort:0\n      (arguments nil (list (arg &item_list:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &length:1 Store))\n          (Call (Name g_len Load) (list (_starred_content (Name &item_list:1 Load))) nil)\n          None\n        )\n        (Assign (list (Name &count:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &lp:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &length:1 Load))) nil)\n          (/seq\n            (For\n              (Name &lp2:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (BinOp (BinOp (Name &length:1 Load) Sub (Name &lp:1 Load)) Sub (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &item_list:1 Load) (_slice_content (Name &lp2:1 Load)) Load)\n                    (list Gt)\n                    (list\n                      (Subscript\n                        (Name &item_list:1 Load)\n                        (_slice_content (BinOp (Name &lp2:1 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &tmp:1 Store))\n                      (Subscript (Name &item_list:1 Load) (_slice_content (Name &lp2:1 Load)) Load)\n                      None\n                    )\n                    (Assign\n                      (list (Subscript (Name &item_list:1 Load) (_slice_content (Name &lp2:1 Load)) Store))\n                      (Subscript\n                        (Name &item_list:1 Load)\n                        (_slice_content (BinOp (Name &lp2:1 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      None\n                    )\n                    (Assign\n                      (list\n                        (Subscript\n                          (Name &item_list:1 Load)\n                          (_slice_content (BinOp (Name &lp2:1 Load) Add (Constant i1 None)))\n                          Store\n                        )\n                      )\n                      (Name &tmp:1 Load)\n                      None\n                    )\n                    (AugAssign (Name &count:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &count:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &input_count:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &input_count:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &data:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &input_count:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &result:0 Store))\n          (Call (Name &bubble_sort:0 Load) (list (_starred_content (Name &data:0 Load))) nil)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_fractions None)))\n    (Import (list (alias g_heapq None)))\n    (Import (list (alias g_collections None)))\n    (Import (list (alias g_re None)))\n    (Import (list (alias g_array None)))\n    (Import (list (alias g_bisect None)))\n    (ImportFrom s_collections (list (alias g_Counter None) (alias g_defaultdict None)) i0)\n    (ClassDef\n      &BIT:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (Expr\n          (Constant\n            s-WzY2LCAxMDUsIDk4LCA5NywgMTE0LCAxMjEsIDMyLCA3MywgMTEwLCAxMDAsIDEwMSwgMTIwLCAxMDEsIDEwMCwgMzIsIDg0LCAxMTQsIDEwMSwgMTAxLCAzMiwgNDcsIDMyLCA3MCwgMTAxLCAxMTAsIDExOSwgMTA1LCA5OSwgMTA3LCAzMiwgODQsIDExNCwgMTAxLCAxMDFd\n            None\n          )\n        )\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &size:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_size Store)) (Name &size:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_l Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp (Name &size:3 Load) Add (Constant i1 None))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &sum:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &r:4 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:4 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &r:4 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s_l Load) (_slice_content (Name &i:4 Load)) Load)\n                )\n                (AugAssign (Name &i:4 Store) Sub (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n              )\n              (/seq)\n            )\n            (Return (Name &r:4 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &x:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &i:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_size Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:5 Load) s_l Load) (_slice_content (Name &i:5 Load)) Store)\n                  Add\n                  (Name &x:5 Load)\n                )\n                (AugAssign (Name &i:5 Store) Add (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))\n              )\n              (/seq)\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &max_a:0 Store)) (Constant i1000000 None) None)\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &a:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &bit:2 Store))\n          (Call (Name &BIT:0 Load) (list (_starred_content (Name &max_a:0 Load))) nil)\n          None\n        )\n        (Assign (list (Name &ans:2 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &x:2 Store))) Store)\n          (Call (Name g_enumerate Load) (list (_starred_content (Name &a:2 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &ans:2 Store)\n              Add\n              (BinOp\n                (Name &i:2 Load)\n                Sub\n                (Call (Attribute (Name &bit:2 Load) s_sum Load) (list (_starred_content (Name &x:2 Load))) nil)\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &bit:2 Load) s_add Load)\n                (list (_starred_content (Name &x:2 Load)) (_starred_content (Constant i1 None)))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &ans:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &N:6 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n            (If (Compare (Name &N:6 Load) (list Eq) (list (Constant i0 None))) (/seq (Return None)) (/seq))\n            (Assign (list (Name &a:6 Store)) (List nil Load) None)\n            (For\n              (Name &i:6 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &N:6 Load))) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &a:6 Load) s_append Load)\n                    (list\n                      (_starred_content\n                        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &a:6 Load))) nil)))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &alist:0 Store)) (List nil Load) None)\n        (For\n          (Name &_:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n            (Expr (Call (Attribute (Name &alist:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &alist:0 Load))) nil)))\n            nil\n          )\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call (Name g_len Load) (list (_starred_content (Name &alist:0 Load))) nil)\n                      Sub\n                      (Constant i1 None)\n                    )\n                  )\n                  (_starred_content (Name &i:0 Load))\n                  (_starred_content (UnaryOp USub (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &alist:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (list Lt)\n                    (list\n                      (Subscript\n                        (Name &alist:0 Load)\n                        (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &alist:0 Load) (_slice_content (Name &j:0 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &alist:0 Load)\n                                (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &alist:0 Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &alist:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &A:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:1 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &right:1 Store))\n          (Call (Name g_len Load) (list (_starred_content (Name &A:1 Load))) nil)\n          None\n        )\n        (While\n          (Compare (Name &right:1 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (For\n              (Name &left:1 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i0 None)) (_starred_content (Name &right:1 Load)))\n                nil\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (BinOp (Name &left:1 Load) Add (Constant i1 None))\n                        (list Lt)\n                        (list (Call (Name g_len Load) (list (_starred_content (Name &A:1 Load))) nil))\n                      )\n                      (Compare\n                        (Subscript (Name &A:1 Load) (_slice_content (Name &left:1 Load)) Load)\n                        (list Gt)\n                        (list\n                          (Subscript\n                            (Name &A:1 Load)\n                            (_slice_content (BinOp (Name &left:1 Load) Add (Constant i1 None)))\n                            Load\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &A:1 Load) (_slice_content (Name &left:1 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &A:1 Load)\n                                (_slice_content (BinOp (Name &left:1 Load) Add (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &A:1 Load)\n                              (_slice_content (BinOp (Name &left:1 Load) Add (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &A:1 Load) (_slice_content (Name &left:1 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &res:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (AugAssign (Name &right:1 Store) Sub (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Return (Name &res:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &A:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &A:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i105 None))\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n              (_starred_content (Constant i0 None))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (list Gt)\n                    (list\n                      (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)\n                    )\n                  )\n                  (/seq\n                    (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &a:0 Load)\n                                (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &a:0 Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &a:0 Store)) (List nil Load) None)\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &l:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &a:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))\n              (_starred_content (Constant i0 None))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (list Gt)\n                    (list\n                      (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &a:0 Load)\n                                (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &a:0 Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &A:0 Store)) (List nil Load) None)\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &num:0 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n            (Expr (Call (Attribute (Name &A:0 Load) s_append Load) (list (_starred_content (Name &num:0 Load))) nil))\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (UnaryOp USub (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (list Lt)\n                    (list\n                      (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None))) Load)\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Store))\n                            (_starred_content\n                              (Subscript\n                                (Name &A:0 Load)\n                                (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &A:0 Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &Num_lis:0 Store)) (List nil Load) None)\n        (Assign (list (Name &cou:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &Num_lis:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &S_lis:0 Store))\n          (Call (Name g_sorted Load) (list (_starred_content (Name &Num_lis:0 Load))) nil)\n          None\n        )\n        (While\n          (Compare (Name &Num_lis:0 Load) (list NotEq) (list (Name &S_lis:0 Load)))\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &Num_lis:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (list Gt)\n                    (list\n                      (Subscript\n                        (Name &Num_lis:0 Load)\n                        (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (_starred_content\n                              (Subscript (Name &Num_lis:0 Load) (_slice_content (Name &j:0 Load)) Store)\n                            )\n                            (_starred_content\n                              (Subscript\n                                (Name &Num_lis:0 Load)\n                                (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                                Store\n                              )\n                            )\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Name &Num_lis:0 Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          (_starred_content (Subscript (Name &Num_lis:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (AugAssign (Name &cou:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cou:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content #1)) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp #1 Sub (Constant i1 None))) (_starred_content #0) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list Lt) (list (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Store)) (_starred_content (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) Load) None) (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &bubble_sort:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &arr:1 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (/splice (fn_1 (Name &i:1 Load) (Name &n:1 Load) &cnt:1 &j:1 &arr:1 &i:1)) (Return (Name &cnt:1 Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &bubble_sort:0 Load) (list (_starred_content (Name &n:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &b_sort:0 (arguments nil (list (arg &lst:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &limit:1 Store)) (BinOp (Call (Name g_len Load) (list (_starred_content (Name &lst:1 Load))) nil) Sub (Constant i1 None)) None) (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None) (While (Name &limit:1 Load) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &limit:1 Load))) nil) (/seq (If (Compare (Subscript (Name &lst:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Gt) (list (Subscript (Name &lst:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &lst:1 Load) (_slice_content (Name &i:1 Load)) Store)) (_starred_content (Subscript (Name &lst:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &lst:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &lst:1 Load) (_slice_content (Name &i:1 Load)) Load))) Load) None) (AugAssign (Name &cnt:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (AugAssign (Name &limit:1 Store) Sub (Constant i1 None))) (/seq)) (Return (Name &cnt:1 Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &alst:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &alst:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &b_sort:0 Load) (list (_starred_content (Name &alst:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &bubble_sort:0 (arguments nil (list (arg &item_list:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &length:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &item_list:1 Load))) nil) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (For (Name &lp:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &length:1 Load))) nil) (/seq (For (Name &lp2:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &length:1 Load) Sub (Name &lp:1 Load)) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &item_list:1 Load) (_slice_content (Name &lp2:1 Load)) Load) (list Gt) (list (Subscript (Name &item_list:1 Load) (_slice_content (BinOp (Name &lp2:1 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Name &tmp:1 Store)) (Subscript (Name &item_list:1 Load) (_slice_content (Name &lp2:1 Load)) Load) None) (Assign (list (Subscript (Name &item_list:1 Load) (_slice_content (Name &lp2:1 Load)) Store)) (Subscript (Name &item_list:1 Load) (_slice_content (BinOp (Name &lp2:1 Load) Add (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &item_list:1 Load) (_slice_content (BinOp (Name &lp2:1 Load) Add (Constant i1 None))) Store)) (Name &tmp:1 Load) None) (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &count:1 Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &input_count:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &input_count:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &data:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &input_count:0 Load))) nil) nil i0))) None) (Assign (list (Name &result:0 Store)) (Call (Name &bubble_sort:0 Load) (list (_starred_content (Name &data:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_fractions None))) (Import (list (alias g_heapq None))) (Import (list (alias g_collections None))) (Import (list (alias g_re None))) (Import (list (alias g_array None))) (Import (list (alias g_bisect None))) (ImportFrom s_collections (list (alias g_Counter None) (alias g_defaultdict None)) i0) (ClassDef &BIT:0 (list (Name g_object Load)) nil (/seq (Expr (Constant s-WzY2LCAxMDUsIDk4LCA5NywgMTE0LCAxMjEsIDMyLCA3MywgMTEwLCAxMDAsIDEwMSwgMTIwLCAxMDEsIDEwMCwgMzIsIDg0LCAxMTQsIDEwMSwgMTAxLCAzMiwgNDcsIDMyLCA3MCwgMTAxLCAxMTAsIDExOSwgMTA1LCA5OSwgMTA3LCAzMiwgODQsIDExNCwgMTAxLCAxMDFd None)) (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &size:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_size Store)) (Name &size:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_l Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &size:3 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &sum:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &r:4 Store)) (Constant i0 None) None) (While (Compare (Name &i:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &r:4 Store) Add (Subscript (Attribute (Name &self:4 Load) s_l Load) (_slice_content (Name &i:4 Load)) Load)) (AugAssign (Name &i:4 Store) Sub (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))) (/seq)) (Return (Name &r:4 Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_l Load) (_slice_content (Name &i:5 Load)) Store) Add (Name &x:5 Load)) (AugAssign (Name &i:5 Store) Add (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))) (/seq))) nil None None)) nil) (Assign (list (Name &max_a:0 Store)) (Constant i1000000 None) None) (FunctionDef &solve:0 (arguments nil (list (arg &a:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &bit:2 Store)) (Call (Name &BIT:0 Load) (list (_starred_content (Name &max_a:0 Load))) nil) None) (Assign (list (Name &ans:2 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &x:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &a:2 Load))) nil) (/seq (AugAssign (Name &ans:2 Store) Add (BinOp (Name &i:2 Load) Sub (Call (Attribute (Name &bit:2 Load) s_sum Load) (list (_starred_content (Name &x:2 Load))) nil))) (Expr (Call (Attribute (Name &bit:2 Load) s_add Load) (list (_starred_content (Name &x:2 Load)) (_starred_content (Constant i1 None))) nil))) (/seq) None) (Return (Name &ans:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &N:6 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &N:6 Load) (list Eq) (list (Constant i0 None))) (/seq (Return None)) (/seq)) (Assign (list (Name &a:6 Store)) (List nil Load) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:6 Load))) nil) (/seq (Expr (Call (Attribute (Name &a:6 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &a:6 Load))) nil))) nil))) (/seq))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &alist:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &alist:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None) (/splice (fn_1 (Name &i:0 Load) (Call (Name g_len Load) (list (_starred_content (Name &alist:0 Load))) nil) &cnt:0 &j:0 &alist:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &A:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:1 Store)) (Constant i0 None) None) (Assign (list (Name &right:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &A:1 Load))) nil) None) (While (Compare (Name &right:1 Load) (list NotEq) (list (Constant i0 None))) (/seq (For (Name &left:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &right:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name &left:1 Load) Add (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &A:1 Load))) nil))) (Compare (Subscript (Name &A:1 Load) (_slice_content (Name &left:1 Load)) Load) (list Gt) (list (Subscript (Name &A:1 Load) (_slice_content (BinOp (Name &left:1 Load) Add (Constant i1 None))) Load))))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &A:1 Load) (_slice_content (Name &left:1 Load)) Store)) (_starred_content (Subscript (Name &A:1 Load) (_slice_content (BinOp (Name &left:1 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:1 Load) (_slice_content (BinOp (Name &left:1 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &A:1 Load) (_slice_content (Name &left:1 Load)) Load))) Load) None) (AugAssign (Name &res:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (AugAssign (Name &right:1 Store) Sub (Constant i1 None))) (/seq)) (Return (Name &res:1 Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &A:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &a:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i105 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) (/seq) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Store)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))) Load) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &l:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Store)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))) Load) None) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &A:0 Load) s_append Load) (list (_starred_content (Name &num:0 Load))) nil))) (/seq) None) (/splice (fn_1 (Constant i0 None) (Name &n:0 Load) &cnt:0 &j:0 &A:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &Num_lis:0 Store)) (List nil Load) None) (Assign (list (Name &cou:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &Num_lis:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Assign (list (Name &S_lis:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &Num_lis:0 Load))) nil) None) (While (Compare (Name &Num_lis:0 Load) (list NotEq) (list (Name &S_lis:0 Load))) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &Num_lis:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Gt) (list (Subscript (Name &Num_lis:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &Num_lis:0 Load) (_slice_content (Name &j:0 Load)) Store)) (_starred_content (Subscript (Name &Num_lis:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &Num_lis:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &Num_lis:0 Load) (_slice_content (Name &j:0 Load)) Load))) Load) None) (AugAssign (Name &cou:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cou:0 Load))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &size:0 Store)) (Constant i200100 None) None)\n    (Assign\n      (list (Name &total:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &size:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &s:0 Store))\n          (Call\n            (Name g_sum Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &total:0 Load) (_slice_content (Name &s:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &size:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (BinOp (Subscript (Name &total:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Constant i2 None))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant i0 None)))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (AugAssign\n          (Subscript (Name &total:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n          Add\n          (BinOp (Subscript (Name &total:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Constant i2 None))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Constant i200020 None) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &a:0 Load)\n            (_slice_content\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Name g_int Load))\n                        (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n          Add\n          (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) RShift (Constant i1 None))\n        )\n        (If\n          (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) BitAnd (Constant i1 None))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant i0 None)))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Constant i200020 None) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &a:0 Load)\n            (_slice_content\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Name g_int Load))\n                        (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n          Add\n          (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Constant i2 None))\n        )\n        (AugAssign (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store) BitAnd (Constant i1 None))\n        (If\n          (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant i0 None)))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &s:0 Store)\n          Add\n          (BinOp (Constant i1 None) LShift (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (While\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (BinOp (Name &s:0 Load) BitAnd (Constant i1 None))\n          (/seq\n            (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n          )\n          (/seq)\n        )\n        (AugAssign (Name &s:0 Store) RShift (Constant i1 None))\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (For\n      (Name &e:0 Store)\n      (Name &ans:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &e:0 Load)) (_starred_content (Constant i0 None)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &m:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (While\n          (Constant True None)\n          (/seq\n            (If\n              (Compare\n                (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &i:0 Load))\n                (list In)\n                (list (Name &m:0 Load))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &m:0 Load) s_remove Load)\n                    (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &i:0 Load))))\n                    nil\n                  )\n                )\n                (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &m:0 Load) s_add Load)\n                    (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &i:0 Load))))\n                    nil\n                  )\n                )\n                Break\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &m:0 Load))) nil) None)\n    (Expr (Call (Attribute (Name &m:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Name &m:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgNDhd None) s_format Load)\n                  (list (_starred_content (Name &i:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) (/seq (AugAssign (Subscript (Name %1 Load) (_slice_content (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil)) Store) Add (Constant i1 None))) (/seq) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None)))) nil) (/seq (AugAssign (Subscript (Name %1 Load) (_slice_content (BinOp (Name %3 Load) Add (Constant i1 None))) Store) Add #1) ?0 (If #2 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %3 Load)) (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &size:0 Store)) (Constant i200100 None) None) (Assign (list (Name &total:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &size:0 Load))) nil) nil i0))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (AugAssign (Subscript (Name &total:0 Load) (_slice_content (Name &s:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &size:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (BinOp (Subscript (Name &total:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Constant i2 None)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant i0 None))) nil))) (/seq)) (AugAssign (Subscript (Name &total:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Add (BinOp (Subscript (Name &total:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Constant i2 None)))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Constant i200020 None) None) (Assign (list (Name &a:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) None) (/splice (fn_1 (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) RShift (Constant i1 None)) (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) BitAnd (Constant i1 None)) &a:0 &_:0 &i:0 &N:0 /nothing))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Constant i200020 None) None) (Assign (list (Name &a:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Name &n:0 Load) (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Constant i2 None)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) &a:0 &_:0 &i:0 &N:0 (AugAssign (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store) BitAnd (Constant i1 None))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &s:0 Store) Add (BinOp (Constant i1 None) LShift (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))) (/seq) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (While (Name &s:0 Load) (/seq (If (BinOp (Name &s:0 Load) BitAnd (Constant i1 None)) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq)) (AugAssign (Name &s:0 Store) RShift (Constant i1 None)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (For (Name &e:0 Store) (Name &ans:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:0 Load)) (_starred_content (Constant i0 None))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &m:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &i:0 Load)) (list In) (list (Name &m:0 Load))) (/seq (Expr (Call (Attribute (Name &m:0 Load) s_remove Load) (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &i:0 Load)))) nil)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &m:0 Load) s_add Load) (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &i:0 Load)))) nil)) Break))) (/seq))) (/seq) None) (Assign (list (Name &m:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &m:0 Load))) nil) None) (Expr (Call (Attribute (Name &m:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Name &m:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgNDhd None) s_format Load) (list (_starred_content (Name &i:0 Load))) nil))) nil))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &a:0 Load) s_split Load) nil nil) None)\n        (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) FloorDiv (Constant i2 None)))) nil)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &b:0 Load) (_slice_content (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Load)\n                    (list Eq)\n                    (list (Constant s_lu None))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &b:0 Load)\n                      (_slice_content (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None)))\n                      Load\n                    )\n                    (list Eq)\n                    (list (Constant s_ru None))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &b:0 Load) (_slice_content (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Load)\n                    (list Eq)\n                    (list (Constant s_ru None))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &b:0 Load)\n                      (_slice_content (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None)))\n                      Load\n                    )\n                    (list Eq)\n                    (list (Constant s_lu None))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &b:0 Load) (_slice_content (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Load)\n                    (list Eq)\n                    (list (Constant s_ld None))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &b:0 Load)\n                      (_slice_content (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None)))\n                      Load\n                    )\n                    (list Eq)\n                    (list (Constant s_rd None))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &b:0 Load) (_slice_content (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Load)\n                    (list Eq)\n                    (list (Constant s_rd None))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &b:0 Load)\n                      (_slice_content (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None)))\n                      Load\n                    )\n                    (list Eq)\n                    (list (Constant s_ld None))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &f:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_str Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (If\n              (Compare\n                (BinOp (BinOp (Name &i:0 Load) Add (Constant i1 None)) Mod (Constant i2 None))\n                (list Eq)\n                (list (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Eq)\n                        (list (Constant s_lu None))\n                      )\n                      (Compare\n                        (Subscript\n                          (Name &f:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Constant s_ru None))\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Eq)\n                        (list (Constant s_ru None))\n                      )\n                      (Compare\n                        (Subscript\n                          (Name &f:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Constant s_lu None))\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Eq)\n                        (list (Constant s_ld None))\n                      )\n                      (Compare\n                        (Subscript\n                          (Name &f:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Constant s_rd None))\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Eq)\n                        (list (Constant s_rd None))\n                      )\n                      (Compare\n                        (Subscript\n                          (Name &f:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Constant s_ld None))\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant s_0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &line:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign\n          (list (Name &qs:0 Store))\n          (Call (Attribute (Name &line:0 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil)\n          None\n        )\n        (Assign (list (Name &up:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &down:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &q:0 Store)\n          (Name &qs:0 Load)\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &q:0 Load) (list Eq) (list (Constant s_lu None)))\n                  (Compare (Name &q:0 Load) (list Eq) (list (Constant s_ru None)))\n                )\n              )\n              (/seq\n                (AugAssign (Name &up:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &down:0 Store)) (Constant i0 None) None)\n              )\n              (/seq\n                (AugAssign (Name &down:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &up:0 Store)) (Constant i0 None) None)\n              )\n            )\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &up:0 Load) (list Eq) (list (Constant i2 None)))\n                  (Compare (Name &down:0 Load) (list Eq) (list (Constant i2 None)))\n                )\n              )\n              (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &lup:0 Store))\n                (_starred_content (Name &rup:0 Store))\n                (_starred_content (Name &up:0 Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Constant False None))\n              (_starred_content (Constant False None))\n              (_starred_content (Constant False None))\n            )\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &s:0 Store)\n          (Name &l:0 Load)\n          (/seq\n            (If\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant s_lu None)))\n              (/seq (Assign (list (Name &lup:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n            (If\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant s_ru None)))\n              (/seq (Assign (list (Name &rup:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n            (If\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant s_ld None)))\n              (/seq (Assign (list (Name &lup:0 Store)) (Constant False None) None))\n              (/seq)\n            )\n            (If\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant s_rd None)))\n              (/seq (Assign (list (Name &rup:0 Store)) (Constant False None) None))\n              (/seq)\n            )\n            (If\n              (BoolOp And (list (Name &lup:0 Load) (Name &rup:0 Load)))\n              (/seq\n                (If\n                  (UnaryOp Not (Name &up:0 Load))\n                  (/seq (AugAssign (Name &res:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n                (Assign (list (Name &up:0 Store)) (Constant True None) None)\n              )\n              (/seq)\n            )\n            (If\n              (BoolOp And (list (UnaryOp Not (Name &lup:0 Load)) (UnaryOp Not (Name &rup:0 Load))))\n              (/seq\n                (If (Name &up:0 Load) (/seq (AugAssign (Name &res:0 Store) Add (Constant i1 None))) (/seq))\n                (Assign (list (Name &up:0 Store)) (Constant False None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_exit Load) nil nil)))\n          (/seq)\n        )\n        (Assign\n          (list (Name &l0:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_str Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &l:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &r:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &k:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &x:0 Store)\n          (Name &l0:0 Load)\n          (/seq\n            (If\n              (Compare (Name &x:0 Load) (list Eq) (list (Constant s_lu None)))\n              (/seq (Assign (list (Name &l:0 Store)) (Constant i1 None) None))\n              (/seq\n                (If\n                  (Compare (Name &x:0 Load) (list Eq) (list (Constant s_ld None)))\n                  (/seq (Assign (list (Name &l:0 Store)) (Constant i0 None) None))\n                  (/seq\n                    (If\n                      (Compare (Name &x:0 Load) (list Eq) (list (Constant s_ru None)))\n                      (/seq (Assign (list (Name &r:0 Store)) (Constant i1 None) None))\n                      (/seq (Assign (list (Name &r:0 Store)) (Constant i0 None) None))\n                    )\n                  )\n                )\n              )\n            )\n            (If\n              (Compare\n                (BinOp (BinOp (Name &k:0 Load) Add (Name &l:0 Load)) Add (Name &r:0 Load))\n                (list Eq)\n                (list (Constant i3 None))\n              )\n              (/seq\n                (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n                (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (BinOp (Name &k:0 Load) Add (Name &l:0 Load)) Add (Name &r:0 Load))\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n                    (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &N:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &answer:1 Store)) (List nil Load) None)\n        (While\n          (Compare (Name &N:1 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &cmd:1 Store))\n              (ListComp\n                (Name &i:2 Load)\n                (list\n                  (comprehension\n                    (Name &i:2 Store)\n                    (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n            (Assign (list (Name &g_flag:1 Store)) (Constant True None) None)\n            (Assign\n              (list (Name &p:1 Store))\n              (List (list (_starred_content (Constant s_ld None)) (_starred_content (Constant s_rd None))) Load)\n              None\n            )\n            (For\n              (Name &c:1 Store)\n              (Name &cmd:1 Load)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s_l None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &p:1 Load) (_slice_content (Constant i0 None)) Store))\n                      (Name &c:1 Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &p:1 Load) (_slice_content (Constant i1 None)) Store))\n                      (Name &c:1 Load)\n                      None\n                    )\n                  )\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Name &g_flag:1 Load)\n                      (Compare\n                        (Subscript (Name &p:1 Load) (_slice_content (Constant i0 None)) Load)\n                        (list Eq)\n                        (list (Constant s_lu None))\n                      )\n                      (Compare\n                        (Subscript (Name &p:1 Load) (_slice_content (Constant i1 None)) Load)\n                        (list Eq)\n                        (list (Constant s_ru None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &g_flag:1 Store)) (Constant False None) None)\n                    (AugAssign (Name &ans:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (UnaryOp Not (Name &g_flag:1 Load))\n                      (Compare\n                        (Subscript (Name &p:1 Load) (_slice_content (Constant i0 None)) Load)\n                        (list Eq)\n                        (list (Constant s_ld None))\n                      )\n                      (Compare\n                        (Subscript (Name &p:1 Load) (_slice_content (Constant i1 None)) Load)\n                        (list Eq)\n                        (list (Constant s_rd None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &g_flag:1 Store)) (Constant True None) None)\n                    (AugAssign (Name &ans:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr\n              (Call (Attribute (Name &answer:1 Load) s_append Load) (list (_starred_content (Name &ans:1 Load))) nil)\n            )\n            (Assign\n              (list (Name &N:1 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_starred (Starred (Name &answer:1 Load) Load)))\n            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (UnaryOp Not (Name &n:0 Load)) (/seq Break) (/seq))\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &pos:0 Store))\n          (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (Assign (list (Name &isdown:0 Store)) (Constant True None) None)\n        (Assign (list (Name &score:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &l:0 Load)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list Eq) (list (Constant s_lu None)))\n                  (Compare\n                    (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Store)\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &i:0 Load) (list Eq) (list (Constant s_ru None)))\n                      (Compare\n                        (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Load)\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Store)\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                  (/seq\n                    (If\n                      (BoolOp\n                        And\n                        (list\n                          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_ld None)))\n                          (Compare\n                            (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Load)\n                            (list Gt)\n                            (list (Constant i0 None))\n                          )\n                        )\n                      )\n                      (/seq\n                        (AugAssign\n                          (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Store)\n                          Sub\n                          (Constant i1 None)\n                        )\n                      )\n                      (/seq\n                        (If\n                          (BoolOp\n                            And\n                            (list\n                              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_rd None)))\n                              (Compare\n                                (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Load)\n                                (list Gt)\n                                (list (Constant i0 None))\n                              )\n                            )\n                          )\n                          (/seq\n                            (AugAssign\n                              (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Store)\n                              Sub\n                              (Constant i1 None)\n                            )\n                          )\n                          (/seq)\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Name &isdown:0 Load)\n                  (Compare\n                    (Name &pos:0 Load)\n                    (list Eq)\n                    (list\n                      (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load)\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign (list (Name &isdown:0 Store)) (Constant False None) None)\n                (AugAssign (Name &score:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (UnaryOp Not (Name &isdown:0 Load))\n                      (Compare\n                        (Name &pos:0 Load)\n                        (list Eq)\n                        (list\n                          (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n                        )\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &isdown:0 Store)) (Constant True None) None)\n                    (AugAssign (Name &score:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &status:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n        (Assign (list (Name &point:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &fn:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_list Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &f:0 Store)\n          (Name &fn:0 Load)\n          (/seq\n            (Assign\n              (list (Name &status:0 Store))\n              (IfExp\n                (Compare\n                  (Subscript (Name &f:0 Load) (_slice_content (Constant i1 None)) Load)\n                  (list Eq)\n                  (list (Constant s_u None))\n                )\n                (BinOp (Name &status:0 Load) Add (Constant i1 None))\n                (BinOp (Name &status:0 Load) Sub (Constant i1 None))\n              )\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &flag:0 Load) (list Eq) (list (Constant False None)))\n                  (Compare (Name &status:0 Load) (list Eq) (list (Constant i2 None)))\n                )\n              )\n              (/seq\n                (AugAssign (Name &point:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n              )\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None)))\n                  (Compare (Name &status:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (AugAssign (Name &point:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &point:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_str Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &l:0 Store) (Name &r:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &q:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_lu None))\n              )\n              (/seq (Assign (list (Name &l:0 Store)) (Constant i1 None) None))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_ru None))\n                  )\n                  (/seq (Assign (list (Name &r:0 Store)) (Constant i1 None) None))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Eq)\n                        (list (Constant s_ld None))\n                      )\n                      (/seq (Assign (list (Name &l:0 Store)) (Constant i0 None) None))\n                      (/seq (Assign (list (Name &r:0 Store)) (Constant i0 None) None))\n                    )\n                  )\n                )\n              )\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &l:0 Load) (list Eq Eq) (list (Name &r:0 Load) (Constant i1 None)))\n                  (Compare (Name &q:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &q:0 Store)) (Constant i1 None) None)\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &l:0 Load) (list Eq Eq) (list (Name &r:0 Load) (Constant i0 None)))\n                      (Compare (Name &q:0 Load) (list Eq) (list (Constant i1 None)))\n                    )\n                  )\n                  (/seq\n                    (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n                    (Assign (list (Name &q:0 Store)) (Constant i0 None) None)\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &src:0 Store))\n          (Call\n            (Name g_list Load)\n            (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ru:0 Store) (Name &lu:0 Store) (Name &both:0 Store)) (Constant False None) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &f:0 Store)\n          (Name &src:0 Load)\n          (/seq\n            (If\n              (Compare (Name &f:0 Load) (list Eq) (list (Constant s_ru None)))\n              (/seq (Assign (list (Name &ru:0 Store)) (Constant True None) None))\n              (/seq\n                (If\n                  (Compare (Name &f:0 Load) (list Eq) (list (Constant s_lu None)))\n                  (/seq (Assign (list (Name &lu:0 Store)) (Constant True None) None))\n                  (/seq\n                    (If\n                      (Compare (Name &f:0 Load) (list Eq) (list (Constant s_rd None)))\n                      (/seq (Assign (list (Name &ru:0 Store)) (Constant False None) None))\n                      (/seq (Assign (list (Name &lu:0 Store)) (Constant False None) None))\n                    )\n                  )\n                )\n              )\n            )\n            (If\n              (Compare (Name &ru:0 Load) (list Eq Eq) (list (Name &lu:0 Load) (UnaryOp Not (Name &both:0 Load))))\n              (/seq\n                (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &both:0 Store)) (UnaryOp Not (Name &both:0 Load)) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (If (BoolOp And (list (Compare #1 (list Eq) (list (Constant s_lu None))) (Compare #0 (list Eq) (list (Constant s_ru None))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare #1 (list Eq) (list (Constant s_ru None))) (Compare #0 (list Eq) (list (Constant s_lu None))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare #1 (list Eq) (list (Constant s_ld None))) (Compare #0 (list Eq) (list (Constant s_rd None))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare #1 (list Eq) (list (Constant s_rd None))) (Compare #0 (list Eq) (list (Constant s_ld None))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &a:0 Load) s_split Load) nil nil) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) FloorDiv (Constant i2 None)))) nil) (fn_1 (Subscript (Name &b:0 Load) (_slice_content (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None))) Load) (Subscript (Name &b:0 Load) (_slice_content (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Load) &x:0) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &f:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (BinOp (Name &i:0 Load) Add (Constant i1 None)) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (fn_1 (Subscript (Name &f:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load) &cnt:0) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant s_0 None))) (/seq Break) (/seq)) (Assign (list (Name &line:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &qs:0 Store)) (Call (Attribute (Name &line:0 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &up:0 Store)) (Constant i0 None) None) (Assign (list (Name &down:0 Store)) (Constant i0 None) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &q:0 Store) (Name &qs:0 Load) (/seq (If (BoolOp Or (list (Compare (Name &q:0 Load) (list Eq) (list (Constant s_lu None))) (Compare (Name &q:0 Load) (list Eq) (list (Constant s_ru None))))) (/seq (AugAssign (Name &up:0 Store) Add (Constant i1 None)) (Assign (list (Name &down:0 Store)) (Constant i0 None) None)) (/seq (AugAssign (Name &down:0 Store) Add (Constant i1 None)) (Assign (list (Name &up:0 Store)) (Constant i0 None) None))) (If (BoolOp Or (list (Compare (Name &up:0 Load) (list Eq) (list (Constant i2 None))) (Compare (Name &down:0 Load) (list Eq) (list (Constant i2 None))))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &lup:0 Store)) (_starred_content (Name &rup:0 Store)) (_starred_content (Name &up:0 Store))) Store)) (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (For (Name &s:0 Store) (Name &l:0 Load) (/seq (If (Compare (Name &s:0 Load) (list Eq) (list (Constant s_lu None))) (/seq (Assign (list (Name &lup:0 Store)) (Constant True None) None)) (/seq)) (If (Compare (Name &s:0 Load) (list Eq) (list (Constant s_ru None))) (/seq (Assign (list (Name &rup:0 Store)) (Constant True None) None)) (/seq)) (If (Compare (Name &s:0 Load) (list Eq) (list (Constant s_ld None))) (/seq (Assign (list (Name &lup:0 Store)) (Constant False None) None)) (/seq)) (If (Compare (Name &s:0 Load) (list Eq) (list (Constant s_rd None))) (/seq (Assign (list (Name &rup:0 Store)) (Constant False None) None)) (/seq)) (If (BoolOp And (list (Name &lup:0 Load) (Name &rup:0 Load))) (/seq (If (UnaryOp Not (Name &up:0 Load)) (/seq (AugAssign (Name &res:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &up:0 Store)) (Constant True None) None)) (/seq)) (If (BoolOp And (list (UnaryOp Not (Name &lup:0 Load)) (UnaryOp Not (Name &rup:0 Load)))) (/seq (If (Name &up:0 Load) (/seq (AugAssign (Name &res:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &up:0 Store)) (Constant False None) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &l0:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &l:0 Store)) (Constant i0 None) None) (Assign (list (Name &r:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (Constant i1 None) None) (For (Name &x:0 Store) (Name &l0:0 Load) (/seq (If (Compare (Name &x:0 Load) (list Eq) (list (Constant s_lu None))) (/seq (Assign (list (Name &l:0 Store)) (Constant i1 None) None)) (/seq (If (Compare (Name &x:0 Load) (list Eq) (list (Constant s_ld None))) (/seq (Assign (list (Name &l:0 Store)) (Constant i0 None) None)) (/seq (If (Compare (Name &x:0 Load) (list Eq) (list (Constant s_ru None))) (/seq (Assign (list (Name &r:0 Store)) (Constant i1 None) None)) (/seq (Assign (list (Name &r:0 Store)) (Constant i0 None) None))))))) (If (Compare (BinOp (BinOp (Name &k:0 Load) Add (Name &l:0 Load)) Add (Name &r:0 Load)) (list Eq) (list (Constant i3 None))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) (/seq (If (Compare (BinOp (BinOp (Name &k:0 Load) Add (Name &l:0 Load)) Add (Name &r:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &N:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &answer:1 Store)) (List nil Load) None) (While (Compare (Name &N:1 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &cmd:1 Store)) (ListComp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (Assign (list (Name &g_flag:1 Store)) (Constant True None) None) (Assign (list (Name &p:1 Store)) (List (list (_starred_content (Constant s_ld None)) (_starred_content (Constant s_rd None))) Load) None) (For (Name &c:1 Store) (Name &cmd:1 Load) (/seq (If (Compare (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_l None))) (/seq (Assign (list (Subscript (Name &p:1 Load) (_slice_content (Constant i0 None)) Store)) (Name &c:1 Load) None)) (/seq (Assign (list (Subscript (Name &p:1 Load) (_slice_content (Constant i1 None)) Store)) (Name &c:1 Load) None))) (If (BoolOp And (list (Name &g_flag:1 Load) (Compare (Subscript (Name &p:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_lu None))) (Compare (Subscript (Name &p:1 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant s_ru None))))) (/seq (Assign (list (Name &g_flag:1 Store)) (Constant False None) None) (AugAssign (Name &ans:1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (UnaryOp Not (Name &g_flag:1 Load)) (Compare (Subscript (Name &p:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_ld None))) (Compare (Subscript (Name &p:1 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant s_rd None))))) (/seq (Assign (list (Name &g_flag:1 Store)) (Constant True None) None) (AugAssign (Name &ans:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &answer:1 Load) s_append Load) (list (_starred_content (Name &ans:1 Load))) nil)) (Assign (list (Name &N:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &answer:1 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (UnaryOp Not (Name &n:0 Load)) (/seq Break) (/seq)) (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &pos:0 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &isdown:0 Store)) (Constant True None) None) (Assign (list (Name &score:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_lu None))) (Compare (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (AugAssign (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_ru None))) (Compare (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (AugAssign (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_ld None))) (Compare (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Load) (list Gt) (list (Constant i0 None))))) (/seq (AugAssign (Subscript (Name &pos:0 Load) (_slice_content (Constant i0 None)) Store) Sub (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_rd None))) (Compare (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Load) (list Gt) (list (Constant i0 None))))) (/seq (AugAssign (Subscript (Name &pos:0 Load) (_slice_content (Constant i1 None)) Store) Sub (Constant i1 None))) (/seq)))))))) (If (BoolOp And (list (Name &isdown:0 Load) (Compare (Name &pos:0 Load) (list Eq) (list (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load))))) (/seq (Assign (list (Name &isdown:0 Store)) (Constant False None) None) (AugAssign (Name &score:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (UnaryOp Not (Name &isdown:0 Load)) (Compare (Name &pos:0 Load) (list Eq) (list (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load))))) (/seq (Assign (list (Name &isdown:0 Store)) (Constant True None) None) (AugAssign (Name &score:0 Store) Add (Constant i1 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &status:0 Store)) (Constant i0 None) None) (Assign (list (Name &flag:0 Store)) (Constant False None) None) (Assign (list (Name &point:0 Store)) (Constant i0 None) None) (Assign (list (Name &fn:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_list Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (For (Name &f:0 Store) (Name &fn:0 Load) (/seq (Assign (list (Name &status:0 Store)) (IfExp (Compare (Subscript (Name &f:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant s_u None))) (BinOp (Name &status:0 Load) Add (Constant i1 None)) (BinOp (Name &status:0 Load) Sub (Constant i1 None))) None) (If (BoolOp And (list (Compare (Name &flag:0 Load) (list Eq) (list (Constant False None))) (Compare (Name &status:0 Load) (list Eq) (list (Constant i2 None))))) (/seq (AugAssign (Name &point:0 Store) Add (Constant i1 None)) (Assign (list (Name &flag:0 Store)) (Constant True None) None)) (/seq)) (If (BoolOp And (list (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None))) (Compare (Name &status:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (AugAssign (Name &point:0 Store) Add (Constant i1 None)) (Assign (list (Name &flag:0 Store)) (Constant False None) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &point:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (Assign (list (Name &l:0 Store) (Name &r:0 Store)) (Constant i0 None) None) (Assign (list (Name &q:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_lu None))) (/seq (Assign (list (Name &l:0 Store)) (Constant i1 None) None)) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_ru None))) (/seq (Assign (list (Name &r:0 Store)) (Constant i1 None) None)) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_ld None))) (/seq (Assign (list (Name &l:0 Store)) (Constant i0 None) None)) (/seq (Assign (list (Name &r:0 Store)) (Constant i0 None) None))))))) (If (BoolOp And (list (Compare (Name &l:0 Load) (list Eq Eq) (list (Name &r:0 Load) (Constant i1 None))) (Compare (Name &q:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)) (Assign (list (Name &q:0 Store)) (Constant i1 None) None)) (/seq (If (BoolOp And (list (Compare (Name &l:0 Load) (list Eq Eq) (list (Name &r:0 Load) (Constant i0 None))) (Compare (Name &q:0 Load) (list Eq) (list (Constant i1 None))))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)) (Assign (list (Name &q:0 Store)) (Constant i0 None) None)) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &src:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ru:0 Store) (Name &lu:0 Store) (Name &both:0 Store)) (Constant False None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &f:0 Store) (Name &src:0 Load) (/seq (If (Compare (Name &f:0 Load) (list Eq) (list (Constant s_ru None))) (/seq (Assign (list (Name &ru:0 Store)) (Constant True None) None)) (/seq (If (Compare (Name &f:0 Load) (list Eq) (list (Constant s_lu None))) (/seq (Assign (list (Name &lu:0 Store)) (Constant True None) None)) (/seq (If (Compare (Name &f:0 Load) (list Eq) (list (Constant s_rd None))) (/seq (Assign (list (Name &ru:0 Store)) (Constant False None) None)) (/seq (Assign (list (Name &lu:0 Store)) (Constant False None) None))))))) (If (Compare (Name &ru:0 Load) (list Eq Eq) (list (Name &lu:0 Load) (UnaryOp Not (Name &both:0 Load)))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (Assign (list (Name &both:0 Store)) (UnaryOp Not (Name &both:0 Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n      (Tuple\n        (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &j:0 Load)))\n                  (Compare\n                    (BinOp\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              Sub\n                              (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Mod\n                      (BinOp (Name &N:0 Load) Sub (Constant i1 None))\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n                  (Tuple (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) Load)\n                  None\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &x:0 Load)) Load))\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &y:0 Load)) Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &num:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &comb:0 Store)\n      (Call\n        (Attribute (Name g_itertools Load) s_combinations Load)\n        (list (_starred_content (Name &num:0 Load)) (_starred_content (Constant i2 None)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &diff:0 Store))\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &comb:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Sub\n                  (Subscript (Name &comb:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp (Name &diff:0 Load) Mod (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Subscript (Name &comb:0 Load) (_slice_content (Constant i0 None)) Load))\n                  (_starred_content (Subscript (Name &comb:0 Load) (_slice_content (Constant i1 None)) Load))\n                )\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &li:1 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (For\n              (Name &j:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                  (_starred_content (Name &n:1 Load))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (Call\n                        (Name g_abs Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Subscript (Name &li:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                              Sub\n                              (Subscript (Name &li:1 Load) (_slice_content (Name &j:1 Load)) Load)\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Mod\n                      (BinOp (Name &n:1 Load) Sub (Constant i1 None))\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (BinOp\n                                (Call\n                                  (Name g_str Load)\n                                  (list\n                                    (_starred_content\n                                      (Subscript (Name &li:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                                    )\n                                  )\n                                  nil\n                                )\n                                Add\n                                (Constant s-WzMyXQ== None)\n                              )\n                              Add\n                              (Call\n                                (Name g_str Load)\n                                (list\n                                  (_starred_content\n                                    (Subscript (Name &li:1 Load) (_slice_content (Name &j:1 Load)) Load)\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Return None)\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &solve:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Name &a:1 Load)\n          (/seq\n            (For\n              (Name &j:1 Store)\n              (Name &a:1 Load)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &i:1 Load) (list NotEq) (list (Name &j:1 Load)))\n                      (Compare\n                        (BinOp\n                          (Call\n                            (Name g_abs Load)\n                            (list (_starred_content (BinOp (Name &i:1 Load) Sub (Name &j:1 Load))))\n                            nil\n                          )\n                          Mod\n                          (BinOp (Name &n:1 Load) Sub (Constant i1 None))\n                        )\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &j:1 Load)))\n                        nil\n                      )\n                    )\n                    (Return (Constant i0 None))\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &num:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Attribute (Name g_itertools Load) s_combinations Load)\n        (list (_starred_content (Name &num:0 Load)) (_starred_content (Constant i2 None)))\n        nil\n      )\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &j:0 Load)))) nil)\n              Mod\n              (BinOp (Name &N:0 Load) Sub (Constant i1 None))\n            )\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load)))\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &num:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &num:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq Break)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp\n                        (Subscript\n                          (Name &num:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Name &j:0 Load)))\n                          Load\n                        )\n                        Sub\n                        (Subscript (Name &num:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      )\n                      Mod\n                      (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (_starred_content (Subscript (Name &num:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                          (_starred_content\n                            (Subscript\n                              (Name &num:0 Load)\n                              (_slice_content (BinOp (Name &i:0 Load) Add (Name &j:0 Load)))\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (BinOp\n                      (Call\n                        (Name g_abs Load)\n                        (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &j:0 Load))))\n                        nil\n                      )\n                      Mod\n                      (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &j:0 Load)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load)))\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_quit Load) nil nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list NotEq) (list (Name &j:0 Load))) (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)))) nil) Mod (BinOp (Name &N:0 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Tuple (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) Load) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &x:0 Load)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &y:0 Load)) Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (/splice (fn_1 &n:0 &num:0)) (For (Name &comb:0 Store) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Name &num:0 Load)) (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Name &diff:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &comb:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &comb:0 Load) (_slice_content (Constant i1 None)) Load)))) nil) None) (If (Compare (BinOp (Name &diff:0 Load) Mod (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &comb:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &comb:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &li:1 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil) (list (comprehension (Name &_:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &li:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &li:1 Load) (_slice_content (Name &j:1 Load)) Load)))) nil) Mod (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Call (Name g_str Load) (list (_starred_content (Subscript (Name &li:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &li:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil)))) nil)) (Return None)) (/seq))) (/seq) None)) (/seq) None)) nil None None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 &n:1 &a:1)) (For (Name &i:1 Store) (Name &a:1 Load) (/seq (For (Name &j:1 Store) (Name &a:1 Load) (/seq (If (BoolOp And (list (Compare (Name &i:1 Load) (list NotEq) (list (Name &j:1 Load))) (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Name &j:1 Load)))) nil) Mod (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &j:1 Load))) nil)) (Return (Constant i0 None))) (/seq))) (/seq) None)) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (/splice (fn_1 &N:0 &num:0)) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Name &num:0 Load)) (_starred_content (Constant i2 None))) nil) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store) (Name &a:0 Load) (/seq (If (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &j:0 Load)))) nil) Mod (BinOp (Name &N:0 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &num:0)) (Expr (Call (Attribute (Name &num:0 Load) s_sort Load) nil nil)) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq)) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)))) nil) (/seq (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &num:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Name &j:0 Load))) Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Name &i:0 Load)) Load)) Mod (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &num:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &num:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Name &j:0 Load))) Load))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq))))) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0)) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (For (Name &j:0 Store) (Name &a:0 Load) (/seq (If (BoolOp And (list (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &j:0 Load)))) nil) Mod (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (list Eq) (list (Constant i0 None))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &j:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) nil)) (Expr (Call (Name g_quit Load) nil nil))) (/seq))) (/seq) None)) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &indexMin:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &start:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &indexMin:0 Store))\n          (BinOp\n            (Call\n              (Attribute\n                (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &start:0 Load) None None)) Load)\n                s_index\n                Load\n              )\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (_starred_content\n                        (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &start:0 Load) None None)) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            Add\n            (Name &start:0 Load)\n          )\n          None\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &start:0 Load)) Store))\n                (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &indexMin:0 Load)) Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &indexMin:0 Load)) Load))\n              (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &start:0 Load)) Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &start:0 Load) (list NotEq) (list (Name &indexMin:0 Load)))\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &s:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_starred (Starred (Name &A:0 Store) Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &j:0 Store))\n          (BinOp\n            (Call\n              (Attribute\n                (Subscript (Name &A:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load)\n                s_index\n                Load\n              )\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (_starred_content\n                        (Subscript (Name &A:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            Add\n            (Name &i:0 Load)\n          )\n          None\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &j:0 Load)))\n          (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load)\n                (list Gt)\n                (list (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &minj:0 Load) (list NotEq) (list (Name &i:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n                  (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &N:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &minj:0 Load) (list NotEq) (list (Name &i:0 Load)))\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &minv:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &minv:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minv:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &minv:0 Load) (list NotEq) (list (Name &i:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minv:0 Load)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minv:0 Load)) Load))\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &sw:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &n:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &sw:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list (_starred_content (Name g_str Load)) (_starred_content (Name &a:0 Load)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &sw:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &times:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &N:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load)))\n          (/seq (AugAssign (Name &times:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &times:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign (list (Name &min_j:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &n:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &min_j:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &min_j:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &min_j:0 Load) (list NotEq) (list (Name &i:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &min_j:0 Load)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &min_j:0 Load)) Load))\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load)\n                (list Gt)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &b:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Store))\n                    (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list (_starred_content (Name g_str Load)) (_starred_content (Name &a:0 Load)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %3 Store)) (Constant i0 None) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content #3)) nil) (/seq (Assign (list (Name %5 Store)) (Name %4 Load) None) (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content #1) (_starred_content (Name %1 Load))) nil) (/seq (If #0 (/seq (Assign (list (Name %5 Store)) (Name %6 Load) None)) (/seq))) (/seq) None) (If #2 (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Store)) (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %5 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %5 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Load))) Load) None) (AugAssign (Name %3 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name %2 Load) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name %3 Load))) nil)))",
        "sym_arity": 6,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 4,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &indexMin:0 Store)) (Constant i0 None) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &start:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &indexMin:0 Store)) (BinOp (Call (Attribute (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &start:0 Load) None None)) Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &start:0 Load) None None)) Load))) nil))) nil) Add (Name &start:0 Load)) None) (Assign (list (Tuple (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &start:0 Load)) Store)) (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &indexMin:0 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &indexMin:0 Load)) Load)) (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &start:0 Load)) Load))) Load) None) (If (Compare (Name &start:0 Load) (list NotEq) (list (Name &indexMin:0 Load))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &s:0 Load) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_starred (Starred (Name &A:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &j:0 Store)) (BinOp (Call (Attribute (Subscript (Name &A:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load) s_index Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Subscript (Name &A:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load))) nil))) nil) Add (Name &i:0 Load)) None) (Assign (list (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &j:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (fn_1 (Compare (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load) (list Gt) (list (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load))) (Name &i:0 Load) (Compare (Name &minj:0 Load) (list NotEq) (list (Name &i:0 Load))) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) &n:0 &A:0 &cnt:0 &i:0 &minj:0 &j:0) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &N:0 Load))) nil) (/seq (If (Compare (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))) (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None)) (/seq))) (/seq) None) (If (Compare (Name &minj:0 Load) (list NotEq) (list (Name &i:0 Load))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (fn_1 (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &minv:0 Load)) Load))) (Name &i:0 Load) (Compare (Name &minv:0 Load) (list NotEq) (list (Name &i:0 Load))) (Name &n:0 Load) &n:0 &a:0 &cnt:0 &i:0 &minv:0 &j:0) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &sw:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))) (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None)) (/seq))) (/seq) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None) (AugAssign (Name &sw:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &a:0 Load))) nil))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &sw:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &times:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &N:0 Load))) nil) (/seq (If (Compare (Subscript (Name &A:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load))) (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None)) (/seq))) (/seq) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load))) (/seq (AugAssign (Name &times:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &minj:0 Load)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &times:0 Load))) nil))) nil)",
      "(Module (fn_1 (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &min_j:0 Load)) Load))) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Compare (Name &min_j:0 Load) (list NotEq) (list (Name &i:0 Load))) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) &n:0 &a:0 &count:0 &i:0 &min_j:0 &j:0) nil)",
      "(Module (fn_1 (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load))) (Name &i:0 Load) (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load))) (Name &n:0 Load) &n:0 &a:0 &b:0 &i:0 &minj:0 &j:0) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &minj:0 Store)) (Name &i:0 Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))) (/seq (Assign (list (Name &minj:0 Store)) (Name &j:0 Load) None)) (/seq))) (/seq) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &minj:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Store)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &minj:0 Load)) Load))) Load) None) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &a:0 Load))) nil))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &cs:0 Store))\n      (ListComp\n        (Tuple (list (_starred_content (Name &s:1 Load)) (_starred_content (Name &k:2 Load))) Load)\n        (list\n          (comprehension\n            (Name &s:1 Store)\n            (List\n              (list\n                (_starred_content (Constant s_S None))\n                (_starred_content (Constant s_H None))\n                (_starred_content (Constant s_C None))\n                (_starred_content (Constant s_D None))\n              )\n              Load\n            )\n            nil\n            i0\n          )\n          (comprehension\n            (Name &k:2 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cs:0 Load) s_remove Load)\n            (list\n              (_starred_content\n                (Tuple\n                  (list\n                    (_starred_content (Name &s:0 Load))\n                    (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil))\n                  )\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &k:0 Store))) Store)\n      (Name &cs:0 Load)\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &k:0 Load))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &E:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (ListComp\n          (Constant i0 None)\n          (list\n            (comprehension\n              (Name &j:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i14 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Attribute (Name &E:0 Load) s_index Load) (list (_starred_content (Name &a:0 Load))) nil)\n          None\n        )\n        (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &b:0 Load))) nil) None)\n        (Assign\n          (list\n            (Subscript\n              (Subscript (Name &x:0 Load) (_slice_content (Name &a:0 Load)) Load)\n              (_slice_content (Name &b:0 Load))\n              Store\n            )\n          )\n          (Constant i1 None)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil)\n      (/seq\n        (For\n          (Name &c:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &x:0 Load) (_slice_content (Name &z:0 Load)) Load)\n                  (_slice_content (Name &c:0 Load))\n                  Load\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (JoinedStr\n                          (list\n                            (FormattedValue\n                              (Subscript (Name &E:0 Load) (_slice_content (Name &z:0 Load)) Load)\n                              i-1\n                              None\n                            )\n                            (Constant s-WzMyXQ== None)\n                            (FormattedValue (Name &c:0 Load) i-1 None)\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &remind:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &remind:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &egara:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s-WzgzLCAzMl0= None))\n          (_starred_content (Constant s-WzcyLCAzMl0= None))\n          (_starred_content (Constant s-WzY3LCAzMl0= None))\n          (_starred_content (Constant s-WzY4LCAzMl0= None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &egara:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Add\n                  (Call (Name g_str Load) (list (_starred_content (Name &j:0 Load))) nil)\n                )\n                (list NotIn)\n                (list (Name &remind:0 Load))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Subscript (Name &egara:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          Add\n                          (Call (Name g_str Load) (list (_starred_content (Name &j:0 Load))) nil)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (Assign\n      (list (Name &s:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (ListComp\n        (Call (Name g_str Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (BinOp (BinOp (Name &x:2 Load) Add (Constant s-WzMyXQ== None)) Add (Name &y:2 Load))\n        (list\n          (comprehension\n            (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &y:2 Store))) Store)\n            (Call\n              (Attribute (Name g_itertools Load) s_product Load)\n              (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &c:0 Load) s_remove Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &c:0 Load) (list NotEq) (list (List nil Load)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Name &c:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &cards:0 Store))\n      (Dict\n        (list (Constant s_S None) (Constant s_H None) (Constant s_C None) (Constant s_D None))\n        (list\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None))\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None))\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None))\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None))\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &num:0 Store))) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Subscript (Name &cards:0 Load) (_slice_content (Name &s:0 Load)) Load)\n              (_slice_content\n                (BinOp (Call (Name g_int Load) (list (_starred_content (Name &num:0 Load))) nil) Sub (Constant i1 None))\n              )\n              Store\n            )\n          )\n          (Constant i1 None)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (List\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i13 None))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Load\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Name &i:0 Load))\n                      (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &cards:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &mark:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &m:0 Store)\n      (Name &mark:0 Load)\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &cards:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (Name &m:0 Load) Add (Constant s-WzMyXQ== None))\n                      Add\n                      (Call (Name g_str Load) (list (_starred_content (Name &i:0 Load))) nil)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Expr (Call (Attribute (Name &cards:0 Load) s_remove Load) (list (_starred_content (Name &x:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &c:0 Store)\n      (Name &cards:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &cards:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq (AugAssign (Name &cards:0 Store) BitOr (Set (list (_starred_content (Call (Name g_input Load) nil nil))))))\n      (/seq)\n      None\n    )\n    (For\n      (Name &s:0 Store)\n      (List\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      (/seq\n        (For\n          (Name &n:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &needle:0 Store))\n              (BinOp\n                (BinOp (Name &s:0 Load) Add (Constant s-WzMyXQ== None))\n                Add\n                (Call (Name g_str Load) (list (_starred_content (Name &n:0 Load))) nil)\n              )\n              None\n            )\n            (If\n              (UnaryOp Not (Compare (Name &needle:0 Load) (list In) (list (Name &cards:0 Load))))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &needle:0 Load))) nil)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &card_list:0 Store))\n      (ListComp\n        (BinOp\n          (BinOp (Name &y:1 Load) Add (Constant s-WzMyXQ== None))\n          Add\n          (Call (Name g_str Load) (list (_starred_content (Name &x:2 Load))) nil)\n        )\n        (list\n          (comprehension (Name &y:1 Store) (Constant s_SHCD None) nil i0)\n          (comprehension\n            (Name &x:2 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list NotEq) (list (Constant i52 None)))\n      (/seq\n        (For\n          (Name &y:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &card_list:0 Load) s_remove Load)\n                (list (_starred_content (Call (Name g_input Load) nil nil)))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_starred (Starred (Name &card_list:0 Load) Load)))\n            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &card:0 Store)) (List nil Load) None)\n    (Assign (list (Name &card_m:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Tuple\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp\n                (BinOp (Name &i:0 Load) Add (Constant s-WzMyXQ== None))\n                Add\n                (Call (Name g_str Load) (list (_starred_content (Name &j:0 Load))) nil)\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &card:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &b:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Expr (Call (Attribute (Name &card:0 Load) s_remove Load) (list (_starred_content (Name &c:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &card:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &card:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &se:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &se:0 Load) s_add Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (For\n      (Name &suit:0 Store)\n      (List\n        (list\n          (_starred_content (Constant s_S None))\n          (_starred_content (Constant s_H None))\n          (_starred_content (Constant s_C None))\n          (_starred_content (Constant s_D None))\n        )\n        Load\n      )\n      (/seq\n        (For\n          (Name &rank:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (BinOp (Name &suit:0 Load) Add (Constant s-WzMyXQ== None))\n                  Add\n                  (Call (Name g_str Load) (list (_starred_content (Name &rank:0 Load))) nil)\n                )\n                (list NotIn)\n                (list (Name &se:0 Load))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &suit:0 Load)) (_starred_content (Name &rank:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &cs:0 Store)) (ListComp (Tuple (list (_starred_content (Name &s:1 Load)) (_starred_content (Name &k:2 Load))) Load) (list (comprehension (Name &s:1 Store) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) nil i0) (comprehension (Name &k:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) nil i0))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Attribute (Name &cs:0 Load) s_remove Load) (list (_starred_content (Tuple (list (_starred_content (Name &s:0 Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil))) Load))) nil))) (/seq) None) (For (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &k:0 Store))) Store) (Name &cs:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &k:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &E:0 Store)) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) None) (fn_1 &n:0) (Assign (list (Name &x:0 Store)) (ListComp (ListComp (Constant i0 None) (list (comprehension (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i14 None))) nil) nil i0))) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &E:0 Load) s_index Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &b:0 Load))) nil) None) (Assign (list (Subscript (Subscript (Name &x:0 Load) (_slice_content (Name &a:0 Load)) Load) (_slice_content (Name &b:0 Load)) Store)) (Constant i1 None) None)) (/seq) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil) (/seq (For (Name &c:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) (/seq (If (Compare (Subscript (Subscript (Name &x:0 Load) (_slice_content (Name &z:0 Load)) Load) (_slice_content (Name &c:0 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Subscript (Name &E:0 Load) (_slice_content (Name &z:0 Load)) Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Name &c:0 Load) i-1 None))))) nil))) (/seq))) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &remind:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &remind:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (Assign (list (Name &egara:0 Store)) (List (list (_starred_content (Constant s-WzgzLCAzMl0= None)) (_starred_content (Constant s-WzcyLCAzMl0= None)) (_starred_content (Constant s-WzY3LCAzMl0= None)) (_starred_content (Constant s-WzY4LCAzMl0= None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) (/seq (If (Compare (BinOp (Subscript (Name &egara:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Call (Name g_str Load) (list (_starred_content (Name &j:0 Load))) nil)) (list NotIn) (list (Name &remind:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Name &egara:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Call (Name g_str Load) (list (_starred_content (Name &j:0 Load))) nil)))) nil))) (/seq))) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (Assign (list (Name &s:0 Store)) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) None) (Assign (list (Name &n:0 Store)) (ListComp (Call (Name g_str Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (ListComp (BinOp (BinOp (Name &x:2 Load) Add (Constant s-WzMyXQ== None)) Add (Name &y:2 Load)) (list (comprehension (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &y:2 Store))) Store) (Call (Attribute (Name g_itertools Load) s_product Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Expr (Call (Attribute (Name &c:0 Load) s_remove Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (If (Compare (Name &c:0 Load) (list NotEq) (list (List nil Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Name &c:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &cards:0 Store)) (Dict (list (Constant s_S None) (Constant s_H None) (Constant s_C None) (Constant s_D None)) (list (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i13 None)))) None) (fn_1 &n:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &num:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Subscript (Subscript (Name &cards:0 Load) (_slice_content (Name &s:0 Load)) Load) (_slice_content (BinOp (Call (Name g_int Load) (list (_starred_content (Name &num:0 Load))) nil) Sub (Constant i1 None))) Store)) (Constant i1 None) None)) (/seq) None) (For (Name &i:0 Store) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i13 None))) nil) (/seq (If (Compare (Subscript (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))) nil))) (/seq))) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &cards:0 Store)) (List nil Load) None) (Assign (list (Name &mark:0 Store)) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) None) (For (Name &m:0 Store) (Name &mark:0 Load) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) (/seq (Expr (Call (Attribute (Name &cards:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &m:0 Load) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &i:0 Load))) nil)))) nil))) (/seq) None)) (/seq) None) (fn_1 &n:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Attribute (Name &cards:0 Load) s_remove Load) (list (_starred_content (Name &x:0 Load))) nil))) (/seq) None) (For (Name &c:0 Store) (Name &cards:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &cards:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &cards:0 Store) BitOr (Set (list (_starred_content (Call (Name g_input Load) nil nil)))))) (/seq) None) (For (Name &s:0 Store) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) (/seq (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) (/seq (Assign (list (Name &needle:0 Store)) (BinOp (BinOp (Name &s:0 Load) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &n:0 Load))) nil)) None) (If (UnaryOp Not (Compare (Name &needle:0 Load) (list In) (list (Name &cards:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &needle:0 Load))) nil))) (/seq))) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &card_list:0 Store)) (ListComp (BinOp (BinOp (Name &y:1 Load) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &x:2 Load))) nil)) (list (comprehension (Name &y:1 Store) (Constant s_SHCD None) nil i0) (comprehension (Name &x:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) nil i0))) None) (fn_1 &n:0) (If (Compare (Name &n:0 Load) (list NotEq) (list (Constant i52 None))) (/seq (For (Name &y:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &card_list:0 Load) s_remove Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &card_list:0 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &card:0 Store)) (List nil Load) None) (Assign (list (Name &card_m:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Tuple (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) (/seq (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &i:0 Load) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &j:0 Load))) nil)) None) (Expr (Call (Attribute (Name &card:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None)) (/seq) None) (fn_1 &b:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &b:0 Load))) nil) (/seq (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Attribute (Name &card:0 Load) s_remove Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &card:0 Load))) nil))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &card:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &se:0 Store)) (Call (Name g_set Load) nil nil) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (/seq (Expr (Call (Attribute (Name &se:0 Load) s_add Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (For (Name &suit:0 Store) (List (list (_starred_content (Constant s_S None)) (_starred_content (Constant s_H None)) (_starred_content (Constant s_C None)) (_starred_content (Constant s_D None))) Load) (/seq (For (Name &rank:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None))) nil) (/seq (If (Compare (BinOp (BinOp (Name &suit:0 Load) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &rank:0 Load))) nil)) (list NotIn) (list (Name &se:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &suit:0 Load)) (_starred_content (Name &rank:0 Load))) nil))) (/seq))) (/seq) None)) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (BinOp (Constant i2 None) Mult (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil))\n      None\n    )\n    (Assign (list (Name &z:0 Store)) (BinOp (Name &s:0 Load) Div (Name &n:0 Load)) None)\n    (Assign (list (Name &p:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n    (Assign\n      (list (Name &an:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (BinOp (Name &z:0 Load) Add (Constant i1 None)))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &an:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &summ:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (Assign (list (Name &maxx:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_max Load)\n        (list\n          (_starred_content (Name &maxx:0 Load))\n          (_starred_content\n            (BinOp\n              (BinOp (BinOp (Constant i2 None) Mult (Name &summ:0 Load)) FloorDiv (Name &n:0 Load))\n              Add\n              (Constant i1 None)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &each:0 Store)\n      (Name &arr:0 Load)\n      (/seq (Assign (list (Name &s:0 Store)) (BinOp (Name &s:0 Load) Add (Name &each:0 Load)) None))\n      (/seq)\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &ansv:0 Store))\n          (BinOp (BinOp (Name &m:0 Load) Mult (Name &n:0 Load)) Sub (Name &s:0 Load))\n          None\n        )\n        (If\n          (Compare (Name &ansv:0 Load) (list Gt) (list (Name &s:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil)) Break)\n          (/seq (Assign (list (Name &m:0 Store)) (BinOp (Name &m:0 Load) Add (Constant i1 None)) None))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil)\n      None\n    )\n    (Assign (list (Name &maks:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n              nil\n            )\n            (list Gt)\n            (list (Name &maks:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &maks:0 Store))\n              (Call\n                (Name g_int Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i0 None) (Name &n:0 Load) None)) Load)\n      None\n    )\n    (Assign (list (Name &sum:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Name &sum:0 Store)\n          Add\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Name &s:0 Store)\n          Add\n          (BinOp\n            (Name &maks:0 Load)\n            Sub\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n              nil\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (While\n      (Compare (Name &s:0 Load) (list LtE) (list (Name &sum:0 Load)))\n      (/seq\n        (AugAssign (Name &maks:0 Store) Add (Constant i1 None))\n        (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &s:0 Store)\n              Add\n              (BinOp\n                (Name &maks:0 Load)\n                Sub\n                (Call\n                  (Name g_int Load)\n                  (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &maks:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n    (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &f:0 Store))\n          (Call\n            (Name g_sum Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content\n                            (Lambda\n                              (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                              (Call\n                                (Name g_abs Load)\n                                (list (_starred_content (BinOp (Name &x:1 Load) Sub (Name &d:0 Load))))\n                                nil\n                              )\n                            )\n                          )\n                          (_starred_content (Name &l:0 Load))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (Name &f:0 Load)\n            (list Gt)\n            (list (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil))\n          )\n          (/seq Break)\n          (/seq (Assign (list (Name &d:0 Store)) (BinOp (Name &d:0 Load) Add (Constant i1 None)) None))\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &diff:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:1 Load)) Store))\n              (BinOp (Name &m:0 Load) Sub (Subscript (Name &l:0 Load) (_slice_content (Name &i:1 Load)) Load))\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Call (Name g_sum Load) (list (_starred_content (Name &l1:0 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &l1:0 Store)) (Subscript (Name &l:0 Load) (_slice_slice (Slice None None None)) Load) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l1:0 Load))) nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name &diff:0 Load) (list (_starred_content (Name &x:0 Load))) nil) None)\n    (While\n      (Compare (Name &s:0 Load) (list GtE) (list (Name &a:0 Load)))\n      (/seq\n        (Assign (list (Name &m:0 Store)) (BinOp (Name &m:0 Load) Add (Constant i1 None)) None)\n        (Assign (list (Name &a:0 Store)) (Call (Name &diff:0 Load) (list (_starred_content (Name &x:0 Load))) nil) None)\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &data:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &sg1:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &sg2:0 Store)) (Constant i0 None) None)\n    (For (Name &i:0 Store) (Name &data:0 Load) (/seq (AugAssign (Name &sg2:0 Store) Add (Name &i:0 Load))) (/seq) None)\n    (Assign (list (Name &maxi:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &data:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Name &maxi:0 Load))\n          (_starred_content (BinOp (Constant i100 None) Mult (Constant i100 None)))\n        )\n        nil\n      )\n      (/seq\n        (For\n          (Name &k:0 Store)\n          (Name &data:0 Load)\n          (/seq (AugAssign (Name &sg1:0 Store) Add (BinOp (Name &i:0 Load) Sub (Name &k:0 Load))))\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &sg1:0 Load) (list Gt) (list (Name &sg2:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break)\n          (/seq)\n        )\n        (Assign (list (Name &sg1:0 Store)) (Constant i0 None) None)\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &oppo:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &k:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (BinOp (Name &k:0 Load) Sub (Name &o:2 Load))\n        (list (comprehension (Name &o:2 Store) (Name &a:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &me:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) None)\n    (If\n      (Compare (Name &me:0 Load) (list Gt) (list (Name &oppo:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil)))\n      (/seq\n        (Assign (list (Name &i:0 Store)) (Constant i1 None) None)\n        (While\n          (Constant True None)\n          (/seq\n            (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n            (If\n              (Compare\n                (BinOp (Name &me:0 Load) Add (BinOp (Name &n:0 Load) Mult (Name &i:0 Load)))\n                (list Gt)\n                (list (Name &oppo:0 Load))\n              )\n              (/seq Break)\n              (/seq)\n            )\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (ImportFrom s_math (list (alias &ceil:0 None)) i0)\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &kk:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n        (Assign\n          (list (Name &k:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Constant i2 None) Mult (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil))\n              Add\n              (Name &n:0 Load)\n            )\n            FloorDiv\n            (Name &n:0 Load)\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_max Load)\n                  (list (_starred_content (Name &k:0 Load)) (_starred_content (Name &kk:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &c:0 Load) (list LtE) (list (Name &s:0 Load)))\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (ListComp\n            (BinOp (Name &m:0 Load) Sub (Name &i:1 Load))\n            (list (comprehension (Name &i:1 Store) (Name &a:0 Load) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n        (AugAssign (Name &m:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_math None))) (/splice (fn_1 &n:0 &l:0)) (Assign (list (Name &s:0 Store)) (BinOp (Constant i2 None) Mult (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil)) None) (Assign (list (Name &z:0 Store)) (BinOp (Name &s:0 Load) Div (Name &n:0 Load)) None) (Assign (list (Name &p:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil) None) (Assign (list (Name &an:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Name &z:0 Load) Add (Constant i1 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &an:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &s:0)) (Assign (list (Name &summ:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &s:0 Load))) nil) None) (Assign (list (Name &maxx:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &s:0 Load))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &maxx:0 Load)) (_starred_content (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name &summ:0 Load)) FloorDiv (Name &n:0 Load)) Add (Constant i1 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &each:0 Store) (Name &arr:0 Load) (/seq (Assign (list (Name &s:0 Store)) (BinOp (Name &s:0 Load) Add (Name &each:0 Load)) None)) (/seq) None) (While (Constant True None) (/seq (Assign (list (Name &ansv:0 Store)) (BinOp (BinOp (Name &m:0 Load) Mult (Name &n:0 Load)) Sub (Name &s:0 Load)) None) (If (Compare (Name &ansv:0 Load) (list Gt) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil)) Break) (/seq (Assign (list (Name &m:0 Store)) (BinOp (Name &m:0 Load) Add (Constant i1 None)) None)))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &a:0 Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &maks:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) (list Gt) (list (Name &maks:0 Load))) (/seq (Assign (list (Name &maks:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &a:0 Store)) (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i0 None) (Name &n:0 Load) None)) Load) None) (Assign (list (Name &sum:0 Store)) (Constant i0 None) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &sum:0 Store) Add (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &maks:0 Load) Sub (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)))) (/seq) None) (While (Compare (Name &s:0 Load) (list LtE) (list (Name &sum:0 Load))) (/seq (AugAssign (Name &maks:0 Store) Add (Constant i1 None)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &maks:0 Load) Sub (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)))) (/seq) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &maks:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &l:0)) (Assign (list (Name &d:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil) None) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &f:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Name &d:0 Load)))) nil))) (_starred_content (Name &l:0 Load))) nil))) nil))) nil) None) (If (Compare (Name &f:0 Load) (list Gt) (list (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil))) (/seq Break) (/seq (Assign (list (Name &d:0 Store)) (BinOp (Name &d:0 Load) Add (Constant i1 None)) None)))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &diff:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &m:0 Load) Sub (Subscript (Name &l:0 Load) (_slice_content (Name &i:1 Load)) Load)) None)) (/seq) None) (Return (Call (Name g_sum Load) (list (_starred_content (Name &l1:0 Load))) nil))) nil None None) (/splice (fn_1 &x:0 &l:0)) (Assign (list (Name &l1:0 Store)) (Subscript (Name &l:0 Load) (_slice_slice (Slice None None None)) Load) None) (Assign (list (Name &s:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) None) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l1:0 Load))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &diff:0 Load) (list (_starred_content (Name &x:0 Load))) nil) None) (While (Compare (Name &s:0 Load) (list GtE) (list (Name &a:0 Load))) (/seq (Assign (list (Name &m:0 Store)) (BinOp (Name &m:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &a:0 Store)) (Call (Name &diff:0 Load) (list (_starred_content (Name &x:0 Load))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &data:0)) (Assign (list (Name &sg1:0 Store)) (Constant i0 None) None) (Assign (list (Name &sg2:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &data:0 Load) (/seq (AugAssign (Name &sg2:0 Store) Add (Name &i:0 Load))) (/seq) None) (Assign (list (Name &maxi:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &data:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &maxi:0 Load)) (_starred_content (BinOp (Constant i100 None) Mult (Constant i100 None)))) nil) (/seq (For (Name &k:0 Store) (Name &data:0 Load) (/seq (AugAssign (Name &sg1:0 Store) Add (BinOp (Name &i:0 Load) Sub (Name &k:0 Load)))) (/seq) None) (If (Compare (Name &sg1:0 Load) (list Gt) (list (Name &sg2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break) (/seq)) (Assign (list (Name &sg1:0 Store)) (Constant i0 None) None)) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &oppo:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &k:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &b:0 Store)) (ListComp (BinOp (Name &k:0 Load) Sub (Name &o:2 Load)) (list (comprehension (Name &o:2 Store) (Name &a:0 Load) nil i0))) None) (Assign (list (Name &me:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) None) (If (Compare (Name &me:0 Load) (list Gt) (list (Name &oppo:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) (/seq (Assign (list (Name &i:0 Store)) (Constant i1 None) None) (While (Constant True None) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)) (If (Compare (BinOp (Name &me:0 Load) Add (BinOp (Name &n:0 Load) Mult (Name &i:0 Load))) (list Gt) (list (Name &oppo:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))))) nil)",
      "(Module (/seq (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (ImportFrom s_math (list (alias &ceil:0 None)) i0) (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &kk:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (BinOp (Constant i2 None) Mult (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)) Add (Name &n:0 Load)) FloorDiv (Name &n:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &k:0 Load)) (_starred_content (Name &kk:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Compare (Name &c:0 Load) (list LtE) (list (Name &s:0 Load))) (/seq (Assign (list (Name &l:0 Store)) (ListComp (BinOp (Name &m:0 Load) Sub (Name &i:1 Load)) (list (comprehension (Name &i:1 Store) (Name &a:0 Load) nil i0))) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) None) (AugAssign (Name &m:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &x:0 Store))\n                (_starred_content (Name &y:0 Store))\n                (_starred_content (Name &z:0 Store))\n              )\n              Store\n            )\n          )\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &f:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (Assign (list (Name &z:0 Store)) (BinOp (Name &z:0 Load) FloorDiv (Constant i2 None)) None)\n        (If\n          (Compare (Name &y:0 Load) (list GtE) (list (Name &z:0 Load)))\n          (/seq\n            (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Sub (Name &z:0 Load)) None)\n            (Assign\n              (list (Name &s:0 Store))\n              (BinOp (BinOp (Name &z:0 Load) Mult (Constant i2 None)) Add (Name &z:0 Load))\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &s:0 Store))\n              (BinOp (BinOp (Name &y:0 Load) Mult (Constant i2 None)) Add (Name &y:0 Load))\n              None\n            )\n            (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n          )\n        )\n        (If\n          (Compare (Name &f:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n          (/seq\n            (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) FloorDiv (Constant i2 None)) None)\n            (If\n              (Compare (Name &x:0 Load) (list GtE) (list (Name &y:0 Load)))\n              (/seq\n                (Assign\n                  (list (Name &s:0 Store))\n                  (BinOp\n                    (BinOp (Name &s:0 Load) Add (BinOp (Constant i2 None) Mult (Name &y:0 Load)))\n                    Add\n                    (Name &y:0 Load)\n                  )\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &s:0 Store))\n                  (BinOp\n                    (BinOp (Name &s:0 Load) Add (BinOp (Constant i2 None) Mult (Name &x:0 Load)))\n                    Add\n                    (Name &x:0 Load)\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &heaps:0 Store)) (List nil Load) None)\n    (Assign (list (Name &mx:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &mx:0 Load) s_append Load)\n            (list (_starred_content (UnaryOp USub (Constant i2 None))))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &heaps:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                  (list (_starred_content (Constant s-WzMyXQ== None)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content\n                (Call\n                  (Name g_len Load)\n                  (list (_starred_content (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (Call\n                (Name g_int Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Name &j:0 Load))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Subscript\n            (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (Subscript\n            (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (_slice_content (Constant i1 None))\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &c:0 Store))\n          (Subscript\n            (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (_slice_content (Constant i2 None))\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &summ:0 Store)) (Constant i0 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &c:0 Load) (list GtE) (list (Constant i2 None)))\n              (Compare (Name &b:0 Load) (list GtE) (list (Constant i1 None)))\n            )\n          )\n          (/seq\n            (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) None)\n            (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Sub (Constant i2 None)) None)\n            (Assign (list (Name &summ:0 Store)) (BinOp (Name &summ:0 Load) Add (Constant i3 None)) None)\n          )\n          (/seq)\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list GtE) (list (Constant i2 None)))\n              (Compare (Name &a:0 Load) (list GtE) (list (Constant i1 None)))\n            )\n          )\n          (/seq\n            (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) None)\n            (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Sub (Constant i2 None)) None)\n            (Assign (list (Name &summ:0 Store)) (BinOp (Name &summ:0 Load) Add (Constant i3 None)) None)\n          )\n          (/seq)\n        )\n        (Assign (list (Subscript (Name &mx:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Name &summ:0 Load) None)\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &summ:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Gt) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Gt) (list (Constant i1 None)))\n            )\n          )\n          (/seq\n            (AugAssign (Name &b:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &c:0 Store) Sub (Constant i2 None))\n            (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Gt) (list (Constant i1 None)))\n            )\n          )\n          (/seq\n            (AugAssign (Name &b:0 Store) Sub (Constant i2 None))\n            (AugAssign (Name &a:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) Mult (Constant i3 None)))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &result:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &first:0 Store)) (BinOp (Name &c:0 Load) FloorDiv (Constant i2 None)) None)\n        (Assign\n          (list (Name &firsttt:0 Store))\n          (Call\n            (Name g_min Load)\n            (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &first:0 Load)))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &result:0 Store)\n          Add\n          (BinOp (BinOp (Name &firsttt:0 Load) Mult (Constant i2 None)) Add (Name &firsttt:0 Load))\n        )\n        (AugAssign (Name &b:0 Store) Sub (Name &firsttt:0 Load))\n        (Assign (list (Name &second:0 Store)) (BinOp (Name &b:0 Load) FloorDiv (Constant i2 None)) None)\n        (Assign\n          (list (Name &secondtt:0 Store))\n          (Call\n            (Name g_min Load)\n            (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &second:0 Load)))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &result:0 Store)\n          Add\n          (BinOp (BinOp (Name &secondtt:0 Load) Mult (Constant i2 None)) Add (Name &secondtt:0 Load))\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &stones:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &alice_stones:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &first_heap_stones:0 Store))\n          (Subscript (Name &stones:0 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &last_heap_stones:0 Store))\n          (Subscript (Name &stones:0 Load) (_slice_content (Constant i2 None)) Load)\n          None\n        )\n        (While\n          (Compare\n            (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Load)\n                    (list Gt)\n                    (list (Constant i0 None))\n                  )\n                  (Compare\n                    (Subscript (Name &stones:0 Load) (_slice_content (Constant i2 None)) Load)\n                    (list GtE)\n                    (list (Constant i2 None))\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Store)\n                  Sub\n                  (Constant i1 None)\n                )\n                (AugAssign\n                  (Subscript (Name &stones:0 Load) (_slice_content (Constant i2 None)) Store)\n                  Sub\n                  (Constant i2 None)\n                )\n                (AugAssign (Name &alice_stones:0 Store) Add (Constant i3 None))\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &stones:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (list Gt)\n                        (list (Constant i0 None))\n                      )\n                      (Compare\n                        (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Load)\n                        (list GtE)\n                        (list (Constant i2 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript (Name &stones:0 Load) (_slice_content (Constant i0 None)) Store)\n                      Sub\n                      (Constant i1 None)\n                    )\n                    (AugAssign\n                      (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Store)\n                      Sub\n                      (Constant i2 None)\n                    )\n                    (AugAssign (Name &alice_stones:0 Store) Add (Constant i3 None))\n                  )\n                  (/seq Break)\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &alice_stones:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &X:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &Temp:0 Store))\n          (Subscript (Name &X:0 Load) (_slice_slice (Slice None None None)) Load)\n          None\n        )\n        (Assign (list (Name &SUM:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &SUM1:0 Store)) (Constant i0 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list GtE)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list GtE)\n                (list (Constant i2 None))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &SUM:0 Store) Add (Constant i3 None))\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Store))\n                    (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Constant i1 None))\n                  )\n                  (_starred_content\n                    (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Constant i2 None))\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list GtE)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Subscript (Name &X:0 Load) (_slice_content (Constant i2 None)) Load)\n                (list GtE)\n                (list (Constant i2 None))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &SUM:0 Store) Add (Constant i3 None))\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Store))\n                    (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i2 None)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Constant i1 None))\n                  )\n                  (_starred_content\n                    (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i2 None)) Load) Sub (Constant i2 None))\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list GtE)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Subscript (Name &Temp:0 Load) (_slice_content (Constant i2 None)) Load)\n                (list GtE)\n                (list (Constant i2 None))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &SUM1:0 Store) Add (Constant i3 None))\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Store))\n                    (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i2 None)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load)\n                      Sub\n                      (Constant i1 None)\n                    )\n                  )\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &Temp:0 Load) (_slice_content (Constant i2 None)) Load)\n                      Sub\n                      (Constant i2 None)\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &Temp:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list GtE)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load)\n                (list GtE)\n                (list (Constant i2 None))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &SUM1:0 Store) Add (Constant i3 None))\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i0 None)) Store))\n                    (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &Temp:0 Load) (_slice_content (Constant i0 None)) Load)\n                      Sub\n                      (Constant i1 None)\n                    )\n                  )\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load)\n                      Sub\n                      (Constant i2 None)\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_max Load)\n                  (list (_starred_content (Name &SUM:0 Load)) (_starred_content (Name &SUM1:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None)\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:1 Load) (list GtE) (list (Constant i1 None)))\n              (Compare (Name &c:1 Load) (list GtE) (list (Constant i2 None)))\n            )\n          )\n          (/seq\n            (Assign (list (Name &x:1 Store)) (BinOp (Name &c:1 Load) FloorDiv (Constant i2 None)) None)\n            (Assign (list (Name &rem:1 Store)) (BinOp (Name &c:1 Load) Mod (Constant i2 None)) None)\n            (If\n              (Compare (Name &x:1 Load) (list LtE) (list (Name &b:1 Load)))\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Name &x:1 Load))\n                (Assign (list (Name &b:1 Store)) (BinOp (Name &b:1 Load) Sub (Name &x:1 Load)) None)\n                (Assign (list (Name &c:1 Store)) (Name &rem:1 Load) None)\n              )\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Name &b:1 Load))\n                (Assign (list (Name &b:1 Store)) (Constant i0 None) None)\n                (Assign\n                  (list (Name &c:1 Store))\n                  (BinOp (Name &c:1 Load) Sub (BinOp (Constant i2 None) Mult (Name &b:1 Load)))\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:1 Load) (list Gt) (list (Constant i1 None)))\n              (Compare (Name &a:1 Load) (list Gt) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Assign (list (Name &x:1 Store)) (BinOp (Name &b:1 Load) FloorDiv (Constant i2 None)) None)\n            (Assign (list (Name &rem:1 Store)) (BinOp (Name &b:1 Load) Mod (Constant i2 None)) None)\n            (If\n              (Compare (Name &x:1 Load) (list LtE) (list (Name &a:1 Load)))\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Name &x:1 Load))\n                (Assign (list (Name &a:1 Store)) (BinOp (Name &a:1 Load) Sub (Name &x:1 Load)) None)\n                (Assign (list (Name &b:1 Store)) (Name &rem:1 Load) None)\n              )\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Name &a:1 Load))\n                (Assign (list (Name &a:1 Store)) (Constant i0 None) None)\n                (Assign\n                  (list (Name &b:1 Store))\n                  (BinOp (Name &b:1 Load) Sub (BinOp (Constant i2 None) Mult (Name &a:1 Load)))\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return (BinOp (Name &cnt:1 Load) Mult (Constant i3 None)))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n                  (list\n                    (comprehension\n                      (Name &x:2 Store)\n                      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &solve:0 Load)\n                  (list\n                    (_starred_content (Name &a:0 Load))\n                    (_starred_content (Name &b:0 Load))\n                    (_starred_content (Name &c:0 Load))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &qq:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &qq:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &x:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &b:0 Load))\n              (_starred_content (BinOp (Name &c:0 Load) FloorDiv (Constant i2 None)))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &res:0 Store)) (BinOp (Name &x:0 Load) Mult (Constant i3 None)) None)\n        (Assign\n          (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (BinOp (Name &b:0 Load) Sub (Name &x:0 Load)))\n              (_starred_content (BinOp (Name &c:0 Load) Sub (Name &x:0 Load)))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &a:0 Load))\n              (_starred_content (BinOp (Name &b:0 Load) FloorDiv (Constant i2 None)))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &res:0 Store) Add (BinOp (Name &x:0 Load) Mult (Constant i3 None)))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &x:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))) nil)\n          (/seq\n            (For\n              (Name &y:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &b:0 Load) Add (Constant i1 None)))) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &x:0 Load)) Add (Name &y:0 Load))\n                        (list LtE)\n                        (list (Name &b:0 Load))\n                      )\n                      (Compare (BinOp (Constant i2 None) Mult (Name &y:0 Load)) (list LtE) (list (Name &c:0 Load)))\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &ans:0 Store))\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (_starred_content (Name &ans:0 Load))\n                          (_starred_content\n                            (BinOp (Constant i3 None) Mult (BinOp (Name &x:0 Load) Add (Name &y:0 Load)))\n                          )\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (FunctionDef\n          &kamni:0\n          (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ky:1 Store)) (BinOp (Name &y:1 Load) FloorDiv (Constant i2 None)) None)\n            (Assign (list (Name &kx:1 Store)) (Name &x:1 Load) None)\n            (Assign\n              (list (Name &q:1 Store))\n              (Call\n                (Name g_min Load)\n                (list (_starred_content (Name &ky:1 Load)) (_starred_content (Name &kx:1 Load)))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &p:1 Store)) (BinOp (Name &q:1 Load) Mult (Constant i3 None)) None)\n            (Return (Name &p:1 Load))\n          )\n          nil\n          None\n          None\n        )\n        (Expr\n          (Call (Name &kamni:0 Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil)\n        )\n        (Assign\n          (list (Name &r:0 Store))\n          (Call (Name &kamni:0 Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (BinOp\n            (Name &b:0 Load)\n            Sub\n            (BinOp\n              (Call\n                (Name &kamni:0 Load)\n                (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load)))\n                nil\n              )\n              Div\n              (Constant i3 None)\n            )\n          )\n          None\n        )\n        (Expr\n          (Call (Name &kamni:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Name &kamni:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (BinOp (Name &l:0 Load) Add (Name &r:0 Load)))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)) (_starred_content (Name &z:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (Assign (list (Name &f:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &z:0 Store)) (BinOp (Name &z:0 Load) FloorDiv (Constant i2 None)) None) (If (Compare (Name &y:0 Load) (list GtE) (list (Name &z:0 Load))) (/seq (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Sub (Name &z:0 Load)) None) (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &z:0 Load) Mult (Constant i2 None)) Add (Name &z:0 Load)) None)) (/seq (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Constant i2 None)) Add (Name &y:0 Load)) None) (Assign (list (Name &f:0 Store)) (Constant i1 None) None))) (If (Compare (Name &f:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) FloorDiv (Constant i2 None)) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &y:0 Load))) (/seq (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &s:0 Load) Add (BinOp (Constant i2 None) Mult (Name &y:0 Load))) Add (Name &y:0 Load)) None)) (/seq (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &s:0 Load) Add (BinOp (Constant i2 None) Mult (Name &x:0 Load))) Add (Name &x:0 Load)) None)))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil)) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &heaps:0 Store)) (List nil Load) None) (Assign (list (Name &mx:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &mx:0 Load) s_append Load) (list (_starred_content (UnaryOp USub (Constant i2 None)))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &heaps:0 Load) s_append Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil) (/seq (Assign (list (Subscript (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) nil) None)) (/seq) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &c:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Subscript (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &b:0 Store)) (Subscript (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name &c:0 Store)) (Subscript (Subscript (Name &heaps:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i2 None)) Load) None) (Assign (list (Name &summ:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &c:0 Load) (list GtE) (list (Constant i2 None))) (Compare (Name &b:0 Load) (list GtE) (list (Constant i1 None))))) (/seq (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Sub (Constant i2 None)) None) (Assign (list (Name &summ:0 Store)) (BinOp (Name &summ:0 Load) Add (Constant i3 None)) None)) (/seq)) (While (BoolOp And (list (Compare (Name &b:0 Load) (list GtE) (list (Constant i2 None))) (Compare (Name &a:0 Load) (list GtE) (list (Constant i1 None))))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Sub (Constant i2 None)) None) (Assign (list (Name &summ:0 Store)) (BinOp (Name &summ:0 Load) Add (Constant i3 None)) None)) (/seq)) (Assign (list (Subscript (Name &mx:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Name &summ:0 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &summ:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (fn_1 &c:0 &b:0 &a:0) (While (BoolOp And (list (Compare (Name &b:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Gt) (list (Constant i1 None))))) (/seq (AugAssign (Name &b:0 Store) Sub (Constant i1 None)) (AugAssign (Name &c:0 Store) Sub (Constant i2 None)) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (While (BoolOp And (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Gt) (list (Constant i1 None))))) (/seq (AugAssign (Name &b:0 Store) Sub (Constant i2 None)) (AugAssign (Name &a:0 Store) Sub (Constant i1 None)) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) Mult (Constant i3 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &result:0 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &first:0 Store)) (BinOp (Name &c:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &firsttt:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &first:0 Load))) nil) None) (AugAssign (Name &result:0 Store) Add (BinOp (BinOp (Name &firsttt:0 Load) Mult (Constant i2 None)) Add (Name &firsttt:0 Load))) (AugAssign (Name &b:0 Store) Sub (Name &firsttt:0 Load)) (Assign (list (Name &second:0 Store)) (BinOp (Name &b:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &secondtt:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &second:0 Load))) nil) None) (AugAssign (Name &result:0 Store) Add (BinOp (BinOp (Name &secondtt:0 Load) Mult (Constant i2 None)) Add (Name &secondtt:0 Load))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &stones:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &alice_stones:0 Store)) (Constant i0 None) None) (Assign (list (Name &first_heap_stones:0 Store)) (Subscript (Name &stones:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &last_heap_stones:0 Store)) (Subscript (Name &stones:0 Load) (_slice_content (Constant i2 None)) Load) None) (While (Compare (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Load) (list NotEq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &stones:0 Load) (_slice_content (Constant i2 None)) Load) (list GtE) (list (Constant i2 None))))) (/seq (AugAssign (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &stones:0 Load) (_slice_content (Constant i2 None)) Store) Sub (Constant i2 None)) (AugAssign (Name &alice_stones:0 Store) Add (Constant i3 None))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &stones:0 Load) (_slice_content (Constant i0 None)) Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Load) (list GtE) (list (Constant i2 None))))) (/seq (AugAssign (Subscript (Name &stones:0 Load) (_slice_content (Constant i0 None)) Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &stones:0 Load) (_slice_content (Constant i1 None)) Store) Sub (Constant i2 None)) (AugAssign (Name &alice_stones:0 Store) Add (Constant i3 None))) (/seq Break))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &alice_stones:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &X:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &Temp:0 Store)) (Subscript (Name &X:0 Load) (_slice_slice (Slice None None None)) Load) None) (Assign (list (Name &SUM:0 Store)) (Constant i0 None) None) (Assign (list (Name &SUM1:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Constant i1 None))) (Compare (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load) (list GtE) (list (Constant i2 None))))) (/seq (AugAssign (Name &SUM:0 Store) Add (Constant i3 None)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Store)) (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Store))) Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Constant i1 None))) (_starred_content (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Constant i2 None)))) Load) None)) (/seq)) (While (BoolOp And (list (Compare (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load) (list GtE) (list (Constant i1 None))) (Compare (Subscript (Name &X:0 Load) (_slice_content (Constant i2 None)) Load) (list GtE) (list (Constant i2 None))))) (/seq (AugAssign (Name &SUM:0 Store) Add (Constant i3 None)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Store)) (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i2 None)) Store))) Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Constant i1 None))) (_starred_content (BinOp (Subscript (Name &X:0 Load) (_slice_content (Constant i2 None)) Load) Sub (Constant i2 None)))) Load) None)) (/seq)) (While (BoolOp And (list (Compare (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load) (list GtE) (list (Constant i1 None))) (Compare (Subscript (Name &Temp:0 Load) (_slice_content (Constant i2 None)) Load) (list GtE) (list (Constant i2 None))))) (/seq (AugAssign (Name &SUM1:0 Store) Add (Constant i3 None)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Store)) (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i2 None)) Store))) Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Constant i1 None))) (_starred_content (BinOp (Subscript (Name &Temp:0 Load) (_slice_content (Constant i2 None)) Load) Sub (Constant i2 None)))) Load) None)) (/seq)) (While (BoolOp And (list (Compare (Subscript (Name &Temp:0 Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Constant i1 None))) (Compare (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load) (list GtE) (list (Constant i2 None))))) (/seq (AugAssign (Name &SUM1:0 Store) Add (Constant i3 None)) (Assign (list (Tuple (list (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i0 None)) Store)) (_starred_content (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Store))) Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &Temp:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Constant i1 None))) (_starred_content (BinOp (Subscript (Name &Temp:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Constant i2 None)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &SUM:0 Load)) (_starred_content (Name &SUM1:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None) (If (BoolOp And (list (Compare (Name &b:1 Load) (list GtE) (list (Constant i1 None))) (Compare (Name &c:1 Load) (list GtE) (list (Constant i2 None))))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (Name &c:1 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &rem:1 Store)) (BinOp (Name &c:1 Load) Mod (Constant i2 None)) None) (If (Compare (Name &x:1 Load) (list LtE) (list (Name &b:1 Load))) (/seq (AugAssign (Name &cnt:1 Store) Add (Name &x:1 Load)) (Assign (list (Name &b:1 Store)) (BinOp (Name &b:1 Load) Sub (Name &x:1 Load)) None) (Assign (list (Name &c:1 Store)) (Name &rem:1 Load) None)) (/seq (AugAssign (Name &cnt:1 Store) Add (Name &b:1 Load)) (Assign (list (Name &b:1 Store)) (Constant i0 None) None) (Assign (list (Name &c:1 Store)) (BinOp (Name &c:1 Load) Sub (BinOp (Constant i2 None) Mult (Name &b:1 Load))) None)))) (/seq)) (If (BoolOp And (list (Compare (Name &b:1 Load) (list Gt) (list (Constant i1 None))) (Compare (Name &a:1 Load) (list Gt) (list (Constant i0 None))))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (Name &b:1 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &rem:1 Store)) (BinOp (Name &b:1 Load) Mod (Constant i2 None)) None) (If (Compare (Name &x:1 Load) (list LtE) (list (Name &a:1 Load))) (/seq (AugAssign (Name &cnt:1 Store) Add (Name &x:1 Load)) (Assign (list (Name &a:1 Store)) (BinOp (Name &a:1 Load) Sub (Name &x:1 Load)) None) (Assign (list (Name &b:1 Store)) (Name &rem:1 Load) None)) (/seq (AugAssign (Name &cnt:1 Store) Add (Name &a:1 Load)) (Assign (list (Name &a:1 Store)) (Constant i0 None) None) (Assign (list (Name &b:1 Store)) (BinOp (Name &b:1 Load) Sub (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None)))) (/seq)) (Return (BinOp (Name &cnt:1 Load) Mult (Constant i3 None)))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &qq:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &qq:0 Load))) nil) (/seq (fn_1 &c:0 &b:0 &a:0) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (BinOp (Name &c:0 Load) FloorDiv (Constant i2 None)))) nil) None) (Assign (list (Name &res:0 Store)) (BinOp (Name &x:0 Load) Mult (Constant i3 None)) None) (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &b:0 Load) Sub (Name &x:0 Load))) (_starred_content (BinOp (Name &c:0 Load) Sub (Name &x:0 Load)))) Load) None) (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (BinOp (Name &b:0 Load) FloorDiv (Constant i2 None)))) nil) None) (AugAssign (Name &res:0 Store) Add (BinOp (Name &x:0 Load) Mult (Constant i3 None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &c:0 &b:0 &a:0) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &y:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &b:0 Load) Add (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Constant i2 None) Mult (Name &x:0 Load)) Add (Name &y:0 Load)) (list LtE) (list (Name &b:0 Load))) (Compare (BinOp (Constant i2 None) Mult (Name &y:0 Load)) (list LtE) (list (Name &c:0 Load))))) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (BinOp (Constant i3 None) Mult (BinOp (Name &x:0 Load) Add (Name &y:0 Load))))) nil) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (fn_1 &c:0 &b:0 &a:0) (FunctionDef &kamni:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ky:1 Store)) (BinOp (Name &y:1 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &kx:1 Store)) (Name &x:1 Load) None) (Assign (list (Name &q:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ky:1 Load)) (_starred_content (Name &kx:1 Load))) nil) None) (Assign (list (Name &p:1 Store)) (BinOp (Name &q:1 Load) Mult (Constant i3 None)) None) (Return (Name &p:1 Load))) nil None None) (Expr (Call (Name &kamni:0 Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil)) (Assign (list (Name &r:0 Store)) (Call (Name &kamni:0 Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil) None) (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Sub (BinOp (Call (Name &kamni:0 Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil) Div (Constant i3 None))) None) (Expr (Call (Name &kamni:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)) (Assign (list (Name &l:0 Store)) (Call (Name &kamni:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Name &l:0 Load) Add (Name &r:0 Load)))) nil))) nil))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_ceil None)) i0)\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (BinOp\n        (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Sub (BinOp (Name &c:0 Load) Mult (Name &b:0 Load)))\n        Div\n        (Name &b:0 Load)\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_ceil Load) (list (_starred_content (Name &t:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &datos:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute\n                (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                s_split\n                Load\n              )\n              nil\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Name &datos:0 Load) (_slice_content (Constant i2 None)) Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Subscript (Name &datos:0 Load) (_slice_content (Constant i2 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &peso:0 Store))\n      (BinOp\n        (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Load)\n        Mult\n        (Subscript (Name &datos:0 Load) (_slice_content (Constant i2 None)) Load)\n      )\n      None\n    )\n    (Assign\n      (list (Name &maximoNecesarios:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list\n          (_starred_content\n            (BinOp (Name &peso:0 Load) Div (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &estado:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Name &maximoNecesarios:0 Load) Add (Constant i1 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &estado:0 Store)) (Constant True None) None)\n        (Assign\n          (list (Name &pila:0 Store))\n          (BinOp (Name &i:0 Load) Mult (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load))\n          None\n        )\n        (AugAssign\n          (Name &pila:0 Store)\n          Add\n          (BinOp\n            (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load)\n            Mult\n            (BinOp (Name &maximoNecesarios:0 Load) Sub (Name &i:0 Load))\n          )\n        )\n        (AugAssign\n          (Name &pila:0 Store)\n          Sub\n          (BinOp\n            (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Load)\n            Mult\n            (BinOp (Name &maximoNecesarios:0 Load) Sub (Name &i:0 Load))\n          )\n        )\n        (If\n          (Compare (Name &pila:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Assign (list (Name &estado:0 Store)) (Constant False None) None))\n          (/seq)\n        )\n        (If\n          (Name &estado:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (BinOp (BinOp (Name &c:0 Load) Mult (Name &a:0 Load)) FloorDiv (Name &b:0 Load))\n      None\n    )\n    (Assign (list (Name &le:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ri:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None)\n    (While\n      (Compare (BinOp (Name &le:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &ri:0 Load)))\n      (/seq\n        (Assign\n          (list (Name &m:0 Store))\n          (BinOp (BinOp (Name &le:0 Load) Add (Name &ri:0 Load)) FloorDiv (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Name &k:0 Store))\n          (BinOp (BinOp (Name &m:0 Load) Mult (Name &b:0 Load)) Mod (Name &a:0 Load))\n          None\n        )\n        (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp (BinOp (Name &m:0 Load) Mult (Name &b:0 Load)) FloorDiv (Name &a:0 Load))\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &c:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (AugAssign (Name &k:0 Store) Add (Name &b:0 Load))\n            (AugAssign (Name &t:0 Store) Add (BinOp (Name &k:0 Load) FloorDiv (Name &a:0 Load)))\n            (AugAssign (Name &k:0 Store) Mod (Name &a:0 Load))\n            (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n            (If\n              (Compare (Name &t:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Assign (list (Name &le:0 Store)) (Name &m:0 Load) None))\n          (/seq (Assign (list (Name &ri:0 Store)) (Name &m:0 Load) None))\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ri:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (_starred_content (Name g_int Load))\n            (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Name g_math Load) s_ceil Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) Mult (Name &c:0 Load))\n                    Div\n                    (Name &b:0 Load)\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (FunctionDef\n      &football:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &x:1 Store)) (BinOp (Name &a:1 Load) Mult (Name &c:1 Load)) None)\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Tuple (list (_starred_content (Name &l:1 Store)) (_starred_content (Name &h:1 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content (BinOp (BinOp (Name &x:1 Load) FloorDiv (Name &b:1 Load)) Add (Constant i1 None)))\n            )\n            Load\n          )\n          None\n        )\n        (While\n          (Compare (Name &l:1 Load) (list LtE) (list (Name &h:1 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:1 Store))\n              (BinOp (BinOp (Name &l:1 Load) Add (Name &h:1 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign\n              (list (Name &foo:1 Store))\n              (BinOp\n                (BinOp (Name &mid:1 Load) Mult (Name &b:1 Load))\n                Add\n                (BinOp (Name &b:1 Load) Mult (Name &c:1 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &foo:1 Load) (list GtE) (list (Name &x:1 Load)))\n              (/seq\n                (Assign (list (Name &ans:1 Store)) (Name &mid:1 Load) None)\n                (Assign (list (Name &h:1 Store)) (BinOp (Name &mid:1 Load) Sub (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &l:1 Store)) (BinOp (Name &mid:1 Load) Add (Constant i1 None)) None))\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &ans:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &football:0 Load)\n              (list\n                (_starred_content (Name &a:0 Load))\n                (_starred_content (Name &b:0 Load))\n                (_starred_content (Name &c:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Sub (BinOp (Name &b:0 Load) Mult (Name &c:0 Load)))\n      None\n    )\n    (While\n      (Compare (BinOp (Name &k:0 Load) Mod (Name &b:0 Load)) (list NotEq) (list (Constant i0 None)))\n      (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Name &b:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &w:0 Store))\n            (_starred_content (Name &d:0 Store))\n            (_starred_content (Name &t:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Name g_math Load) s_ceil Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp (BinOp (Name &w:0 Load) Sub (Name &d:0 Load)) Mult (Name &t:0 Load))\n                    Div\n                    (Name &d:0 Load)\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign (list (Name &S0:0 Store)) (BinOp (Name &t:0 Load) Mult (Name &b:0 Load)) None)\n        (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &c:0 Load))) nil)\n          (/seq\n            (AugAssign (Name &S0:0 Store) Add (BinOp (Name &b:0 Load) Sub (Name &a:0 Load)))\n            (If\n              (Compare (Name &S0:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &t:0 Store) Add (Constant i1 None))\n                (AugAssign (Name &flag:0 Store) Add (Constant i1 None))\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_bisect None)))\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &times:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None)))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &times:0 Load) s_append Load)\n            (list (_starred_content (BinOp (Name &b:0 Load) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None)))))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &pos:0 Store))\n      (Call\n        (Attribute (Name g_bisect Load) s_bisect_left Load)\n        (list\n          (_starred_content (Name &times:0 Load))\n          (_starred_content (BinOp (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) Mult (Name &c:0 Load)))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &times:0 Load))) nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &pos:0 Load) Add (Constant i1 None)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &left:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &right:0 Store))\n      (BinOp\n        (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Add (Name &b:0 Load)) Sub (Constant i1 None))\n        FloorDiv\n        (Name &b:0 Load)\n      )\n      None\n    )\n    (Assign (list (Name &all:0 Store)) (Name &right:0 Load) None)\n    (While\n      (Compare (BinOp (Name &left:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &right:0 Load)))\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None))\n          None\n        )\n        (If\n          (Compare\n            (BinOp (Name &all:0 Load) Mult (Name &b:0 Load))\n            (list GtE)\n            (list (BinOp (BinOp (Name &all:0 Load) Sub (Name &t:0 Load)) Mult (Name &a:0 Load)))\n          )\n          (/seq (Assign (list (Name &right:0 Store)) (Name &t:0 Load) None))\n          (/seq (Assign (list (Name &left:0 Store)) (Name &t:0 Load) None))\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &right:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (fn_1 &c:0 &b:0 &a:0) (Assign (list (Name &t:0 Store)) (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Sub (BinOp (Name &c:0 Load) Mult (Name &b:0 Load))) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_ceil Load) (list (_starred_content (Name &t:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &datos:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) s_split Load) nil nil))) nil) None) (Assign (list (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Subscript (Name &datos:0 Load) (_slice_content (Constant i2 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &datos:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None) (Assign (list (Name &peso:0 Store)) (BinOp (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &datos:0 Load) (_slice_content (Constant i2 None)) Load)) None) (Assign (list (Name &maximoNecesarios:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &peso:0 Load) Div (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load)))) nil) None) (Assign (list (Name &estado:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &maximoNecesarios:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &estado:0 Store)) (Constant True None) None) (Assign (list (Name &pila:0 Store)) (BinOp (Name &i:0 Load) Mult (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load)) None) (AugAssign (Name &pila:0 Store) Add (BinOp (Subscript (Name &datos:0 Load) (_slice_content (Constant i1 None)) Load) Mult (BinOp (Name &maximoNecesarios:0 Load) Sub (Name &i:0 Load)))) (AugAssign (Name &pila:0 Store) Sub (BinOp (Subscript (Name &datos:0 Load) (_slice_content (Constant i0 None)) Load) Mult (BinOp (Name &maximoNecesarios:0 Load) Sub (Name &i:0 Load)))) (If (Compare (Name &pila:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &estado:0 Store)) (Constant False None) None)) (/seq)) (If (Name &estado:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &c:0 &b:0 &a:0) (Assign (list (Name &t:0 Store)) (BinOp (BinOp (Name &c:0 Load) Mult (Name &a:0 Load)) FloorDiv (Name &b:0 Load)) None) (Assign (list (Name &le:0 Store)) (Constant i0 None) None) (Assign (list (Name &ri:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None) (While (Compare (BinOp (Name &le:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &ri:0 Load))) (/seq (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Name &le:0 Load) Add (Name &ri:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &m:0 Load) Mult (Name &b:0 Load)) Mod (Name &a:0 Load)) None) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) (Assign (list (Name &t:0 Store)) (BinOp (BinOp (Name &m:0 Load) Mult (Name &b:0 Load)) FloorDiv (Name &a:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &c:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &k:0 Store) Add (Name &b:0 Load)) (AugAssign (Name &t:0 Store) Add (BinOp (Name &k:0 Load) FloorDiv (Name &a:0 Load))) (AugAssign (Name &k:0 Store) Mod (Name &a:0 Load)) (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (If (Compare (Name &t:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &le:0 Store)) (Name &m:0 Load) None)) (/seq (Assign (list (Name &ri:0 Store)) (Name &m:0 Load) None)))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ri:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &R:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name &R:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None)) i0) (FunctionDef &football:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:1 Store)) (BinOp (Name &a:1 Load) Mult (Name &c:1 Load)) None) (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (_starred_content (Name &l:1 Store)) (_starred_content (Name &h:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &x:1 Load) FloorDiv (Name &b:1 Load)) Add (Constant i1 None)))) Load) None) (While (Compare (Name &l:1 Load) (list LtE) (list (Name &h:1 Load))) (/seq (Assign (list (Name &mid:1 Store)) (BinOp (BinOp (Name &l:1 Load) Add (Name &h:1 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &foo:1 Store)) (BinOp (BinOp (Name &mid:1 Load) Mult (Name &b:1 Load)) Add (BinOp (Name &b:1 Load) Mult (Name &c:1 Load))) None) (If (Compare (Name &foo:1 Load) (list GtE) (list (Name &x:1 Load))) (/seq (Assign (list (Name &ans:1 Store)) (Name &mid:1 Load) None) (Assign (list (Name &h:1 Store)) (BinOp (Name &mid:1 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &l:1 Store)) (BinOp (Name &mid:1 Load) Add (Constant i1 None)) None)))) (/seq)) (Return (Name &ans:1 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &football:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Sub (BinOp (Name &b:0 Load) Mult (Name &c:0 Load))) None) (While (Compare (BinOp (Name &k:0 Load) Mod (Name &b:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) FloorDiv (Name &b:0 Load)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &t:0 &d:0 &w:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &w:0 Load) Sub (Name &d:0 Load)) Mult (Name &t:0 Load)) Div (Name &d:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (fn_1 &c:0 &b:0 &a:0) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &S0:0 Store)) (BinOp (Name &t:0 Load) Mult (Name &b:0 Load)) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &c:0 Load))) nil) (/seq (AugAssign (Name &S0:0 Store) Add (BinOp (Name &b:0 Load) Sub (Name &a:0 Load))) (If (Compare (Name &S0:0 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)) (AugAssign (Name &flag:0 Store) Add (Constant i1 None)) Break) (/seq))) (/seq) None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil)) Break) (/seq))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_bisect None))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (Assign (list (Name &times:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None)))) nil) (/seq (Expr (Call (Attribute (Name &times:0 Load) s_append Load) (list (_starred_content (BinOp (Name &b:0 Load) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None))))) nil))) (/seq) None) (Assign (list (Name &pos:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect_left Load) (list (_starred_content (Name &times:0 Load)) (_starred_content (BinOp (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) Mult (Name &c:0 Load))) (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &times:0 Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &pos:0 Load) Add (Constant i1 None)))) nil))) nil)",
      "(Module (/seq (fn_1 &c:0 &b:0 &a:0) (Assign (list (Name &left:0 Store)) (Constant i0 None) None) (Assign (list (Name &right:0 Store)) (BinOp (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Add (Name &b:0 Load)) Sub (Constant i1 None)) FloorDiv (Name &b:0 Load)) None) (Assign (list (Name &all:0 Store)) (Name &right:0 Load) None) (While (Compare (BinOp (Name &left:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &right:0 Load))) (/seq (Assign (list (Name &t:0 Store)) (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (BinOp (Name &all:0 Load) Mult (Name &b:0 Load)) (list GtE) (list (BinOp (BinOp (Name &all:0 Load) Sub (Name &t:0 Load)) Mult (Name &a:0 Load)))) (/seq (Assign (list (Name &right:0 Store)) (Name &t:0 Load) None)) (/seq (Assign (list (Name &left:0 Store)) (Name &t:0 Load) None)))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &right:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (Import (list (alias g_string None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &array_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:3 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &vary:0\n      (arguments nil (list (arg &number_of_variables:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &number_of_variables:1 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Return\n              (Call\n                (Name g_int Load)\n                (list\n                  (_starred_content\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &number_of_variables:1 Load) (list GtE) (list (Constant i2 None)))\n          (/seq\n            (Return\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute\n                        (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                        s_split\n                        Load\n                      )\n                      nil\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &makedict:0\n      (arguments nil (list (arg &var:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_dict Load)\n            (list (_starred_content (Call (Name g_Counter Load) (list (_starred_content (Name &var:2 Load))) nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &mod:0 Store)) (Constant i100000007 None) None)\n    (Assign (list (Name &k:0 Store)) (Call (Name &vary:0 Load) (list (_starred_content (Constant i1 None))) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &tt:0 Store))\n      (Call\n        (Name &makedict:0 Load)\n        (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &tt:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Subscript (Name &tt:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load))\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (Name &i:0 Load)\n                Mult\n                (BinOp (Subscript (Name &tt:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Name &k:0 Load))\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Mult (Name &k:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (UnaryOp\n        Not\n        (Call\n          (Name g_all Load)\n          (list\n            (_starred_content\n              (ListComp\n                (Compare\n                  (BinOp\n                    (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &ch:1 Load))) nil)\n                    Mod\n                    (Name &k:0 Load)\n                  )\n                  (list Eq)\n                  (list (Constant i0 None))\n                )\n                (list\n                  (comprehension\n                    (Name &ch:1 Store)\n                    (Call (Name g_set Load) (list (_starred_content (Name &s:0 Load))) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (BinOp\n            (ListComp\n              (BinOp\n                (Name &ch:2 Load)\n                Mult\n                (BinOp\n                  (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &ch:2 Load))) nil)\n                  FloorDiv\n                  (Name &k:0 Load)\n                )\n              )\n              (list\n                (comprehension\n                  (Name &ch:2 Store)\n                  (Call (Name g_set Load) (list (_starred_content (Name &s:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            Mult\n            (Name &k:0 Load)\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &l:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &count_arr:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &count_arr:0 Load)\n            (_slice_content\n              (BinOp\n                (Call (Name g_ord Load) (list (_starred_content (Name &i:0 Load))) nil)\n                Sub\n                (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)\n              )\n            )\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Subscript (Name &count_arr:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load))\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq\n            (If\n              (Subscript (Name &count_arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Call\n                            (Name g_chr Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)\n                                  Add\n                                  (Name &i:0 Load)\n                                )\n                              )\n                            )\n                            nil\n                          )\n                          Mult\n                          (BinOp\n                            (Subscript (Name &count_arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                            FloorDiv\n                            (Name &k:0 Load)\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_starred (Starred (BinOp (Name &ans:0 Load) Mult (Name &k:0 Load)) Load)))\n        (list (keyword s_sep (Constant s_ None)))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_dict Load)\n        (list\n          (_starred_content\n            (Call (Name g_Counter Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r:0 Store)) (_starred_content (Name &t:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant s_ None)) (_starred_content (Constant i1 None))) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load))\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n            (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n            Break\n          )\n          (/seq\n            (AugAssign\n              (Name &r:0 Store)\n              Add\n              (BinOp\n                (Name &i:0 Load)\n                Mult\n                (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Name &k:0 Load))\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Name &t:0 Load)\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Mult (Name &k:0 Load)))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4NCwgMTE3LCAxMDEsIDMyLCA3NCwgOTcsIDExMCwgMzIsIDMyLCA1NiwgMzIsIDQ5LCA1NCwgNTgsIDUyLCA1MCwgNTgsIDUwLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU3LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgMTE3LCAxMDksIDk3LCAxMTAsIDEwMywgMTBd\n        None\n      )\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &string:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &freq:0 Store))\n      (DictComp\n        (Name &i:1 Load)\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Constant s_abcdefghijklmnopqrstuvwxyz None) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &string:0 Load)\n      (/seq (AugAssign (Subscript (Name &freq:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (If\n      (Call\n        (Name g_any Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Compare (BinOp (Name &i:2 Load) Mod (Name &k:0 Load)) (list NotEq) (list (Constant i0 None)))\n              (list\n                (comprehension (Name &i:2 Store) (Call (Attribute (Name &freq:0 Load) s_values Load) nil nil) nil i0)\n              )\n            )\n          )\n        )\n        nil\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Assign (list (Name &a:0 Store)) (Constant s_ None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Attribute (Name &freq:0 Load) s_keys Load) nil nil)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &freq:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      FloorDiv\n                      (Name &k:0 Load)\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq (AugAssign (Name &a:0 Store) Add (Name &i:0 Load)))\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) Mult (Name &a:0 Load)))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (BinOp (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (Name &n:0 Load))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_sorted Load) (list (_starred_content (Name &x:0 Load))) nil)\n        (list Eq)\n        (list (Name &s:0 Load))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &x:0 Load))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (Assign (list (Name &d1:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &s:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &v:0 Load) (list In) (list (Name &d:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store))\n              (BinOp (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Load) Add (Constant i1 None))\n              None\n            )\n          )\n          (/seq\n            (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store)) (Constant i1 None) None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &minimum:0 Store))\n      (Call\n        (Name g_min Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list (_starred_content (Call (Attribute (Name &d:0 Load) s_values Load) nil nil)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare\n        (Call\n          (Name g_min Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_list Load)\n                (list (_starred_content (Call (Attribute (Name &d:0 Load) s_values Load) nil nil)))\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list Lt)\n        (list (Name &k:0 Load))\n      )\n      (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None))\n      (/seq\n        (For\n          (Tuple (list (_starred_content (Name &key:0 Store)) (_starred_content (Name &value:0 Store))) Store)\n          (Call (Attribute (Name &d:0 Load) s_items Load) nil nil)\n          (/seq\n            (If\n              (Compare (BinOp (Name &value:0 Load) Mod (Name &k:0 Load)) (list Gt) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &d1:0 Load) (_slice_content (Name &key:0 Load)) Store))\n                  (BinOp (Name &value:0 Load) FloorDiv (Name &k:0 Load))\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n    )\n    (If\n      (Name &flag:0 Load)\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil)\n          (/seq\n            (For\n              (Tuple (list (_starred_content (Name &key:0 Store)) (_starred_content (Name &value:0 Store))) Store)\n              (Call (Attribute (Name &d1:0 Load) s_items Load) nil nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (BinOp (Name &key:0 Load) Mult (Name &value:0 Load))))\n                    (list (keyword s_end (Constant s_ None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (FunctionDef\n      &func:0\n      (arguments nil (list (arg &k:1 None None) (arg &s:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None)\n        (If\n          (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Return (Name &s:1 Load)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:1 Load) Mod (Name &k:1 Load)) (list NotEq) (list (Constant i0 None)))\n              (/seq (Return (UnaryOp USub (Constant i1 None))))\n              (/seq)\n            )\n          )\n        )\n        (Assign\n          (list (Name &d:1 Store))\n          (Call (Name g_Counter Load) (list (_starred_content (Name &s:1 Load))) nil)\n          None\n        )\n        (Assign (list (Name &res:1 Store)) (List nil Load) None)\n        (For\n          (Name &key:1 Store)\n          (Name &d:1 Load)\n          (/seq\n            (If\n              (Compare\n                (BinOp (Subscript (Name &d:1 Load) (_slice_content (Name &key:1 Load)) Load) Mod (Name &k:1 Load))\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n              (/seq (Return (UnaryOp USub (Constant i1 None))) Break)\n              (/seq)\n            )\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &d:1 Load) (_slice_content (Name &key:1 Load)) Load)\n                      FloorDiv\n                      (Name &k:1 Load)\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call (Attribute (Name &res:1 Load) s_append Load) (list (_starred_content (Name &key:1 Load))) nil)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return\n          (Call\n            (Attribute (Constant s_ None) s_join Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Name &i:2 Load)\n                  (list\n                    (comprehension\n                      (Name &i:2 Store)\n                      (BinOp\n                        (Name &res:1 Load)\n                        Mult\n                        (BinOp\n                          (Name &n:1 Load)\n                          FloorDiv\n                          (Call (Name g_len Load) (list (_starred_content (Name &res:1 Load))) nil)\n                        )\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &func:0 Load)\n              (list (_starred_content (Name &k:0 Load)) (_starred_content (Name &s:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None)\n    (Assign (list (Name &n:0 Store)) (List nil Load) None)\n    (Assign (list (Name &kq:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &n:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Name &s:0 Load) s_count Load)\n                  (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (If\n          (Compare\n            (BinOp (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load))\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) Div (Name &k:0 Load))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (While\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Gt)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign\n              (list (Name &kq:0 Store))\n              (BinOp (Name &kq:0 Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              None\n            )\n            (Assign\n              (list (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (BinOp (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil)\n      (/seq (Assign (list (Name &t:0 Store)) (BinOp (Name &t:0 Load) Add (Name &kq:0 Load)) None))\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &kstring:0\n      (arguments nil (list (arg &s:1 None None) (arg &k:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) Mod (Name &k:1 Load))\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq (Return (Constant s_ None)))\n          (/seq\n            (ImportFrom s_collections (list (alias &Counter:1 None)) i0)\n            (Assign\n              (list (Name &d:1 Store))\n              (Call\n                (Name g_dict Load)\n                (list (_starred_content (Call (Name &Counter:1 Load) (list (_starred_content (Name &s:1 Load))) nil)))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &ans:1 Store)) (List nil Load) None)\n            (For\n              (Name &letter:1 Store)\n              (Name &d:1 Load)\n              (/seq\n                (Assign\n                  (list (Name &count:1 Store))\n                  (Subscript (Name &d:1 Load) (_slice_content (Name &letter:1 Load)) Load)\n                  None\n                )\n                (If\n                  (Compare (BinOp (Name &count:1 Load) Mod (Name &k:1 Load)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &ans:1 Load) s_append Load)\n                        (list\n                          (_starred_content\n                            (BinOp (Name &letter:1 Load) Mult (BinOp (Name &count:1 Load) FloorDiv (Name &k:1 Load)))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq (Return (Constant s_ None)))\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign\n              (list (Name &ans:1 Store))\n              (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &ans:1 Load))) nil)\n              None\n            )\n            (Assign (list (Name &ans:1 Store)) (BinOp (Name &ans:1 Load) Mult (Name &k:1 Load)) None)\n            (Return (Name &ans:1 Load))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name &kstring:0 Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &k:0 Load))) nil)\n      None\n    )\n    (If\n      (UnaryOp Not (Name &a:0 Load))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (Import (list (alias g_string None))) (Import (list (alias g_math None))) (Import (list (alias g_sys None))) (FunctionDef &array_int:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &vary:0 (arguments nil (list (arg &number_of_variables:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &number_of_variables:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) (/seq)) (If (Compare (Name &number_of_variables:1 Load) (list GtE) (list (Constant i2 None))) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) (/seq))) nil None None) (FunctionDef &makedict:0 (arguments nil (list (arg &var:2 None None)) None nil nil None nil) (/seq (Return (Call (Name g_dict Load) (list (_starred_content (Call (Name g_Counter Load) (list (_starred_content (Name &var:2 Load))) nil))) nil))) nil None None) (Assign (list (Name &mod:0 Store)) (Constant i100000007 None) None) (Assign (list (Name &k:0 Store)) (Call (Name &vary:0 Load) (list (_starred_content (Constant i1 None))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &tt:0 Store)) (Call (Name &makedict:0 Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Name &tt:0 Load) (/seq (If (Compare (BinOp (Subscript (Name &tt:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (fn_1) (Expr (Call (Name g_exit Load) nil nil))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Name &i:0 Load) Mult (BinOp (Subscript (Name &tt:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Name &k:0 Load))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Mult (Name &k:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (If (UnaryOp Not (Call (Name g_all Load) (list (_starred_content (ListComp (Compare (BinOp (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &ch:1 Load))) nil) Mod (Name &k:0 Load)) (list Eq) (list (Constant i0 None))) (list (comprehension (Name &ch:1 Store) (Call (Name g_set Load) (list (_starred_content (Name &s:0 Load))) nil) nil i0))))) nil)) (/seq (fn_1)) (/seq (Assign (list (Name &l:0 Store)) (BinOp (ListComp (BinOp (Name &ch:2 Load) Mult (BinOp (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Name &ch:2 Load))) nil) FloorDiv (Name &k:0 Load))) (list (comprehension (Name &ch:2 Store) (Call (Name g_set Load) (list (_starred_content (Name &s:0 Load))) nil) nil i0))) Mult (Name &k:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &l:0 Load))) nil))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &count_arr:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (AugAssign (Subscript (Name &count_arr:0 Load) (_slice_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Name &i:0 Load))) nil) Sub (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil))) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil) (/seq (If (Compare (BinOp (Subscript (Name &count_arr:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (fn_1) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Subscript (Name &count_arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (_starred_content (BinOp (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil) Add (Name &i:0 Load)))) nil) Mult (BinOp (Subscript (Name &count_arr:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Name &k:0 Load))))) nil))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (BinOp (Name &ans:0 Load) Mult (Name &k:0 Load)) Load))) (list (keyword s_sep (Constant s_ None)))))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_dict Load) (list (_starred_content (Call (Name g_Counter Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &r:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Tuple (list (_starred_content (Constant s_ None)) (_starred_content (Constant i1 None))) Load) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (fn_1) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) Break) (/seq (AugAssign (Name &r:0 Store) Add (BinOp (Name &i:0 Load) Mult (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Name &k:0 Load))))))) (/seq) None) (If (Name &t:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Mult (Name &k:0 Load)))) nil))) (/seq))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4NCwgMTE3LCAxMDEsIDMyLCA3NCwgOTcsIDExMCwgMzIsIDMyLCA1NiwgMzIsIDQ5LCA1NCwgNTgsIDUyLCA1MCwgNTgsIDUwLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU3LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgMTE3LCAxMDksIDk3LCAxMTAsIDEwMywgMTBd None)) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &string:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &freq:0 Store)) (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Constant s_abcdefghijklmnopqrstuvwxyz None) nil i0))) None) (For (Name &i:0 Store) (Name &string:0 Load) (/seq (AugAssign (Subscript (Name &freq:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (If (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (BinOp (Name &i:2 Load) Mod (Name &k:0 Load)) (list NotEq) (list (Constant i0 None))) (list (comprehension (Name &i:2 Store) (Call (Attribute (Name &freq:0 Load) s_values Load) nil nil) nil i0))))) nil) (/seq (fn_1)) (/seq (Assign (list (Name &a:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Attribute (Name &freq:0 Load) s_keys Load) nil nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Subscript (Name &freq:0 Load) (_slice_content (Name &i:0 Load)) Load) FloorDiv (Name &k:0 Load)))) nil) (/seq (AugAssign (Name &a:0 Store) Add (Name &i:0 Load))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &k:0 Load) Mult (Name &a:0 Load)))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (Name &n:0 Load))) Load) Mult (Name &n:0 Load)) None) (If (Compare (Call (Name g_sorted Load) (list (_starred_content (Name &x:0 Load))) nil) (list Eq) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &x:0 Load))) nil))) nil))) (/seq (fn_1)))) nil)",
      "(Module (/seq (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Name &d1:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Name &flag:0 Store)) (Constant True None) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &v:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &s:0 Load))) nil) (/seq (If (Compare (Name &v:0 Load) (list In) (list (Name &d:0 Load))) (/seq (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store)) (BinOp (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store)) (Constant i1 None) None)))) (/seq) None) (Assign (list (Name &minimum:0 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Name &d:0 Load) s_values Load) nil nil))) nil))) nil) None) (If (Compare (Call (Name g_min Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Name &d:0 Load) s_values Load) nil nil))) nil))) nil) (list Lt) (list (Name &k:0 Load))) (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None)) (/seq (For (Tuple (list (_starred_content (Name &key:0 Store)) (_starred_content (Name &value:0 Store))) Store) (Call (Attribute (Name &d:0 Load) s_items Load) nil nil) (/seq (If (Compare (BinOp (Name &value:0 Load) Mod (Name &k:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None)) (/seq (Assign (list (Subscript (Name &d1:0 Load) (_slice_content (Name &key:0 Load)) Store)) (BinOp (Name &value:0 Load) FloorDiv (Name &k:0 Load)) None)))) (/seq) None))) (If (Name &flag:0 Load) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (For (Tuple (list (_starred_content (Name &key:0 Store)) (_starred_content (Name &value:0 Store))) Store) (Call (Attribute (Name &d1:0 Load) s_items Load) nil nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &key:0 Load) Mult (Name &value:0 Load)))) (list (keyword s_end (Constant s_ None)))))) (/seq) None)) (/seq) None)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (FunctionDef &func:0 (arguments nil (list (arg &k:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Name &s:1 Load))) (/seq (If (Compare (BinOp (Name &n:1 Load) Mod (Name &k:1 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Return (UnaryOp USub (Constant i1 None)))) (/seq)))) (Assign (list (Name &d:1 Store)) (Call (Name g_Counter Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &res:1 Store)) (List nil Load) None) (For (Name &key:1 Store) (Name &d:1 Load) (/seq (If (Compare (BinOp (Subscript (Name &d:1 Load) (_slice_content (Name &key:1 Load)) Load) Mod (Name &k:1 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Return (UnaryOp USub (Constant i1 None))) Break) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Subscript (Name &d:1 Load) (_slice_content (Name &key:1 Load)) Load) FloorDiv (Name &k:1 Load)))) nil) (/seq (Expr (Call (Attribute (Name &res:1 Load) s_append Load) (list (_starred_content (Name &key:1 Load))) nil))) (/seq) None)) (/seq) None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (BinOp (Name &res:1 Load) Mult (BinOp (Name &n:1 Load) FloorDiv (Call (Name g_len Load) (list (_starred_content (Name &res:1 Load))) nil))) nil i0))))) nil))) nil None None) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &func:0 Load) (list (_starred_content (Name &k:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None) (Assign (list (Name &n:0 Store)) (List nil Load) None) (Assign (list (Name &kq:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil) (/seq (Expr (Call (Attribute (Name &n:0 Load) s_append Load) (list (_starred_content (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil)) (If (Compare (BinOp (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) Mod (Name &k:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (fn_1) (Expr (Call (Name g_exit Load) nil nil))) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i26 None))) nil) (/seq (Assign (list (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) Div (Name &k:0 Load)))) nil) None) (While (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &kq:0 Store)) (BinOp (Name &kq:0 Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) None) (Assign (list (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)) None)) (/seq))) (/seq) None) (Assign (list (Name &t:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (Assign (list (Name &t:0 Store)) (BinOp (Name &t:0 Load) Add (Name &kq:0 Load)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &kstring:0 (arguments nil (list (arg &s:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) Mod (Name &k:1 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Return (Constant s_ None))) (/seq (ImportFrom s_collections (list (alias &Counter:1 None)) i0) (Assign (list (Name &d:1 Store)) (Call (Name g_dict Load) (list (_starred_content (Call (Name &Counter:1 Load) (list (_starred_content (Name &s:1 Load))) nil))) nil) None) (Assign (list (Name &ans:1 Store)) (List nil Load) None) (For (Name &letter:1 Store) (Name &d:1 Load) (/seq (Assign (list (Name &count:1 Store)) (Subscript (Name &d:1 Load) (_slice_content (Name &letter:1 Load)) Load) None) (If (Compare (BinOp (Name &count:1 Load) Mod (Name &k:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ans:1 Load) s_append Load) (list (_starred_content (BinOp (Name &letter:1 Load) Mult (BinOp (Name &count:1 Load) FloorDiv (Name &k:1 Load))))) nil))) (/seq (Return (Constant s_ None))))) (/seq) None) (Assign (list (Name &ans:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &ans:1 Load))) nil) None) (Assign (list (Name &ans:1 Store)) (BinOp (Name &ans:1 Load) Mult (Name &k:1 Load)) None) (Return (Name &ans:1 Load))))) nil None None) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &kstring:0 Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &k:0 Load))) nil) None) (If (UnaryOp Not (Name &a:0 Load)) (/seq (fn_1)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &mat:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &mat:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content\n                            (Call\n                              (Attribute\n                                (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil)\n                                s_split\n                                Load\n                              )\n                              nil\n                              nil\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &mat:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (list Eq)\n                (list\n                  (Subscript\n                    (Subscript (Name &mat:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                )\n              )\n              (/seq (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Add (Constant i1 None)) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &ha:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &h:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &hai:0 Store)\n      (Name &ha:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &h:0 Load) s_append Load)\n            (list (_starred_content (Subscript (Name &hai:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list (_starred_content (Subscript (Name &hai:0 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store)\n      (Call\n        (Attribute (Name g_itertools Load) s_product Load)\n        (list (_starred_content (Name &h:0 Load)) (_starred_content (Name &a:0 Load)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Name &j:0 Load)))\n          (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (ListComp\n          (Constant i0 None)\n          (list\n            (comprehension\n              (Name &col:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &row:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &n:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &s:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &s:0 Load)\n                  Add\n                  (Compare\n                    (Subscript\n                      (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n                Add\n                (Compare\n                  (Subscript\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                  (list Eq)\n                  (list\n                    (Subscript\n                      (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &nums:0 Store)) (List nil Load) None)\n    (For\n      (Name &x:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &nums:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &p:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &q:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &p:0 Load) (list NotEq) (list (Name &q:0 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript\n                      (Subscript (Name &nums:0 Load) (_slice_content (Name &p:0 Load)) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Subscript (Name &nums:0 Load) (_slice_content (Name &q:0 Load)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp\n            (Name &t:0 Load)\n            Add\n            (List\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              Load\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &n:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (list Eq)\n                (list\n                  (Subscript\n                    (Subscript (Name &t:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                )\n              )\n              (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &x:0 Load) Add (Constant i1 None)) None))\n              (/seq)\n            )\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (list Eq)\n                (list\n                  (Subscript\n                    (Subscript (Name &t:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (_slice_content (Constant i0 None))\n                    Load\n                  )\n                )\n              )\n              (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &x:0 Load) Add (Constant i1 None)) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &lx:0 Store)) (List nil Load) None)\n    (Assign (list (Name &ly:0 Store)) (List nil Load) None)\n    (Assign (list (Name &sm:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &lx:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil))\n        (Expr (Call (Attribute (Name &ly:0 Load) s_append Load) (list (_starred_content (Name &y:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &ly:0 Load)\n      (/seq\n        (AugAssign\n          (Name &sm:0 Store)\n          Add\n          (Call (Attribute (Name &lx:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &sm:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &li:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Name &li:0 Store)\n          Add\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &li:0 Load))) nil))\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &li:0 Load))) nil))\n              (_starred_content (Constant i2 None))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &j:0 Load) Sub (Constant i1 None))))\n                  (Compare\n                    (Subscript (Name &li:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &li:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &x:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load))\n              )\n              (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &a:0 Store))) Store))\n      (Call\n        (Name g_zip Load)\n        (list\n          (_starred_starred\n            (Starred\n              (ListComp\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n                (list\n                  (comprehension\n                    (Name &_:2 Store)\n                    (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &res:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &k:1 Load))) nil)\n              (list (comprehension (Name &k:1 Store) (Name &h:0 Load) nil i0))\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n                  (list\n                    (comprehension\n                      (Name &x:1 Store)\n                      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &x:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (list Eq)\n                (list\n                  (Subscript\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &x:0 Load)) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &m:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &n:0 &mat:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &mat:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &mat:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &mat:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &ha:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &h:0 Store)) (List nil Load) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (For (Name &hai:0 Store) (Name &ha:0 Load) (/seq (Expr (Call (Attribute (Name &h:0 Load) s_append Load) (list (_starred_content (Subscript (Name &hai:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Subscript (Name &hai:0 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store) (Call (Attribute (Name g_itertools Load) s_product Load) (list (_starred_content (Name &h:0 Load)) (_starred_content (Name &a:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Name &j:0 Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (ListComp (Constant i0 None) (list (comprehension (Name &col:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) nil i0))) (list (comprehension (Name &row:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None)) (/seq) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &s:0 Load) Add (Compare (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load)))) Add (Compare (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load)))) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &nums:0)) (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &nums:0 Load) s_append Load) (list (_starred_content (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &p:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &q:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &p:0 Load) (list NotEq) (list (Name &q:0 Load))) (/seq (If (Compare (Subscript (Subscript (Name &nums:0 Load) (_slice_content (Name &p:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &nums:0 Load) (_slice_content (Name &q:0 Load)) Load) (_slice_content (Constant i1 None)) Load))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &t:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &t:0 Store)) (BinOp (Name &t:0 Load) Add (List (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) Load)) None)) (/seq) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &t:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &x:0 Load) Add (Constant i1 None)) None)) (/seq)) (If (Compare (Subscript (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &t:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &x:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &lx:0)) (Assign (list (Name &ly:0 Store)) (List nil Load) None) (Assign (list (Name &sm:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &lx:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Attribute (Name &ly:0 Load) s_append Load) (list (_starred_content (Name &y:0 Load))) nil))) (/seq) None) (For (Name &i:0 Store) (Name &ly:0 Load) (/seq (AugAssign (Name &sm:0 Store) Add (Call (Attribute (Name &lx:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &sm:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &li:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &li:0 Store) Add (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) (/seq) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &li:0 Load))) nil)) (_starred_content (Constant i2 None))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &li:0 Load))) nil)) (_starred_content (Constant i2 None))) nil) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &j:0 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name &li:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Subscript (Name &li:0 Load) (_slice_content (Name &j:0 Load)) Load))))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &x:0)) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &x:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &a:0 Store))) Store)) (Call (Name g_zip Load) (list (_starred_starred (Starred (ListComp (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) Load))) nil) None) (Assign (list (Name &res:0 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &k:1 Load))) nil) (list (comprehension (Name &k:1 Store) (Name &h:0 Load) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) nil))) (/seq) None) (Assign (list (Name &m:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (_slice_content (Name &x:0 Load)) Load) (_slice_content (Constant i1 None)) Load))) (/seq (AugAssign (Name &m:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &text:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil) None)\n    (Assign\n      (list (Name &caps:0 Store))\n      (BinOp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        Add\n        (Constant i97 None)\n      )\n      None\n    )\n    (For\n      (Name &letter:0 Store)\n      (Name &text:0 Load)\n      (/seq\n        (Expr\n          (IfExp\n            (Compare\n              (Name &letter:0 Load)\n              (list Lt)\n              (list (Call (Name g_chr Load) (list (_starred_content (Name &caps:0 Load))) nil))\n            )\n            (Call\n              (Name g_print Load)\n              (list (_starred_content (Call (Attribute (Name &letter:0 Load) s_upper Load) nil nil)))\n              (list (keyword s_end (Constant s_ None)))\n            )\n            (Call\n              (Name g_print Load)\n              (list (_starred_content (Name &letter:0 Load)))\n              (list (keyword s_end (Constant s_ None)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &s:0 Load) s_lower Load) nil nil) None)\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Attribute\n          (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &s:0 Load))) nil)\n          s_split\n          Load\n        )\n        nil\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &n:0 Load) Add (Constant i96 None))\n            (list GtE)\n            (list\n              (Call\n                (Name g_ord Load)\n                (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Call\n                (Name g_chr Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_ord Load)\n                        (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                        nil\n                      )\n                      Sub\n                      (Constant i32 None)\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n            (list (keyword s_end (Constant s_ None)))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil))\n          (_starred_content\n            (Subscript\n              (Constant\n                s-Wzk3LCA5OCwgOTksIDEwMCwgMTAxLCAxMDIsIDEwMywgMTA0LCAxMDUsIDEwNiwgMTA3LCAxMDgsIDEwOSwgMTEwLCAxMTEsIDExMiwgMTEzLCAxMTQsIDExNSwgMTE2LCAxMTcsIDExOCwgMTE5LCAxMjAsIDEyMSwgMTIyLCAxMjRd\n                None\n              )\n              (_slice_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n              Load\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s_ None) s_join Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (IfExp\n                      (Compare (Name &i:1 Load) (list Lt) (list (Name &p:0 Load)))\n                      (Call (Attribute (Name &i:1 Load) s_upper Load) nil nil)\n                      (Name &i:1 Load)\n                    )\n                    (list (comprehension (Name &i:1 Store) (Name &t:0 Load) nil i0))\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil))\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s_ None) s_join Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (IfExp\n                      (Compare\n                        (Call (Name g_ord Load) (list (_starred_content (Name &t:1 Load))) nil)\n                        (list Lt)\n                        (list (BinOp (Name &s:0 Load) Add (Constant i97 None)))\n                      )\n                      (Call (Attribute (Name &t:1 Load) s_upper Load) nil nil)\n                      (Call (Attribute (Name &t:1 Load) s_lower Load) nil nil)\n                    )\n                    (list (comprehension (Name &t:1 Store) (Name &a:0 Load) nil i0))\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil) None)\n    (Assign\n      (list (Name &num:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_ord Load) (list (_starred_content (Name &i:0 Load))) nil)\n            (list Lt)\n            (list (BinOp (Name &num:0 Load) Add (Constant i97 None)))\n          )\n          (/seq (AugAssign (Name &c:0 Store) Add (Call (Attribute (Name &i:0 Load) s_upper Load) nil nil)))\n          (/seq (AugAssign (Name &c:0 Store) Add (Call (Attribute (Name &i:0 Load) s_lower Load) nil nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_input Load) nil nil))\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &x:0 Store)\n      (Call (Attribute (Name &s:0 Load) s_lower Load) nil nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_ord Load) (list (_starred_content (Name &x:0 Load))) nil)\n            (list Lt)\n            (list (BinOp (Name &n:0 Load) Add (Constant i97 None)))\n          )\n          (/seq (AugAssign (Name &res:0 Store) Add (Call (Attribute (Name &x:0 Load) s_upper Load) nil nil)))\n          (/seq (AugAssign (Name &res:0 Store) Add (Name &x:0 Load)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &s:0 Load) s_lower Load) nil nil) None)\n    (Assign (list (Name &f:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Assign (list (Name &o:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n        (If\n          (Compare\n            (Call (Name g_ord Load) (list (_starred_content (Name &o:0 Load))) nil)\n            (list Lt)\n            (list (BinOp (Name &n:0 Load) Add (Constant i97 None)))\n          )\n          (/seq (AugAssign (Name &f:0 Store) Add (Call (Attribute (Name &o:0 Load) s_upper Load) nil nil)))\n          (/seq (AugAssign (Name &f:0 Store) Add (Call (Attribute (Name &o:0 Load) s_lower Load) nil nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None)\n    (Assign (list (Name &X:0 Store)) (Constant s_ABCDEFGHIJKLMNOPQRSTUVWXYZ None) None)\n    (Assign\n      (list (Name &z:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &z:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list In)\n            (list (Name &x:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &k:0 Store))\n              (BinOp\n                (Call\n                  (Attribute (Name &x:0 Load) s_index Load)\n                  (list (_starred_content (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &k:0 Store))\n              (BinOp\n                (Call\n                  (Attribute (Name &X:0 Load) s_index Load)\n                  (list (_starred_content (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n          )\n        )\n        (If\n          (Compare (Name &k:0 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Call\n                (Attribute (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load) s_upper Load)\n                nil\n                nil\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Call\n                (Attribute (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load) s_lower Load)\n                nil\n                nil\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &z:0 Load))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &result:0 Store))\n      (Call\n        (Attribute (Constant s_ None) s_join Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (IfExp\n                (Compare\n                  (Call (Name g_ord Load) (list (_starred_content (Name &c:1 Load))) nil)\n                  (list Lt)\n                  (list (BinOp (Name &k:0 Load) Add (Constant i97 None)))\n                )\n                (Call (Attribute (Name &c:1 Load) s_upper Load) nil nil)\n                (Call (Attribute (Name &c:1 Load) s_lower Load) nil nil)\n              )\n              (list (comprehension (Name &c:1 Store) (Name &s:0 Load) nil i0))\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Call\n                (Name g_ord Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n              Sub\n              (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)\n            )\n            (list Lt)\n            (list (Name &b:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Call\n                (Attribute (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) s_upper Load)\n                nil\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &a:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Constant s_ None) None) (For (Name %3 Store) #2 (/seq ?0 (If (Compare (Call (Name g_ord Load) (list (_starred_content #1)) nil) (list Lt) (list (BinOp (Name %2 Load) Add (Constant i97 None)))) (/seq (AugAssign (Name %1 Store) Add (Call (Attribute #1 s_upper Load) nil nil))) (/seq (AugAssign (Name %1 Store) Add #0)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &text:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil) None) (Assign (list (Name &caps:0 Store)) (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) Add (Constant i97 None)) None) (For (Name &letter:0 Store) (Name &text:0 Load) (/seq (Expr (IfExp (Compare (Name &letter:0 Load) (list Lt) (list (Call (Name g_chr Load) (list (_starred_content (Name &caps:0 Load))) nil))) (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &letter:0 Load) s_upper Load) nil nil))) (list (keyword s_end (Constant s_ None)))) (Call (Name g_print Load) (list (_starred_content (Name &letter:0 Load))) (list (keyword s_end (Constant s_ None))))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &s:0 Load) s_lower Load) nil nil) None) (Assign (list (Name &s:0 Store)) (Call (Attribute (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &s:0 Load))) nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Name &n:0 Load) Add (Constant i96 None)) (list GtE) (list (Call (Name g_ord Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq (Assign (list (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Sub (Constant i32 None)))) nil) None)) (/seq))) (/seq) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Name &j:0 Load)) Load))) (list (keyword s_end (Constant s_ None)))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &p:0 Store))) Store)) (Tuple (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil)) (_starred_content (Subscript (Constant s-Wzk3LCA5OCwgOTksIDEwMCwgMTAxLCAxMDIsIDEwMywgMTA0LCAxMDUsIDEwNiwgMTA3LCAxMDgsIDEwOSwgMTEwLCAxMTEsIDExMiwgMTEzLCAxMTQsIDExNSwgMTE2LCAxMTcsIDExOCwgMTE5LCAxMjAsIDEyMSwgMTIyLCAxMjRd None) (_slice_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (IfExp (Compare (Name &i:1 Load) (list Lt) (list (Name &p:0 Load))) (Call (Attribute (Name &i:1 Load) s_upper Load) nil nil) (Name &i:1 Load)) (list (comprehension (Name &i:1 Store) (Name &t:0 Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Tuple (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (IfExp (Compare (Call (Name g_ord Load) (list (_starred_content (Name &t:1 Load))) nil) (list Lt) (list (BinOp (Name &s:0 Load) Add (Constant i97 None)))) (Call (Attribute (Name &t:1 Load) s_upper Load) nil nil) (Call (Attribute (Name &t:1 Load) s_lower Load) nil nil)) (list (comprehension (Name &t:1 Store) (Name &a:0 Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Call (Attribute (Name &i:0 Load) s_lower Load) nil nil) (Name &i:0 Load) (Name &a:0 Load) &c:0 &num:0 &i:0 /nothing))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_input Load) nil nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) Load) None) (/splice (fn_1 (Name &x:0 Load) (Name &x:0 Load) (Call (Attribute (Name &s:0 Load) s_lower Load) nil nil) &res:0 &n:0 &x:0 /nothing))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &s:0 Load) s_lower Load) nil nil) None) (/splice (fn_1 (Call (Attribute (Name &o:0 Load) s_lower Load) nil nil) (Name &o:0 Load) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) &f:0 &n:0 &i:0 (Assign (list (Name &o:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) None)))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None) (Assign (list (Name &X:0 Store)) (Constant s_ABCDEFGHIJKLMNOPQRSTUVWXYZ None) None) (Assign (list (Name &z:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &z:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load) (list In) (list (Name &x:0 Load))) (/seq (Assign (list (Name &k:0 Store)) (BinOp (Call (Attribute (Name &x:0 Load) s_index Load) (list (_starred_content (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &k:0 Store)) (BinOp (Call (Attribute (Name &X:0 Load) s_index Load) (list (_starred_content (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Add (Constant i1 None)) None))) (If (Compare (Name &k:0 Load) (list LtE) (list (Name &n:0 Load))) (/seq (Assign (list (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Attribute (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load) s_upper Load) nil nil) None)) (/seq (Assign (list (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Attribute (Subscript (Name &z:0 Load) (_slice_content (Name &i:0 Load)) Load) s_lower Load) nil nil) None)))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &z:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &result:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (IfExp (Compare (Call (Name g_ord Load) (list (_starred_content (Name &c:1 Load))) nil) (list Lt) (list (BinOp (Name &k:0 Load) Add (Constant i97 None)))) (Call (Attribute (Name &c:1 Load) s_upper Load) nil nil) (Call (Attribute (Name &c:1 Load) s_lower Load) nil nil)) (list (comprehension (Name &c:1 Store) (Name &s:0 Load) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_lower Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Call (Name g_ord Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Sub (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)) (list Lt) (list (Name &b:0 Load))) (/seq (Assign (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Attribute (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) s_upper Load) nil nil) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Attribute (Name &x:0 Load) s_replace Load)\n        (list (_starred_content (Constant s-WzQzXQ== None)) (_starred_content (Constant s_ None)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &x:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content\n            (BinOp\n              (BinOp (Constant i2 None) Mult (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil))\n              Sub\n              (Constant i1 None)\n            )\n          )\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &x:0 Load) s_insert Load)\n            (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s-WzQzXQ== None)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &x:0 Load))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &getAscendingPattern:0\n      (arguments nil (list (arg &pattern:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &pattern:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Name &pattern:1 Load) s_split Load)\n                        (list (_starred_content (Constant s-WzQzXQ== None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &pattern:1 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &ascendingPattern:1 Store))\n          (Call\n            (Attribute (Constant s-WzQzXQ== None) s_join Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list (_starred_content (Name g_str Load)) (_starred_content (Name &pattern:1 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Return (Name &ascendingPattern:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &sum_pattern:0 Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &result:0 Store))\n      (Call (Name &getAscendingPattern:0 Load) (list (_starred_content (Name &sum_pattern:0 Load))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &str:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &numList:0 Store))\n      (Call (Attribute (Name &str:0 Load) s_split Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &numList:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &newStr:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &c:0 Store)\n      (Name &numList:0 Load)\n      (/seq (AugAssign (Name &newStr:0 Store) Add (BinOp (Name &c:0 Load) Add (Constant s-WzQzXQ== None))))\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &newStr:0 Load)\n              (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzQzXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_str Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list (comprehension (Name &x:2 Store) (Name &a:0 Load) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Name &a:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_split Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Name &a:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4NCwgMTE3LCAxMDEsIDMyLCA2NSwgMTE3LCAxMDMsIDMyLCA0OSwgNDksIDMyLCA0OSwgNTYsIDU4LCA0OSwgNTMsIDU4LCA0OCwgNTcsIDMyLCA1MCwgNDgsIDUwLCA0OCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDgzLCA5NywgMTE3LCAxMTQsIDk3LCA5OCwgMTA0LCAzMiwgNjUsIDExMCwgOTcsIDExMCwgMTAwLCAxMF0=\n        None\n      )\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (ListComp\n        (Name &x:1 Load)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzQzXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &n:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &op:0 Store)) (Constant i0 None) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Name &n:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &string:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &b:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &string:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Constant s-WzQzXQ== None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &a:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_int Load)\n                      (list (_starred_content (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &k:0 Load) Sub (Constant i1 None))))\n          (/seq\n            (AugAssign\n              (Name &b:0 Store)\n              Add\n              (Call\n                (Name g_str Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n            (AugAssign (Name &b:0 Store) Add (Constant s-WzQzXQ== None))\n          )\n          (/seq\n            (AugAssign\n              (Name &b:0 Store)\n              Add\n              (Call\n                (Name g_str Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content\n            (BinOp\n              (BinOp (Constant i2 None) Mult (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil))\n              Sub\n              (Constant i2 None)\n            )\n          )\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_insert Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (Constant s-WzQzXQ== None))\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            (list (keyword s_end (Constant s_ None)))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzQzXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Name &i:0 Load)\n            (list Lt)\n            (list\n              (BinOp (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Constant i1 None))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                (list (keyword s_end (Constant s-WzQzXQ== None)))\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (List nil Load) None)\n    (For\n      (Name &each:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &each:0 Load) (list NotEq) (list (Constant s-WzQzXQ== None)))\n          (/seq\n            (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &each:0 Load))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_starred (Starred (Name &l:0 Load) Load)))\n        (list (keyword s_sep (Constant s-WzQzXQ== None)))\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %2 Store)) (ListComp #0 (list (comprehension (Name %1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil) nil i0))) None) (Expr (Call (Attribute (Name %2 Load) s_sort Load) nil nil)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &x:0 Store)) (Call (Attribute (Name &x:0 Load) s_replace Load) (list (_starred_content (Constant s-WzQzXQ== None)) (_starred_content (Constant s_ None))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &x:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil)) Sub (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (Expr (Call (Attribute (Name &x:0 Load) s_insert Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s-WzQzXQ== None))) nil))) (/seq) None) (Assign (list (Name &x:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &getAscendingPattern:0 (arguments nil (list (arg &pattern:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &pattern:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &pattern:1 Load) s_split Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil))) nil))) nil) None) (Expr (Call (Attribute (Name &pattern:1 Load) s_sort Load) nil nil)) (Assign (list (Name &ascendingPattern:1 Store)) (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &pattern:1 Load))) nil))) nil))) nil) None) (Return (Name &ascendingPattern:1 Load))) nil None None) (Assign (list (Name &sum_pattern:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) None) (Assign (list (Name &result:0 Store)) (Call (Name &getAscendingPattern:0 Load) (list (_starred_content (Name &sum_pattern:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &str:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &numList:0 Store)) (Call (Attribute (Name &str:0 Load) s_split Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil) None) (Expr (Call (Attribute (Name &numList:0 Load) s_sort Load) nil nil)) (Assign (list (Name &newStr:0 Store)) (Constant s_ None) None) (For (Name &c:0 Store) (Name &numList:0 Load) (/seq (AugAssign (Name &newStr:0 Store) Add (BinOp (Name &c:0 Load) Add (Constant s-WzQzXQ== None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &newStr:0 Load) (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None)) Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) &x:1 &a:0)) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_str Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Name &a:0 Load) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &a:0 Load) s_split Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4NCwgMTE3LCAxMDEsIDMyLCA2NSwgMTE3LCAxMDMsIDMyLCA0OSwgNDksIDMyLCA0OSwgNTYsIDU4LCA0OSwgNTMsIDU4LCA0OCwgNTcsIDMyLCA1MCwgNDgsIDUwLCA0OCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDgzLCA5NywgMTE3LCAxMTQsIDk3LCA5OCwgMTA0LCAzMiwgNjUsIDExMCwgOTcsIDExMCwgMTAwLCAxMF0= None)) (/splice (fn_1 (Name &x:1 Load) &x:1 &n:0)) (Assign (list (Name &op:0 Store)) (Constant i0 None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzQzXQ== None) s_join Load) (list (_starred_content (Name &n:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &string:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (Assign (list (Name &b:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &string:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Constant s-WzQzXQ== None))) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil)) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &k:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &b:0 Store) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (AugAssign (Name &b:0 Store) Add (Constant s-WzQzXQ== None))) (/seq (AugAssign (Name &b:0 Store) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)) (_starred_content (Constant i2 None))) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil)) Sub (Constant i2 None))) (_starred_content (Constant i2 None))) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_insert Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Constant s-WzQzXQ== None))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) (list (keyword s_end (Constant s_ None)))))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) &x:1 &x:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil))) nil) (/seq (If (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load))) (list (keyword s_end (Constant s-WzQzXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (List nil Load) None) (For (Name &each:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &each:0 Load) (list NotEq) (list (Constant s-WzQzXQ== None))) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &each:0 Load))) nil))) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &l:0 Load) Load))) (list (keyword s_sep (Constant s-WzQzXQ== None)))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              Sub\n              (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n            )\n            Sub\n            (Name &c:0 Load)\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &d:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &bigest_dec:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &bigest_dec_index:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              Sub\n              (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n            )\n            (list Gt)\n            (list (Name &bigest_dec:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &bigest_dec:0 Store))\n              (BinOp\n                (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                Sub\n                (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              )\n              None\n            )\n            (Assign (list (Name &bigest_dec_index:0 Store)) (Name &i:0 Load) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (BinOp (Name &bigest_dec:0 Load) Sub (Name &c:0 Load)) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (BinOp (Name &bigest_dec:0 Load) Sub (Name &c:0 Load))))\n            nil\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &s:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Name &s:0 Load))\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                  Sub\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &s:0 Load) (list LtE) (list (Constant i0 None)))\n          (Compare (BinOp (Name &s:0 Load) Sub (Name &x:0 Load)) (list LtE) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Sub (Name &x:0 Load)))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &res:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Name &res:0 Load))\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    Sub\n                    (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  )\n                  Sub\n                  (Name &c:0 Load)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)))\n              nil\n            )\n          )\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)))\n              nil\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &max:0 Store))\n      (BinOp\n        (BinOp\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n          Sub\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n        )\n        Sub\n        (Name &c:0 Load)\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp\n                (Call\n                  (Name g_int Load)\n                  (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n                Sub\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content\n                      (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              Sub\n              (Name &c:0 Load)\n            )\n            (list Gt)\n            (list (Name &max:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &max:0 Store))\n              (BinOp\n                (BinOp\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                    nil\n                  )\n                  Sub\n                  (Call\n                    (Name g_int Load)\n                    (list\n                      (_starred_content\n                        (Subscript\n                          (Name &x:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n                Sub\n                (Name &c:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &max:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Assign (list (Name &max:0 Store)) (Constant i0 None) None))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &max:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &max_r:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              Sub\n              (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n            )\n            (list Gt)\n            (list (Name &max_r:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &max_r:0 Store))\n              (BinOp\n                (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                Sub\n                (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              )\n              None\n            )\n            (Assign (list (Name &p1:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            (Assign\n              (list (Name &p2:0 Store))\n              (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (BinOp (Name &max_r:0 Load) Sub (Name &c:0 Load)) None)\n    (If\n      (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &best:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              Sub\n              (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n            )\n            (list Gt)\n            (list (Name &best:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &best:0 Store))\n              (BinOp\n                (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                Sub\n                (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (Constant i0 None))\n                (_starred_content (BinOp (Name &best:0 Load) Sub (Name &c:0 Load)))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &m:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Name &m:0 Load))\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    Sub\n                    (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  )\n                  Sub\n                  (Name &c:0 Load)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &max:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                Sub\n                (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              )\n              Sub\n              (Name &c:0 Load)\n            )\n            (list Gt)\n            (list (Name &max:0 Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &max:0 Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Sub\n                  (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n                Sub\n                (Name &c:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &max:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &C:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Name &ans:0 Load))\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &X:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    Sub\n                    (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  )\n                  Sub\n                  (Name &C:0 Load)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &ans:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &c:0 &n:0 &l:0 /nothing)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Sub (Name &c:0 Load)) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &d:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &c:0 &n:0 &l:0 /nothing)) (Assign (list (Name &bigest_dec:0 Store)) (Constant i0 None) None) (Assign (list (Name &bigest_dec_index:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) (list Gt) (list (Name &bigest_dec:0 Load))) (/seq (Assign (list (Name &bigest_dec:0 Store)) (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) None) (Assign (list (Name &bigest_dec_index:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (If (Compare (BinOp (Name &bigest_dec:0 Load) Sub (Name &c:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &bigest_dec:0 Load) Sub (Name &c:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &n:0 &a:0 /nothing)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil) None)) (/seq) None) (If (BoolOp Or (list (Compare (Name &s:0 Load) (list LtE) (list (Constant i0 None))) (Compare (BinOp (Name &s:0 Load) Sub (Name &x:0 Load)) (list LtE) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Sub (Name &x:0 Load)))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 &c:0 &n:0 &x:0 /nothing)) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &res:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &res:0 Load)) (_starred_content (BinOp (BinOp (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Sub (Name &c:0 Load)))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load))) nil))) Load) None) (Assign (list (Name &x:0 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &max:0 Store)) (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load))) nil) Sub (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) Sub (Name &c:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Sub (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) nil)) Sub (Name &c:0 Load)) (list Gt) (list (Name &max:0 Load))) (/seq (Assign (list (Name &max:0 Store)) (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Sub (Call (Name g_int Load) (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) nil)) Sub (Name &c:0 Load)) None)) (/seq))) (/seq) None) (If (Compare (Name &max:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &max:0 Store)) (Constant i0 None) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) Load) None) (Assign (list (Name &b:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &max_r:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) (list Gt) (list (Name &max_r:0 Load))) (/seq (Assign (list (Name &max_r:0 Store)) (BinOp (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) None) (Assign (list (Name &p1:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Name &p2:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) None)) (/seq))) (/seq) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &max_r:0 Load) Sub (Name &c:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 &c:0 &n:0 &A:0 /nothing)) (Assign (list (Name &best:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) (list Gt) (list (Name &best:0 Load))) (/seq (Assign (list (Name &best:0 Store)) (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &best:0 Load) Sub (Name &c:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &c:0 &n:0 &l:0 (Assign (list (Name &m:0 Store)) (Constant i0 None) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &m:0 Load)) (_starred_content (BinOp (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Sub (Name &c:0 Load)))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &c:0 &n:0 &a:0 /nothing)) (Assign (list (Name &max:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Sub (Name &c:0 Load)) (list Gt) (list (Name &max:0 Load))) (/seq (Assign (list (Name &max:0 Store)) (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Sub (Name &c:0 Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &C:0 &N:0 &X:0 /nothing)) (Assign (list (Name &ans:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (BinOp (BinOp (Subscript (Name &X:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Sub (Name &C:0 Load)))) nil) None)) (/seq) None) (If (Compare (Name &ans:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n              (list (comprehension (Name &x:1 Store) (Name &a:0 Load) nil i0))\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &one:0 Store)) (_starred_content (Name &two:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant i100 None))\n          )\n          (/seq (AugAssign (Name &one:0 Store) Add (Constant i1 None)))\n          (/seq (AugAssign (Name &two:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n    (If\n      (BoolOp\n        Or\n        (list\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &one:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (BoolOp\n            And\n            (list\n              (Compare (Name &one:0 Load) (list Gt) (list (Name &two:0 Load)))\n              (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n              (Compare (BinOp (Name &one:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &one:0 Load) (list GtE) (list (Constant i2 None)))\n            )\n          )\n          (BoolOp\n            And\n            (list\n              (Compare (Name &one:0 Load) (list Lt) (list (Name &two:0 Load)))\n              (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n              (Compare (BinOp (Name &one:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &one:0 Load) (list GtE) (list (Constant i2 None)))\n            )\n          )\n        )\n      )\n      (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None))\n      (/seq)\n    )\n    (If\n      (UnaryOp Not (Name &flag:0 Load))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) FloorDiv (Constant i100 None))\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i2 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i1 None))) nil)\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (BinOp (Name &a:0 Load) BitAnd (Constant i1 None)) None)\n    (If\n      (BinOp (Name &b:0 Load) BitAnd (Constant i1 None))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list GtE) (list (Constant i2 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &x:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Attribute (Name &x:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil)\n      None\n    )\n    (If\n      (Compare (BinOp (Name &a:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &b:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n              (Compare (Name &a:0 Load) (list Lt) (list (Constant i2 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c1:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c2:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &sm:0 Store))\n      (BinOp (BinOp (Name &c2:0 Load) Mult (Constant i2 None)) Add (Name &c1:0 Load))\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (BinOp (Name &sm:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &c1:0 Load) (list GtE) (list (Constant i2 None)))\n              (Compare (BinOp (Name &sm:0 Load) Mod (Constant i4 None)) (list Eq) (list (Constant i0 None)))\n            )\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n    Pass\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &func:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &count100:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &count200:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &_:1 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign\n          (list (Name &arr:1 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (For\n          (Name &item:1 Store)\n          (Name &arr:1 Load)\n          (/seq\n            (If\n              (Compare (Name &item:1 Load) (list Eq) (list (Constant s_100 None)))\n              (/seq (AugAssign (Name &count100:1 Store) Add (Constant i1 None)))\n              (/seq (AugAssign (Name &count200:1 Store) Add (Constant i1 None)))\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &count100:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &count200:1 Load) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant False None)))\n          (/seq)\n        )\n        (Return (UnaryOp Not (BinOp (Name &count100:1 Load) Mod (Constant i2 None))))\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (IfExp (Call (Name &func:0 Load) nil nil) (Constant s_YES None) (Constant s_NO None))))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &present:0\n      (arguments nil (list (arg &lst:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (BinOp\n                  (Call (Attribute (Name &lst:1 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n                  Mod\n                  (Constant i2 None)\n                )\n                (list Eq)\n                (list (Constant i1 None))\n              )\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (BinOp\n                      (Call\n                        (Attribute (Name &lst:1 Load) s_count Load)\n                        (list (_starred_content (Constant i200 None)))\n                        nil\n                      )\n                      Mod\n                      (Constant i2 None)\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (Compare\n                    (Call\n                      (Attribute (Name &lst:1 Load) s_count Load)\n                      (list (_starred_content (Constant i100 None)))\n                      nil\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                )\n              )\n            )\n          )\n          (/seq (Return (Constant s_NO None)))\n          (/seq)\n        )\n        (Return (Constant s_YES None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &present:0 Load) (list (_starred_content (Name &a:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (UnaryOp\n            Not\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Mod (Constant i4 None))\n          )\n          (Compare\n            (BinOp\n              (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n              Mod\n              (Constant i2 None)\n            )\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (BinOp\n                  (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil)\n                  Mod\n                  (Constant i2 None)\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (Compare\n                (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n                (list Gt)\n                (list (Constant i0 None))\n              )\n            )\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTExLCAxMDAsIDEwMSwgMTAyLCAxMTEsIDk5LCAxMDEsIDExNSwgMzIsIDM1LCA1MCwgNTIsIDU2LCAzMiwgNjgsIDEwNSwgMTE4LCA0NiwgMzIsIDUwLCAxMCwgODAsIDExNCwgMTExLCA5OCwgMTA4LCAxMDEsIDEwOSwgMzIsIDY1LCAxMCwgODMsIDExMSwgMTA4LCAxMTgsIDEwMSwgMTE0LCAxMF0=\n        None\n      )\n    )\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (List\n        (list\n          (_starred_content\n            (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n          )\n          (_starred_content\n            (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil)\n          )\n        )\n        Load\n      )\n      None\n    )\n    (If\n      (BinOp (Subscript (Name &c:0 Load) (_slice_content (Constant i1 None)) Load) BitAnd (Constant i1 None))\n      (/seq\n        (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Store) Sub (Constant i2 None))\n        (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Constant i1 None)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list GtE)\n            (list (Constant i0 None))\n          )\n          (UnaryOp\n            Not\n            (BinOp (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) BitAnd (Constant i1 None))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i1 None))))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &inf:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i20 None)))) nil)\n      None\n    )\n    (Assign (list (Name &max_val:0 Store)) (Name &inf:0 Load) None)\n    (Assign (list (Name &min_val:0 Store)) (UnaryOp USub (Name &inf:0 Load)) None)\n    (Assign\n      (list (Name &RW:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &RI:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (_starred_content (Call (Name &RW:0 Load) nil nil))) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &RMI:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:2 Store)\n              (Call\n                (Attribute\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_strip\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &RWI:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Name &x:1 Load)\n          (list\n            (comprehension\n              (Name &x:1 Store)\n              (Call\n                (Attribute\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_strip\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &RI:0 Load) nil nil) None)\n    (Assign (list (Name &l:0 Store)) (Call (Name &RMI:0 Load) nil nil) None)\n    (Assign\n      (list (Name &hun:0 Store))\n      (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &two:0 Store))\n      (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil)\n      None\n    )\n    (If\n      (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &hun:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp\n                  (Call\n                    (Name g_abs Load)\n                    (list\n                      (_starred_content\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &two:0 Load)) Sub (Name &hun:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                  Mod\n                  (Constant i2 None)\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (Compare (Name &hun:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &numberOfApples:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list (_starred_content (Name &numberOfOnes:0 Store)) (_starred_content (Name &numberOfTwos:0 Store)))\n          Store\n        )\n      )\n      (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n      None\n    )\n    (Assign\n      (list (Name &appleWeights:0 Store))\n      (Call\n        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &numberOfOnes:0 Store))\n      (Call (Attribute (Name &appleWeights:0 Load) s_count Load) (list (_starred_content (Constant s_100 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &numberOfTwos:0 Store))\n      (Call (Attribute (Name &appleWeights:0 Load) s_count Load) (list (_starred_content (Constant s_200 None))) nil)\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (UnaryOp Not (BinOp (Name &numberOfTwos:0 Load) Mod (Constant i2 None)))\n          (UnaryOp Not (BinOp (Name &numberOfOnes:0 Load) Mod (Constant i2 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (BinOp (Name &numberOfTwos:0 Load) Mod (Constant i2 None))\n              (UnaryOp Not (BinOp (Name &numberOfOnes:0 Load) Mod (Constant i2 None)))\n              (Compare (Name &numberOfOnes:0 Load) (list GtE) (list (Constant i2 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Name &a:0 Load) nil i0))))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &one:0 Store)) (_starred_content (Name &two:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i100 None))) (/seq (AugAssign (Name &one:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &two:0 Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &flag:0 Store)) (Constant False None) None) (If (BoolOp Or (list (BoolOp And (list (Compare (BinOp (Name &one:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (BoolOp And (list (Compare (Name &one:0 Load) (list Gt) (list (Name &two:0 Load))) (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (Compare (BinOp (Name &one:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (Name &one:0 Load) (list GtE) (list (Constant i2 None))))) (BoolOp And (list (Compare (Name &one:0 Load) (list Lt) (list (Name &two:0 Load))) (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (Compare (BinOp (Name &one:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (Name &one:0 Load) (list GtE) (list (Constant i2 None))))))) (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None)) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) FloorDiv (Constant i100 None)) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i2 None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i1 None))) nil) None) (Assign (list (Name &c:0 Store)) (BinOp (Name &a:0 Load) BitAnd (Constant i1 None)) None) (If (BinOp (Name &b:0 Load) BitAnd (Constant i1 None)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (fn_1 (Compare (Name &b:0 Load) (list GtE) (list (Constant i2 None))))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &x:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &x:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil) None) (If (Compare (BinOp (Name &a:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &b:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i2 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &c1:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) None) (Assign (list (Name &c2:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil) None) (Assign (list (Name &sm:0 Store)) (BinOp (BinOp (Name &c2:0 Load) Mult (Constant i2 None)) Add (Name &c1:0 Load)) None) (fn_1 (BoolOp And (list (Compare (BinOp (Name &sm:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &c1:0 Load) (list GtE) (list (Constant i2 None))) (Compare (BinOp (Name &sm:0 Load) Mod (Constant i4 None)) (list Eq) (list (Constant i0 None)))))))) Pass) nil)",
      "(Module (/seq (FunctionDef &func:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &count100:1 Store)) (Constant i0 None) None) (Assign (list (Name &count200:1 Store)) (Constant i0 None) None) (Assign (list (Name &_:1 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &arr:1 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (For (Name &item:1 Store) (Name &arr:1 Load) (/seq (If (Compare (Name &item:1 Load) (list Eq) (list (Constant s_100 None))) (/seq (AugAssign (Name &count100:1 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &count200:1 Store) Add (Constant i1 None))))) (/seq) None) (If (BoolOp And (list (Compare (Name &count100:1 Load) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &count200:1 Load) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) (/seq)) (Return (UnaryOp Not (BinOp (Name &count100:1 Load) Mod (Constant i2 None))))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Call (Name &func:0 Load) nil nil) (Constant s_YES None) (Constant s_NO None)))) nil))) nil)",
      "(Module (/seq (FunctionDef &present:0 (arguments nil (list (arg &lst:1 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (BinOp (Call (Attribute (Name &lst:1 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (BoolOp And (list (Compare (BinOp (Call (Attribute (Name &lst:1 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (Compare (Call (Attribute (Name &lst:1 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) (list Eq) (list (Constant i0 None))))))) (/seq (Return (Constant s_NO None))) (/seq)) (Return (Constant s_YES None))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &present:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (fn_1 (BoolOp And (list (UnaryOp Not (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Mod (Constant i4 None))) (Compare (BinOp (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (BoolOp Or (list (Compare (BinOp (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) (list Gt) (list (Constant i0 None))))))))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTExLCAxMDAsIDEwMSwgMTAyLCAxMTEsIDk5LCAxMDEsIDExNSwgMzIsIDM1LCA1MCwgNTIsIDU2LCAzMiwgNjgsIDEwNSwgMTE4LCA0NiwgMzIsIDUwLCAxMCwgODAsIDExNCwgMTExLCA5OCwgMTA4LCAxMDEsIDEwOSwgMzIsIDY1LCAxMCwgODMsIDExMSwgMTA4LCAxMTgsIDEwMSwgMTE0LCAxMF0= None)) (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (List (list (_starred_content (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil)) (_starred_content (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil))) Load) None) (If (BinOp (Subscript (Name &c:0 Load) (_slice_content (Constant i1 None)) Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Store) Sub (Constant i2 None)) (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Constant i1 None)) Store) Add (Constant i1 None))) (/seq)) (fn_1 (BoolOp And (list (Compare (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Constant i0 None))) (UnaryOp Not (BinOp (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) BitAnd (Constant i1 None))))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i1 None)))) nil)) (Assign (list (Name &inf:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i20 None)))) nil) None) (Assign (list (Name &max_val:0 Store)) (Name &inf:0 Load) None) (Assign (list (Name &min_val:0 Store)) (UnaryOp USub (Name &inf:0 Load)) None) (Assign (list (Name &RW:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) None) (Assign (list (Name &RI:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (_starred_content (Call (Name &RW:0 Load) nil nil))) nil)) None) (Assign (list (Name &RMI:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &RWI:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Name &x:1 Load) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &n:0 Store)) (Call (Name &RI:0 Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name &RMI:0 Load) nil nil) None) (Assign (list (Name &hun:0 Store)) (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i100 None))) nil) None) (Assign (list (Name &two:0 Store)) (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant i200 None))) nil) None) (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (fn_1 (BoolOp And (list (Compare (BinOp (Name &hun:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &two:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))))) (/seq (fn_1 (BoolOp And (list (Compare (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name &two:0 Load)) Sub (Name &hun:0 Load)))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (Name &hun:0 Load) (list NotEq) (list (Constant i0 None))))))))) nil)",
      "(Module (/seq (Assign (list (Name &numberOfApples:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &numberOfOnes:0 Store)) (_starred_content (Name &numberOfTwos:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &appleWeights:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &numberOfOnes:0 Store)) (Call (Attribute (Name &appleWeights:0 Load) s_count Load) (list (_starred_content (Constant s_100 None))) nil) None) (Assign (list (Name &numberOfTwos:0 Store)) (Call (Attribute (Name &appleWeights:0 Load) s_count Load) (list (_starred_content (Constant s_200 None))) nil) None) (If (BoolOp And (list (UnaryOp Not (BinOp (Name &numberOfTwos:0 Load) Mod (Constant i2 None))) (UnaryOp Not (BinOp (Name &numberOfOnes:0 Load) Mod (Constant i2 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (fn_1 (BoolOp And (list (BinOp (Name &numberOfTwos:0 Load) Mod (Constant i2 None)) (UnaryOp Not (BinOp (Name &numberOfOnes:0 Load) Mod (Constant i2 None))) (Compare (Name &numberOfOnes:0 Load) (list GtE) (list (Constant i2 None))))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (BinOp (Name &x:0 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &x:0 Load) (list NotEq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (BinOp (Name &x:0 Load) Div (Constant i5 None)))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (If\n          (Compare\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Mod (Constant i5 None))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil)\n                      FloorDiv\n                      (Constant i5 None)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &stacks:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list (comprehension (Name &i:1 Store) (Name &x:0 Load) nil i0))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &stacks:0 Load))) nil) Mod (Constant i5 None))\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (Compare\n            (Call (Name g_sum Load) (list (_starred_content (Name &stacks:0 Load))) nil)\n            (list Eq)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Call (Name g_sum Load) (list (_starred_content (Name &stacks:0 Load))) nil)\n                        Div\n                        (Constant i5 None)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n            (_starred_content (Name &e:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (BinOp\n              (BinOp\n                (BinOp (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)) Add (Name &d:0 Load))\n                Add\n                (Name &e:0 Load)\n              )\n              Mod\n              (Constant i5 None)\n            )\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (Compare\n            (BinOp\n              (BinOp (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)) Add (Name &d:0 Load))\n              Add\n              (Name &e:0 Load)\n            )\n            (list Gt)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load))\n                            Add\n                            (Name &d:0 Load)\n                          )\n                          Add\n                          (Name &e:0 Load)\n                        )\n                        Div\n                        (Constant i5 None)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Constant i5 None) None)\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq (AugAssign (Name &c:0 Store) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (BinOp (Name &c:0 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &c:0 Load) FloorDiv (Constant i5 None)))) nil)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &coins:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &res:0 Store))\n      (BinOp\n        (Call (Name g_sum Load) (list (_starred_content (Name &coins:0 Load))) nil)\n        FloorDiv\n        (Call (Name g_len Load) (list (_starred_content (Name &coins:0 Load))) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &check:0 Store))\n      (Compare\n        (BinOp\n          (Call (Name g_sum Load) (list (_starred_content (Name &coins:0 Load))) nil)\n          Mod\n          (Call (Name g_len Load) (list (_starred_content (Name &coins:0 Load))) nil)\n        )\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Name &check:0 Load)\n          (Compare\n            (Call (Name g_sum Load) (list (_starred_content (Name &coins:0 Load))) nil)\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &given:0 Store))\n      (GeneratorExp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &s:1 Store))\n          (Call (Name g_sum Load) (list (_starred_content (Name &given:0 Load))) nil)\n          None\n        )\n        (If\n          (Compare (Name &s:1 Load) (list Lt) (list (Constant i5 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n            (Return None)\n          )\n          (/seq)\n        )\n        (If\n          (Compare (BinOp (Name &s:1 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (BinOp (Name &s:1 Load) FloorDiv (Constant i5 None))))\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s1:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (BinOp (Name &s1:0 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &s1:0 Load) (list NotEq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s1:0 Load) FloorDiv (Constant i5 None)))) nil)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &myList:0 Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &total:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list (_starred_content (Name g_int Load)) (_starred_content (Name &myList:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &total:0 Load) (list NotEq) (list (Constant i0 None)))\n          (Compare (BinOp (Name &total:0 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list (_starred_content (BinOp (Name &total:0 Load) Div (Constant i5 None))))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Div (Constant i5 None))\n      None\n    )\n    (If\n      (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (If\n          (Compare\n            (Name &x:0 Load)\n            (list Eq)\n            (list (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil)))\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) ?0 (Assign (list (Name %2 Store)) #0 None) ?1 (If (BoolOp And (list (Compare (BinOp (Name %2 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None))) (Compare (Name %2 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #1)) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) (Call (Name g_int Load) (list (_starred_content (BinOp (Name &x:0 Load) Div (Constant i5 None)))) nil) &l:0 &x:0 /nothing /nothing) nil)",
      "(Module (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (Compare (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) FloorDiv (Constant i5 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &stacks:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Name &x:0 Load) nil i0))) None) (If (BoolOp Or (list (Compare (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &stacks:0 Load))) nil) Mod (Constant i5 None)) (list NotEq) (list (Constant i0 None))) (Compare (Call (Name g_sum Load) (list (_starred_content (Name &stacks:0 Load))) nil) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &stacks:0 Load))) nil) Div (Constant i5 None)))) nil))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store)) (_starred_content (Name &e:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (If (BoolOp And (list (Compare (BinOp (BinOp (BinOp (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)) Add (Name &d:0 Load)) Add (Name &e:0 Load)) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (BinOp (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)) Add (Name &d:0 Load)) Add (Name &e:0 Load)) (list Gt) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) Add (Name &c:0 Load)) Add (Name &d:0 Load)) Add (Name &e:0 Load)) Div (Constant i5 None)))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))))) nil)",
      "(Module (fn_1 (Constant i0 None) (BinOp (Name &c:0 Load) FloorDiv (Constant i5 None)) &a:0 &c:0 (Assign (list (Name &n:0 Store)) (Constant i5 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &c:0 Store) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &coins:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &res:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &coins:0 Load))) nil) FloorDiv (Call (Name g_len Load) (list (_starred_content (Name &coins:0 Load))) nil)) None) (Assign (list (Name &check:0 Store)) (Compare (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &coins:0 Load))) nil) Mod (Call (Name g_len Load) (list (_starred_content (Name &coins:0 Load))) nil)) (list Eq) (list (Constant i0 None))) None) (If (BoolOp And (list (Name &check:0 Load) (Compare (Call (Name g_sum Load) (list (_starred_content (Name &coins:0 Load))) nil) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &given:0 Store)) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &given:0 Load))) nil) None) (If (Compare (Name &s:1 Load) (list Lt) (list (Constant i5 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Return None)) (/seq)) (If (Compare (BinOp (Name &s:1 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:1 Load) FloorDiv (Constant i5 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (fn_1 (Call (Name g_sum Load) (list (_starred_content (Name &s:0 Load))) nil) (BinOp (Name &s1:0 Load) FloorDiv (Constant i5 None)) &s:0 &s1:0 /nothing /nothing) nil)",
      "(Module (/seq (Assign (list (Name &myList:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &total:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &myList:0 Load))) nil))) nil) None) (If (BoolOp And (list (Compare (Name &total:0 Load) (list NotEq) (list (Constant i0 None))) (Compare (BinOp (Name &total:0 Load) Mod (Constant i5 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Name &total:0 Load) Div (Constant i5 None)))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Div (Constant i5 None)) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (Name &x:0 Load) (list Eq) (list (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &n:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &i:0 Store))\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &i:0 Load))) nil)\n            (list LtE)\n            (list (Constant i1 None))\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Constant s-WzQzXQ== None))\n          )\n          (/seq (AugAssign (Name &n:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzQ1XQ== None))\n              )\n              (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (BinOp\n                    (Call\n                      (Name g_len Load)\n                      (list\n                        (_starred_content\n                          (Subscript\n                            (Call\n                              (Attribute (Name &i:0 Load) s_split Load)\n                              (list (_starred_content (Constant s-WzU4XQ== None)))\n                              nil\n                            )\n                            (_slice_content (Constant i1 None))\n                            Load\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    Mult\n                    (Name &n:0 Load)\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &online:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)\n    (Try\n      (/seq\n        (While\n          (Constant True None)\n          (/seq\n            (Assign (list (Name &line:0 Store)) (Call (Name g_input Load) nil nil) None)\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare\n                    (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQzXQ== None))\n                  )\n                  (Compare\n                    (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQ1XQ== None))\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &name:0 Store))\n                  (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                  None\n                )\n                (If\n                  (Compare\n                    (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQzXQ== None))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &online:0 Load) s_add Load)\n                        (list (_starred_content (Name &name:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &online:0 Load) s_remove Load)\n                        (list (_starred_content (Name &name:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &answer:0 Store)\n                  Add\n                  (BinOp\n                    (Call\n                      (Name g_len Load)\n                      (list\n                        (_starred_content\n                          (Subscript\n                            (Call\n                              (Attribute (Name &line:0 Load) s_split Load)\n                              (list (_starred_content (Constant s-WzU4XQ== None)))\n                              nil\n                            )\n                            (_slice_content (Constant i1 None))\n                            Load\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    Mult\n                    (Call (Name g_len Load) (list (_starred_content (Name &online:0 Load))) nil)\n                  )\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (list (ExceptHandler None None (/seq Pass)))\n      (/seq)\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &o:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign (list (Name &cmd:0 Store)) (Call (Name g_input Load) nil nil) None)\n            (If\n              (Compare\n                (Subscript (Name &cmd:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzQzXQ== None))\n              )\n              (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &cmd:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQ1XQ== None))\n                  )\n                  (/seq (AugAssign (Name &c:0 Store) Sub (Constant i1 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &o:0 Store)\n                      Add\n                      (BinOp\n                        (Call\n                          (Name g_len Load)\n                          (list\n                            (_starred_content\n                              (Subscript\n                                (Call\n                                  (Attribute (Name &cmd:0 Load) s_split Load)\n                                  (list (_starred_content (Constant s-WzU4XQ== None)))\n                                  nil\n                                )\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        Mult\n                        (Name &c:0 Load)\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (list (ExceptHandler None None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &o:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &st:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (While\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Try\n          (/seq\n            (Assign (list (Name &cmd:0 Store)) (Call (Name g_input Load) nil nil) None)\n            (If\n              (Compare\n                (Subscript (Name &cmd:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzQzXQ== None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &st:0 Load) s_add Load)\n                    (list\n                      (_starred_content\n                        (Subscript (Name &cmd:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &cmd:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQ1XQ== None))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &st:0 Load) s_remove Load)\n                        (list\n                          (_starred_content\n                            (Subscript (Name &cmd:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (AugAssign\n                      (Name &ans:0 Store)\n                      Add\n                      (BinOp\n                        (Call (Name g_len Load) (list (_starred_content (Name &st:0 Load))) nil)\n                        Mult\n                        (Call\n                          (Name g_len Load)\n                          (list\n                            (_starred_content\n                              (Subscript\n                                (Call\n                                  (Attribute (Name &cmd:0 Load) s_split Load)\n                                  (list (_starred_content (Constant s-WzU4XQ== None)))\n                                  nil\n                                )\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (list\n            (ExceptHandler (Name g_IndexError Load) None (/seq Break))\n            (ExceptHandler (Name g_EOFError Load) None (/seq Break))\n          )\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &solution:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &commands:1 Store))\n          (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil)\n          None\n        )\n        (Assign (list (Name &members:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &sent:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &command:1 Store)\n          (Name &commands:1 Load)\n          (/seq\n            (If\n              (Call\n                (Attribute (Name &command:1 Load) s_startswith Load)\n                (list (_starred_content (Constant s-WzQzXQ== None)))\n                nil\n              )\n              (/seq (AugAssign (Name &members:1 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Call\n                    (Attribute (Name &command:1 Load) s_startswith Load)\n                    (list (_starred_content (Constant s-WzQ1XQ== None)))\n                    nil\n                  )\n                  (/seq (AugAssign (Name &members:1 Store) Sub (Constant i1 None)))\n                  (/seq\n                    (Assign\n                      (list (Name &message:1 Store))\n                      (Call\n                        (Attribute\n                          (Subscript\n                            (Call\n                              (Attribute (Name &command:1 Load) s_split Load)\n                              (list (_starred_content (Constant s-WzU4XQ== None)))\n                              nil\n                            )\n                            (_slice_content (Constant i1 None))\n                            Load\n                          )\n                          s_rstrip\n                          Load\n                        )\n                        (list (_starred_content (Constant s-WzEwXQ== None)))\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign\n                      (Name &sent:1 Store)\n                      Add\n                      (BinOp\n                        (Call (Name g_len Load) (list (_starred_content (Name &message:1 Load))) nil)\n                        Mult\n                        (Name &members:1 Load)\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &sent:1 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &solution:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &p:0 Store) (Name &res:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &x:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Constant s-WzQzXQ== None))\n          )\n          (/seq (AugAssign (Name &p:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzQ1XQ== None))\n              )\n              (/seq (AugAssign (Name &p:0 Store) Sub (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &res:0 Store)\n                  Add\n                  (BinOp\n                    (Name &p:0 Load)\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil)\n                        Sub\n                        (Call\n                          (Attribute (Name &x:0 Load) s_find Load)\n                          (list (_starred_content (Constant s-WzU4XQ== None)))\n                          nil\n                        )\n                      )\n                      Sub\n                      (Constant i2 None)\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &output:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &num_members:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign (list (Name &k:0 Store)) (Call (Name g_input Load) nil nil) None)\n            (If\n              (Compare\n                (Subscript (Name &k:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzQzXQ== None))\n              )\n              (/seq (AugAssign (Name &num_members:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &k:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQ1XQ== None))\n                  )\n                  (/seq (AugAssign (Name &num_members:0 Store) Sub (Constant i1 None)))\n                  (/seq\n                    (Assign\n                      (list (Name &lst:0 Store))\n                      (Call\n                        (Attribute (Name &k:0 Load) s_split Load)\n                        (list (_starred_content (Constant s-WzU4XQ== None)))\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign\n                      (Name &output:0 Store)\n                      Add\n                      (BinOp\n                        (Name &num_members:0 Load)\n                        Mult\n                        (Call\n                          (Name g_len Load)\n                          (list\n                            (_starred_content (Subscript (Name &lst:0 Load) (_slice_content (Constant i1 None)) Load))\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (list (ExceptHandler None None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &output:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &mates:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &result:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant i1 None)\n      (/seq\n        (Try\n          (/seq\n            (Assign (list (Name &inp:0 Store)) (Call (Name g_input Load) nil nil) None)\n            (If\n              (Call\n                (Attribute (Name &inp:0 Load) s_startswith Load)\n                (list (_starred_content (Constant s-WzQzXQ== None)))\n                nil\n              )\n              (/seq (AugAssign (Name &mates:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Call\n                    (Attribute (Name &inp:0 Load) s_startswith Load)\n                    (list (_starred_content (Constant s-WzQ1XQ== None)))\n                    nil\n                  )\n                  (/seq (AugAssign (Name &mates:0 Store) Sub (Constant i1 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &result:0 Store)\n                      Add\n                      (BinOp\n                        (Call\n                          (Name g_len Load)\n                          (list\n                            (_starred_content\n                              (Subscript\n                                (Call\n                                  (Attribute (Name &inp:0 Load) s_split Load)\n                                  (list (_starred_content (Constant s-WzU4XQ== None)))\n                                  nil\n                                )\n                                (_slice_content (UnaryOp USub (Constant i1 None)))\n                                Load\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        Mult\n                        (Name &mates:0 Load)\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &bytecount:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &participants:1 Store)) (List nil Load) None)\n        (Try\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign (list (Name &line:1 Store)) (Call (Name g_input Load) nil nil) None)\n                (If\n                  (Compare\n                    (Subscript (Name &line:1 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Constant s-WzQzXQ== None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &person:1 Store))\n                      (Subscript (Name &line:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &participants:1 Load) s_append Load)\n                        (list (_starred_content (Name &person:1 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &line:1 Load) (_slice_content (Constant i0 None)) Load)\n                        (list Eq)\n                        (list (Constant s-WzQ1XQ== None))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &person:1 Store))\n                          (Subscript (Name &line:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &participants:1 Load) s_remove Load)\n                            (list (_starred_content (Name &person:1 Load)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare (Constant s-WzU4XQ== None) (list In) (list (Name &line:1 Load)))\n                          (/seq\n                            (Assign\n                              (list\n                                (Tuple\n                                  (list\n                                    (_starred_content (Name &person:1 Store))\n                                    (_starred_content (Name &message:1 Store))\n                                  )\n                                  Store\n                                )\n                              )\n                              (Call\n                                (Attribute (Name &line:1 Load) s_split Load)\n                                (list (_starred_content (Constant s-WzU4XQ== None)))\n                                nil\n                              )\n                              None\n                            )\n                            (AugAssign\n                              (Name &bytecount:1 Store)\n                              Add\n                              (BinOp\n                                (Call (Name g_len Load) (list (_starred_content (Name &message:1 Load))) nil)\n                                Mult\n                                (Call (Name g_len Load) (list (_starred_content (Name &participants:1 Load))) nil)\n                              )\n                            )\n                          )\n                          (/seq)\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Pass)))\n          (/seq)\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &bytecount:1 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &d:0 Store)) (List nil Load) None)\n    (Assign (list (Name &score:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq (Assign (list (Name &line:0 Store)) (Call (Name g_input Load) nil nil) None))\n          (list\n            (ExceptHandler\n              None\n              None\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil)) Break)\n            )\n          )\n          (/seq)\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Constant s-WzQzXQ== None))\n          )\n          (/seq\n            (Assign\n              (list (Name &s:0 Store))\n              (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n              None\n            )\n            (Expr (Call (Attribute (Name &d:0 Load) s_append Load) (list (_starred_content (Name &s:0 Load))) nil))\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzQ1XQ== None))\n              )\n              (/seq\n                (Assign\n                  (list (Name &s:0 Store))\n                  (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                  None\n                )\n                (Expr (Call (Attribute (Name &d:0 Load) s_remove Load) (list (_starred_content (Name &s:0 Load))) nil))\n              )\n              (/seq\n                (Assign\n                  (list (Name &s:0 Store))\n                  (Call\n                    (Attribute (Name &line:0 Load) s_split Load)\n                    (list (_starred_content (Constant s-WzU4XQ== None)))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &s:0 Store))\n                  (Call\n                    (Name g_len Load)\n                    (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)))\n                    nil\n                  )\n                  None\n                )\n                (AugAssign\n                  (Name &score:0 Store)\n                  Add\n                  (BinOp (Name &s:0 Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &d:0 Load))) nil))\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If (Compare (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQzXQ== None))) (/seq (AugAssign (Name %2 Store) Add (Constant i1 None))) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQ1XQ== None))) (/seq (AugAssign (Name %2 Store) Sub (Constant i1 None))) (/seq ?0 (AugAssign (Name %1 Store) Add (BinOp #1 Mult #0))))))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 2,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &i:0 Store)) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &i:0 Load))) nil) (list LtE) (list (Constant i1 None))) (/seq Break) (/seq)) (fn_1 (Name &n:0 Load) (Call (Name g_len Load) (list (_starred_content (Subscript (Call (Attribute (Name &i:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) (_slice_content (Constant i1 None)) Load))) nil) &ans:0 &n:0 &i:0 /nothing)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &online:0 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (Try (/seq (While (Constant True None) (/seq (Assign (list (Name &line:0 Store)) (Call (Name g_input Load) nil nil) None) (If (BoolOp Or (list (Compare (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQzXQ== None))) (Compare (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQ1XQ== None))))) (/seq (Assign (list (Name &name:0 Store)) (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (If (Compare (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQzXQ== None))) (/seq (Expr (Call (Attribute (Name &online:0 Load) s_add Load) (list (_starred_content (Name &name:0 Load))) nil))) (/seq (Expr (Call (Attribute (Name &online:0 Load) s_remove Load) (list (_starred_content (Name &name:0 Load))) nil))))) (/seq (AugAssign (Name &answer:0 Store) Add (BinOp (Call (Name g_len Load) (list (_starred_content (Subscript (Call (Attribute (Name &line:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) (_slice_content (Constant i1 None)) Load))) nil) Mult (Call (Name g_len Load) (list (_starred_content (Name &online:0 Load))) nil)))))) (/seq))) (list (ExceptHandler None None (/seq Pass))) (/seq) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (Assign (list (Name &o:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Name &cmd:0 Store)) (Call (Name g_input Load) nil nil) None) (fn_1 (Name &c:0 Load) (Call (Name g_len Load) (list (_starred_content (Subscript (Call (Attribute (Name &cmd:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) (_slice_content (Constant i1 None)) Load))) nil) &o:0 &c:0 &cmd:0 /nothing)) (list (ExceptHandler None None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &o:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &st:0 Store)) (Call (Name g_set Load) nil nil) None) (While (Attribute (Name g_sys Load) s_stdin Load) (/seq (Try (/seq (Assign (list (Name &cmd:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Subscript (Name &cmd:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQzXQ== None))) (/seq (Expr (Call (Attribute (Name &st:0 Load) s_add Load) (list (_starred_content (Subscript (Name &cmd:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq (If (Compare (Subscript (Name &cmd:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQ1XQ== None))) (/seq (Expr (Call (Attribute (Name &st:0 Load) s_remove Load) (list (_starred_content (Subscript (Name &cmd:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Call (Name g_len Load) (list (_starred_content (Name &st:0 Load))) nil) Mult (Call (Name g_len Load) (list (_starred_content (Subscript (Call (Attribute (Name &cmd:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) (_slice_content (Constant i1 None)) Load))) nil)))))))) (list (ExceptHandler (Name g_IndexError Load) None (/seq Break)) (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &solution:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &commands:1 Store)) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil) None) (Assign (list (Name &members:1 Store)) (Constant i0 None) None) (Assign (list (Name &sent:1 Store)) (Constant i0 None) None) (For (Name &command:1 Store) (Name &commands:1 Load) (/seq (If (Call (Attribute (Name &command:1 Load) s_startswith Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil) (/seq (AugAssign (Name &members:1 Store) Add (Constant i1 None))) (/seq (If (Call (Attribute (Name &command:1 Load) s_startswith Load) (list (_starred_content (Constant s-WzQ1XQ== None))) nil) (/seq (AugAssign (Name &members:1 Store) Sub (Constant i1 None))) (/seq (Assign (list (Name &message:1 Store)) (Call (Attribute (Subscript (Call (Attribute (Name &command:1 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) (_slice_content (Constant i1 None)) Load) s_rstrip Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (AugAssign (Name &sent:1 Store) Add (BinOp (Call (Name g_len Load) (list (_starred_content (Name &message:1 Load))) nil) Mult (Name &members:1 Load)))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &sent:1 Load))) nil))) nil None None) (Expr (Call (Name &solution:0 Load) nil nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &p:0 Store) (Name &res:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (fn_1 (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Call (Attribute (Name &x:0 Load) s_find Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil)) Sub (Constant i2 None)) (Name &p:0 Load) &res:0 &p:0 &x:0 /nothing)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &output:0 Store)) (Constant i0 None) None) (Assign (list (Name &num_members:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Name &k:0 Store)) (Call (Name g_input Load) nil nil) None) (fn_1 (Call (Name g_len Load) (list (_starred_content (Subscript (Name &lst:0 Load) (_slice_content (Constant i1 None)) Load))) nil) (Name &num_members:0 Load) &output:0 &num_members:0 &k:0 (Assign (list (Name &lst:0 Store)) (Call (Attribute (Name &k:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) None))) (list (ExceptHandler None None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &output:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &mates:0 Store)) (Constant i0 None) None) (Assign (list (Name &result:0 Store)) (Constant i0 None) None) (While (Constant i1 None) (/seq (Try (/seq (Assign (list (Name &inp:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Call (Attribute (Name &inp:0 Load) s_startswith Load) (list (_starred_content (Constant s-WzQzXQ== None))) nil) (/seq (AugAssign (Name &mates:0 Store) Add (Constant i1 None))) (/seq (If (Call (Attribute (Name &inp:0 Load) s_startswith Load) (list (_starred_content (Constant s-WzQ1XQ== None))) nil) (/seq (AugAssign (Name &mates:0 Store) Sub (Constant i1 None))) (/seq (AugAssign (Name &result:0 Store) Add (BinOp (Call (Name g_len Load) (list (_starred_content (Subscript (Call (Attribute (Name &inp:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil) Mult (Name &mates:0 Load)))))))) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &bytecount:1 Store)) (Constant i0 None) None) (Assign (list (Name &participants:1 Store)) (List nil Load) None) (Try (/seq (While (Constant True None) (/seq (Assign (list (Name &line:1 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Subscript (Name &line:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQzXQ== None))) (/seq (Assign (list (Name &person:1 Store)) (Subscript (Name &line:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Expr (Call (Attribute (Name &participants:1 Load) s_append Load) (list (_starred_content (Name &person:1 Load))) nil))) (/seq (If (Compare (Subscript (Name &line:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQ1XQ== None))) (/seq (Assign (list (Name &person:1 Store)) (Subscript (Name &line:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Expr (Call (Attribute (Name &participants:1 Load) s_remove Load) (list (_starred_content (Name &person:1 Load))) nil))) (/seq (If (Compare (Constant s-WzU4XQ== None) (list In) (list (Name &line:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &person:1 Store)) (_starred_content (Name &message:1 Store))) Store)) (Call (Attribute (Name &line:1 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) None) (AugAssign (Name &bytecount:1 Store) Add (BinOp (Call (Name g_len Load) (list (_starred_content (Name &message:1 Load))) nil) Mult (Call (Name g_len Load) (list (_starred_content (Name &participants:1 Load))) nil)))) (/seq))))))) (/seq))) (list (ExceptHandler (Name g_EOFError Load) None (/seq Pass))) (/seq) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &bytecount:1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &d:0 Store)) (List nil Load) None) (Assign (list (Name &score:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Name &line:0 Store)) (Call (Name g_input Load) nil nil) None)) (list (ExceptHandler None None (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil)) Break))) (/seq) (/seq)) (If (Compare (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQzXQ== None))) (/seq (Assign (list (Name &s:0 Store)) (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Expr (Call (Attribute (Name &d:0 Load) s_append Load) (list (_starred_content (Name &s:0 Load))) nil))) (/seq (If (Compare (Subscript (Name &line:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzQ1XQ== None))) (/seq (Assign (list (Name &s:0 Store)) (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Expr (Call (Attribute (Name &d:0 Load) s_remove Load) (list (_starred_content (Name &s:0 Load))) nil))) (/seq (Assign (list (Name &s:0 Store)) (Call (Attribute (Name &line:0 Load) s_split Load) (list (_starred_content (Constant s-WzU4XQ== None))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_len Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (AugAssign (Name &score:0 Store) Add (BinOp (Name &s:0 Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &d:0 Load))) nil)))))))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_io None) (alias g_os None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Attribute (Name g_io Load) s_BytesIO Load)\n          (list\n            (_starred_content\n              (Call\n                (Attribute (Name g_os Load) s_read Load)\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content\n                    (Attribute\n                      (Call (Attribute (Name g_os Load) s_fstat Load) (list (_starred_content (Constant i0 None))) nil)\n                      s_st_size\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        s_readline\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))\n        (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Name &_:1 Load)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content (Constant i1 None))\n                (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &a:0 Load))) nil))\n    (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &b:0 Load))) nil))\n    (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &c:0 Load))) nil))\n    (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &d:0 Load))) nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &a:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &c:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &x:0 Load)))\n            (list (keyword s_end (Constant s-WzMyXQ== None)))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &d:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &b:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &c:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &a:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &x:0 Load)))\n            (list (keyword s_end (Constant s-WzMyXQ== None)))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &b:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Name &d:0 Load)))\n        (list (keyword s_end (Constant s-WzMyXQ== None)))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &n:0 Load) (list Lt) (list (Constant i5 None)))\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_set Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_str Load))\n                            (_starred_content\n                              (Call\n                                (Name g_range Load)\n                                (list\n                                  (_starred_content (Constant i1 None))\n                                  (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Sub\n                  (Set\n                    (list\n                      (_starred_content (Name &a:0 Load))\n                      (_starred_content (Name &b:0 Load))\n                      (_starred_content (Name &c:0 Load))\n                      (_starred_content (Name &d:0 Load))\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (BinOp\n                              (BinOp\n                                (BinOp\n                                  (List\n                                    (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)))\n                                    Load\n                                  )\n                                  Add\n                                  (Name &l:0 Load)\n                                )\n                                Add\n                                (List\n                                  (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load)))\n                                  Load\n                                )\n                              )\n                              Add\n                              (List (list (_starred_content (Constant s-WzEwXQ== None))) Load)\n                            )\n                            Add\n                            (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load)\n                          )\n                          Add\n                          (Name &l:0 Load)\n                        )\n                        Add\n                        (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &n:0 Load) (list Lt) (list (Constant i5 None)))\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_set Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_str Load))\n                            (_starred_content\n                              (Call\n                                (Name g_range Load)\n                                (list\n                                  (_starred_content (Constant i1 None))\n                                  (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Sub\n                  (Set\n                    (list\n                      (_starred_content (Name &a:0 Load))\n                      (_starred_content (Name &b:0 Load))\n                      (_starred_content (Name &c:0 Load))\n                      (_starred_content (Name &d:0 Load))\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (BinOp\n                              (BinOp\n                                (List\n                                  (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)))\n                                  Load\n                                )\n                                Add\n                                (Name &l:0 Load)\n                              )\n                              Add\n                              (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n                            )\n                            Add\n                            (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load)\n                          )\n                          Add\n                          (Name &l:0 Load)\n                        )\n                        Add\n                        (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias s_itertools g_it)))\n    (Import (list (alias s_operator g_op)))\n    (Import (list (alias s_fractions g_fr)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute\n                (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                s_split\n                Load\n              )\n              nil\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute\n                (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                s_split\n                Load\n              )\n              nil\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Assign\n          (list (Name &path:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Call\n                      (Name g_set Load)\n                      (list\n                        (_starred_content\n                          (Call\n                            (Name g_range Load)\n                            (list\n                              (_starred_content (Constant i1 None))\n                              (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    s_difference\n                    Load\n                  )\n                  (list\n                    (_starred_content\n                      (List\n                        (list\n                          (_starred_content (Name &a:0 Load))\n                          (_starred_content (Name &b:0 Load))\n                          (_starred_content (Name &c:0 Load))\n                          (_starred_content (Name &d:0 Load))\n                        )\n                        Load\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_str Load))\n                          (_starred_content\n                            (BinOp\n                              (BinOp\n                                (List\n                                  (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)))\n                                  Load\n                                )\n                                Add\n                                (Name &path:0 Load)\n                              )\n                              Add\n                              (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_str Load))\n                          (_starred_content\n                            (BinOp\n                              (BinOp\n                                (List\n                                  (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load)))\n                                  Load\n                                )\n                                Add\n                                (Name &path:0 Load)\n                              )\n                              Add\n                              (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)))\n            (list (keyword s_end (Constant s-WzMyXQ== None)))\n          )\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &a:0 Load)))\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &b:0 Load)))\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &c:0 Load)))\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &d:0 Load)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &i:0 Load)))\n                    (list (keyword s_end (Constant s-WzMyXQ== None)))\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load)))\n            (list (keyword s_end (Constant s-WzMyXQ== None)))\n          )\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &a:0 Load)))\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &b:0 Load)))\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &c:0 Load)))\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &d:0 Load)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &i:0 Load)))\n                    (list (keyword s_end (Constant s-WzMyXQ== None)))\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) nil)\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store))) Store))\n          (GeneratorExp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:2 Store))\n                (_starred_content (Name &b:2 Store))\n                (_starred_content (Name &c:2 Store))\n                (_starred_content (Name &d:2 Store))\n              )\n              Store\n            )\n          )\n          (GeneratorExp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:4 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &path1:2 Store)) (_starred_content (Name &path2:2 Store))) Store))\n          (Call\n            (Name &solver:0 Load)\n            (list\n              (_starred_content (Name &n:2 Load))\n              (_starred_content (Name &k:2 Load))\n              (_starred_content (Name &a:2 Load))\n              (_starred_content (Name &b:2 Load))\n              (_starred_content (Name &c:2 Load))\n              (_starred_content (Name &d:2 Load))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &path1:2 Load) (list Eq) (list (Constant None None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (For\n              (Name &x:2 Store)\n              (Name &path1:2 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &x:2 Load)))\n                    (list (keyword s_end (Constant s-WzMyXQ== None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) nil nil))\n            (For\n              (Name &x:2 Store)\n              (Name &path2:2 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &x:2 Load)))\n                    (list (keyword s_end (Constant s-WzMyXQ== None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solver:0\n      (arguments\n        nil\n        (list\n          (arg &n:1 None None)\n          (arg &k:1 None None)\n          (arg &a:1 None None)\n          (arg &b:1 None None)\n          (arg &c:1 None None)\n          (arg &d:1 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &k:1 Load) (list LtE) (list (Name &n:1 Load)))\n              (Compare (Name &n:1 Load) (list Eq) (list (Constant i4 None)))\n            )\n          )\n          (/seq\n            (Return (Tuple (list (_starred_content (Constant None None)) (_starred_content (Constant None None))) Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &path1:1 Store))\n              (BinOp\n                (BinOp\n                  (List (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &c:1 Load))) Load)\n                  Add\n                  (ListComp\n                    (Name &i:5 Load)\n                    (list\n                      (comprehension\n                        (Name &i:5 Store)\n                        (Call\n                          (Name g_range Load)\n                          (list\n                            (_starred_content (Constant i1 None))\n                            (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))\n                          )\n                          nil\n                        )\n                        (list\n                          (Compare\n                            (Name &i:5 Load)\n                            (list NotIn)\n                            (list\n                              (Tuple\n                                (list\n                                  (_starred_content (Name &a:1 Load))\n                                  (_starred_content (Name &b:1 Load))\n                                  (_starred_content (Name &c:1 Load))\n                                  (_starred_content (Name &d:1 Load))\n                                )\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        i0\n                      )\n                    )\n                  )\n                )\n                Add\n                (List (list (_starred_content (Name &d:1 Load)) (_starred_content (Name &b:1 Load))) Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &path2:1 Store))\n              (BinOp\n                (BinOp\n                  (List (list (_starred_content (Name &c:1 Load)) (_starred_content (Name &a:1 Load))) Load)\n                  Add\n                  (ListComp\n                    (Name &i:6 Load)\n                    (list\n                      (comprehension\n                        (Name &i:6 Store)\n                        (Call\n                          (Name g_range Load)\n                          (list\n                            (_starred_content (Constant i1 None))\n                            (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))\n                          )\n                          nil\n                        )\n                        (list\n                          (Compare\n                            (Name &i:6 Load)\n                            (list NotIn)\n                            (list\n                              (Tuple\n                                (list\n                                  (_starred_content (Name &a:1 Load))\n                                  (_starred_content (Name &b:1 Load))\n                                  (_starred_content (Name &c:1 Load))\n                                  (_starred_content (Name &d:1 Load))\n                                )\n                                Load\n                              )\n                            )\n                          )\n                        )\n                        i0\n                      )\n                    )\n                  )\n                )\n                Add\n                (List (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &d:1 Load))) Load)\n              )\n              None\n            )\n            (Return (Tuple (list (_starred_content (Name &path1:1 Load)) (_starred_content (Name &path2:1 Load))) Load))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &B:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Name &i:0 Load)\n            (list NotIn)\n            (list\n              (Tuple\n                (list\n                  (_starred_content (Name &a:0 Load))\n                  (_starred_content (Name &b:0 Load))\n                  (_starred_content (Name &c:0 Load))\n                  (_starred_content (Name &d:0 Load))\n                )\n                Load\n              )\n            )\n          )\n          (/seq (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil)))\n          (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (BinOp\n        (BinOp\n          (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) Load)\n          Add\n          (Name &B:0 Load)\n        )\n        Add\n        (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (BinOp\n        (BinOp\n          (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load)\n          Add\n          (Name &B:0 Load)\n        )\n        Add\n        (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)\n      )\n      None\n    )\n    (Assign (list (Name &R:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &R:0 Load) s_add Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_tuple Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_sorted Load)\n                        (list\n                          (_starred_content\n                            (Tuple\n                              (list\n                                (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                                (_starred_content\n                                  (Subscript\n                                    (Name &A:0 Load)\n                                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                                    Load\n                                  )\n                                )\n                              )\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &R:0 Load) s_add Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_tuple Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_sorted Load)\n                        (list\n                          (_starred_content\n                            (Tuple\n                              (list\n                                (_starred_content (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                                (_starred_content\n                                  (Subscript\n                                    (Name &C:0 Load)\n                                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                                    Load\n                                  )\n                                )\n                              )\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call\n          (Name g_tuple Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (_starred_content\n                    (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list In)\n        (list (Name &R:0 Load))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (If\n      (Compare\n        (Call\n          (Name g_tuple Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (_starred_content\n                    (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list In)\n        (list (Name &R:0 Load))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (If\n      (Compare\n        (Call (Name g_len Load) (list (_starred_content (Name &R:0 Load))) nil)\n        (list Gt)\n        (list (Name &k:0 Load))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &C:0 Load) Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &print:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) None)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None)))\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        )\n      )\n      (/seq\n        (Expr (Call (Name &print:0 Load) (list (_starred_content (Constant s-WzQ1LCA0OSwgMTBd None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &E:0 Store))\n      (Tuple\n        (list\n          (_starred_content (Name &a:0 Load))\n          (_starred_content (Name &b:0 Load))\n          (_starred_content (Name &c:0 Load))\n          (_starred_content (Name &d:0 Load))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name &print:0 Load)\n        (list\n          (_starred_content\n            (JoinedStr\n              (list\n                (FormattedValue (Name &a:0 Load) i-1 None)\n                (Constant s-WzMyXQ== None)\n                (FormattedValue (Name &c:0 Load) i-1 None)\n                (Constant s-WzMyXQ== None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotIn) (list (Name &E:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name &print:0 Load)\n                (list\n                  (_starred_content\n                    (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzMyXQ== None)))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name &print:0 Load)\n        (list\n          (_starred_content\n            (JoinedStr\n              (list\n                (FormattedValue (Name &d:0 Load) i-1 None)\n                (Constant s-WzMyXQ== None)\n                (FormattedValue (Name &b:0 Load) i-1 None)\n                (Constant s-WzEwXQ== None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name &print:0 Load)\n        (list\n          (_starred_content\n            (JoinedStr\n              (list\n                (FormattedValue (Name &c:0 Load) i-1 None)\n                (Constant s-WzMyXQ== None)\n                (FormattedValue (Name &a:0 Load) i-1 None)\n                (Constant s-WzMyXQ== None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotIn) (list (Name &E:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name &print:0 Load)\n                (list\n                  (_starred_content\n                    (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzMyXQ== None)))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name &print:0 Load)\n        (list\n          (_starred_content\n            (JoinedStr\n              (list\n                (FormattedValue (Name &b:0 Load) i-1 None)\n                (Constant s-WzMyXQ== None)\n                (FormattedValue (Name &d:0 Load) i-1 None)\n                (Constant s-WzEwXQ== None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript (Name &v:0 Load) (_slice_content (Name &a:0 Load)) Store)\n        (Subscript (Name &v:0 Load) (_slice_content (Name &b:0 Load)) Store)\n        (Subscript (Name &v:0 Load) (_slice_content (Name &c:0 Load)) Store)\n        (Subscript (Name &v:0 Load) (_slice_content (Name &d:0 Load)) Store)\n      )\n      (Constant i1 None)\n      None\n    )\n    (Assign (list (Name &e:0 Store) (Name &f:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              (UnaryOp Not (Name &e:0 Load))\n            )\n          )\n          (/seq\n            (Assign (list (Name &e:0 Store)) (Name &i:0 Load) None)\n            (Assign (list (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)\n            Continue\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              (Name &e:0 Load)\n              (UnaryOp Not (Name &f:0 Load))\n            )\n          )\n          (/seq\n            (Assign (list (Name &f:0 Store)) (Name &i:0 Load) None)\n            (Assign (list (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i5 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Name &a:0 Load))\n              (_starred_content (Name &c:0 Load))\n              (_starred_content (Name &e:0 Load))\n              (_starred_content (Name &d:0 Load))\n              (_starred_content (Name &b:0 Load))\n            )\n            (list (keyword s_sep (Constant s-WzMyXQ== None)))\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Name &c:0 Load))\n              (_starred_content (Name &a:0 Load))\n              (_starred_content (Name &e:0 Load))\n              (_starred_content (Name &b:0 Load))\n              (_starred_content (Name &d:0 Load))\n            )\n            (list (keyword s_sep (Constant s-WzMyXQ== None)))\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &a1:0 Store))\n      (List\n        (list\n          (_starred_content (Name &a:0 Load))\n          (_starred_content (Name &c:0 Load))\n          (_starred_content (Name &e:0 Load))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          (/seq\n            (Expr (Call (Attribute (Name &a1:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (AugAssign\n      (Name &a1:0 Store)\n      Add\n      (List\n        (list\n          (_starred_content (Name &f:0 Load))\n          (_starred_content (Name &d:0 Load))\n          (_starred_content (Name &b:0 Load))\n        )\n        Load\n      )\n    )\n    (Assign\n      (list (Name &a2:0 Store))\n      (List\n        (list\n          (_starred_content (Name &c:0 Load))\n          (_starred_content (Name &a:0 Load))\n          (_starred_content (Name &e:0 Load))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          (/seq\n            (Expr (Call (Attribute (Name &a2:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (AugAssign\n      (Name &a2:0 Store)\n      Add\n      (List\n        (list\n          (_starred_content (Name &f:0 Load))\n          (_starred_content (Name &b:0 Load))\n          (_starred_content (Name &d:0 Load))\n        )\n        Load\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list (_starred_content (Name g_str Load)) (_starred_content (Name &a1:0 Load)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list (_starred_content (Name g_str Load)) (_starred_content (Name &a2:0 Load)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &n:0 Load) (list Lt) (list (Constant i5 None)))\n          (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_set Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_str Load))\n                            (_starred_content\n                              (Call\n                                (Name g_range Load)\n                                (list\n                                  (_starred_content (Constant i1 None))\n                                  (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Sub\n                  (Set\n                    (list\n                      (_starred_content (Name &a:0 Load))\n                      (_starred_content (Name &b:0 Load))\n                      (_starred_content (Name &c:0 Load))\n                      (_starred_content (Name &d:0 Load))\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (BinOp\n                              (BinOp\n                                (List\n                                  (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)))\n                                  Load\n                                )\n                                Add\n                                (Name &l:0 Load)\n                              )\n                              Add\n                              (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n                            )\n                            Add\n                            (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load)\n                          )\n                          Add\n                          (Name &l:0 Load)\n                        )\n                        Add\n                        (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (If (BoolOp Or (list (Compare (Name %2 Load) (list Lt) (list (Constant i5 None))) (Compare (Name %1 Load) (list Lt) (list (BinOp (Name %2 Load) Add (Constant i1 None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Assign (list (Name %7 Store)) (Call (Name g_list Load) (list (_starred_content (BinOp (Call (Name g_set Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil))) nil))) nil) Sub (Set (list (_starred_content (Name %6 Load)) (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (BinOp (BinOp (BinOp #0 Add (List (list (_starred_content (Name %4 Load)) (_starred_content (Name %6 Load))) Load)) Add (Name %7 Load)) Add (List (list (_starred_content (Name %5 Load)) (_starred_content (Name %3 Load))) Load)))) nil))) nil)))))",
        "sym_arity": 7,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_io None) (alias g_os None))) (Assign (list (Name &input:0 Store)) (Attribute (Call (Attribute (Name g_io Load) s_BytesIO Load) (list (_starred_content (Call (Attribute (Name g_os Load) s_read Load) (list (_starred_content (Constant i0 None)) (_starred_content (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (_starred_content (Constant i0 None))) nil) s_st_size Load))) nil))) nil) s_readline Load) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp Or (list (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None)))) (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (Assign (list (Name &l:0 Store)) (ListComp (Name &_:1 Load) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &a:0 Load))) nil)) (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &b:0 Load))) nil)) (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &c:0 Load))) nil)) (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &d:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Name &x:0 Store) (Name &l:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Name &x:0 Store) (Name &l:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) nil)",
      "(Module (fn_1 (BinOp (BinOp (BinOp (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) Load) Add (Name &l:0 Load)) Add (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)) Add (List (list (_starred_content (Constant s-WzEwXQ== None))) Load)) &k:0 &n:0 &d:0 &c:0 &b:0 &a:0 &l:0) nil)",
      "(Module (fn_1 (BinOp (BinOp (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) Load) Add (Name &l:0 Load)) Add (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)) &k:0 &n:0 &d:0 &c:0 &b:0 &a:0 &l:0) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias s_itertools g_it))) (Import (list (alias s_operator g_op))) (Import (list (alias s_fractions g_fr))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp Or (list (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None)))) (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Assign (list (Name &path:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name g_set Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil))) nil) s_difference Load) (list (_starred_content (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (BinOp (BinOp (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) Load) Add (Name &path:0 Load)) Add (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)))) nil))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (BinOp (BinOp (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load) Add (Name &path:0 Load)) Add (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)))) nil))) nil))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp Or (list (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None)))) (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list NotEq) (list (Name &a:0 Load))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &b:0 Load))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &c:0 Load))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &d:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list NotEq) (list (Name &a:0 Load))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &b:0 Load))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &c:0 Load))) (Compare (Name &i:0 Load) (list NotEq) (list (Name &d:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) nil))))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store))) Store)) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &c:2 Store)) (_starred_content (Name &d:2 Store))) Store)) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &path1:2 Store)) (_starred_content (Name &path2:2 Store))) Store)) (Call (Name &solver:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &k:2 Load)) (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &c:2 Load)) (_starred_content (Name &d:2 Load))) nil) None) (If (Compare (Name &path1:2 Load) (list Eq) (list (Constant None None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (For (Name &x:2 Store) (Name &path1:2 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:2 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil)) (For (Name &x:2 Store) (Name &path2:2 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:2 Load))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq) None)))) nil None None) (FunctionDef &solver:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &k:1 Load) (list LtE) (list (Name &n:1 Load))) (Compare (Name &n:1 Load) (list Eq) (list (Constant i4 None))))) (/seq (Return (Tuple (list (_starred_content (Constant None None)) (_starred_content (Constant None None))) Load))) (/seq (Assign (list (Name &path1:1 Store)) (BinOp (BinOp (List (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &c:1 Load))) Load) Add (ListComp (Name &i:5 Load) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (list (Compare (Name &i:5 Load) (list NotIn) (list (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load)) (_starred_content (Name &d:1 Load))) Load)))) i0)))) Add (List (list (_starred_content (Name &d:1 Load)) (_starred_content (Name &b:1 Load))) Load)) None) (Assign (list (Name &path2:1 Store)) (BinOp (BinOp (List (list (_starred_content (Name &c:1 Load)) (_starred_content (Name &a:1 Load))) Load) Add (ListComp (Name &i:6 Load) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (list (Compare (Name &i:6 Load) (list NotIn) (list (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load)) (_starred_content (Name &d:1 Load))) Load)))) i0)))) Add (List (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &d:1 Load))) Load)) None) (Return (Tuple (list (_starred_content (Name &path1:1 Load)) (_starred_content (Name &path2:1 Load))) Load))))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &B:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) Load))) (/seq (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None))))) (/seq) None) (Assign (list (Name &A:0 Store)) (BinOp (BinOp (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) Load) Add (Name &B:0 Load)) Add (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)) None) (Assign (list (Name &C:0 Store)) (BinOp (BinOp (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load) Add (Name &B:0 Load)) Add (List (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)) None) (Assign (list (Name &R:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &R:0 Load) s_add Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) Load))) nil))) nil))) nil)) (Expr (Call (Attribute (Name &R:0 Load) s_add Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &C:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) Load))) nil))) nil))) nil))) (/seq) None) (If (Compare (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load))) nil))) nil) (list In) (list (Name &R:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (Compare (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) Load))) nil))) nil) (list In) (list (Name &R:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &R:0 Load))) nil) (list Gt) (list (Name &k:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &C:0 Load) Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &print:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp Or (list (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None))) (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None)))))) (/seq (Expr (Call (Name &print:0 Load) (list (_starred_content (Constant s-WzQ1LCA0OSwgMTBd None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &E:0 Store)) (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) Load) None) (Expr (Call (Name &print:0 Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &a:0 Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Name &c:0 Load) i-1 None) (Constant s-WzMyXQ== None))))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Name &E:0 Load))) (/seq (Expr (Call (Name &print:0 Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzMyXQ== None))))) nil))) (/seq))) (/seq) None) (Expr (Call (Name &print:0 Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &d:0 Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Name &b:0 Load) i-1 None) (Constant s-WzEwXQ== None))))) nil)) (Expr (Call (Name &print:0 Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &c:0 Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Name &a:0 Load) i-1 None) (Constant s-WzMyXQ== None))))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Name &E:0 Load))) (/seq (Expr (Call (Name &print:0 Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzMyXQ== None))))) nil))) (/seq))) (/seq) None) (Expr (Call (Name &print:0 Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &b:0 Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Name &d:0 Load) i-1 None) (Constant s-WzEwXQ== None))))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp Or (list (Compare (Name &k:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Add (Constant i1 None)))) (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &v:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Name &v:0 Load) (_slice_content (Name &a:0 Load)) Store) (Subscript (Name &v:0 Load) (_slice_content (Name &b:0 Load)) Store) (Subscript (Name &v:0 Load) (_slice_content (Name &c:0 Load)) Store) (Subscript (Name &v:0 Load) (_slice_content (Name &d:0 Load)) Store)) (Constant i1 None) None) (Assign (list (Name &e:0 Store) (Name &f:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load)) (UnaryOp Not (Name &e:0 Load)))) (/seq (Assign (list (Name &e:0 Store)) (Name &i:0 Load) None) (Assign (list (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None) Continue) (/seq)) (If (BoolOp And (list (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load)) (Name &e:0 Load) (UnaryOp Not (Name &f:0 Load)))) (/seq (Assign (list (Name &f:0 Store)) (Name &i:0 Load) None) (Assign (list (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)) (/seq))) (/seq) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i5 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &e:0 Load)) (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) (list (keyword s_sep (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &e:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) (list (keyword s_sep (Constant s-WzMyXQ== None))))) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &a1:0 Store)) (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &e:0 Load))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load)) (/seq (Expr (Call (Attribute (Name &a1:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq))) (/seq) None) (AugAssign (Name &a1:0 Store) Add (List (list (_starred_content (Name &f:0 Load)) (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)) (Assign (list (Name &a2:0 Store)) (List (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &e:0 Load))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (UnaryOp Not (Subscript (Name &v:0 Load) (_slice_content (Name &i:0 Load)) Load)) (/seq (Expr (Call (Attribute (Name &a2:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq))) (/seq) None) (AugAssign (Name &a2:0 Store) Add (List (list (_starred_content (Name &f:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &a1:0 Load))) nil))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &a2:0 Load))) nil))) nil))) nil))) nil)",
      "(Module (fn_1 (BinOp (BinOp (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &c:0 Load))) Load) Add (Name &l:0 Load)) Add (List (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)) &k:0 &n:0 &d:0 &c:0 &b:0 &a:0 &l:0) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil) None)\n    (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (Call\n        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n        (list (_starred_content (Constant s-WzMyXQ== None)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n        (Assign\n          (list (Name &p:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Name &i:0 Load) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                  Div\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &k:0 Load) (list LtE) (list (Name &p:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &d:0 Load)\n                      (_slice_content\n                        (BinOp\n                          (BinOp (Name &k:0 Load) Sub (BinOp (Name &p:0 Load) Sub (Name &i:0 Load)))\n                          Sub\n                          (Constant i1 None)\n                        )\n                      )\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Import (list (alias &math:0 None)))\n    (Assign\n      (list (Name &h:0 Store))\n      (Call\n        (Name g_round Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Name &math:0 Load) s_sqrt Load)\n              (list (_starred_content (BinOp (Name &k:0 Load) Mult (Constant i2 None))))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Name &h:0 Load))\n          (_starred_content (UnaryOp USub (Constant i1 None)))\n          (_starred_content (UnaryOp USub (Constant i1 None)))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Name &k:0 Load)\n            (list Gt)\n            (list\n              (Call\n                (Name g_round Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (Name &i:0 Load) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                      Div\n                      (Constant i2 None)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq Break)\n          (/seq (AugAssign (Name &h:0 Store) Sub (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (BinOp\n        (Name &k:0 Load)\n        Sub\n        (Call\n          (Name g_round Load)\n          (list\n            (_starred_content\n              (BinOp\n                (BinOp (Name &h:0 Load) Mult (BinOp (Name &h:0 Load) Add (Constant i1 None)))\n                Div\n                (Constant i2 None)\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &a:0 Load)\n                  (_slice_content\n                    (BinOp\n                      (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)\n                      Sub\n                      (Constant i1 None)\n                    )\n                  )\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (BinOp (Constant i1 None) Add (Name &i:0 Load)) Mult (Name &i:0 Load))\n              FloorDiv\n              (Constant i2 None)\n            )\n            (list GtE)\n            (list (Name &k:0 Load))\n          )\n          (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &arr:0 Load)\n              (_slice_content\n                (BinOp\n                  (BinOp\n                    (Name &k:0 Load)\n                    Sub\n                    (BinOp\n                      (BinOp (BinOp (Constant i1 None) Add (Name &ans:0 Load)) Mult (Name &ans:0 Load))\n                      FloorDiv\n                      (Constant i2 None)\n                    )\n                  )\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &number:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &number:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &number:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    Add\n                    (Name &i:0 Load)\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n        (If\n          (Compare\n            (Subscript (Name &number:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n            (list GtE)\n            (list (Name &k:0 Load))\n          )\n          (/seq\n            (Assign (list (Name &ind:0 Store)) (Name &i:0 Load) None)\n            (Assign\n              (list (Name &cnt:0 Store))\n              (Subscript (Name &number:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n              None\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &values:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &ind:0 Load) Add (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (BinOp (Name &cnt:0 Load) Add (Name &i:0 Load)) Add (Constant i1 None))\n            (list Eq)\n            (list (Name &k:0 Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name g_stdout Load) s_write Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_str Load)\n                      (list (_starred_content (Subscript (Name &values:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ids:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &F:0 Store))\n      (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i1 None) None)\n    (While\n      (Compare (Subscript (Name &F:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Name &k:0 Load)))\n      (/seq\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Name &F:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &F:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                  Add\n                  (Name &i:0 Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &ids:0 Load)\n              (_slice_content\n                (BinOp\n                  (BinOp (Name &i:0 Load) Sub (Constant i1 None))\n                  Sub\n                  (BinOp (Subscript (Name &F:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &k:0 Load))\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &K:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil) None)\n    (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &K:0 Load))) nil) None)\n    (Assign\n      (list (Name &Array:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &Ans:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (BinOp (Name &Ans:0 Load) Add (Name &i:0 Load)) (list Lt) (list (Name &K:0 Load)))\n      (/seq (AugAssign (Name &Ans:0 Store) Add (Name &i:0 Load)) (AugAssign (Name &i:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Assign (list (Name &Ans:0 Store)) (BinOp (Name &K:0 Load) Sub (Name &Ans:0 Load)) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Name &Array:0 Load) (_slice_content (BinOp (Name &Ans:0 Load) Sub (Constant i1 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n              nil\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ids:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    nil\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &ids:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (Assign (list (Name &count:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &step:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i100000 None)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &count:0 Load) Add (Name &step:0 Load)) (list Gt) (list (Name &k:0 Load)))\n              (/seq Break)\n              (/seq)\n            )\n            (AugAssign (Name &count:0 Store) Add (Name &step:0 Load))\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &ids:0 Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Name &count:0 Load))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &b:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil) Add (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &count:0 Load) (list Gt) (list (Name &i:0 Load)))\n          (/seq (AugAssign (Name &count:0 Store) Sub (Name &i:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &l:0 Load)\n                      (_slice_content (BinOp (Name &count:0 Load) Sub (Constant i1 None)))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            Break\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil))\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp (BinOp (Constant i8 None) Mult (Name &k:0 Load)) Add (Constant i1 None))\n                  Pow\n                  (Constant f0.5 None)\n                )\n                Sub\n                (Constant i1 None)\n              )\n              Div\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (BinOp\n        (BinOp\n          (Name &k:0 Load)\n          Sub\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Name &p:0 Load) Mult (BinOp (Name &p:0 Load) Add (Constant i1 None)))\n                  Div\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n        Sub\n        (Constant i1 None)\n      )\n      None\n    )\n    (If\n      (Compare (Name &r:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &p:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &r:0 Load)) Load)))\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &R:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Name g_math Load) s_floor Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Constant i1 None))\n                      Add\n                      (Call\n                        (Attribute (Name g_math Load) s_sqrt Load)\n                        (list\n                          (_starred_content\n                            (BinOp (Constant i1 None) Add (BinOp (Constant i8 None) Mult (Name &k:0 Load)))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (Constant i2 None)\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &closest:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp (BinOp (Name &c:0 Load) Mult (BinOp (Name &c:0 Load) Add (Constant i1 None))) Div (Constant i2 None))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (BinOp (Name &k:0 Load) Sub (Name &closest:0 Load)) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &R:0 Load) (_slice_content (BinOp (Name &c:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &R:0 Load)\n                  (_slice_content (BinOp (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Sub (Name &closest:0 Load)))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil) None) ?0 ?1 (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil) None) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name &i:0 Load) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None))) Div (Constant i2 None)))) nil) None) (If (Compare (Name &k:0 Load) (list LtE) (list (Name &p:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &d:0 Load) (_slice_content (BinOp (BinOp (Name &k:0 Load) Sub (BinOp (Name &p:0 Load) Sub (Name &i:0 Load))) Sub (Constant i1 None))) Load))) nil)) Break) (/seq))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Import (list (alias &math:0 None))) (Assign (list (Name &h:0 Store)) (Call (Name g_round Load) (list (_starred_content (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (_starred_content (BinOp (Name &k:0 Load) Mult (Constant i2 None)))) nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name &k:0 Load) (list Gt) (list (Call (Name g_round Load) (list (_starred_content (BinOp (BinOp (Name &i:0 Load) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None))) Div (Constant i2 None)))) nil))) (/seq Break) (/seq (AugAssign (Name &h:0 Store) Sub (Constant i1 None))))) (/seq) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &k:0 Load) Sub (Call (Name g_round Load) (list (_starred_content (BinOp (BinOp (Name &h:0 Load) Mult (BinOp (Name &h:0 Load) Add (Constant i1 None))) Div (Constant i2 None)))) nil)) None) (If (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil) Sub (Constant i1 None))) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None))) Load))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &k:0 &n:0 &arr:0 /nothing /nothing)) (Assign (list (Name &ans:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (BinOp (BinOp (Constant i1 None) Add (Name &i:0 Load)) Mult (Name &i:0 Load)) FloorDiv (Constant i2 None)) (list GtE) (list (Name &k:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (BinOp (BinOp (Name &k:0 Load) Sub (BinOp (BinOp (BinOp (Constant i1 None) Add (Name &ans:0 Load)) Mult (Name &ans:0 Load)) FloorDiv (Constant i2 None))) Sub (Constant i1 None))) Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (/splice (fn_1 (Attribute (Name g_stdin Load) s_readline Load) &k:0 &n:0 &values:0 (Assign (list (Name &number:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &number:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &number:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Name &i:0 Load)) Add (Constant i1 None)))) nil)) (If (Compare (Subscript (Name &number:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list GtE) (list (Name &k:0 Load))) (/seq (Assign (list (Name &ind:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &cnt:0 Store)) (Subscript (Name &number:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) Break) (/seq))) (/seq) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &ind:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (BinOp (Name &cnt:0 Load) Add (Name &i:0 Load)) Add (Constant i1 None)) (list Eq) (list (Name &k:0 Load))) (/seq (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Subscript (Name &values:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ids:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &F:0 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load) None) (Assign (list (Name &i:0 Store)) (Constant i1 None) None) (While (Compare (Subscript (Name &F:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Name &k:0 Load))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &F:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &F:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Name &i:0 Load)))) nil))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &ids:0 Load) (_slice_content (BinOp (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Sub (BinOp (Subscript (Name &F:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &k:0 Load)))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &K:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil) None) (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &K:0 Load))) nil) None) (Assign (list (Name &Array:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &i:0 Store)) (Constant i1 None) None) (Assign (list (Name &Ans:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &Ans:0 Load) Add (Name &i:0 Load)) (list Lt) (list (Name &K:0 Load))) (/seq (AugAssign (Name &Ans:0 Store) Add (Name &i:0 Load)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &Ans:0 Store)) (BinOp (Name &K:0 Load) Sub (Name &Ans:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &Array:0 Load) (_slice_content (BinOp (Name &Ans:0 Load) Sub (Constant i1 None))) Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &k:0 &n:0 &ids:0 /nothing /nothing)) (If (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &ids:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (/seq (Assign (list (Name &count:0 Store)) (Constant i1 None) None) (For (Name &step:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i100000 None))) nil) (/seq (If (Compare (BinOp (Name &count:0 Load) Add (Name &step:0 Load)) (list Gt) (list (Name &k:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &count:0 Store) Add (Name &step:0 Load))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &ids:0 Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Name &count:0 Load))) Load))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &b:0 &a:0 &l:0 /nothing /nothing)) (Assign (list (Name &count:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &b:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &count:0 Load) (list Gt) (list (Name &i:0 Load))) (/seq (AugAssign (Name &count:0 Store) Sub (Name &i:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &count:0 Load) Sub (Constant i1 None))) Load))) nil)) Break))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &k:0 Load))) nil))) Load) None) (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (BinOp (Constant i8 None) Mult (Name &k:0 Load)) Add (Constant i1 None)) Pow (Constant f0.5 None)) Sub (Constant i1 None)) Div (Constant i2 None)))) nil) None) (Assign (list (Name &r:0 Store)) (BinOp (BinOp (Name &k:0 Load) Sub (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name &p:0 Load) Mult (BinOp (Name &p:0 Load) Add (Constant i1 None))) Div (Constant i2 None)))) nil)) Sub (Constant i1 None)) None) (If (Compare (Name &r:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &p:0 Load) Sub (Constant i1 None))) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &r:0 Load)) Load))) nil))))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &R:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_floor Load) (list (_starred_content (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (Constant i1 None) Add (BinOp (Constant i8 None) Mult (Name &k:0 Load))))) nil)) Div (Constant i2 None)))) nil))) nil) None) (Assign (list (Name &closest:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name &c:0 Load) Mult (BinOp (Name &c:0 Load) Add (Constant i1 None))) Div (Constant i2 None)))) nil) None) (If (Compare (BinOp (Name &k:0 Load) Sub (Name &closest:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &R:0 Load) (_slice_content (BinOp (Name &c:0 Load) Sub (Constant i1 None))) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &R:0 Load) (_slice_content (BinOp (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Sub (Name &closest:0 Load))) Load))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_str Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_hex Load)\n              (list\n                (_starred_content\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i2 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_0 None))\n              )\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_4 None))\n              )\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_6 None))\n              )\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_9 None))\n              )\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_a None))\n              )\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_d None))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &b:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_8 None))\n                  )\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_b None))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &b:0 Store) Add (Constant i2 None)))\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Subscript\n        (Call (Name g_hex Load) (list (_starred_content (Name &s:0 Load))) nil)\n        (_slice_slice (Slice (Constant i2 None) None None))\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (BinOp\n                          (Call\n                            (Attribute (Name &a:0 Load) s_count Load)\n                            (list (_starred_content (Constant s_0 None)))\n                            nil\n                          )\n                          Add\n                          (Call\n                            (Attribute (Name &a:0 Load) s_count Load)\n                            (list (_starred_content (Constant s_4 None)))\n                            nil\n                          )\n                        )\n                        Add\n                        (Call\n                          (Attribute (Name &a:0 Load) s_count Load)\n                          (list (_starred_content (Constant s_6 None)))\n                          nil\n                        )\n                      )\n                      Add\n                      (BinOp\n                        (Call\n                          (Attribute (Name &a:0 Load) s_count Load)\n                          (list (_starred_content (Constant s_8 None)))\n                          nil\n                        )\n                        Mult\n                        (Constant i2 None)\n                      )\n                    )\n                    Add\n                    (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_a None))) nil)\n                  )\n                  Add\n                  (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_9 None))) nil)\n                )\n                Add\n                (BinOp\n                  (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_b None))) nil)\n                  Mult\n                  (Constant i2 None)\n                )\n              )\n              Add\n              (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_d None))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &cnt:0 Store))\n      (Dict\n        (list\n          (Constant s_0 None)\n          (Constant s_1 None)\n          (Constant s_2 None)\n          (Constant s_3 None)\n          (Constant s_4 None)\n          (Constant s_5 None)\n          (Constant s_6 None)\n          (Constant s_7 None)\n          (Constant s_8 None)\n          (Constant s_9 None)\n          (Constant s_A None)\n          (Constant s_B None)\n          (Constant s_C None)\n          (Constant s_D None)\n          (Constant s_E None)\n          (Constant s_F None)\n        )\n        (list\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i2 None)\n          (Constant i1 None)\n          (Constant i1 None)\n          (Constant i2 None)\n          (Constant i0 None)\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i0 None)\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &hexStr:0 Store))\n      (Call\n        (Attribute\n          (Call\n            (Attribute (Call (Name g_hex Load) (list (_starred_content (Name &a:0 Load))) nil) s_replace Load)\n            (list (_starred_content (Constant s_0x None)) (_starred_content (Constant s_ None)))\n            nil\n          )\n          s_upper\n          Load\n        )\n        nil\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Subscript (Name &cnt:0 Load) (_slice_content (Name &x:1 Load)) Load)\n              (list (comprehension (Name &x:1 Store) (Name &hexStr:0 Load) nil i0))\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Attribute\n          (Call\n            (Name g_str Load)\n            (list (_starred_content (Call (Name g_hex Load) (list (_starred_content (Name &a:0 Load))) nil)))\n            nil\n          )\n          s_upper\n          Load\n        )\n        nil\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &b:0 Load))) nil) None)\n    (Assign (list (Name &count:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_B None)))\n            )\n          )\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i2 None)) Continue)\n          (/seq)\n        )\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_0 None)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_4 None)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_6 None)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_9 None)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_A None)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_D None)))\n            )\n          )\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)) Continue)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &count:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (Tuple\n        (list\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i7 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i8 None)) (_starred_content (Constant i2 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i9 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i10 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i11 None)) (_starred_content (Constant i2 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i12 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i13 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i14 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i15 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) (list (_starred_content (Name &r:0 Load))) nil) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &p:0 Store))\n              (BinOp\n                (Name &n:0 Load)\n                Sub\n                (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i16 None)) Mult (Constant i16 None))\n              )\n              None\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i16 None))\n            (AugAssign (Name &ans:0 Store) Add (Subscript (Name &d:0 Load) (_slice_content (Name &p:0 Load)) Load))\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Subscript\n        (Call (Name g_hex Load) (list (_starred_content (Name &n:0 Load))) nil)\n        (_slice_slice (Slice (Constant i2 None) None None))\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (BinOp\n                          (Call\n                            (Attribute (Name &l:0 Load) s_count Load)\n                            (list (_starred_content (Constant s_0 None)))\n                            nil\n                          )\n                          Add\n                          (Call\n                            (Attribute (Name &l:0 Load) s_count Load)\n                            (list (_starred_content (Constant s_4 None)))\n                            nil\n                          )\n                        )\n                        Add\n                        (Call\n                          (Attribute (Name &l:0 Load) s_count Load)\n                          (list (_starred_content (Constant s_6 None)))\n                          nil\n                        )\n                      )\n                      Add\n                      (BinOp\n                        (Call\n                          (Attribute (Name &l:0 Load) s_count Load)\n                          (list (_starred_content (Constant s_8 None)))\n                          nil\n                        )\n                        Mult\n                        (Constant i2 None)\n                      )\n                    )\n                    Add\n                    (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant s_a None))) nil)\n                  )\n                  Add\n                  (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant s_9 None))) nil)\n                )\n                Add\n                (BinOp\n                  (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant s_b None))) nil)\n                  Mult\n                  (Constant i2 None)\n                )\n              )\n              Add\n              (Call (Attribute (Name &l:0 Load) s_count Load) (list (_starred_content (Constant s_d None))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_hex Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Subscript (Name &n:0 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load)\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_a None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_b None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i2 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_d None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_0 None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_4 None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_6 None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_8 None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i2 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_9 None))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &count:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_0 None)))\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_4 None)))\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_6 None)))\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_9 None)))\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_a None)))\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_d None)))\n            )\n          )\n          (/seq (Return (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_8 None)))\n              (Compare (Name &x:1 Load) (list Eq) (list (Constant s_b None)))\n            )\n          )\n          (/seq (Return (Constant i2 None)))\n          (/seq)\n        )\n        (Return (Constant i0 None))\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (ListComp\n                    (Call (Name &count:0 Load) (list (_starred_content (Name &x:2 Load))) nil)\n                    (list\n                      (comprehension\n                        (Name &x:2 Store)\n                        (Subscript\n                          (Call\n                            (Name g_hex Load)\n                            (list\n                              (_starred_content\n                                (Call\n                                  (Name g_int Load)\n                                  (list\n                                    (_starred_content (Call (Name g_input Load) nil nil))\n                                    (_starred_content (Constant i10 None))\n                                  )\n                                  nil\n                                )\n                              )\n                            )\n                            nil\n                          )\n                          (_slice_slice (Slice (Constant i2 None) None None))\n                          Load\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &mp:0 Store))\n      (Dict\n        (list\n          (Constant s_0 None)\n          (Constant s_1 None)\n          (Constant s_2 None)\n          (Constant s_3 None)\n          (Constant s_4 None)\n          (Constant s_5 None)\n          (Constant s_6 None)\n          (Constant s_7 None)\n          (Constant s_8 None)\n          (Constant s_9 None)\n          (Constant s_A None)\n          (Constant s_B None)\n          (Constant s_C None)\n          (Constant s_D None)\n          (Constant s_E None)\n          (Constant s_F None)\n        )\n        (list\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i2 None)\n          (Constant i1 None)\n          (Constant i1 None)\n          (Constant i2 None)\n          (Constant i0 None)\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i0 None)\n        )\n      )\n      None\n    )\n    (For\n      (Name &line:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_hex Load)\n                (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &line:0 Load))) nil)))\n                nil\n              )\n              s_upper\n              Load\n            )\n            nil\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &c:0 Store)\n          (Subscript (Name &N:0 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load)\n          (/seq\n            (AugAssign (Name &ans:0 Store) Add (Subscript (Name &mp:0 Load) (_slice_content (Name &c:0 Load)) Load))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &v:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i0 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (IfExp (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None))\n      None\n    )\n    (While\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign\n          (Name &a:0 Store)\n          Add\n          (Subscript (Name &v:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i16 None))) Load)\n        )\n        (AugAssign (Name &n:0 Store) FloorDiv (Constant i16 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Subscript (Call (Name g_hex Load) (list (_starred_content (Name %1 Load))) nil) (_slice_slice (Slice (Constant i2 None) None None)) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil) Add (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_4 None))) nil)) Add (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_6 None))) nil)) Add (BinOp (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) Mult (Constant i2 None))) Add (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_a None))) nil)) Add (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_9 None))) nil)) Add (BinOp (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_b None))) nil) Mult (Constant i2 None))) Add (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_d None))) nil)))) nil)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_hex Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_0 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_4 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_6 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_9 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_a None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_d None))))) (/seq (AugAssign (Name &b:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_8 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_b None))))) (/seq (AugAssign (Name &b:0 Store) Add (Constant i2 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))) nil)",
      "(Module (fn_1 &s:0 &a:0) nil)",
      "(Module (/seq (Assign (list (Name &cnt:0 Store)) (Dict (list (Constant s_0 None) (Constant s_1 None) (Constant s_2 None) (Constant s_3 None) (Constant s_4 None) (Constant s_5 None) (Constant s_6 None) (Constant s_7 None) (Constant s_8 None) (Constant s_9 None) (Constant s_A None) (Constant s_B None) (Constant s_C None) (Constant s_D None) (Constant s_E None) (Constant s_F None)) (list (Constant i1 None) (Constant i0 None) (Constant i0 None) (Constant i0 None) (Constant i1 None) (Constant i0 None) (Constant i1 None) (Constant i0 None) (Constant i2 None) (Constant i1 None) (Constant i1 None) (Constant i2 None) (Constant i0 None) (Constant i1 None) (Constant i0 None) (Constant i0 None))) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &hexStr:0 Store)) (Call (Attribute (Call (Attribute (Call (Name g_hex Load) (list (_starred_content (Name &a:0 Load))) nil) s_replace Load) (list (_starred_content (Constant s_0x None)) (_starred_content (Constant s_ None))) nil) s_upper Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_sum Load) (list (_starred_content (ListComp (Subscript (Name &cnt:0 Load) (_slice_content (Name &x:1 Load)) Load) (list (comprehension (Name &x:1 Store) (Name &hexStr:0 Load) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (Call (Name g_hex Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) s_upper Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &b:0 Load))) nil) None) (Assign (list (Name &count:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (If (BoolOp Or (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (Compare (Name &i:0 Load) (list Eq) (list (Constant s_B None))))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i2 None)) Continue) (/seq)) (If (BoolOp Or (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_0 None))) (Compare (Name &i:0 Load) (list Eq) (list (Constant s_4 None))) (Compare (Name &i:0 Load) (list Eq) (list (Constant s_6 None))) (Compare (Name &i:0 Load) (list Eq) (list (Constant s_9 None))) (Compare (Name &i:0 Load) (list Eq) (list (Constant s_A None))) (Compare (Name &i:0 Load) (list Eq) (list (Constant s_D None))))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)) Continue) (/seq))) (/seq) None) (If (Compare (Name &count:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &r:0 Store)) (Tuple (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i7 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i8 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i9 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i10 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i11 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i12 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i13 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i14 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i15 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) Load) None) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) (list (_starred_content (Name &r:0 Load))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &n:0 Load) Sub (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i16 None)) Mult (Constant i16 None))) None) (AugAssign (Name &n:0 Store) FloorDiv (Constant i16 None)) (AugAssign (Name &ans:0 Store) Add (Subscript (Name &d:0 Load) (_slice_content (Name &p:0 Load)) Load))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))) nil)",
      "(Module (fn_1 &n:0 &l:0) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_hex Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) None) (Assign (list (Name &n:0 Store)) (Subscript (Name &n:0 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_a None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_b None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i2 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_d None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_0 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_4 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_6 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_8 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i2 None))) (/seq)) (If (Compare (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_9 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &count:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &x:1 Load) (list Eq) (list (Constant s_0 None))) (Compare (Name &x:1 Load) (list Eq) (list (Constant s_4 None))) (Compare (Name &x:1 Load) (list Eq) (list (Constant s_6 None))) (Compare (Name &x:1 Load) (list Eq) (list (Constant s_9 None))) (Compare (Name &x:1 Load) (list Eq) (list (Constant s_a None))) (Compare (Name &x:1 Load) (list Eq) (list (Constant s_d None))))) (/seq (Return (Constant i1 None))) (/seq)) (If (BoolOp Or (list (Compare (Name &x:1 Load) (list Eq) (list (Constant s_8 None))) (Compare (Name &x:1 Load) (list Eq) (list (Constant s_b None))))) (/seq (Return (Constant i2 None))) (/seq)) (Return (Constant i0 None))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (ListComp (Call (Name &count:0 Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Subscript (Call (Name g_hex Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil)) (_starred_content (Constant i10 None))) nil))) nil) (_slice_slice (Slice (Constant i2 None) None None)) Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &mp:0 Store)) (Dict (list (Constant s_0 None) (Constant s_1 None) (Constant s_2 None) (Constant s_3 None) (Constant s_4 None) (Constant s_5 None) (Constant s_6 None) (Constant s_7 None) (Constant s_8 None) (Constant s_9 None) (Constant s_A None) (Constant s_B None) (Constant s_C None) (Constant s_D None) (Constant s_E None) (Constant s_F None)) (list (Constant i1 None) (Constant i0 None) (Constant i0 None) (Constant i0 None) (Constant i1 None) (Constant i0 None) (Constant i1 None) (Constant i0 None) (Constant i2 None) (Constant i1 None) (Constant i1 None) (Constant i2 None) (Constant i0 None) (Constant i1 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &line:0 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (Assign (list (Name &N:0 Store)) (Call (Attribute (Call (Name g_hex Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &line:0 Load))) nil))) nil) s_upper Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &c:0 Store) (Subscript (Name &N:0 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &mp:0 Load) (_slice_content (Name &c:0 Load)) Load))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &v:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (IfExp (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None)) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &a:0 Store) Add (Subscript (Name &v:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i16 None))) Load)) (AugAssign (Name &n:0 Store) FloorDiv (Constant i16 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &n:0 Load) (list Eq) (list (Name &k:0 Load)))\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load)))\n          (Compare (BinOp (Name &l:0 Load) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NSwgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgMTE5LCA0OSwgMTA4LCAxMDAsIDMyLCA5MSwgOTcsIDExNiwgOTMsIDMyLCAxMDUsIDExMCwgOTgsIDExMSwgMTIwLCAzMiwgOTEsIDEwMCwgMTExLCAxMTYsIDkzLCAzMiwgMTE0LCAxMTcsIDEwXQ==\n        None\n      )\n    )\n    (ImportFrom s_collections (list (alias &deque:0 None) (alias &Counter:0 None)) i0)\n    (Import (list (alias &array:0 None)))\n    (ImportFrom s_itertools (list (alias &combinations:0 None) (alias &permutations:0 None)) i0)\n    (ImportFrom s_math (list (alias &sqrt:0 None) (alias &gcd:0 None)) i0)\n    (FunctionDef\n      &read_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_int_array:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call\n                  (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                  (list (_starred_content (Constant s-WzMyXQ== None)))\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n      (Call (Name &read_int_array:0 Load) nil nil)\n      None\n    )\n    (If\n      (Compare (Name &l:0 Load) (list Lt) (list (Name &r:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil)))\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &l:0 Load) Sub (Name &r:0 Load)))) nil)\n            (list Lt)\n            (list (Constant i10 None))\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store))\n              (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n              None\n            )\n            (For\n              (Name &i:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_min Load)\n                      (list (_starred_content (Name &l:0 Load)) (_starred_content (Name &r:0 Load)))\n                      nil\n                    )\n                  )\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_max Load)\n                        (list (_starred_content (Name &l:0 Load)) (_starred_content (Name &r:0 Load)))\n                        nil\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n                (If\n                  (Compare (BinOp (Name &i:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load)\n                      (_slice_content (Compare (Name &t:0 Load) (list GtE) (list (Name &s:0 Load))))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Constant i2 None))) Load)\n                  (_slice_content (Compare (Name &a:1 Load) (list Lt) (list (Name &b:1 Load))))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load))) (Name &l:0 Load) (Constant i2 None))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &numbers:0 Store))\n          (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Add (Constant i1 None))\n          None\n        )\n        (If\n          (Compare (Name &numbers:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &l:0 Load) (list NotEq) (list (Name &r:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &w:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_eval Load)\n        (list (_starred_content (Subscript (Name &w:0 Load) (_slice_content (Constant i0 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (Call\n        (Name g_eval Load)\n        (list (_starred_content (Subscript (Name &w:0 Load) (_slice_content (Constant i1 None)) Load)))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &l:0 Load) (list NotEq) (list (Name &r:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp And (list (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) #0)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) &k:0 &n:0) nil)",
      "(Module (fn_1 (Compare (BinOp (Name &l:0 Load) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None))) &r:0 &l:0) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NSwgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgMTE5LCA0OSwgMTA4LCAxMDAsIDMyLCA5MSwgOTcsIDExNiwgOTMsIDMyLCAxMDUsIDExMCwgOTgsIDExMSwgMTIwLCAzMiwgOTEsIDEwMCwgMTExLCAxMTYsIDkzLCAzMiwgMTE0LCAxMTcsIDEwXQ== None)) (ImportFrom s_collections (list (alias &deque:0 None) (alias &Counter:0 None)) i0) (Import (list (alias &array:0 None))) (ImportFrom s_itertools (list (alias &combinations:0 None) (alias &permutations:0 None)) i0) (ImportFrom s_math (list (alias &sqrt:0 None) (alias &gcd:0 None)) i0) (FunctionDef &read_int:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil))) nil None None) (FunctionDef &read_int_array:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name &read_int_array:0 Load) nil nil) None) (If (Compare (Name &l:0 Load) (list Lt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))) (/seq (If (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &l:0 Load) Sub (Name &r:0 Load)))) nil) (list Lt) (list (Constant i10 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &l:0 Load)) (_starred_content (Name &r:0 Load))) nil)) (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load)) (_starred_content (Name &r:0 Load))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (BinOp (Name &i:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load) (_slice_content (Compare (Name &t:0 Load) (list GtE) (list (Name &s:0 Load)))) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))))))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Constant i2 None))) Load) (_slice_content (Compare (Name &a:1 Load) (list Lt) (list (Name &b:1 Load)))) Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load))) (Name &l:0 Load) (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &numbers:0 Store)) (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Add (Constant i1 None)) None) (If (Compare (Name &numbers:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Name &l:0 Load) (list NotEq) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &w:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_eval Load) (list (_starred_content (Subscript (Name &w:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_eval Load) (list (_starred_content (Subscript (Name &w:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (If (Compare (Name &l:0 Load) (list Eq) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Name &l:0 Load) (list NotEq) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &Max:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp\n            (Subscript (Name &k:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            Add\n            (Subscript (Name &k:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n          )\n          None\n        )\n        (Assign (list (Name &z:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &s:0 Store))\n              (BinOp\n                (Subscript (Name &k:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                Add\n                (Subscript (Name &k:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)\n              )\n              None\n            )\n            (If\n              (Compare (Name &s:0 Load) (list Eq) (list (Name &t:0 Load)))\n              (/seq (Assign (list (Name &z:0 Store)) (BinOp (Name &z:0 Load) Add (Constant i1 None)) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &z:0 Load) (list Gt) (list (Name &Max:0 Load)))\n          (/seq\n            (Assign (list (Name &Max:0 Store)) (Name &z:0 Load) None)\n            (Assign (list (Name &res:0 Store)) (Name &t:0 Load) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript\n              (Name &s:0 Load)\n              (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None))\n              Load\n            )\n            (list In)\n            (list (Name &d:0 Load))\n          )\n          (/seq\n            (AugAssign\n              (Subscript\n                (Name &d:0 Load)\n                (_slice_content\n                  (Subscript\n                    (Name &s:0 Load)\n                    (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None))\n                    Load\n                  )\n                )\n                Store\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &d:0 Load)\n                  (_slice_content\n                    (Subscript\n                      (Name &s:0 Load)\n                      (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None))\n                      Load\n                    )\n                  )\n                  Store\n                )\n              )\n              (Constant i0 None)\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list (_starred_content (Name &d:0 Load)))\n              (list (keyword s_key (Attribute (Name &d:0 Load) s_get Load)))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_Counter Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_zip Load)\n              (list\n                (_starred_content (Name &s:0 Load))\n                (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s_ None) s_join Load)\n              (list\n                (_starred_content\n                  (Subscript\n                    (Subscript\n                      (Call (Attribute (Name &c:0 Load) s_most_common Load) nil nil)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (_slice_content (Constant i0 None))\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &debug:0 Store)) (Constant True None) None)\n    (If\n      (BoolOp\n        And\n        (list\n          (Name &debug:0 Load)\n          (Call\n            (Attribute (Attribute (Name g_os Load) s_path Load) s_exists Load)\n            (list (_starred_content (Constant s_input.in None)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &input:0 Store))\n          (Attribute\n            (Call\n              (Name g_open Load)\n              (list (_starred_content (Constant s_input.in None)) (_starred_content (Constant s_r None)))\n              nil\n            )\n            s_readline\n            Load\n          )\n          None\n        )\n      )\n      (/seq\n        (Assign (list (Name &debug:0 Store)) (Constant False None) None)\n        (Assign\n          (list (Name &input:0 Store))\n          (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)\n          None\n        )\n      )\n    )\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inlt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &insr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n        (Return\n          (Subscript\n            (Name &s:1 Load)\n            (_slice_slice\n              (Slice\n                None\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) Sub (Constant i1 None))\n                None\n              )\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &invr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &test_count:0 Store)) (Constant i1 None) None)\n    (If\n      (Name &debug:0 Load)\n      (/seq (Assign (list (Name &test_count:0 Store)) (Call (Name &inp:0 Load) nil nil) None))\n      (/seq)\n    )\n    (For\n      (Name &t:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &test_count:0 Load))) nil)\n      (/seq\n        (If\n          (Name &debug:0 Load)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant s-Wzg0LCAxMDEsIDExNSwgMTE2LCAzMiwgNjcsIDk3LCAxMTUsIDEwMSwgMzIsIDM1XQ== None)\n                  )\n                  (_starred_content (BinOp (Name &t:0 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Name &n:0 Store)) (Call (Name &inp:0 Load) nil nil) None)\n        (Assign (list (Name &a:0 Store)) (Call (Name &insr:0 Load) nil nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ans_g:0 Store)) (Constant s_ None) None)\n        (Assign (list (Name &freq:0 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (Assign\n              (list (Name &g:0 Store))\n              (Subscript\n                (Name &a:0 Load)\n                (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None))\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (Name &g:0 Load) (list NotIn) (list (Name &freq:0 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Store))\n                  (Constant i1 None)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Store))\n                  (BinOp (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Load) Add (Constant i1 None))\n                  None\n                )\n              )\n            )\n            (If\n              (Compare\n                (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Load)\n                (list Gt)\n                (list (Name &ans:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Load)\n                  None\n                )\n                (Assign (list (Name &ans_g:0 Store)) (Name &g:0 Load) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans_g:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n    (Assign\n      (list (Name &q:0 Store))\n      (Subscript (Name &a:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load)\n      None\n    )\n    (Assign\n      (list (Name &w:0 Store))\n      (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Call\n                          (Name g_str Load)\n                          (list\n                            (_starred_content\n                              (Call\n                                (Name g_ord Load)\n                                (list\n                                  (_starred_content (Subscript (Name &q:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        Add\n                        (Call\n                          (Name g_str Load)\n                          (list\n                            (_starred_content\n                              (Call\n                                (Name g_ord Load)\n                                (list\n                                  (_starred_content (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &b:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotIn) (list (Name &d:0 Load)))\n          (/seq\n            (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)\n          )\n          (/seq (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store)\n      (Call (Attribute (Name &d:0 Load) s_items Load) nil nil)\n      (/seq\n        (If\n          (Compare (Name &j:0 Load) (list Gt) (list (Name &c:0 Load)))\n          (/seq\n            (Assign (list (Name &c:0 Store)) (Name &j:0 Load) None)\n            (Assign (list (Name &maxa:0 Store)) (Name &i:0 Load) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_chr Load)\n                (list (_starred_content (BinOp (Name &maxa:0 Load) FloorDiv (Constant i100 None))))\n                nil\n              )\n              Add\n              (Call\n                (Name g_chr Load)\n                (list (_starred_content (BinOp (Name &maxa:0 Load) Mod (Constant i100 None))))\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &m:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &s:0 Load)\n                  (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil)\n          None\n        )\n        (If\n          (Compare (Name &x:0 Load) (list Gt) (list (Name &m:0 Load)))\n          (/seq\n            (Assign (list (Name &m:0 Store)) (Name &x:0 Load) None)\n            (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &dic:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign (list (Name &letra1:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n        (Assign\n          (list (Name &letra2:0 Store))\n          (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n          None\n        )\n        (Assign (list (Name &twoGram:0 Store)) (BinOp (Name &letra1:0 Load) Add (Name &letra2:0 Load)) None)\n        (If\n          (Compare (Name &twoGram:0 Load) (list NotIn) (list (Name &dic:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &dic:0 Load) (_slice_content (Name &twoGram:0 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n          )\n          (/seq\n            (AugAssign\n              (Subscript (Name &dic:0 Load) (_slice_content (Name &twoGram:0 Load)) Store)\n              Add\n              (Constant i1 None)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &maxcount:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &e:0 Store)\n      (Name &dic:0 Load)\n      (/seq\n        (Assign (list (Name &count:0 Store)) (Subscript (Name &dic:0 Load) (_slice_content (Name &e:0 Load)) Load) None)\n        (Assign\n          (list (Name &maxcount:0 Store))\n          (Call\n            (Name g_max Load)\n            (list (_starred_content (Name &count:0 Load)) (_starred_content (Name &maxcount:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &e:0 Store)\n      (Name &dic:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &dic:0 Load) (_slice_content (Name &e:0 Load)) Load)\n            (list Eq)\n            (list (Name &maxcount:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:0 Load))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &two_gram_dict:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &max_two_gram_value:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &max_two_gram:0 Store))\n      (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i0 None) (Constant i2 None) None)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &two_gram_key:0 Store))\n          (Subscript\n            (Name &s:0 Load)\n            (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None))\n            Load\n          )\n          None\n        )\n        (If\n          (Call\n            (Attribute (Name &two_gram_dict:0 Load) s_get Load)\n            (list (_starred_content (Name &two_gram_key:0 Load)))\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Store)\n              Add\n              (Constant i1 None)\n            )\n            (If\n              (Compare\n                (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Load)\n                (list Gt)\n                (list (Name &max_two_gram_value:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &max_two_gram_value:0 Store))\n                  (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Load)\n                  None\n                )\n                (Assign (list (Name &max_two_gram:0 Store)) (Name &two_gram_key:0 Load) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_two_gram:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &stringLen:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &string:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &twoGrams:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (Name &stringLen:0 Load)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Subscript\n              (Name &twoGrams:0 Load)\n              (_slice_content\n                (BinOp\n                  (Subscript\n                    (Name &string:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                    Load\n                  )\n                  Add\n                  (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n              Store\n            )\n          )\n          (BinOp\n            (Call\n              (Attribute (Name &twoGrams:0 Load) s_get Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (Subscript\n                      (Name &string:0 Load)\n                      (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                      Load\n                    )\n                    Add\n                    (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  )\n                )\n                (_starred_content (Constant i0 None))\n              )\n              nil\n            )\n            Add\n            (Constant i1 None)\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list (_starred_content (Name &twoGrams:0 Load)))\n              (list (keyword s_key (Attribute (Name &twoGrams:0 Load) s_get Load)))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &max_s:0 Store))\n      (BinOp\n        (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)\n        Add\n        (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)\n      )\n      None\n    )\n    (Assign (list (Name &max_times:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &p:0 Store))\n          (BinOp\n            (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            Add\n            (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Constant i1 None))\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                  Add\n                  (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)\n                )\n                (list Eq)\n                (list (Name &p:0 Load))\n              )\n              (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Gt) (list (Name &max_times:0 Load)))\n          (/seq\n            (Assign (list (Name &max_times:0 Store)) (Name &c:0 Load) None)\n            (Assign\n              (list (Name &max_s:0 Store))\n              (BinOp\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                Add\n                (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_s:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_input Load) nil nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &k:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &Max:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &t:0 Store)) (BinOp (Subscript (Name &k:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &k:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) None) (Assign (list (Name &z:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &s:0 Store)) (BinOp (Subscript (Name &k:0 Load) (_slice_content (Name &j:0 Load)) Load) Add (Subscript (Name &k:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) None) (If (Compare (Name &s:0 Load) (list Eq) (list (Name &t:0 Load))) (/seq (Assign (list (Name &z:0 Store)) (BinOp (Name &z:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (If (Compare (Name &z:0 Load) (list Gt) (list (Name &Max:0 Load))) (/seq (Assign (list (Name &Max:0 Store)) (Name &z:0 Load) None) (Assign (list (Name &res:0 Store)) (Name &t:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &s:0)) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) Load)) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) Load)) Store)) (Constant i0 None) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &d:0 Load))) (list (keyword s_key (Attribute (Name &d:0 Load) s_get Load)))))) nil))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (/splice (fn_1 &n:0 &s:0)) (Assign (list (Name &c:0 Store)) (Call (Name g_Counter Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Subscript (Subscript (Call (Attribute (Name &c:0 Load) s_most_common Load) nil nil) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Assign (list (Name &debug:0 Store)) (Constant True None) None) (If (BoolOp And (list (Name &debug:0 Load) (Call (Attribute (Attribute (Name g_os Load) s_path Load) s_exists Load) (list (_starred_content (Constant s_input.in None))) nil))) (/seq (Assign (list (Name &input:0 Store)) (Attribute (Call (Name g_open Load) (list (_starred_content (Constant s_input.in None)) (_starred_content (Constant s_r None))) nil) s_readline Load) None)) (/seq (Assign (list (Name &debug:0 Store)) (Constant False None) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None))) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (Call (Name &input:0 Load) nil nil) None) (Return (Subscript (Name &s:1 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) Sub (Constant i1 None)) None)) Load))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (Assign (list (Name &test_count:0 Store)) (Constant i1 None) None) (If (Name &debug:0 Load) (/seq (Assign (list (Name &test_count:0 Store)) (Call (Name &inp:0 Load) nil nil) None)) (/seq)) (For (Name &t:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &test_count:0 Load))) nil) (/seq (If (Name &debug:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-Wzg0LCAxMDEsIDExNSwgMTE2LCAzMiwgNjcsIDk3LCAxMTUsIDEwMSwgMzIsIDM1XQ== None)) (_starred_content (BinOp (Name &t:0 Load) Add (Constant i1 None)))) nil))) (/seq)) (Assign (list (Name &n:0 Store)) (Call (Name &inp:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &insr:0 Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans_g:0 Store)) (Constant s_ None) None) (Assign (list (Name &freq:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &g:0 Store)) (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) Load) None) (If (Compare (Name &g:0 Load) (list NotIn) (list (Name &freq:0 Load))) (/seq (Assign (list (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Store)) (Constant i1 None) None)) (/seq (Assign (list (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Store)) (BinOp (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Load) Add (Constant i1 None)) None))) (If (Compare (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Load) (list Gt) (list (Name &ans:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Subscript (Name &freq:0 Load) (_slice_content (Name &g:0 Load)) Load) None) (Assign (list (Name &ans_g:0 Store)) (Name &g:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans_g:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &b:0 Store)) (List nil Load) None) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (Assign (list (Name &q:0 Store)) (Subscript (Name &a:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load) None) (Assign (list (Name &w:0 Store)) (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Call (Name g_str Load) (list (_starred_content (Call (Name g_ord Load) (list (_starred_content (Subscript (Name &q:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil) Add (Call (Name g_str Load) (list (_starred_content (Call (Name g_ord Load) (list (_starred_content (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil)))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Name &b:0 Load) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Name &d:0 Load))) (/seq (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store) (Call (Attribute (Name &d:0 Load) s_items Load) nil nil) (/seq (If (Compare (Name &j:0 Load) (list Gt) (list (Name &c:0 Load))) (/seq (Assign (list (Name &c:0 Store)) (Name &j:0 Load) None) (Assign (list (Name &maxa:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_chr Load) (list (_starred_content (BinOp (Name &maxa:0 Load) FloorDiv (Constant i100 None)))) nil) Add (Call (Name g_chr Load) (list (_starred_content (BinOp (Name &maxa:0 Load) Mod (Constant i100 None)))) nil)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &s:0)) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &m:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) Load))) nil))) (/seq) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &x:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &i:0 Load))) nil) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Name &m:0 Load))) (/seq (Assign (list (Name &m:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &l:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &dic:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &letra1:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Name &letra2:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) None) (Assign (list (Name &twoGram:0 Store)) (BinOp (Name &letra1:0 Load) Add (Name &letra2:0 Load)) None) (If (Compare (Name &twoGram:0 Load) (list NotIn) (list (Name &dic:0 Load))) (/seq (Assign (list (Subscript (Name &dic:0 Load) (_slice_content (Name &twoGram:0 Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &dic:0 Load) (_slice_content (Name &twoGram:0 Load)) Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &maxcount:0 Store)) (Constant i0 None) None) (For (Name &e:0 Store) (Name &dic:0 Load) (/seq (Assign (list (Name &count:0 Store)) (Subscript (Name &dic:0 Load) (_slice_content (Name &e:0 Load)) Load) None) (Assign (list (Name &maxcount:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &count:0 Load)) (_starred_content (Name &maxcount:0 Load))) nil) None)) (/seq) None) (For (Name &e:0 Store) (Name &dic:0 Load) (/seq (If (Compare (Subscript (Name &dic:0 Load) (_slice_content (Name &e:0 Load)) Load) (list Eq) (list (Name &maxcount:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:0 Load))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &two_gram_dict:0 Store)) (Dict nil nil) None) (Assign (list (Name &max_two_gram_value:0 Store)) (Constant i0 None) None) (Assign (list (Name &max_two_gram:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i0 None) (Constant i2 None) None)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (Assign (list (Name &two_gram_key:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) Load) None) (If (Call (Attribute (Name &two_gram_dict:0 Load) s_get Load) (list (_starred_content (Name &two_gram_key:0 Load))) nil) (/seq (AugAssign (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Store) Add (Constant i1 None)) (If (Compare (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Load) (list Gt) (list (Name &max_two_gram_value:0 Load))) (/seq (Assign (list (Name &max_two_gram_value:0 Store)) (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Load) None) (Assign (list (Name &max_two_gram:0 Store)) (Name &two_gram_key:0 Load) None)) (/seq))) (/seq (Assign (list (Subscript (Name &two_gram_dict:0 Load) (_slice_content (Name &two_gram_key:0 Load)) Store)) (Constant i1 None) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_two_gram:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &stringLen:0 &string:0)) (Assign (list (Name &twoGrams:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &stringLen:0 Load))) nil) (/seq (Assign (list (Subscript (Name &twoGrams:0 Load) (_slice_content (BinOp (Subscript (Name &string:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load))) Store)) (BinOp (Call (Attribute (Name &twoGrams:0 Load) s_get Load) (list (_starred_content (BinOp (Subscript (Name &string:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &string:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Constant i0 None))) nil) Add (Constant i1 None)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &twoGrams:0 Load))) (list (keyword s_key (Attribute (Name &twoGrams:0 Load) s_get Load)))))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &s:0)) (Assign (list (Name &max_s:0 Store)) (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) None) (Assign (list (Name &max_times:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &j:0 Load)) Load) Add (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) (list Eq) (list (Name &p:0 Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &c:0 Load) (list Gt) (list (Name &max_times:0 Load))) (/seq (Assign (list (Name &max_times:0 Store)) (Name &c:0 Load) None) (Assign (list (Name &max_s:0 Store)) (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_s:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_functools None)))\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &doit:0\n      (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &n:1 Load))) nil)\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (Compare (Name &k:1 Load) (list Lt) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Compare (Name &k:1 Load) (list Eq) (list (Constant i0 None)))))\n          (/seq)\n        )\n        (Assign\n          (list (Name &d:1 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &n:1 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n          None\n        )\n        (Return\n          (Call\n            (Name g_sum Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call\n                    (Name &doit:0 Load)\n                    (list\n                      (_starred_content\n                        (IfExp\n                          (Compare (Name &i:2 Load) (list Eq) (list (Name &d:1 Load)))\n                          (Subscript (Name &n:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                          (BinOp\n                            (Constant s_9 None)\n                            Mult\n                            (BinOp\n                              (Call (Name g_len Load) (list (_starred_content (Name &n:1 Load))) nil)\n                              Sub\n                              (Constant i1 None)\n                            )\n                          )\n                        )\n                      )\n                      (_starred_content\n                        (IfExp\n                          (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None)))\n                          (BinOp (Name &k:1 Load) Sub (Constant i1 None))\n                          (Name &k:1 Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &i:2 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list (_starred_content (BinOp (Name &d:1 Load) Add (Constant i1 None))))\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (list\n        (Call (Attribute (Name g_functools Load) s_lru_cache Load) (list (_starred_content (Constant None None))) nil)\n      )\n      None\n      None\n    )\n    (Expr\n      (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (Constant i404 None))) nil)\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &doit:0 Load)\n              (list\n                (_starred_content (Call (Name g_input Load) nil nil))\n                (_starred_content\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (ListComp\n          (ListComp\n            (Constant i0 None)\n            (list\n              (comprehension\n                (Name &k:3 Store)\n                (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i2 None)))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          (list\n            (comprehension\n              (Name &j:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content\n                  (BinOp (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) Add (Constant i1 None))\n                )\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &Ni:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n          (/seq\n            (For\n              (Name &k:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil)\n              (/seq\n                (For\n                  (Name &d:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content\n                        (IfExp\n                          (Name &j:0 Load)\n                          (Constant i10 None)\n                          (BinOp\n                            (Call (Name g_int Load) (list (_starred_content (Name &Ni:0 Load))) nil)\n                            Add\n                            (Constant i1 None)\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Subscript\n                          (Subscript\n                            (Name &dp:0 Load)\n                            (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            Load\n                          )\n                          (_slice_content\n                            (BoolOp\n                              Or\n                              (list (Name &j:0 Load) (Compare (Name &d:0 Load) (list Lt) (list (Name &Ni:0 Load))))\n                            )\n                          )\n                          Load\n                        )\n                        (_slice_content\n                          (BinOp (Name &k:0 Load) Add (Compare (Name &d:0 Load) (list NotEq) (list (Constant i0 None))))\n                        )\n                        Store\n                      )\n                      Add\n                      (Subscript\n                        (Subscript\n                          (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Name &j:0 Load))\n                          Load\n                        )\n                        (_slice_content (Name &k:0 Load))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Name &K:0 Load))\n          Load\n        )\n        Add\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n            (_slice_content (Constant i1 None))\n            Load\n          )\n          (_slice_content (Name &K:0 Load))\n          Load\n        )\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &N:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) None)\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (ListComp\n          (ListComp\n            (Constant i0 None)\n            (list\n              (comprehension\n                (Name &_:3 Store)\n                (Call (Name g_range Load) (list (_starred_content (Constant i5 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          (list\n            (comprehension\n              (Name &_:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i5 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i1 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Load)\n            (_slice_content (Constant i1 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Load)\n            (_slice_content (Constant i1 None))\n            Load\n          )\n          (_slice_content (Constant i1 None))\n          Store\n        )\n      )\n      (BinOp\n        (Call\n          (Name g_int Load)\n          (list (_starred_content (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load)))\n          nil\n        )\n        Sub\n        (Constant i1 None)\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &S:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ok:0 Store))\n          (IfExp (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (Constant i0 None) (Constant i1 None))\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil)\n          (/seq\n            (AugAssign\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (BinOp (Name &j:0 Load) Add (Name &ok:0 Load)))\n                Store\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (Name &j:0 Load))\n                Load\n              )\n            )\n            (If\n              (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Store\n                  )\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                )\n                (AugAssign\n                  (Subscript\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                    Store\n                  )\n                  Add\n                  (BinOp\n                    (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                    Mult\n                    (Subscript\n                      (Subscript\n                        (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                      (_slice_content (Name &j:0 Load))\n                      Load\n                    )\n                  )\n                )\n              )\n              (/seq)\n            )\n            (AugAssign\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &j:0 Load))\n                Store\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &j:0 Load))\n                Load\n              )\n            )\n            (AugAssign\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                Store\n              )\n              Add\n              (BinOp\n                (Constant i9 None)\n                Mult\n                (Subscript\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                  (_slice_content (Name &j:0 Load))\n                  Load\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (Name &K:0 Load))\n                Load\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &K:0 Load))\n                Load\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil) None)\n    (Assign\n      (list (Name &DP:0 Store))\n      (ListComp\n        (ListComp\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Mult\n            (BinOp (Name &k:0 Load) Add (Constant i1 None))\n          )\n          (list\n            (comprehension\n              (Name &_:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &DP:0 Load) (_slice_content (Constant i0 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Subscript (Name &n:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil)\n          (/seq\n            (AugAssign\n              (Subscript\n                (Subscript\n                  (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &j:0 Load))\n                Store\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &j:0 Load))\n                Load\n              )\n            )\n            (If\n              (Compare (Name &N:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Store\n                  )\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Subscript\n                        (Name &DP:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Store\n                  )\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Subscript\n                        (Name &DP:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                )\n              )\n            )\n            (If\n              (Compare (Name &j:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (Name &j:0 Load))\n                    Store\n                  )\n                  Add\n                  (BinOp\n                    (Constant i9 None)\n                    Mult\n                    (Subscript\n                      (Subscript\n                        (Subscript\n                          (Name &DP:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                          Load\n                        )\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                      Load\n                    )\n                  )\n                )\n                (If\n                  (Compare (Name &N:0 Load) (list NotEq) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Subscript\n                          (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Constant i0 None))\n                          Load\n                        )\n                        (_slice_content (Name &j:0 Load))\n                        Store\n                      )\n                      Add\n                      (Subscript\n                        (Subscript\n                          (Subscript\n                            (Name &DP:0 Load)\n                            (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                            Load\n                          )\n                          (_slice_content (Constant i0 None))\n                          Load\n                        )\n                        (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                    )\n                    (AugAssign\n                      (Subscript\n                        (Subscript\n                          (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Constant i1 None))\n                          Load\n                        )\n                        (_slice_content (Name &j:0 Load))\n                        Store\n                      )\n                      Add\n                      (BinOp\n                        (BinOp (Name &N:0 Load) Sub (Constant i1 None))\n                        Mult\n                        (Subscript\n                          (Subscript\n                            (Subscript\n                              (Name &DP:0 Load)\n                              (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                            (_slice_content (Constant i0 None))\n                            Load\n                          )\n                          (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                          Load\n                        )\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Subscript\n                  (Subscript (Name &DP:0 Load) (_slice_content (Name &m:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (Name &k:0 Load))\n                Load\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript (Name &DP:0 Load) (_slice_content (Name &m:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &k:0 Load))\n                Load\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (ListComp\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Mult\n            (BinOp (Name &k:0 Load) Add (Constant i2 None))\n          )\n          (list\n            (comprehension\n              (Name &i:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &j:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content\n                  (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil) Add (Constant i1 None))\n                )\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &value:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n          (/seq\n            (For\n              (Name &l:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil)\n              (/seq\n                (For\n                  (Name &d:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content\n                        (IfExp\n                          (Compare (Name &j:0 Load) (list Eq) (list (Constant i1 None)))\n                          (Constant i10 None)\n                          (BinOp (Name &value:0 Load) Add (Constant i1 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Subscript\n                          (Subscript\n                            (Name &dp:0 Load)\n                            (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            Load\n                          )\n                          (_slice_content\n                            (IfExp\n                              (Compare (Name &j:0 Load) (list Eq) (list (Constant i1 None)))\n                              (Constant i1 None)\n                              (IfExp\n                                (Compare (Name &d:0 Load) (list Lt) (list (Name &value:0 Load)))\n                                (Constant i1 None)\n                                (Constant i0 None)\n                              )\n                            )\n                          )\n                          Load\n                        )\n                        (_slice_content\n                          (IfExp\n                            (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                            (Name &l:0 Load)\n                            (BinOp (Name &l:0 Load) Add (Constant i1 None))\n                          )\n                        )\n                        Store\n                      )\n                      Add\n                      (Subscript\n                        (Subscript\n                          (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Name &j:0 Load))\n                          Load\n                        )\n                        (_slice_content (Name &l:0 Load))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Subscript\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (_slice_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil))\n                    Load\n                  )\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (Name &k:0 Load))\n                Load\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (_slice_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil))\n                    Load\n                  )\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &k:0 Load))\n                Load\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &L:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) None)\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (ListComp\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Mult\n            (BinOp (Name &K:0 Load) Add (Constant i2 None))\n          )\n          (list\n            (comprehension\n              (Name &_:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &L:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &L:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Subscript (Name &N:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &k:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil)\n          (/seq\n            (AugAssign\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (Name &k:0 Load))\n                Store\n              )\n              Add\n              (IfExp\n                (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                (Subscript\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                    (_slice_content (Constant i0 None))\n                    Load\n                  )\n                  (_slice_content (Name &k:0 Load))\n                  Load\n                )\n                (Subscript\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                    (_slice_content (Constant i0 None))\n                    Load\n                  )\n                  (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None)))\n                  Load\n                )\n              )\n            )\n            (AugAssign\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &k:0 Load))\n                Store\n              )\n              Add\n              (BinOp\n                (BinOp\n                  (Subscript\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None)))\n                    Load\n                  )\n                  Mult\n                  (Constant i9 None)\n                )\n                Add\n                (Subscript\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                  (_slice_content (Name &k:0 Load))\n                  Load\n                )\n              )\n            )\n            (If\n              (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (Name &k:0 Load))\n                    Store\n                  )\n                  Add\n                  (BinOp\n                    (BinOp\n                      (Subscript\n                        (Subscript\n                          (Subscript\n                            (Name &dp:0 Load)\n                            (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                            Load\n                          )\n                          (_slice_content (Constant i0 None))\n                          Load\n                        )\n                        (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                      Mult\n                      (BinOp (Name &a:0 Load) Sub (Constant i1 None))\n                    )\n                    Add\n                    (Subscript\n                      (Subscript\n                        (Subscript\n                          (Name &dp:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                          Load\n                        )\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                      (_slice_content (Name &k:0 Load))\n                      Load\n                    )\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &L:0 Load)) Load)\n                  (_slice_content (Constant i0 None))\n                  Load\n                )\n                (_slice_content (Name &K:0 Load))\n                Load\n              )\n              Add\n              (Subscript\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &L:0 Load)) Load)\n                  (_slice_content (Constant i1 None))\n                  Load\n                )\n                (_slice_content (Name &K:0 Load))\n                Load\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (ListComp\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i2 None))\n          (list\n            (comprehension\n              (Name &j:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content\n                  (BinOp (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) Add (Constant i1 None))\n                )\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil)\n          (/seq\n            (For\n              (Name &ltn:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              (/seq\n                (For\n                  (Name &x:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content\n                        (IfExp (Name &ltn:0 Load) (Constant i10 None) (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                      )\n                    )\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (BinOp (Name &j:0 Load) Add (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))))\n                        (list Gt)\n                        (list (Name &K:0 Load))\n                      )\n                      (/seq Continue)\n                      (/seq)\n                    )\n                    (AugAssign\n                      (Subscript\n                        (Subscript\n                          (Subscript\n                            (Name &dp:0 Load)\n                            (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            Load\n                          )\n                          (_slice_content\n                            (BinOp (Name &j:0 Load) Add (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))))\n                          )\n                          Load\n                        )\n                        (_slice_content\n                          (BinOp (Name &ltn:0 Load) BitOr (Compare (Name &x:0 Load) (list Lt) (list (Name &n:0 Load))))\n                        )\n                        Store\n                      )\n                      Add\n                      (Subscript\n                        (Subscript\n                          (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Name &j:0 Load))\n                          Load\n                        )\n                        (_slice_content (Name &ltn:0 Load))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (Subscript\n                    (Subscript\n                      (Name &dp:0 Load)\n                      (_slice_content (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil))\n                      Load\n                    )\n                    (_slice_content (Name &K:0 Load))\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &ln:0 Store))\n      (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil) Add (Constant i1 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (ListComp\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &ln:0 Load))\n          (list\n            (comprehension\n              (Name &_:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &ln:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript\n            (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load)\n            (_slice_content (Constant i0 None))\n            Load\n          )\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (For\n          (Name &smaller:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (Call\n                (Name g_int Load)\n                (list (_starred_content (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &t:0 Store)) (IfExp (Name &smaller:0 Load) (Constant i9 None) (Name &x:0 Load)) None)\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &t:0 Load) Add (Constant i1 None)))) nil)\n              (/seq\n                (For\n                  (Name &knum:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (BinOp (Name &ln:0 Load) Sub (Constant i1 None))))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &j:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (AugAssign\n                          (Subscript\n                            (Subscript\n                              (Subscript\n                                (Name &dp:0 Load)\n                                (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                                Load\n                              )\n                              (_slice_content\n                                (Call\n                                  (Name g_int Load)\n                                  (list\n                                    (_starred_content\n                                      (BoolOp\n                                        Or\n                                        (list\n                                          (Name &smaller:0 Load)\n                                          (Compare (Name &j:0 Load) (list Lt) (list (Name &x:0 Load)))\n                                        )\n                                      )\n                                    )\n                                  )\n                                  nil\n                                )\n                              )\n                              Load\n                            )\n                            (_slice_content (Name &knum:0 Load))\n                            Store\n                          )\n                          Add\n                          (Subscript\n                            (Subscript\n                              (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (Name &smaller:0 Load))\n                              Load\n                            )\n                            (_slice_content (Name &knum:0 Load))\n                            Load\n                          )\n                        )\n                      )\n                      (/seq\n                        (AugAssign\n                          (Subscript\n                            (Subscript\n                              (Subscript\n                                (Name &dp:0 Load)\n                                (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                                Load\n                              )\n                              (_slice_content\n                                (Call\n                                  (Name g_int Load)\n                                  (list\n                                    (_starred_content\n                                      (BoolOp\n                                        Or\n                                        (list\n                                          (Name &smaller:0 Load)\n                                          (Compare (Name &j:0 Load) (list Lt) (list (Name &x:0 Load)))\n                                        )\n                                      )\n                                    )\n                                  )\n                                  nil\n                                )\n                              )\n                              Load\n                            )\n                            (_slice_content (BinOp (Name &knum:0 Load) Add (Constant i1 None)))\n                            Store\n                          )\n                          Add\n                          (Subscript\n                            (Subscript\n                              (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (Name &smaller:0 Load))\n                              Load\n                            )\n                            (_slice_content (Name &knum:0 Load))\n                            Load\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Try\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (_slice_content (Name &k:0 Load))\n                    Load\n                  )\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (_slice_content (Name &k:0 Load))\n                    Load\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (list\n        (ExceptHandler\n          None\n          None\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n        )\n      )\n      (/seq)\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) None)\n    (Assign\n      (list (Name &dp0:0 Store))\n      (ListComp\n        (BinOp\n          (List (list (_starred_content (Constant i0 None))) Load)\n          Mult\n          (BinOp (Name &m:0 Load) Add (Constant i1 None))\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp1:0 Store))\n      (ListComp\n        (BinOp\n          (List (list (_starred_content (Constant i0 None))) Load)\n          Mult\n          (BinOp (Name &m:0 Load) Add (Constant i1 None))\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript (Name &dp1:0 Load) (_slice_content (Constant i0 None)) Load)\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Subscript\n              (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load)\n              (_slice_content (Constant i0 None))\n              Store\n            )\n          )\n          (Constant i1 None)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_0 None))\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript\n                        (Name &dp0:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (BinOp\n                    (BinOp\n                      (Subscript\n                        (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (_slice_content (Name &j:0 Load))\n                        Load\n                      )\n                      Mult\n                      (Constant i9 None)\n                    )\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript\n                        (Name &dp1:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Subscript\n                    (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript\n                        (Name &dp0:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (BinOp\n                          (Subscript\n                            (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                            (_slice_content (Name &j:0 Load))\n                            Load\n                          )\n                          Mult\n                          (Constant i9 None)\n                        )\n                        Add\n                        (Subscript\n                          (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                      )\n                      Add\n                      (BinOp\n                        (Subscript\n                          (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Name &j:0 Load))\n                          Load\n                        )\n                        Mult\n                        (BinOp\n                          (Call\n                            (Name g_int Load)\n                            (list\n                              (_starred_content (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                            )\n                            nil\n                          )\n                          Sub\n                          (Constant i1 None)\n                        )\n                      )\n                    )\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript\n                        (Name &dp1:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Subscript\n                    (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &m:0 Load) (list Lt) (list (Name &K:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript\n                    (Subscript (Name &dp0:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    (_slice_content (Name &K:0 Load))\n                    Load\n                  )\n                  Add\n                  (Subscript\n                    (Subscript (Name &dp1:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    (_slice_content (Name &K:0 Load))\n                    Load\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &comb:0\n      (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ans:1 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil)\n          (/seq (AugAssign (Name &ans:1 Store) Mult (BinOp (Name &n:1 Load) Sub (Name &i:1 Load))))\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil)\n          (/seq (AugAssign (Name &ans:1 Store) FloorDiv (BinOp (Name &k:1 Load) Sub (Name &i:1 Load))))\n          (/seq)\n          None\n        )\n        (Return (Name &ans:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &count:0\n      (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &n:2 Load))) nil)\n            (list Lt)\n            (list (Name &k:2 Load))\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq)\n        )\n        (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq))\n        (If\n          (Compare\n            (Call (Name g_int Load) (list (_starred_content (Name &n:2 Load))) nil)\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &n:2 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Constant s_0 None))\n          )\n          (/seq\n            (Return\n              (Call\n                (Name &count:0 Load)\n                (list\n                  (_starred_content\n                    (Subscript (Name &n:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                  )\n                  (_starred_content (Name &k:2 Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (Call\n                (Name &count:0 Load)\n                (list\n                  (_starred_content\n                    (Subscript (Name &n:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                  )\n                  (_starred_content (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n                )\n                nil\n              )\n              Add\n              (BinOp\n                (Call\n                  (Name &comb:0 Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Call (Name g_len Load) (list (_starred_content (Name &n:2 Load))) nil)\n                        Sub\n                        (Constant i1 None)\n                      )\n                    )\n                    (_starred_content (Name &k:2 Load))\n                  )\n                  nil\n                )\n                Mult\n                (BinOp (Constant i9 None) Pow (Name &k:2 Load))\n              )\n            )\n            Add\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (Subscript (Name &n:2 Load) (_slice_content (Constant i0 None)) Load)))\n                    nil\n                  )\n                  Sub\n                  (Constant i1 None)\n                )\n                Mult\n                (Call\n                  (Name &comb:0 Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Call (Name g_len Load) (list (_starred_content (Name &n:2 Load))) nil)\n                        Sub\n                        (Constant i1 None)\n                      )\n                    )\n                    (_starred_content (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              Mult\n              (BinOp (Constant i9 None) Pow (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &count:0 Load)\n              (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (Assign (list (Name %5 Store)) (ListComp (ListComp #2 (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content #1)) nil) nil i0))) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Subscript (Name %5 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_functools None))) (Import (list (alias g_sys None))) (FunctionDef &doit:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &n:1 Load))) nil) (list Eq) (list (Constant i0 None))) (Compare (Name &k:1 Load) (list Lt) (list (Constant i0 None))))) (/seq (Return (Compare (Name &k:1 Load) (list Eq) (list (Constant i0 None))))) (/seq)) (Assign (list (Name &d:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &n:1 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name &doit:0 Load) (list (_starred_content (IfExp (Compare (Name &i:2 Load) (list Eq) (list (Name &d:1 Load))) (Subscript (Name &n:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (BinOp (Constant s_9 None) Mult (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:1 Load))) nil) Sub (Constant i1 None))))) (_starred_content (IfExp (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None))) (BinOp (Name &k:1 Load) Sub (Constant i1 None)) (Name &k:1 Load)))) nil) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &d:1 Load) Add (Constant i1 None)))) nil) nil i0))))) nil))) (list (Call (Attribute (Name g_functools Load) s_lru_cache Load) (list (_starred_content (Constant None None))) nil)) None None) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (Constant i404 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &doit:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) Add (Constant i1 None)) (Constant i2 None) (ListComp (Constant i0 None) (list (comprehension (Name &k:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i2 None)))) nil) nil i0))) &N:0 &K:0 &i:1 &j:2 &dp:0 /nothing)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil))) nil) (/seq (Assign (list (Name &Ni:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &d:0 Store) (Call (Name g_range Load) (list (_starred_content (IfExp (Name &j:0 Load) (Constant i10 None) (BinOp (Call (Name g_int Load) (list (_starred_content (Name &Ni:0 Load))) nil) Add (Constant i1 None))))) nil) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BoolOp Or (list (Name &j:0 Load) (Compare (Name &d:0 Load) (list Lt) (list (Name &Ni:0 Load)))))) Load) (_slice_content (BinOp (Name &k:0 Load) Add (Compare (Name &d:0 Load) (list NotEq) (list (Constant i0 None))))) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Name &k:0 Load)) Load))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &ans:0 Store)) (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &K:0 Load)) Load) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &K:0 Load)) Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &N:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) None) (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &dp:0 Store)) (ListComp (ListComp (ListComp (Constant i0 None) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i5 None))) nil) nil i0))) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) nil i0))) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i5 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None) (Assign (list (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Store)) (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load))) nil) Sub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &S:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None) (Assign (list (Name &ok:0 Store)) (IfExp (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (Constant i0 None) (Constant i1 None)) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i4 None))) nil) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Name &ok:0 Load))) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Load)) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Load)) (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store) Add (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Load)))) (/seq)) (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Load)) (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store) Add (BinOp (Constant i9 None) Mult (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Load)))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &K:0 Load)) Load) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &K:0 Load)) Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (Name &m:0 Load) Add (Constant i1 None)) (Constant i2 None) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &k:0 Load) Add (Constant i1 None))) &n:0 &k:0 &_:1 &_:2 &DP:0 (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &n:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Load)) (If (Compare (Name &N:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Load)))) (If (Compare (Name &j:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (BinOp (Constant i9 None) Mult (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None))) Load))) (If (Compare (Name &N:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None))) Load)) (AugAssign (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &j:0 Load)) Store) Add (BinOp (BinOp (Name &N:0 Load) Sub (Constant i1 None)) Mult (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None))) Load)))) (/seq))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &m:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &k:0 Load)) Load) Add (Subscript (Subscript (Subscript (Name &DP:0 Load) (_slice_content (Name &m:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &k:0 Load)) Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil) Add (Constant i1 None)) (Constant i2 None) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &k:0 Load) Add (Constant i2 None))) &n:0 &k:0 &j:1 &i:2 &dp:0 /nothing)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (Assign (list (Name &value:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &l:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &d:0 Store) (Call (Name g_range Load) (list (_starred_content (IfExp (Compare (Name &j:0 Load) (list Eq) (list (Constant i1 None))) (Constant i10 None) (BinOp (Name &value:0 Load) Add (Constant i1 None))))) nil) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (IfExp (Compare (Name &j:0 Load) (list Eq) (list (Constant i1 None))) (Constant i1 None) (IfExp (Compare (Name &d:0 Load) (list Lt) (list (Name &value:0 Load))) (Constant i1 None) (Constant i0 None)))) Load) (_slice_content (IfExp (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (Name &l:0 Load) (BinOp (Name &l:0 Load) Add (Constant i1 None)))) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Name &l:0 Load)) Load))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &k:0 Load)) Load) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &k:0 Load)) Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (Name &L:0 Load) Add (Constant i1 None)) (Constant i2 None) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &K:0 Load) Add (Constant i2 None))) &N:0 &K:0 &_:1 &_:2 &dp:0 (Assign (list (Name &L:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &L:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &N:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load))) nil) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &k:0 Load)) Store) Add (IfExp (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &k:0 Load)) Load) (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None))) Load))) (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &k:0 Load)) Store) Add (BinOp (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None))) Load) Mult (Constant i9 None)) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &k:0 Load)) Load))) (If (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &k:0 Load)) Store) Add (BinOp (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &k:0 Load) Sub (Constant i1 None))) Load) Mult (BinOp (Name &a:0 Load) Sub (Constant i1 None))) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &k:0 Load)) Load)))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &L:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &K:0 Load)) Load) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &L:0 Load)) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &K:0 Load)) Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) Add (Constant i1 None)) (BinOp (Name &K:0 Load) Add (Constant i1 None)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i2 None)) &N:0 &K:0 &i:1 &j:2 &dp:0 /nothing)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &K:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &ltn:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (IfExp (Name &ltn:0 Load) (Constant i10 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))))) nil) (/seq (If (Compare (BinOp (Name &j:0 Load) Add (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))) (list Gt) (list (Name &K:0 Load))) (/seq Continue) (/seq)) (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))))) Load) (_slice_content (BinOp (Name &ltn:0 Load) BitOr (Compare (Name &x:0 Load) (list Lt) (list (Name &n:0 Load))))) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Name &ltn:0 Load)) Load))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil)) Load) (_slice_content (Name &K:0 Load)) Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name &ln:0 Load) (Constant i2 None) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &ln:0 Load)) &n:0 &k:0 &i:1 &_:2 &dp:0 (Assign (list (Name &ln:0 Store)) (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil) Add (Constant i1 None)) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (For (Name &smaller:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &n:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None) (Assign (list (Name &t:0 Store)) (IfExp (Name &smaller:0 Load) (Constant i9 None) (Name &x:0 Load)) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &t:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &knum:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &ln:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Name &j:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (BoolOp Or (list (Name &smaller:0 Load) (Compare (Name &j:0 Load) (list Lt) (list (Name &x:0 Load))))))) nil)) Load) (_slice_content (Name &knum:0 Load)) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &smaller:0 Load)) Load) (_slice_content (Name &knum:0 Load)) Load))) (/seq (AugAssign (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (BoolOp Or (list (Name &smaller:0 Load) (Compare (Name &j:0 Load) (list Lt) (list (Name &x:0 Load))))))) nil)) Load) (_slice_content (BinOp (Name &knum:0 Load) Add (Constant i1 None))) Store) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &smaller:0 Load)) Load) (_slice_content (Name &knum:0 Load)) Load))))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Try (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &k:0 Load)) Load) Add (Subscript (Subscript (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Name &k:0 Load)) Load)))) nil))) (list (ExceptHandler None None (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &N:0 Load))) nil) None) (Assign (list (Name &dp0:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &dp1:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (If (Compare (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_0 None))) (/seq (Assign (list (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) Mult (Constant i9 None)) Add (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) None) (Assign (list (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store)) (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load) None)) (/seq (Assign (list (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) Mult (Constant i9 None)) Add (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) Add (BinOp (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) Mult (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &N:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Sub (Constant i1 None)))) Add (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) None) (Assign (list (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Store)) (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) None)))) (/seq) None)) (/seq) None) (If (Compare (Name &m:0 Load) (list Lt) (list (Name &K:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &dp0:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Name &K:0 Load)) Load) Add (Subscript (Subscript (Name &dp1:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Name &K:0 Load)) Load)))) nil))))) nil)",
      "(Module (/seq (FunctionDef &comb:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ans:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (AugAssign (Name &ans:1 Store) Mult (BinOp (Name &n:1 Load) Sub (Name &i:1 Load)))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (AugAssign (Name &ans:1 Store) FloorDiv (BinOp (Name &k:1 Load) Sub (Name &i:1 Load)))) (/seq) None) (Return (Name &ans:1 Load))) nil None None) (FunctionDef &count:0 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &n:2 Load))) nil) (list Lt) (list (Name &k:2 Load))) (/seq (Return (Constant i0 None))) (/seq)) (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq)) (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &n:2 Load))) nil) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) (/seq)) (If (Compare (Subscript (Name &n:2 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_0 None))) (/seq (Return (Call (Name &count:0 Load) (list (_starred_content (Subscript (Name &n:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)) (_starred_content (Name &k:2 Load))) nil))) (/seq)) (Return (BinOp (BinOp (Call (Name &count:0 Load) (list (_starred_content (Subscript (Name &n:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)) (_starred_content (BinOp (Name &k:2 Load) Sub (Constant i1 None)))) nil) Add (BinOp (Call (Name &comb:0 Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:2 Load))) nil) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil) Mult (BinOp (Constant i9 None) Pow (Name &k:2 Load)))) Add (BinOp (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &n:2 Load) (_slice_content (Constant i0 None)) Load))) nil) Sub (Constant i1 None)) Mult (Call (Name &comb:0 Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &n:2 Load))) nil) Sub (Constant i1 None))) (_starred_content (BinOp (Name &k:2 Load) Sub (Constant i1 None)))) nil)) Mult (BinOp (Constant i9 None) Pow (BinOp (Name &k:2 Load) Sub (Constant i1 None))))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &count:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &pnt:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &B:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n            (list Eq)\n            (list (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign\n              (Name &pnt:0 Store)\n              Add\n              (Subscript\n                (Name &C:0 Load)\n                (_slice_content\n                  (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &pnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &t:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Name &t:0 Load)\n            (list Eq)\n            (list (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign\n              (Name &f:0 Store)\n              Add\n              (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) Load)\n            )\n          )\n          (/seq)\n        )\n        (AugAssign\n          (Name &f:0 Store)\n          Add\n          (Subscript\n            (Name &b:0 Load)\n            (_slice_content\n              (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n            )\n            Load\n          )\n        )\n        (Assign (list (Name &t:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &p:0 Store)) (UnaryOp USub (Constant i100 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n        )\n        (If\n          (Compare (BinOp (Name &p:0 Load) Add (Constant i1 None)) (list Eq) (list (Name &i:0 Load)))\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript (Name &C:0 Load) (_slice_content (BinOp (Name &p:0 Load) Sub (Constant i1 None))) Load)\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Name &p:0 Store)) (Name &i:0 Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              Sub\n              (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Name &c:0 Load)\n                (_slice_content\n                  (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &X:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              Sub\n              (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq\n            (AugAssign\n              (Name &X:0 Store)\n              Add\n              (Subscript\n                (Name &C:0 Load)\n                (_slice_content\n                  (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &B:0 Load))) nil) Add (Name &X:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &g:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store)\n      (Call\n        (Name g_zip Load)\n        (list\n          (_starred_content (Name &a:0 Load))\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare (BinOp (Name &j:0 Load) Sub (Name &i:0 Load)) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (AugAssign\n              (Name &g:0 Store)\n              Add\n              (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &g:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None))\n            (list Eq)\n            (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Name &c:0 Load)\n                (_slice_content\n                  (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) Add (Name &ans:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &B:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None))\n            (list Eq)\n            (list (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &b:0 Store))\n              (BinOp\n                (Name &b:0 Load)\n                Add\n                (Subscript\n                  (Name &C:0 Load)\n                  (_slice_content\n                    (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                  )\n                  Load\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &H:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &S:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list (_starred_content (Subscript (Name &S:0 Load) (_slice_content (Constant i1 None)) Load)))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &H:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript\n                (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load)\n                (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                Load\n              )\n              Sub\n              (Subscript\n                (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load)\n                (_slice_content (Name &i:0 Load))\n                Load\n              )\n            )\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &S:0 Load) (_slice_content (Constant i2 None)) Load)\n                (_slice_content\n                  (BinOp\n                    (Subscript\n                      (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load)\n                      (_slice_content (Name &i:0 Load))\n                      Load\n                    )\n                    Sub\n                    (Constant i1 None)\n                  )\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &max:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list\n              (BinOp\n                (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                Sub\n                (Constant i1 None)\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &max:0 Store)\n              Add\n              (Subscript\n                (Name &c:0 Load)\n                (_slice_content\n                  (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &max:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %3 Store)) (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &N:0 &A:0 &B:0 &C:0)) (Assign (list (Name &pnt:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &B:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list Eq) (list (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &pnt:0 Store) Add (Subscript (Name &C:0 Load) (_slice_content (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &pnt:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &n:0 &a:0 &b:0 &c:0)) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (Assign (list (Name &t:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &t:0 Load) (list Eq) (list (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &f:0 Store) Add (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) Load))) (/seq)) (AugAssign (Name &f:0 Store) Add (Subscript (Name &b:0 Load) (_slice_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load)) (Assign (list (Name &t:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &N:0 &A:0 &B:0 &C:0)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &p:0 Store)) (UnaryOp USub (Constant i100 None)) None) (For (Name &i:0 Store) (Name &A:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) (If (Compare (BinOp (Name &p:0 Load) Add (Constant i1 None)) (list Eq) (list (Name &i:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &C:0 Load) (_slice_content (BinOp (Name &p:0 Load) Sub (Constant i1 None))) Load))) (/seq)) (Assign (list (Name &p:0 Store)) (Name &i:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &n:0 &a:0 &b:0 &c:0)) (Assign (list (Name &ans:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &c:0 Load) (_slice_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &N:0 &A:0 &B:0 &C:0)) (Assign (list (Name &X:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &X:0 Store) Add (Subscript (Name &C:0 Load) (_slice_content (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &B:0 Load))) nil) Add (Name &X:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_sum Load) &n:0 &a:0 &g:0 &c:0)) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) (/seq (If (Compare (BinOp (Name &j:0 Load) Sub (Name &i:0 Load)) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &g:0 Store) Add (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &g:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &n:0 &a:0 &b:0 &c:0)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None)) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &c:0 Load) (_slice_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) Add (Name &ans:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &N:0 &A:0 &B:0 &C:0)) (Assign (list (Name &b:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &B:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None)) (list Eq) (list (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Add (Subscript (Name &C:0 Load) (_slice_content (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &H:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &S:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &H:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &i:0 Load)) Load)) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Subscript (Name &S:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (BinOp (Subscript (Subscript (Name &S:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &N:0 &a:0 &b:0 &c:0)) (Assign (list (Name &max:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &max:0 Store) Add (Subscript (Name &c:0 Load) (_slice_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_collections None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &P:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &trial_division:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &factor:1 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &tmp:1 Store))\n          (BinOp\n            (Call\n              (Name g_int Load)\n              (list\n                (_starred_content\n                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &n:1 Load))) nil)\n                )\n              )\n              nil\n            )\n            Add\n            (Constant i1 None)\n          )\n          None\n        )\n        (For\n          (Name &num:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &tmp:1 Load)))\n            nil\n          )\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:1 Load) Mod (Name &num:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &n:1 Store) FloorDiv (Name &num:1 Load))\n                (Expr\n                  (Call\n                    (Attribute (Name &factor:1 Load) s_append Load)\n                    (list (_starred_content (Name &num:1 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (UnaryOp Not (Name &factor:1 Load))\n          (/seq (Return (List (list (_starred_content (Name &n:1 Load))) Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &factor:1 Load) s_append Load) (list (_starred_content (Name &n:1 Load))) nil))\n            (Return (Name &factor:1 Load))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &lst:0 Store))\n      (Call (Name &trial_division:0 Load) (list (_starred_content (Name &P:0 Load))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c_lst:0 Store))\n      (Call (Attribute (Name g_collections Load) s_Counter Load) (list (_starred_content (Name &lst:0 Load))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n    (For\n      (Tuple (list (_starred_content (Name &k:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n      (Call (Attribute (Name &c_lst:0 Load) s_items Load) nil nil)\n      (/seq\n        (While\n          (Compare (Name &v:0 Load) (list GtE) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign (Name &ans:0 Store) Mult (Name &k:0 Load))\n            (AugAssign (Name &v:0 Store) Sub (Name &N:0 Load))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA1MCwgNDgsIDUwLCA0OCwgNDcsIDQ4LCA1NiwgNDcsIDUwLCA1NCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDEwNCwgOTcsIDExNCwgMTE3LCAxMTQsIDExNywgMTEwLCAxMF0=\n        None\n      )\n    )\n    (FunctionDef\n      &factorize:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &b:1 Store)) (Constant i2 None) None)\n        (Assign (list (Name &fct:1 Store)) (List nil Load) None)\n        (While\n          (Compare (BinOp (Name &b:1 Load) Mult (Name &b:1 Load)) (list LtE) (list (Name &n:1 Load)))\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:1 Load) Mod (Name &b:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &n:1 Store) FloorDiv (Name &b:1 Load))\n                (Expr\n                  (Call (Attribute (Name &fct:1 Load) s_append Load) (list (_starred_content (Name &b:1 Load))) nil)\n                )\n              )\n              (/seq)\n            )\n            (Assign (list (Name &b:1 Store)) (BinOp (Name &b:1 Load) Add (Constant i1 None)) None)\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (Expr (Call (Attribute (Name &fct:1 Load) s_append Load) (list (_starred_content (Name &n:1 Load))) nil))\n          )\n          (/seq)\n        )\n        (Return (Name &fct:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Import (list (alias &math:2 None)))\n        (Import (list (alias &sys:2 None)))\n        (Assign (list (Name &pin:2 Store)) (Attribute (Attribute (Name &sys:2 Load) s_stdin Load) s_readline Load) None)\n        (Assign (list (Name &pout:2 Store)) (Attribute (Attribute (Name &sys:2 Load) s_stdout Load) s_write Load) None)\n        (Assign (list (Name &perr:2 Store)) (Attribute (Attribute (Name &sys:2 Load) s_stderr Load) s_write Load) None)\n        (Assign\n          (list (Tuple (list (_starred_content (Name &N:2 Store)) (_starred_content (Name &P:2 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &pin:2 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &l:2 Store))\n          (Call (Name &factorize:0 Load) (list (_starred_content (Name &P:2 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &d:2 Store))\n          (Call\n            (Name g_list Load)\n            (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &l:2 Load))) nil)))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:2 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:2 Store)\n          (Name &d:2 Load)\n          (/seq\n            (Assign\n              (list (Name &t:2 Store))\n              (Call (Attribute (Name &l:2 Load) s_count Load) (list (_starred_content (Name &i:2 Load))) nil)\n              None\n            )\n            (If\n              (Compare (Name &t:2 Load) (list GtE) (list (Name &N:2 Load)))\n              (/seq\n                (AugAssign\n                  (Name &ans:2 Store)\n                  Mult\n                  (BinOp\n                    (Name &i:2 Load)\n                    Pow\n                    (Call (Name g_int Load) (list (_starred_content (BinOp (Name &t:2 Load) Div (Name &N:2 Load)))) nil)\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:2 Load))) nil))\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &P:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &maxfac:0 Store))\n      (Call\n        (Name g_round Load)\n        (list (_starred_content (BinOp (Name &P:0 Load) Pow (BinOp (Constant i1 None) Div (Name &N:0 Load)))))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &N:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &P:0 Load))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Subscript\n        (Call\n          (Name g_range Load)\n          (list\n            (_starred_content (Constant i1 None))\n            (_starred_content (BinOp (Name &maxfac:0 Load) Add (Constant i1 None)))\n          )\n          nil\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      (/seq\n        (Assign (list (Name &p:0 Store)) (BinOp (Name &i:0 Load) Pow (Name &N:0 Load)) None)\n        (If\n          (Compare (BinOp (Name &P:0 Load) Mod (Name &p:0 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &p:0 Load))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i2 None))\n          (_starred_content\n            (BinOp\n              (Constant i1 None)\n              Add\n              (Call\n                (Name g_int Load)\n                (list (_starred_content (BinOp (Name &p:0 Load) Pow (BinOp (Constant i1 None) Div (Name &n:0 Load)))))\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n        (While\n          (Constant True None)\n          (/seq\n            (If\n              (Compare (BinOp (Name &p:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &p:0 Store)) (BinOp (Name &p:0 Load) Div (Name &i:0 Load)) None)\n              )\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Mult\n                  (BinOp (Name &i:0 Load) Pow (BinOp (Name &count:0 Load) FloorDiv (Name &n:0 Load)))\n                )\n                Break\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &P:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &N:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &P:0 Load))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (If\n      (Compare (Name &N:0 Load) (list Gt) (list (Constant i1000001 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (If\n          (Compare (BinOp (Name &count:0 Load) Pow (Name &N:0 Load)) (list Gt) (list (Name &P:0 Load)))\n          (/seq Break)\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp (Name &P:0 Load) Mod (BinOp (Name &count:0 Load) Pow (Name &N:0 Load)))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &count:0 Load) None))\n          (/seq)\n        )\n        (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &p:0 Load))) nil)))\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_round Load)\n                    (list\n                      (_starred_content (BinOp (Name &p:0 Load) Pow (BinOp (Constant i1 None) Div (Name &n:0 Load))))\n                    )\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp (Name &p:0 Load) Mod (BinOp (Name &i:0 Load) Pow (Name &n:0 Load)))\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq (Assign (list (Name &gcd:0 Store)) (Name &i:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &gcd:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_pow Load)\n                (list\n                  (_starred_content (Name &b:0 Load))\n                  (_starred_content (BinOp (Constant i1 None) Div (Name &a:0 Load)))\n                )\n                nil\n              )\n              Add\n              (Constant f1e-05 None)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (While\n      (Compare (Name &x:0 Load) (list GtE) (list (Constant i1 None)))\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &b:0 Load) Mod (BinOp (Name &x:0 Load) Pow (Name &a:0 Load)))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n        (AugAssign (Name &x:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &factorize:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &fct:1 Store)) (List nil Load) None)\n        (Assign\n          (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &e:1 Store))) Store))\n          (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (While\n          (Compare (BinOp (Name &b:1 Load) Mult (Name &b:1 Load)) (list LtE) (list (Name &n:1 Load)))\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:1 Load) Mod (Name &b:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &n:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Name &b:1 Load)) None)\n                (Assign (list (Name &e:1 Store)) (BinOp (Name &e:1 Load) Add (Constant i1 None)) None)\n              )\n              (/seq)\n            )\n            (If\n              (Compare (Name &e:1 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &fct:1 Load) s_append Load)\n                    (list\n                      (_starred_content\n                        (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &e:1 Load))) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n            (Assign\n              (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &e:1 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (BinOp (Name &b:1 Load) Add (Constant i1 None)))\n                  (_starred_content (Constant i0 None))\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &fct:1 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i1 None))) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &fct:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &list:0 Store))\n      (Call (Name &factorize:0 Load) (list (_starred_content (Name &p:0 Load))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n    (For\n      (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &e:0 Store))) Store)\n      (Name &list:0 Load)\n      (/seq\n        (Assign (list (Name &tmp:0 Store)) (BinOp (Name &e:0 Load) FloorDiv (Name &n:0 Load)) None)\n        (If\n          (Compare (Name &tmp:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &tmp:0 Load))) nil)\n              (/seq (AugAssign (Name &ans:0 Store) Mult (Name &b:0 Load)))\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (List nil Load) None)\n    (While\n      (Compare (BinOp (Name &p:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &p:0 Store)) (BinOp (Name &p:0 Load) FloorDiv (Constant i2 None)) None)\n        (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Constant i2 None))) nil))\n      )\n      (/seq)\n    )\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign (list (Name &k:0 Store)) (Name &p:0 Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i3 None))\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (BinOp (Name &p:0 Load) Pow (Constant f0.5 None))))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (_starred_content (Constant i2 None))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &p:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n                (Assign (list (Name &p:0 Store)) (BinOp (Name &p:0 Load) FloorDiv (Name &i:0 Load)) None)\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &k:0 Load) (list Eq) (list (Name &p:0 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &p:0 Load))) nil))\n            Break\n          )\n          (/seq (If (Compare (Name &p:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq)))\n        )\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &lc:0 Store))\n      (Call\n        (Attribute (Call (Name g_Counter Load) (list (_starred_content (Name &l:0 Load))) nil) s_most_common Load)\n        nil\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &lc:0 Load)\n      (/seq\n        (AugAssign\n          (Name &a:0 Store)\n          Mult\n          (BinOp\n            (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load)\n            Pow\n            (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) FloorDiv (Name &n:0 Load))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i2 None) None)\n    (Assign (list (Name &factors:0 Store)) (List nil Load) None)\n    (Assign (list (Name &factor_sub:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &p:0 Load))) nil)))\n      (/seq\n        (If\n          (Compare (Name &p:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (While\n              (Compare (BinOp (Name &i:0 Load) Mult (Name &i:0 Load)) (list LtE) (list (Name &p:0 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &p:0 Load) Mod (Name &i:0 Load))\n                  (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)))\n                  (/seq\n                    (AugAssign (Name &p:0 Store) FloorDiv (Name &i:0 Load))\n                    (Expr\n                      (Call\n                        (Attribute (Name &factors:0 Load) s_append Load)\n                        (list (_starred_content (Name &i:0 Load)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &factor_sub:0 Load) s_add Load)\n                        (list (_starred_content (Name &i:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq)\n            )\n            (If\n              (Compare (Name &p:0 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Expr\n                  (Call (Attribute (Name &factors:0 Load) s_append Load) (list (_starred_content (Name &p:0 Load))) nil)\n                )\n              )\n              (/seq)\n            )\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &factors:0 Load))) nil)\n                (list Lt)\n                (list (Name &n:0 Load))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil)))\n              (/seq\n                (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n                (For\n                  (Name &c:0 Store)\n                  (Name &factor_sub:0 Load)\n                  (/seq\n                    (Assign\n                      (list (Name &temp:0 Store))\n                      (Call\n                        (Attribute (Name &factors:0 Load) s_count Load)\n                        (list (_starred_content (Name &c:0 Load)))\n                        nil\n                      )\n                      None\n                    )\n                    (While\n                      (Compare (Name &temp:0 Load) (list GtE) (list (Name &n:0 Load)))\n                      (/seq\n                        (AugAssign (Name &ans:0 Store) Mult (Name &c:0 Load))\n                        (AugAssign (Name &temp:0 Store) Sub (Name &n:0 Load))\n                      )\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ans:0 Load))) nil)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_collections None))) (fn_1 &P:0 &N:0) (FunctionDef &trial_division:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &factor:1 Store)) (List nil Load) None) (Assign (list (Name &tmp:1 Store)) (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &n:1 Load))) nil))) nil) Add (Constant i1 None)) None) (For (Name &num:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &tmp:1 Load))) nil) (/seq (While (Compare (BinOp (Name &n:1 Load) Mod (Name &num:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:1 Store) FloorDiv (Name &num:1 Load)) (Expr (Call (Attribute (Name &factor:1 Load) s_append Load) (list (_starred_content (Name &num:1 Load))) nil))) (/seq))) (/seq) None) (If (UnaryOp Not (Name &factor:1 Load)) (/seq (Return (List (list (_starred_content (Name &n:1 Load))) Load))) (/seq (Expr (Call (Attribute (Name &factor:1 Load) s_append Load) (list (_starred_content (Name &n:1 Load))) nil)) (Return (Name &factor:1 Load))))) nil None None) (Assign (list (Name &lst:0 Store)) (Call (Name &trial_division:0 Load) (list (_starred_content (Name &P:0 Load))) nil) None) (Assign (list (Name &c_lst:0 Store)) (Call (Attribute (Name g_collections Load) s_Counter Load) (list (_starred_content (Name &lst:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (For (Tuple (list (_starred_content (Name &k:0 Store)) (_starred_content (Name &v:0 Store))) Store) (Call (Attribute (Name &c_lst:0 Load) s_items Load) nil nil) (/seq (While (Compare (Name &v:0 Load) (list GtE) (list (Name &N:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Mult (Name &k:0 Load)) (AugAssign (Name &v:0 Store) Sub (Name &N:0 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA1MCwgNDgsIDUwLCA0OCwgNDcsIDQ4LCA1NiwgNDcsIDUwLCA1NCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDEwNCwgOTcsIDExNCwgMTE3LCAxMTQsIDExNywgMTEwLCAxMF0= None)) (FunctionDef &factorize:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &b:1 Store)) (Constant i2 None) None) (Assign (list (Name &fct:1 Store)) (List nil Load) None) (While (Compare (BinOp (Name &b:1 Load) Mult (Name &b:1 Load)) (list LtE) (list (Name &n:1 Load))) (/seq (While (Compare (BinOp (Name &n:1 Load) Mod (Name &b:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:1 Store) FloorDiv (Name &b:1 Load)) (Expr (Call (Attribute (Name &fct:1 Load) s_append Load) (list (_starred_content (Name &b:1 Load))) nil))) (/seq)) (Assign (list (Name &b:1 Store)) (BinOp (Name &b:1 Load) Add (Constant i1 None)) None)) (/seq)) (If (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &fct:1 Load) s_append Load) (list (_starred_content (Name &n:1 Load))) nil))) (/seq)) (Return (Name &fct:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Import (list (alias &math:2 None))) (Import (list (alias &sys:2 None))) (Assign (list (Name &pin:2 Store)) (Attribute (Attribute (Name &sys:2 Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &pout:2 Store)) (Attribute (Attribute (Name &sys:2 Load) s_stdout Load) s_write Load) None) (Assign (list (Name &perr:2 Store)) (Attribute (Attribute (Name &sys:2 Load) s_stderr Load) s_write Load) None) (Assign (list (Tuple (list (_starred_content (Name &N:2 Store)) (_starred_content (Name &P:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &pin:2 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &l:2 Store)) (Call (Name &factorize:0 Load) (list (_starred_content (Name &P:2 Load))) nil) None) (Assign (list (Name &d:2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &l:2 Load))) nil))) nil) None) (Assign (list (Name &ans:2 Store)) (Constant i1 None) None) (For (Name &i:2 Store) (Name &d:2 Load) (/seq (Assign (list (Name &t:2 Store)) (Call (Attribute (Name &l:2 Load) s_count Load) (list (_starred_content (Name &i:2 Load))) nil) None) (If (Compare (Name &t:2 Load) (list GtE) (list (Name &N:2 Load))) (/seq (AugAssign (Name &ans:2 Store) Mult (BinOp (Name &i:2 Load) Pow (Call (Name g_int Load) (list (_starred_content (BinOp (Name &t:2 Load) Div (Name &N:2 Load)))) nil)))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:2 Load))) nil)) (Return None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (fn_1 &P:0 &N:0) (Assign (list (Name &maxfac:0 Store)) (Call (Name g_round Load) (list (_starred_content (BinOp (Name &P:0 Load) Pow (BinOp (Constant i1 None) Div (Name &N:0 Load))))) nil) None) (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &P:0 Load))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (For (Name &i:0 Store) (Subscript (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &maxfac:0 Load) Add (Constant i1 None)))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &i:0 Load) Pow (Name &N:0 Load)) None) (If (Compare (BinOp (Name &P:0 Load) Mod (Name &p:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &p:0 &n:0) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &p:0 Load))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Constant i1 None) Add (Call (Name g_int Load) (list (_starred_content (BinOp (Name &p:0 Load) Pow (BinOp (Constant i1 None) Div (Name &n:0 Load))))) nil)))) nil) (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (Name &p:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)) (Assign (list (Name &p:0 Store)) (BinOp (Name &p:0 Load) Div (Name &i:0 Load)) None)) (/seq (AugAssign (Name &ans:0 Store) Mult (BinOp (Name &i:0 Load) Pow (BinOp (Name &count:0 Load) FloorDiv (Name &n:0 Load)))) Break))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &P:0 &N:0) (Assign (list (Name &count:0 Store)) (Constant i1 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &P:0 Load))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (Compare (Name &N:0 Load) (list Gt) (list (Constant i1000001 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (While (Constant True None) (/seq (If (Compare (BinOp (Name &count:0 Load) Pow (Name &N:0 Load)) (list Gt) (list (Name &P:0 Load))) (/seq Break) (/seq)) (If (Compare (BinOp (Name &P:0 Load) Mod (BinOp (Name &count:0 Load) Pow (Name &N:0 Load))) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (Name &count:0 Load) None)) (/seq)) (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &p:0 &n:0) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &p:0 Load))) nil))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_round Load) (list (_starred_content (BinOp (Name &p:0 Load) Pow (BinOp (Constant i1 None) Div (Name &n:0 Load))))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name &p:0 Load) Mod (BinOp (Name &i:0 Load) Pow (Name &n:0 Load))) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &gcd:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &gcd:0 Load))) nil))))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Call (Name g_pow Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (BinOp (Constant i1 None) Div (Name &a:0 Load)))) nil) Add (Constant f1e-05 None)))) nil) None) (While (Compare (Name &x:0 Load) (list GtE) (list (Constant i1 None))) (/seq (If (Compare (BinOp (Name &b:0 Load) Mod (BinOp (Name &x:0 Load) Pow (Name &a:0 Load))) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (AugAssign (Name &x:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (/seq (fn_1 &p:0 &n:0) (FunctionDef &factorize:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &fct:1 Store)) (List nil Load) None) (Assign (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &e:1 Store))) Store)) (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None))) Load) None) (While (Compare (BinOp (Name &b:1 Load) Mult (Name &b:1 Load)) (list LtE) (list (Name &n:1 Load))) (/seq (While (Compare (BinOp (Name &n:1 Load) Mod (Name &b:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &n:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Name &b:1 Load)) None) (Assign (list (Name &e:1 Store)) (BinOp (Name &e:1 Load) Add (Constant i1 None)) None)) (/seq)) (If (Compare (Name &e:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &fct:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &e:1 Load))) Load))) nil))) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &e:1 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &b:1 Load) Add (Constant i1 None))) (_starred_content (Constant i0 None))) Load) None)) (/seq)) (If (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &fct:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i1 None))) Load))) nil))) (/seq)) (Return (Name &fct:1 Load))) nil None None) (Assign (list (Name &list:0 Store)) (Call (Name &factorize:0 Load) (list (_starred_content (Name &p:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (For (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &e:0 Store))) Store) (Name &list:0 Load) (/seq (Assign (list (Name &tmp:0 Store)) (BinOp (Name &e:0 Load) FloorDiv (Name &n:0 Load)) None) (If (Compare (Name &tmp:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &tmp:0 Load))) nil) (/seq (AugAssign (Name &ans:0 Store) Mult (Name &b:0 Load))) (/seq) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (fn_1 &p:0 &n:0) (Assign (list (Name &l:0 Store)) (List nil Load) None) (While (Compare (BinOp (Name &p:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &p:0 Load) FloorDiv (Constant i2 None)) None) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Constant i2 None))) nil))) (/seq)) (While (Constant i1 None) (/seq (Assign (list (Name &k:0 Store)) (Name &p:0 Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name &p:0 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (If (Compare (BinOp (Name &p:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil)) (Assign (list (Name &p:0 Store)) (BinOp (Name &p:0 Load) FloorDiv (Name &i:0 Load)) None) Break) (/seq))) (/seq) None) (If (Compare (Name &k:0 Load) (list Eq) (list (Name &p:0 Load))) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &p:0 Load))) nil)) Break) (/seq (If (Compare (Name &p:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))))) (/seq)) (Assign (list (Name &lc:0 Store)) (Call (Attribute (Call (Name g_Counter Load) (list (_starred_content (Name &l:0 Load))) nil) s_most_common Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Name &lc:0 Load) (/seq (AugAssign (Name &a:0 Store) Mult (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i0 None)) Load) Pow (BinOp (Subscript (Name &i:0 Load) (_slice_content (Constant i1 None)) Load) FloorDiv (Name &n:0 Load))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &p:0 &n:0) (Assign (list (Name &i:0 Store)) (Constant i2 None) None) (Assign (list (Name &factors:0 Store)) (List nil Load) None) (Assign (list (Name &factor_sub:0 Store)) (Call (Name g_set Load) nil nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &p:0 Load))) nil))) (/seq (If (Compare (Name &p:0 Load) (list Gt) (list (Constant i1 None))) (/seq (While (Compare (BinOp (Name &i:0 Load) Mult (Name &i:0 Load)) (list LtE) (list (Name &p:0 Load))) (/seq (If (BinOp (Name &p:0 Load) Mod (Name &i:0 Load)) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &p:0 Store) FloorDiv (Name &i:0 Load)) (Expr (Call (Attribute (Name &factors:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil)) (Expr (Call (Attribute (Name &factor_sub:0 Load) s_add Load) (list (_starred_content (Name &i:0 Load))) nil))))) (/seq)) (If (Compare (Name &p:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &factors:0 Load) s_append Load) (list (_starred_content (Name &p:0 Load))) nil))) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &factors:0 Load))) nil) (list Lt) (list (Name &n:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (For (Name &c:0 Store) (Name &factor_sub:0 Load) (/seq (Assign (list (Name &temp:0 Store)) (Call (Attribute (Name &factors:0 Load) s_count Load) (list (_starred_content (Name &c:0 Load))) nil) None) (While (Compare (Name &temp:0 Load) (list GtE) (list (Name &n:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Mult (Name &c:0 Load)) (AugAssign (Name &temp:0 Store) Sub (Name &n:0 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:4 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:5 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (DictComp\n        (Name &i:1 Load)\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content (Constant i1 None))\n                (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content\n                (DictComp\n                  (Name &j:6 Load)\n                  (Constant i0 None)\n                  (list\n                    (comprehension\n                      (Name &j:6 Store)\n                      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n              (_starred_content\n                (Call\n                  (Name g_format Load)\n                  (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_010b None)))\n                  nil\n                )\n              )\n            )\n            Load\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (For\n              (Name &k:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (BinOp (Name &i:0 Load) RShift (Name &k:0 Load)) Mod (Constant i2 None))\n                      BitAnd\n                      (Subscript\n                        (Subscript (Name &f:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                        (_slice_content (Name &k:0 Load))\n                        Load\n                      )\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript (Name &d:0 Load) (_slice_content (Name &j:0 Load)) Store)\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (AugAssign\n              (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store)\n              Add\n              (Subscript\n                (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content (Subscript (Name &d:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list (_starred_content (Call (Attribute (Name &t:0 Load) s_values Load) nil nil)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias g_product None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &cd:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_product Load)\n        (list\n          (_starred_content\n            (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)\n          )\n        )\n        (list (keyword s_repeat (Constant i10 None)))\n      )\n      (/seq\n        (If\n          (Compare\n            (Name &i:0 Load)\n            (list Eq)\n            (list\n              (Tuple\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (Constant i0 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq Continue)\n          (/seq)\n        )\n        (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &idx:0 Store)) (_starred_content (Name &j:0 Store))) Store)\n          (Call (Name g_enumerate Load) (list (_starred_content (Name &f:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &s:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &p:0 Load) (_slice_content (Name &idx:0 Load)) Load)\n                (_slice_content\n                  (Call\n                    (Name g_sum Load)\n                    (list\n                      (_starred_content\n                        (GeneratorExp\n                          (BinOp (Name &k:3 Load) Mult (Name &l:3 Load))\n                          (list\n                            (comprehension\n                              (Tuple\n                                (list (_starred_content (Name &k:3 Store)) (_starred_content (Name &l:3 Store)))\n                                Store\n                              )\n                              (Call\n                                (Name g_zip Load)\n                                (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load)))\n                                nil\n                              )\n                              nil\n                              i0\n                            )\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cd:0 Load) s_extend Load)\n            (list (_starred_content (List (list (_starred_content (Name &s:0 Load))) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &cd:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f_list:0 Store))\n      (ListComp\n        (Call\n          (Name g_int Load)\n          (list\n            (_starred_content\n              (Call\n                (Attribute (Constant s_ None) s_join Load)\n                (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)))\n                nil\n              )\n            )\n            (_starred_content (Constant i2 None))\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p_list:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:3 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &temp:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &temp:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &p_list:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content\n                  (Call\n                    (Attribute\n                      (Call\n                        (Name g_bin Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (Name &i:0 Load)\n                              BitAnd\n                              (Subscript (Name &f_list:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      s_count\n                      Load\n                    )\n                    (list (_starred_content (Constant s_1 None)))\n                    nil\n                  )\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &temp:0 Load) (list Gt) (list (Name &ans:0 Load)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &temp:0 Load) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None)\n    (For\n      (Name &bit:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i1 None) LShift (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n              (/seq\n                (If\n                  (BinOp (Name &bit:0 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &j:0 Load)))\n                  (/seq\n                    (AugAssign\n                      (Name &b:0 Store)\n                      Add\n                      (Subscript\n                        (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (_slice_content (Name &j:0 Load))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (_slice_content (Name &b:0 Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &ans:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (Call\n          (Name g_int Load)\n          (list\n            (_starred_content\n              (Call\n                (Attribute (Call (Name g_input Load) nil nil) s_replace Load)\n                (list (_starred_content (Constant s-WzMyXQ== None)) (_starred_content (Constant s_ None)))\n                nil\n              )\n            )\n            (_starred_content (Constant i2 None))\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &prof:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i1 None) LShift (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &prof1:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &j:0 Store)) (_starred_content (Name &time:0 Store))) Store)\n          (Call (Name g_enumerate Load) (list (_starred_content (Name &f:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &prof1:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content\n                  (Call\n                    (Attribute\n                      (Call\n                        (Name g_bin Load)\n                        (list (_starred_content (BinOp (Name &i:0 Load) BitAnd (Name &time:0 Load))))\n                        nil\n                      )\n                      s_count\n                      Load\n                    )\n                    (list (_starred_content (Constant s_1 None)))\n                    nil\n                  )\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &prof:0 Store))\n          (Call\n            (Name g_max Load)\n            (list (_starred_content (Name &prof:0 Load)) (_starred_content (Name &prof1:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &prof:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans_2:0 Store))\n      (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i1 None) LShift (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &k:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (BinOp (Name &i:0 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &j:0 Load)))\n                      (Compare\n                        (Subscript\n                          (Subscript (Name &f:0 Load) (_slice_content (Name &k:0 Load)) Load)\n                          (_slice_content (Name &j:0 Load))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &p:0 Load) (_slice_content (Name &k:0 Load)) Load)\n                (_slice_content (Name &cnt:0 Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &ans_2:0 Store))\n          (Call\n            (Name g_max Load)\n            (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &ans_2:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans_2:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &f:0 Store)) (List nil Load) None)\n    (Assign (list (Name &ans:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i9 None))) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Attribute (Constant s_ None) s_join Load)\n            (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant i2 None))) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &f:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &ref:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &cnt:0 Store))\n              (Call\n                (Attribute\n                  (Call\n                    (Name g_bin Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Name &i:0 Load)\n                          BitAnd\n                          (Subscript (Name &f:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  s_count\n                  Load\n                )\n                (list (_starred_content (Constant s_1 None)))\n                nil\n              )\n              None\n            )\n            (AugAssign\n              (Name &ref:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content (Name &cnt:0 Load))\n                Load\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (Call\n                (Name g_max Load)\n                (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &ref:0 Load)))\n                nil\n              )\n              None\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &F:0 Store))\n      (ListComp\n        (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &num:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_format Load)\n                (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_b None)))\n                nil\n              )\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i10 None)))\n            nil\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &j:0 Store)) (_starred_content (Name &k:0 Store))) Store)\n          (Call (Name g_enumerate Load) (list (_starred_content (Name &F:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &cnt:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &P:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content\n                  (Call\n                    (Name g_len Load)\n                    (list\n                      (_starred_content\n                        (ListComp\n                          (Name &v:3 Load)\n                          (list\n                            (comprehension\n                              (Name &v:3 Store)\n                              (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n                              (list\n                                (Compare\n                                  (Subscript (Name &k:0 Load) (_slice_content (Name &v:3 Load)) Load)\n                                  (list Eq Eq)\n                                  (list\n                                    (Subscript (Name &num:0 Load) (_slice_content (Name &v:3 Load)) Load)\n                                    (Constant s_1 None)\n                                  )\n                                )\n                              )\n                              i0\n                            )\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call\n            (Name g_max Load)\n            (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &cnt:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &F:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &f:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &fn:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &f:0 Load))) nil)\n              )\n              (_starred_content (Constant i2 None))\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &F:0 Load) s_append Load) (list (_starred_content (Name &fn:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (UnaryOp USub (Constant i100000000000 None)) None)\n    (For\n      (Name &k:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &val:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &c:0 Store))\n              (Call\n                (Attribute\n                  (Call\n                    (Name g_bin Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Name &k:0 Load)\n                          BitAnd\n                          (Subscript (Name &F:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  s_count\n                  Load\n                )\n                (list (_starred_content (Constant s_1 None)))\n                nil\n              )\n              None\n            )\n            (AugAssign\n              (Name &val:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &P:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (_slice_content (Name &c:0 Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call\n            (Name g_max Load)\n            (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &val:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &F:0 Store))\n      (ListComp\n        (Call\n          (Name g_int Load)\n          (list\n            (_starred_content\n              (Call\n                (Attribute (Call (Name g_input Load) nil nil) s_replace Load)\n                (list (_starred_content (Constant s-WzMyXQ== None)) (_starred_content (Constant s_ None)))\n                nil\n              )\n            )\n            (_starred_content (Constant i2 None))\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Call\n                      (Name g_sum Load)\n                      (list\n                        (_starred_content\n                          (ListComp\n                            (Subscript\n                              (Name &p:4 Load)\n                              (_slice_content\n                                (Call\n                                  (Attribute\n                                    (Call\n                                      (Name g_bin Load)\n                                      (list (_starred_content (BinOp (Name &f:4 Load) BitAnd (Name &i:3 Load))))\n                                      nil\n                                    )\n                                    s_count\n                                    Load\n                                  )\n                                  (list (_starred_content (Constant s_1 None)))\n                                  nil\n                                )\n                              )\n                              Load\n                            )\n                            (list\n                              (comprehension\n                                (Tuple\n                                  (list (_starred_content (Name &f:4 Store)) (_starred_content (Name &p:4 Store)))\n                                  Store\n                                )\n                                (Call\n                                  (Name g_zip Load)\n                                  (list (_starred_content (Name &F:0 Load)) (_starred_content (Name &P:0 Load)))\n                                  nil\n                                )\n                                nil\n                                i0\n                              )\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    (list\n                      (comprehension\n                        (Name &i:3 Store)\n                        (Call\n                          (Name g_range Load)\n                          (list\n                            (_starred_content (Constant i1 None))\n                            (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))\n                          )\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp #0 (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %5 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) ?0 ?1 (Expr (Call (Name g_print Load) (list (_starred_content #1)) nil)))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &f:0 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &p:0 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &t:0 Store)) (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (DictComp (Name &j:6 Load) (Constant i0 None) (list (comprehension (Name &j:6 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0)))) (_starred_content (Call (Name g_format Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_010b None))) nil))) Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (If (Compare (BinOp (BinOp (BinOp (Name &i:0 Load) RShift (Name &k:0 Load)) Mod (Constant i2 None)) BitAnd (Subscript (Subscript (Name &f:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Name &k:0 Load)) Load)) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &j:0 Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (AugAssign (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Subscript (Name &d:0 Load) (_slice_content (Name &j:0 Load)) Load)) Load))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Call (Attribute (Name &t:0 Load) s_values Load) nil nil))) nil))) nil))) nil)",
      "(Module (/seq (ImportFrom s_itertools (list (alias g_product None)) i0) (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (Call (Name g_max Load) (list (_starred_content (Name &cd:0 Load))) nil) &n:0 &_:1 &f:0 &_:2 &p:0 (Assign (list (Name &cd:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_product Load) (list (_starred_content (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) (list (keyword s_repeat (Constant i10 None)))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load))) (/seq Continue) (/seq)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &idx:0 Store)) (_starred_content (Name &j:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &f:0 Load))) nil) (/seq (AugAssign (Name &s:0 Store) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &idx:0 Load)) Load) (_slice_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &k:3 Load) Mult (Name &l:3 Load)) (list (comprehension (Tuple (list (_starred_content (Name &k:3 Store)) (_starred_content (Name &l:3 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) nil) nil i0))))) nil)) Load))) (/seq) None) (Expr (Call (Attribute (Name &cd:0 Load) s_extend Load) (list (_starred_content (List (list (_starred_content (Name &s:0 Load))) Load))) nil))) (/seq) None)))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &f_list:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) (_starred_content (Constant i2 None))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &p_list:0 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) (/seq (Assign (list (Name &temp:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &temp:0 Store) Add (Subscript (Subscript (Name &p_list:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Call (Attribute (Call (Name g_bin Load) (list (_starred_content (BinOp (Name &i:0 Load) BitAnd (Subscript (Name &f_list:0 Load) (_slice_content (Name &j:0 Load)) Load)))) nil) s_count Load) (list (_starred_content (Constant s_1 None))) nil)) Load))) (/seq) None) (If (Compare (Name &temp:0 Load) (list Gt) (list (Name &ans:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &temp:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (Name &ans:0 Load) &n:0 &_:1 &f:0 &_:2 &p:0 (Assign (list (Name &ans:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None) (For (Name &bit:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i1 None) LShift (Constant i10 None)))) nil) (/seq (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (If (BinOp (Name &bit:0 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &j:0 Load))) (/seq (AugAssign (Name &b:0 Store) Add (Subscript (Subscript (Name &f:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq))) (/seq) None) (AugAssign (Name &a:0 Store) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &b:0 Load)) Load))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &ans:0 Load))) nil) None)) (/seq) None)))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_replace Load) (list (_starred_content (Constant s-WzMyXQ== None)) (_starred_content (Constant s_ None))) nil)) (_starred_content (Constant i2 None))) nil) (Name &prof:0 Load) &n:0 &i:1 &f:0 &i:2 &p:0 (Assign (list (Name &prof:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i1 None) LShift (Constant i10 None)))) nil) (/seq (Assign (list (Name &prof1:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &j:0 Store)) (_starred_content (Name &time:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &f:0 Load))) nil) (/seq (AugAssign (Name &prof1:0 Store) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Call (Attribute (Call (Name g_bin Load) (list (_starred_content (BinOp (Name &i:0 Load) BitAnd (Name &time:0 Load)))) nil) s_count Load) (list (_starred_content (Constant s_1 None))) nil)) Load))) (/seq) None) (Assign (list (Name &prof:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &prof:0 Load)) (_starred_content (Name &prof1:0 Load))) nil) None)) (/seq) None)))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (Name &ans_2:0 Load) &n:0 &i:1 &f:0 &i:2 &p:0 (Assign (list (Name &ans_2:0 Store)) (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i1 None) LShift (Constant i10 None)))) nil) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (If (BoolOp And (list (BinOp (Name &i:0 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &j:0 Load))) (Compare (Subscript (Subscript (Name &f:0 Load) (_slice_content (Name &k:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (list Eq) (list (Constant i1 None))))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (AugAssign (Name &ans:0 Store) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &k:0 Load)) Load) (_slice_content (Name &cnt:0 Load)) Load))) (/seq) None) (Assign (list (Name &ans_2:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &ans_2:0 Load))) nil) None)) (/seq) None)))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &f:0 Store)) (List nil Load) None) (Assign (list (Name &ans:0 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i9 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant i2 None))) nil) None) (Expr (Call (Attribute (Name &f:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None) (Assign (list (Name &p:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) (/seq (Assign (list (Name &ref:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Call (Attribute (Call (Name g_bin Load) (list (_starred_content (BinOp (Name &i:0 Load) BitAnd (Subscript (Name &f:0 Load) (_slice_content (Name &j:0 Load)) Load)))) nil) s_count Load) (list (_starred_content (Constant s_1 None))) nil) None) (AugAssign (Name &ref:0 Store) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Name &cnt:0 Load)) Load))) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &ref:0 Load))) nil) None)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (Name &ans:0 Load) &n:0 &_:1 &F:0 &_:2 &P:0 (Assign (list (Name &ans:0 Store)) (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (Assign (list (Name &num:0 Store)) (Call (Attribute (Call (Name g_format Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant s_b None))) nil) s_zfill Load) (list (_starred_content (Constant i10 None))) nil) None) (For (Tuple (list (_starred_content (Name &j:0 Store)) (_starred_content (Name &k:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &F:0 Load))) nil) (/seq (AugAssign (Name &cnt:0 Store) Add (Subscript (Subscript (Name &P:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Call (Name g_len Load) (list (_starred_content (ListComp (Name &v:3 Load) (list (comprehension (Name &v:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (list (Compare (Subscript (Name &k:0 Load) (_slice_content (Name &v:3 Load)) Load) (list Eq Eq) (list (Subscript (Name &num:0 Load) (_slice_content (Name &v:3 Load)) Load) (Constant s_1 None)))) i0))))) nil)) Load))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &cnt:0 Load))) nil) None)) (/seq) None)))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &F:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &f:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &fn:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &f:0 Load))) nil)) (_starred_content (Constant i2 None))) nil) None) (Expr (Call (Attribute (Name &F:0 Load) s_append Load) (list (_starred_content (Name &fn:0 Load))) nil))) (/seq) None) (Assign (list (Name &P:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (UnaryOp USub (Constant i100000000000 None)) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) (/seq (Assign (list (Name &val:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &c:0 Store)) (Call (Attribute (Call (Name g_bin Load) (list (_starred_content (BinOp (Name &k:0 Load) BitAnd (Subscript (Name &F:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil) s_count Load) (list (_starred_content (Constant s_1 None))) nil) None) (AugAssign (Name &val:0 Store) Add (Subscript (Subscript (Name &P:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &c:0 Load)) Load))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &val:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_replace Load) (list (_starred_content (Constant s-WzMyXQ== None)) (_starred_content (Constant s_ None))) nil)) (_starred_content (Constant i2 None))) nil) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_sum Load) (list (_starred_content (ListComp (Subscript (Name &p:4 Load) (_slice_content (Call (Attribute (Call (Name g_bin Load) (list (_starred_content (BinOp (Name &f:4 Load) BitAnd (Name &i:3 Load)))) nil) s_count Load) (list (_starred_content (Constant s_1 None))) nil)) Load) (list (comprehension (Tuple (list (_starred_content (Name &f:4 Store)) (_starred_content (Name &p:4 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &F:0 Load)) (_starred_content (Name &P:0 Load))) nil) nil i0))))) nil) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i10 None)))) nil) nil i0))))) nil) &N:0 &i:1 &F:0 &i:2 &P:0 /nothing /nothing))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_S None))\n          )\n          (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n              (/seq (AugAssign (Name &s:0 Store) Sub (Constant i1 None)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &t:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store) (Name &t:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &x:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Name &s:0 Load)\n              (/seq (AugAssign (Name &s:0 Store) Sub (Constant i1 None)))\n              (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &t:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq (AugAssign (Name &y:0 Store) Sub (Constant i1 None)))\n          (/seq (AugAssign (Name &y:0 Store) Add (Constant i1 None)))\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name g_max Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &x:0 Load) Mult (Constant i2 None)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &ans:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq\n            (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil))\n          )\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &a:0 Load) s_pop Load) nil nil))\n                (AugAssign (Name &ans:0 Store) Sub (Constant i2 None))\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &ans:0 Store) (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Subscript (Name &x:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_T None)))\n          (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n              (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (AugAssign (Name &cnt:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &ans:0 Store) Add (Constant i2 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Name &ans:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &ans:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n          (_starred_content (Constant i0 None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &c:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq (AugAssign (Name &l:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Name &l:0 Load)\n              (/seq\n                (AugAssign (Name &l:0 Store) Sub (Constant i1 None))\n                (AugAssign (Name &ans:0 Store) Sub (Constant i2 None))\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &X:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &X:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &cnt:0 Store) Sub (Constant i1 None)))\n              (/seq (AugAssign (Name &res:0 Store) Add (Constant i1 None)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &cnt:0 Load) Add (Name &res:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &x:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq (AugAssign (Name &f:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n              (/seq (AugAssign (Name &f:0 Store) Sub (Constant i1 None)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &c:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &X:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s_count:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &X:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None)))\n          (/seq (AugAssign (Name &s_count:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &s_count:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &s_count:0 Store) Sub (Constant i1 None))\n                (AugAssign (Name &ans:0 Store) Add (Constant i2 None))\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &X:0 Load))) nil) Sub (Name &ans:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &X:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &X:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &X:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_S None))\n          )\n          (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &s:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &s:0 Store) Sub (Constant i1 None))\n                (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_len Load) (list (_starred_content (Name &X:0 Load))) nil)\n              Sub\n              (BinOp (Constant i2 None) Mult (Name &cnt:0 Load))\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name %2 Store)) (Constant i0 None) None) (Assign (list (Name %3 Store)) (Constant i0 None) None) (For (Name %4 Store) #1 (/seq (If (Compare #0 (list Eq) (list (Constant s_S None))) (/seq (AugAssign (Name %2 Store) Add (Constant i1 None))) (/seq (If (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name %2 Store) Sub (Constant i1 None)) ?1) (/seq ?0))))) (/seq) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_S None))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &s:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &s:0 Store) Sub (Constant i1 None))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &t:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store) (Name &t:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &x:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None))) (/seq (If (Name &s:0 Load) (/seq (AugAssign (Name &s:0 Store) Sub (Constant i1 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &t:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None))) (/seq (AugAssign (Name &y:0 Store) Sub (Constant i1 None))) (/seq (AugAssign (Name &y:0 Store) Add (Constant i1 None)))) (Assign (list (Name &x:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &x:0 Load) Mult (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None))) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_pop Load) nil nil)) (AugAssign (Name &ans:0 Store) Sub (Constant i2 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &ans:0 Store) (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Subscript (Name &x:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_T None))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None))) (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i0 None))))) (/seq (AugAssign (Name &cnt:0 Store) Sub (Constant i1 None)) (AugAssign (Name &ans:0 Store) Add (Constant i2 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Name &ans:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &ans:0 Store)) (_starred_content (Name &l:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)) (_starred_content (Constant i0 None))) Load) None) (For (Name &c:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant s_S None))) (/seq (AugAssign (Name &l:0 Store) Add (Constant i1 None))) (/seq (If (Name &l:0 Load) (/seq (AugAssign (Name &l:0 Store) Sub (Constant i1 None)) (AugAssign (Name &ans:0 Store) Sub (Constant i2 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name &i:0 Load) (Name &X:0 Load) &X:0 &cnt:0 &res:0 &i:0 (AugAssign (Name &res:0 Store) Add (Constant i1 None)) /nothing)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &cnt:0 Load) Add (Name &res:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &x:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_S None))) (/seq (AugAssign (Name &f:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &f:0 Store) Sub (Constant i1 None))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name &i:0 Load) (Name &X:0 Load) &X:0 &s_count:0 &ans:0 &i:0 /nothing (AugAssign (Name &ans:0 Store) Add (Constant i2 None)))) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &X:0 Load))) nil) Sub (Name &ans:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Subscript (Name &X:0 Load) (_slice_content (Name &i:0 Load)) Load) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &X:0 Load))) nil))) nil) &X:0 &s:0 &cnt:0 &i:0 /nothing (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &X:0 Load))) nil) Sub (BinOp (Constant i2 None) Mult (Name &cnt:0 Load))))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &time:0\n      (arguments nil (list (arg &sec:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &h:1 Store)) (BinOp (Name &sec:1 Load) FloorDiv (Constant i3600 None)) None)\n        (Assign (list (Name &ti:1 Store)) (BinOp (Name &sec:1 Load) Mod (Constant i3600 None)) None)\n        (Assign (list (Name &m:1 Store)) (BinOp (Name &ti:1 Load) FloorDiv (Constant i60 None)) None)\n        (Assign (list (Name &s:1 Store)) (BinOp (Name &ti:1 Load) Mod (Constant i60 None)) None)\n        (Return\n          (List\n            (list\n              (_starred_content (Name &h:1 Load))\n              (_starred_content (Name &m:1 Load))\n              (_starred_content (Name &s:1 Load))\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &t:0 Store))\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (Name &t:0 Load)\n            (list Eq Eq Eq)\n            (list (Name &h:0 Load) (Name &s:0 Load) (UnaryOp USub (Constant i1 None)))\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &sec:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Name &t:0 Load) Mult (Constant i3600 None))\n              Add\n              (BinOp (Name &h:0 Load) Mult (Constant i60 None))\n            )\n            Add\n            (Name &s:0 Load)\n          )\n          None\n        )\n        (Assign (list (Name &sec:0 Store)) (BinOp (Constant i7200 None) Sub (Name &sec:0 Load)) None)\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Name &time:0 Load) (list (_starred_content (Name &sec:0 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &t_ans:0 Store))\n          (Call (Name &time:0 Load) (list (_starred_content (BinOp (Constant i3 None) Mult (Name &sec:0 Load)))) nil)\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Load)\n            (list Lt)\n            (list (Constant i10 None))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Store))\n              (BinOp\n                (Constant s_0 None)\n                Add\n                (Call\n                  (Name g_str Load)\n                  (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Load)))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list Lt)\n            (list (Constant i10 None))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Store))\n              (BinOp\n                (Constant s_0 None)\n                Add\n                (Call\n                  (Name g_str Load)\n                  (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Load)))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (BinOp\n                          (Constant s_0 None)\n                          Add\n                          (Call\n                            (Name g_str Load)\n                            (list\n                              (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i0 None)) Load))\n                            )\n                            nil\n                          )\n                        )\n                        Add\n                        (Constant s-WzU4XQ== None)\n                      )\n                      Add\n                      (Call\n                        (Name g_str Load)\n                        (list\n                          (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Load))\n                        )\n                        nil\n                      )\n                    )\n                    Add\n                    (Constant s-WzU4XQ== None)\n                  )\n                  Add\n                  (Call\n                    (Name g_str Load)\n                    (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Load)))\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n        (If\n          (Compare\n            (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Load)\n            (list Lt)\n            (list (Constant i10 None))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Store))\n              (BinOp\n                (Constant s_0 None)\n                Add\n                (Call\n                  (Name g_str Load)\n                  (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Load)))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare\n            (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Load)\n            (list Lt)\n            (list (Constant i10 None))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Store))\n              (BinOp\n                (Constant s_0 None)\n                Add\n                (Call\n                  (Name g_str Load)\n                  (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Load)))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (BinOp\n                          (Constant s_0 None)\n                          Add\n                          (Call\n                            (Name g_str Load)\n                            (list\n                              (_starred_content\n                                (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i0 None)) Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        Add\n                        (Constant s-WzU4XQ== None)\n                      )\n                      Add\n                      (Call\n                        (Name g_str Load)\n                        (list\n                          (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Load))\n                        )\n                        nil\n                      )\n                    )\n                    Add\n                    (Constant s-WzU4XQ== None)\n                  )\n                  Add\n                  (Call\n                    (Name g_str Load)\n                    (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Load)))\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &m:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &h:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None)))\n              Sub\n              (BinOp (Name &m:0 Load) Mult (Constant i60 None))\n            )\n            Sub\n            (Name &s:0 Load)\n          )\n          None\n        )\n        (Assign (list (Name &t:0 Store)) (BinOp (Name &d:0 Load) Mult (Constant i3 None)) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (JoinedStr\n                  (list\n                    (FormattedValue\n                      (BinOp (Name &d:0 Load) FloorDiv (Constant i3600 None))\n                      i-1\n                      (JoinedStr (list (Constant s_02 None)))\n                    )\n                    (Constant s-WzU4XQ== None)\n                    (FormattedValue\n                      (BinOp (BinOp (Name &d:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))\n                      i-1\n                      (JoinedStr (list (Constant s_02 None)))\n                    )\n                    (Constant s-WzU4XQ== None)\n                    (FormattedValue\n                      (BinOp (Name &d:0 Load) Mod (Constant i60 None))\n                      i-1\n                      (JoinedStr (list (Constant s_02 None)))\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (JoinedStr\n                  (list\n                    (FormattedValue\n                      (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None))\n                      i-1\n                      (JoinedStr (list (Constant s_02 None)))\n                    )\n                    (Constant s-WzU4XQ== None)\n                    (FormattedValue\n                      (BinOp (BinOp (Name &t:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))\n                      i-1\n                      (JoinedStr (list (Constant s_02 None)))\n                    )\n                    (Constant s-WzU4XQ== None)\n                    (FormattedValue\n                      (BinOp (Name &t:0 Load) Mod (Constant i60 None))\n                      i-1\n                      (JoinedStr (list (Constant s_02 None)))\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &T:0 Store))\n                (_starred_content (Name &H:0 Store))\n                (_starred_content (Name &S:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &T:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp\n            (Constant i7200 None)\n            Sub\n            (BinOp\n              (BinOp\n                (BinOp (Constant i3600 None) Mult (Name &T:0 Load))\n                Add\n                (BinOp (Constant i60 None) Mult (Name &H:0 Load))\n              )\n              Add\n              (Name &S:0 Load)\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Constant\n                      s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                      None\n                    )\n                    s_format\n                    Load\n                  )\n                  (list\n                    (_starred_content (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None)))\n                    (_starred_content\n                      (BinOp (BinOp (Name &t:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                    )\n                    (_starred_content (BinOp (Name &t:0 Load) Mod (Constant i60 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign (Name &t:0 Store) Mult (Constant i3 None))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Constant\n                      s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                      None\n                    )\n                    s_format\n                    Load\n                  )\n                  (list\n                    (_starred_content (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None)))\n                    (_starred_content\n                      (BinOp (BinOp (Name &t:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                    )\n                    (_starred_content (BinOp (Name &t:0 Load) Mod (Constant i60 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &h:0 Store))\n                    (_starred_content (Name &m:0 Store))\n                    (_starred_content (Name &s:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare\n                (BinOp (BinOp (Name &h:0 Load) Add (Name &m:0 Load)) Add (Name &s:0 Load))\n                (list Eq)\n                (list (UnaryOp USub (Constant i3 None)))\n              )\n              (/seq Break)\n              (/seq)\n            )\n            (Assign\n              (list (Name &last:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None)))\n                  Sub\n                  (BinOp (Name &m:0 Load) Mult (Constant i60 None))\n                )\n                Sub\n                (Name &s:0 Load)\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (JoinedStr\n                      (list\n                        (FormattedValue\n                          (BinOp (Name &last:0 Load) FloorDiv (Constant i3600 None))\n                          i-1\n                          (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))\n                        )\n                        (Constant s-WzU4XQ== None)\n                        (FormattedValue\n                          (BinOp (BinOp (Name &last:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                          i-1\n                          (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))\n                        )\n                        (Constant s-WzU4XQ== None)\n                        (FormattedValue\n                          (BinOp (Name &last:0 Load) Mod (Constant i60 None))\n                          i-1\n                          (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))\n                        )\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (AugAssign (Name &last:0 Store) Mult (Constant i3 None))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (JoinedStr\n                      (list\n                        (FormattedValue\n                          (BinOp (Name &last:0 Load) FloorDiv (Constant i3600 None))\n                          i-1\n                          (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))\n                        )\n                        (Constant s-WzU4XQ== None)\n                        (FormattedValue\n                          (BinOp (BinOp (Name &last:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                          i-1\n                          (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))\n                        )\n                        (Constant s-WzU4XQ== None)\n                        (FormattedValue\n                          (BinOp (Name &last:0 Load) Mod (Constant i60 None))\n                          i-1\n                          (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))\n                        )\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (list (ExceptHandler None None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &t:0 Store))\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &t:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &ans:0 Store))\n          (BinOp\n            (Constant i7200 None)\n            Sub\n            (BinOp\n              (BinOp\n                (BinOp (Name &t:0 Load) Mult (Constant i3600 None))\n                Add\n                (BinOp (Name &h:0 Load) Mult (Constant i60 None))\n              )\n              Add\n              (Name &s:0 Load)\n            )\n          )\n          None\n        )\n        (Assign (list (Name &ans2:0 Store)) (BinOp (Name &ans:0 Load) Mult (Constant i3 None)) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Constant\n                      s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                      None\n                    )\n                    s_format\n                    Load\n                  )\n                  (list\n                    (_starred_content (BinOp (Name &ans:0 Load) FloorDiv (Constant i3600 None)))\n                    (_starred_content\n                      (BinOp (BinOp (Name &ans:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))\n                    )\n                    (_starred_content (BinOp (Name &ans:0 Load) Mod (Constant i60 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Constant\n                      s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                      None\n                    )\n                    s_format\n                    Load\n                  )\n                  (list\n                    (_starred_content (BinOp (Name &ans2:0 Load) FloorDiv (Constant i3600 None)))\n                    (_starred_content\n                      (BinOp (BinOp (Name &ans2:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))\n                    )\n                    (_starred_content (BinOp (Name &ans2:0 Load) Mod (Constant i60 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &H:0 Store))\n                (_starred_content (Name &M:0 Store))\n                (_starred_content (Name &S:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &H:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp\n            (Constant i7200 None)\n            Sub\n            (BinOp\n              (BinOp\n                (BinOp (Constant i3600 None) Mult (Name &H:0 Load))\n                Add\n                (BinOp (Constant i60 None) Mult (Name &M:0 Load))\n              )\n              Add\n              (Name &S:0 Load)\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Constant\n                      s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                      None\n                    )\n                    s_format\n                    Load\n                  )\n                  (list\n                    (_starred_content (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None)))\n                    (_starred_content\n                      (BinOp (BinOp (Name &t:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                    )\n                    (_starred_content (BinOp (Name &t:0 Load) Mod (Constant i60 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign (Name &t:0 Store) Mult (Constant i3 None))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Constant\n                      s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                      None\n                    )\n                    s_format\n                    Load\n                  )\n                  (list\n                    (_starred_content (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None)))\n                    (_starred_content\n                      (BinOp (BinOp (Name &t:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                    )\n                    (_starred_content (BinOp (Name &t:0 Load) Mod (Constant i60 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &default:0 Store)) (BinOp (Constant i120 None) Mult (Constant i60 None)) None)\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &t:0 Store))\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &t:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n              (Compare (Name &h:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n              (Compare (Name &s:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &time:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Name &t:0 Load) Mult (Constant i3600 None))\n              Add\n              (BinOp (Name &h:0 Load) Mult (Constant i60 None))\n            )\n            Add\n            (Name &s:0 Load)\n          )\n          None\n        )\n        (Assign (list (Name &diff:0 Store)) (BinOp (Name &default:0 Load) Sub (Name &time:0 Load)) None)\n        (Assign (list (Name &diff3:0 Store)) (BinOp (Name &diff:0 Load) Mult (Constant i3 None)) None)\n        (Assign\n          (list (Name &diff_t:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_str Load)\n                (list (_starred_content (BinOp (Name &diff:0 Load) FloorDiv (Constant i3600 None))))\n                nil\n              )\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i2 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff_h:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_str Load)\n                (list\n                  (_starred_content\n                    (BinOp (BinOp (Name &diff:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                  )\n                )\n                nil\n              )\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i2 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff_s:0 Store))\n          (Call\n            (Attribute\n              (Call (Name g_str Load) (list (_starred_content (BinOp (Name &diff:0 Load) Mod (Constant i60 None)))) nil)\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i2 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff_3t:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_str Load)\n                (list (_starred_content (BinOp (Name &diff3:0 Load) FloorDiv (Constant i3600 None))))\n                nil\n              )\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i2 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff_3h:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_str Load)\n                (list\n                  (_starred_content\n                    (BinOp (BinOp (Name &diff3:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n                  )\n                )\n                nil\n              )\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i2 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff_3s:0 Store))\n          (Call\n            (Attribute\n              (Call\n                (Name g_str Load)\n                (list (_starred_content (BinOp (Name &diff3:0 Load) Mod (Constant i60 None))))\n                nil\n              )\n              s_zfill\n              Load\n            )\n            (list (_starred_content (Constant i2 None)))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (BinOp (Name &diff_t:0 Load) Add (Constant s-WzU4XQ== None)) Add (Name &diff_h:0 Load))\n                    Add\n                    (Constant s-WzU4XQ== None)\n                  )\n                  Add\n                  (Name &diff_s:0 Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (BinOp (Name &diff_3t:0 Load) Add (Constant s-WzU4XQ== None)) Add (Name &diff_3h:0 Load))\n                    Add\n                    (Constant s-WzU4XQ== None)\n                  )\n                  Add\n                  (Name &diff_3s:0 Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &s2hms:0\n      (arguments nil (list (arg &sec:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:1 Store)) (_starred_content (Name &m1:1 Store))) Store))\n          (Call\n            (Name g_divmod Load)\n            (list (_starred_content (Name &sec:1 Load)) (_starred_content (Constant i3600 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &s:1 Store))) Store))\n          (Call\n            (Name g_divmod Load)\n            (list (_starred_content (Name &m1:1 Load)) (_starred_content (Constant i60 None)))\n            nil\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (Constant s-WzM3LCA0NiwgNTAsIDEwMCwgNTgsIDM3LCA0NiwgNTAsIDEwMCwgNTgsIDM3LCA0NiwgNTAsIDEwMF0= None)\n            Mod\n            (Tuple\n              (list\n                (_starred_content (Name &h:1 Load))\n                (_starred_content (Name &m:1 Load))\n                (_starred_content (Name &s:1 Load))\n              )\n              Load\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &m:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Call\n                  (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                  nil\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &h:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n              (Compare (Name &m:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n              (Compare (Name &s:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &rest:0 Store))\n          (BinOp\n            (BinOp (Constant i120 None) Mult (Constant i60 None))\n            Sub\n            (BinOp\n              (BinOp\n                (BinOp (BinOp (Name &h:0 Load) Mult (Constant i60 None)) Add (Name &m:0 Load))\n                Mult\n                (Constant i60 None)\n              )\n              Add\n              (Name &s:0 Load)\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name &s2hms:0 Load) (list (_starred_content (Name &rest:0 Load))) nil)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &s2hms:0 Load)\n                  (list (_starred_content (BinOp (Constant i3 None) Mult (Name &rest:0 Load))))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &p:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n        (Call\n          (Name g_print Load)\n          (list\n            (_starred_content\n              (JoinedStr\n                (list\n                  (FormattedValue\n                    (BinOp (Name &x:1 Load) FloorDiv (Constant i3600 None))\n                    i-1\n                    (JoinedStr (list (Constant s_02 None)))\n                  )\n                  (Constant s-WzU4XQ== None)\n                  (FormattedValue\n                    (BinOp (BinOp (Name &x:1 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))\n                    i-1\n                    (JoinedStr (list (Constant s_02 None)))\n                  )\n                  (Constant s-WzU4XQ== None)\n                  (FormattedValue\n                    (BinOp (Name &x:1 Load) Mod (Constant i60 None))\n                    i-1\n                    (JoinedStr (list (Constant s_02 None)))\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (For\n      (Name &e:0 Store)\n      (Call\n        (Name g_iter Load)\n        (list\n          (_starred_content (Name g_input Load))\n          (_starred_content (Constant s-WzQ1LCA0OSwgMzIsIDQ1LCA0OSwgMzIsIDQ1LCA0OV0= None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &m:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Name &e:0 Load) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None)))\n              Sub\n              (BinOp (Name &m:0 Load) Mult (Constant i60 None))\n            )\n            Sub\n            (Name &s:0 Load)\n          )\n          None\n        )\n        (Expr (Call (Name &p:0 Load) (list (_starred_content (Name &d:0 Load))) nil))\n        (Expr (Call (Name &p:0 Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i3 None)))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &h:0 Store))\n                (_starred_content (Name &m:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &h:0 Load) (list Lt) (list (Constant i0 None)))\n              (Compare (Name &m:0 Load) (list Lt) (list (Constant i0 None)))\n              (Compare (Name &s:0 Load) (list Lt) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &r:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None)))\n              Sub\n              (BinOp (Name &m:0 Load) Mult (Constant i60 None))\n            )\n            Sub\n            (Name &s:0 Load)\n          )\n          None\n        )\n        (For\n          (Name &m:0 Store)\n          (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None))) Load)\n          (/seq\n            (Assign (list (Name &tmp:0 Store)) (BinOp (Name &r:0 Load) Mult (Name &m:0 Load)) None)\n            (Assign (list (Name &dh:0 Store)) (BinOp (Name &tmp:0 Load) FloorDiv (Constant i3600 None)) None)\n            (Assign\n              (list (Name &dm:0 Store))\n              (BinOp (BinOp (Name &tmp:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))\n              None\n            )\n            (Assign (list (Name &ds:0 Store)) (BinOp (Name &tmp:0 Load) Mod (Constant i60 None)) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Attribute\n                        (Constant\n                          s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0=\n                          None\n                        )\n                        s_format\n                        Load\n                      )\n                      (list\n                        (_starred_content (Name &dh:0 Load))\n                        (_starred_content (Name &dm:0 Load))\n                        (_starred_content (Name &ds:0 Load))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (If #0 (/seq Break) (/seq)) (Assign (list (Name %1 Store)) #1 None) (Expr (Call (Name g_print Load) (list (_starred_content #2)) nil)) (AugAssign (Name %1 Store) Mult (Constant i3 None)) (Expr (Call (Name g_print Load) (list (_starred_content #2)) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &time:0 (arguments nil (list (arg &sec:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &h:1 Store)) (BinOp (Name &sec:1 Load) FloorDiv (Constant i3600 None)) None) (Assign (list (Name &ti:1 Store)) (BinOp (Name &sec:1 Load) Mod (Constant i3600 None)) None) (Assign (list (Name &m:1 Store)) (BinOp (Name &ti:1 Load) FloorDiv (Constant i60 None)) None) (Assign (list (Name &s:1 Store)) (BinOp (Name &ti:1 Load) Mod (Constant i60 None)) None) (Return (List (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &s:1 Load))) Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &h:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &t:0 Load) (list Eq Eq Eq) (list (Name &h:0 Load) (Name &s:0 Load) (UnaryOp USub (Constant i1 None)))) (/seq Break) (/seq)) (Assign (list (Name &sec:0 Store)) (BinOp (BinOp (BinOp (Name &t:0 Load) Mult (Constant i3600 None)) Add (BinOp (Name &h:0 Load) Mult (Constant i60 None))) Add (Name &s:0 Load)) None) (Assign (list (Name &sec:0 Store)) (BinOp (Constant i7200 None) Sub (Name &sec:0 Load)) None) (Assign (list (Name &ans:0 Store)) (Call (Name &time:0 Load) (list (_starred_content (Name &sec:0 Load))) nil) None) (Assign (list (Name &t_ans:0 Store)) (Call (Name &time:0 Load) (list (_starred_content (BinOp (Constant i3 None) Mult (Name &sec:0 Load)))) nil) None) (If (Compare (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Load) (list Lt) (list (Constant i10 None))) (/seq (Assign (list (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Store)) (BinOp (Constant s_0 None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) None)) (/seq)) (If (Compare (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Load) (list Lt) (list (Constant i10 None))) (/seq (Assign (list (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Store)) (BinOp (Constant s_0 None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s_0 None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant s-WzU4XQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) Add (Constant s-WzU4XQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &ans:0 Load) (_slice_content (Constant i2 None)) Load))) nil)))) nil)) (If (Compare (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Load) (list Lt) (list (Constant i10 None))) (/seq (Assign (list (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Store)) (BinOp (Constant s_0 None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) None)) (/seq)) (If (Compare (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Load) (list Lt) (list (Constant i10 None))) (/seq (Assign (list (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Store)) (BinOp (Constant s_0 None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s_0 None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant s-WzU4XQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) Add (Constant s-WzU4XQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &t_ans:0 Load) (_slice_content (Constant i2 None)) Load))) nil)))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &m:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &h:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None))) Sub (BinOp (Name &m:0 Load) Mult (Constant i60 None))) Sub (Name &s:0 Load)) None) (Assign (list (Name &t:0 Store)) (BinOp (Name &d:0 Load) Mult (Constant i3 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (BinOp (Name &d:0 Load) FloorDiv (Constant i3600 None)) i-1 (JoinedStr (list (Constant s_02 None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (BinOp (Name &d:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s_02 None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (Name &d:0 Load) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s_02 None)))))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None)) i-1 (JoinedStr (list (Constant s_02 None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (BinOp (Name &t:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s_02 None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (Name &t:0 Load) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s_02 None)))))))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &T:0 Store)) (_starred_content (Name &H:0 Store)) (_starred_content (Name &S:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (/splice (fn_1 (Compare (Name &T:0 Load) (list Lt) (list (Constant i0 None))) (BinOp (Constant i7200 None) Sub (BinOp (BinOp (BinOp (Constant i3600 None) Mult (Name &T:0 Load)) Add (BinOp (Constant i60 None) Mult (Name &H:0 Load))) Add (Name &S:0 Load))) (Call (Attribute (Constant s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None))) (_starred_content (BinOp (BinOp (Name &t:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))) (_starred_content (BinOp (Name &t:0 Load) Mod (Constant i60 None)))) nil) &t:0))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &m:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (/splice (fn_1 (Compare (BinOp (BinOp (Name &h:0 Load) Add (Name &m:0 Load)) Add (Name &s:0 Load)) (list Eq) (list (UnaryOp USub (Constant i3 None)))) (BinOp (BinOp (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None))) Sub (BinOp (Name &m:0 Load) Mult (Constant i60 None))) Sub (Name &s:0 Load)) (JoinedStr (list (FormattedValue (BinOp (Name &last:0 Load) FloorDiv (Constant i3600 None)) i-1 (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (BinOp (Name &last:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None)) i-1 (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (Name &last:0 Load) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s-WzQ4LCA2MiwgNTBd None)))))) &last:0))) (list (ExceptHandler None None (/seq Break))) (/seq) (/seq))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &h:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &t:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq Break) (/seq)) (Assign (list (Name &ans:0 Store)) (BinOp (Constant i7200 None) Sub (BinOp (BinOp (BinOp (Name &t:0 Load) Mult (Constant i3600 None)) Add (BinOp (Name &h:0 Load) Mult (Constant i60 None))) Add (Name &s:0 Load))) None) (Assign (list (Name &ans2:0 Store)) (BinOp (Name &ans:0 Load) Mult (Constant i3 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &ans:0 Load) FloorDiv (Constant i3600 None))) (_starred_content (BinOp (BinOp (Name &ans:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))) (_starred_content (BinOp (Name &ans:0 Load) Mod (Constant i60 None)))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &ans2:0 Load) FloorDiv (Constant i3600 None))) (_starred_content (BinOp (BinOp (Name &ans2:0 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None))) (_starred_content (BinOp (Name &ans2:0 Load) Mod (Constant i60 None)))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Tuple (list (_starred_content (Name &H:0 Store)) (_starred_content (Name &M:0 Store)) (_starred_content (Name &S:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (/splice (fn_1 (Compare (Name &H:0 Load) (list Lt) (list (Constant i0 None))) (BinOp (Constant i7200 None) Sub (BinOp (BinOp (BinOp (Constant i3600 None) Mult (Name &H:0 Load)) Add (BinOp (Constant i60 None) Mult (Name &M:0 Load))) Add (Name &S:0 Load))) (Call (Attribute (Constant s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &t:0 Load) FloorDiv (Constant i3600 None))) (_starred_content (BinOp (BinOp (Name &t:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None))) (_starred_content (BinOp (Name &t:0 Load) Mod (Constant i60 None)))) nil) &t:0))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &default:0 Store)) (BinOp (Constant i120 None) Mult (Constant i60 None)) None) (While (Constant i1 None) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &h:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp And (list (Compare (Name &t:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Name &h:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Name &s:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))))) (/seq Break) (/seq)) (Assign (list (Name &time:0 Store)) (BinOp (BinOp (BinOp (Name &t:0 Load) Mult (Constant i3600 None)) Add (BinOp (Name &h:0 Load) Mult (Constant i60 None))) Add (Name &s:0 Load)) None) (Assign (list (Name &diff:0 Store)) (BinOp (Name &default:0 Load) Sub (Name &time:0 Load)) None) (Assign (list (Name &diff3:0 Store)) (BinOp (Name &diff:0 Load) Mult (Constant i3 None)) None) (Assign (list (Name &diff_t:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (BinOp (Name &diff:0 Load) FloorDiv (Constant i3600 None)))) nil) s_zfill Load) (list (_starred_content (Constant i2 None))) nil) None) (Assign (list (Name &diff_h:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (BinOp (BinOp (Name &diff:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None)))) nil) s_zfill Load) (list (_starred_content (Constant i2 None))) nil) None) (Assign (list (Name &diff_s:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (BinOp (Name &diff:0 Load) Mod (Constant i60 None)))) nil) s_zfill Load) (list (_starred_content (Constant i2 None))) nil) None) (Assign (list (Name &diff_3t:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (BinOp (Name &diff3:0 Load) FloorDiv (Constant i3600 None)))) nil) s_zfill Load) (list (_starred_content (Constant i2 None))) nil) None) (Assign (list (Name &diff_3h:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (BinOp (BinOp (Name &diff3:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None)))) nil) s_zfill Load) (list (_starred_content (Constant i2 None))) nil) None) (Assign (list (Name &diff_3s:0 Store)) (Call (Attribute (Call (Name g_str Load) (list (_starred_content (BinOp (Name &diff3:0 Load) Mod (Constant i60 None)))) nil) s_zfill Load) (list (_starred_content (Constant i2 None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (Name &diff_t:0 Load) Add (Constant s-WzU4XQ== None)) Add (Name &diff_h:0 Load)) Add (Constant s-WzU4XQ== None)) Add (Name &diff_s:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (Name &diff_3t:0 Load) Add (Constant s-WzU4XQ== None)) Add (Name &diff_3h:0 Load)) Add (Constant s-WzU4XQ== None)) Add (Name &diff_3s:0 Load)))) nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &s2hms:0 (arguments nil (list (arg &sec:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:1 Store)) (_starred_content (Name &m1:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &sec:1 Load)) (_starred_content (Constant i3600 None))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &s:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &m1:1 Load)) (_starred_content (Constant i60 None))) nil) None) (Return (BinOp (Constant s-WzM3LCA0NiwgNTAsIDEwMCwgNTgsIDM3LCA0NiwgNTAsIDEwMCwgNTgsIDM3LCA0NiwgNTAsIDEwMF0= None) Mod (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &s:1 Load))) Load)))) nil None None) (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &m:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp And (list (Compare (Name &h:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Name &m:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Name &s:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))))) (/seq Break) (/seq)) (Assign (list (Name &rest:0 Store)) (BinOp (BinOp (Constant i120 None) Mult (Constant i60 None)) Sub (BinOp (BinOp (BinOp (BinOp (Name &h:0 Load) Mult (Constant i60 None)) Add (Name &m:0 Load)) Mult (Constant i60 None)) Add (Name &s:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &s2hms:0 Load) (list (_starred_content (Name &rest:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &s2hms:0 Load) (list (_starred_content (BinOp (Constant i3 None) Mult (Name &rest:0 Load)))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &p:0 Store)) (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (BinOp (Name &x:1 Load) FloorDiv (Constant i3600 None)) i-1 (JoinedStr (list (Constant s_02 None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (BinOp (Name &x:1 Load) FloorDiv (Constant i60 None)) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s_02 None)))) (Constant s-WzU4XQ== None) (FormattedValue (BinOp (Name &x:1 Load) Mod (Constant i60 None)) i-1 (JoinedStr (list (Constant s_02 None)))))))) nil)) None) (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s-WzQ1LCA0OSwgMzIsIDQ1LCA0OSwgMzIsIDQ1LCA0OV0= None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &m:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &e:0 Load) s_split Load) nil nil))) nil) None) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None))) Sub (BinOp (Name &m:0 Load) Mult (Constant i60 None))) Sub (Name &s:0 Load)) None) (Expr (Call (Name &p:0 Load) (list (_starred_content (Name &d:0 Load))) nil)) (Expr (Call (Name &p:0 Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i3 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &m:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Name &h:0 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &m:0 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &s:0 Load) (list Lt) (list (Constant i0 None))))) (/seq Break) (/seq)) (Assign (list (Name &r:0 Store)) (BinOp (BinOp (BinOp (Constant i7200 None) Sub (BinOp (Name &h:0 Load) Mult (Constant i3600 None))) Sub (BinOp (Name &m:0 Load) Mult (Constant i60 None))) Sub (Name &s:0 Load)) None) (For (Name &m:0 Store) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None))) Load) (/seq (Assign (list (Name &tmp:0 Store)) (BinOp (Name &r:0 Load) Mult (Name &m:0 Load)) None) (Assign (list (Name &dh:0 Store)) (BinOp (Name &tmp:0 Load) FloorDiv (Constant i3600 None)) None) (Assign (list (Name &dm:0 Store)) (BinOp (BinOp (Name &tmp:0 Load) Mod (Constant i3600 None)) FloorDiv (Constant i60 None)) None) (Assign (list (Name &ds:0 Store)) (BinOp (Name &tmp:0 Load) Mod (Constant i60 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ4LCA1MCwgMTAwLCAxMjUsIDU4LCAxMjMsIDU4LCA0OCwgNTAsIDEwMCwgMTI1LCA1OCwgMTIzLCA1OCwgNDgsIDUwLCAxMDAsIDEyNV0= None) s_format Load) (list (_starred_content (Name &dh:0 Load)) (_starred_content (Name &dm:0 Load)) (_starred_content (Name &ds:0 Load))) nil))) nil))) (/seq) None)) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAxMDQsIDExNiwgMTE2LCAxMTIsIDU4LCA0NywgNDcsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NiwgMTE3LCA0NSwgOTcsIDEwNSwgMTIyLCAxMTcsIDQ2LCA5NywgOTksIDQ2LCAxMDYsIDExMiwgNDcsIDExMSwgMTEwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NywgMTAwLCAxMDEsIDExNSwgOTksIDExNCwgMTA1LCAxMTIsIDExNiwgMTA1LCAxMTEsIDExMCwgNDYsIDEwNiwgMTE1LCAxMTIsIDYzLCAxMDUsIDEwMCwgNjEsIDQ4LCA1MCwgNDgsIDU0LCAxMCwgMTBd\n        None\n      )\n    )\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_sys (list (alias &stdin:0 None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name &stdin:0 Load) s_readline Load) None)\n    (FunctionDef\n      &main:0\n      (arguments nil (list (arg &args:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &L:1 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n              None\n            )\n            (If (Compare (Name &L:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n            (Assign (list (Name &ans:1 Store)) (Constant s_NA None) None)\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Constant i12 None) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare (Name &ans:1 Load) (list Eq) (list (Constant s_NA None)))\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple (list (_starred_content (Name &M:1 Store)) (_starred_content (Name &N:1 Store))) Store)\n                      )\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &L:1 Store) Sub (BinOp (Name &M:1 Load) Sub (Name &N:1 Load)))\n                    (If\n                      (Compare (Name &L:1 Load) (list LtE) (list (Constant i0 None)))\n                      (/seq (Assign (list (Name &ans:1 Store)) (Name &i:1 Load) None))\n                      (/seq)\n                    )\n                  )\n                  (/seq (Assign (list (Name &_:1 Store)) (Call (Name &input:0 Load) nil nil) None))\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Expr\n          (Call\n            (Name &main:0 Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Attribute (Name &sys:0 Load) s_argv Load)\n                  (_slice_slice (Slice (Constant i1 None) None None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &num:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &num:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &num_list:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i0 None)) (_starred_content (Constant i12 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &num_list:0 Load) s_append Load)\n                (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load))))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare\n            (Name &num:0 Load)\n            (list Gt)\n            (list (Call (Name g_sum Load) (list (_starred_content (Name &num_list:0 Load))) nil))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)) Continue)\n          (/seq)\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i0 None)) (_starred_content (Constant i12 None)))\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &num:0 Store)\n              Sub\n              (Subscript (Name &num_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            )\n            (If (Compare (Name &num:0 Load) (list LtE) (list (Constant i0 None))) (/seq Break) (/seq))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &L:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &L:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &savings:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (ListComp\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i12 None))\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple\n            (list\n              (_starred_content (Name &i:0 Store))\n              (_starred_content\n                (Tuple (list (_starred_content (Name &M:0 Store)) (_starred_content (Name &N:0 Store))) Store)\n              )\n            )\n            Store\n          )\n          (Call\n            (Name g_enumerate Load)\n            (list (_starred_content (Name &a:0 Load)))\n            (list (keyword s_start (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Name &savings:0 Store) Add (BinOp (Name &M:0 Load) Sub (Name &N:0 Load)))\n            (If\n              (Compare (Name &savings:0 Load) (list GtE) (list (Name &L:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break)\n              (/seq)\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)))\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n              (ListComp\n                (Call (Name g_int Load) (list (_starred_content (Name &_:1 Load))) nil)\n                (list\n                  (comprehension\n                    (Name &_:1 Store)\n                    (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (AugAssign (Name &l:0 Store) Sub (BinOp (Name &m:0 Load) Sub (Name &n:0 Load)))\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &s:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &l:0 Load) (list LtE) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Assign (list (Name &s:0 Store)) (Name &i:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (IfExp\n            (Compare (Name &s:0 Load) (list NotEq) (list (Constant i0 None)))\n            (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil)\n            (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAxMDQsIDExNiwgMTE2LCAxMTIsIDU4LCA0NywgNDcsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NiwgMTE3LCA0NSwgOTcsIDEwNSwgMTIyLCAxMTcsIDQ2LCA5NywgOTksIDQ2LCAxMDYsIDExMiwgNDcsIDExMSwgMTEwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NywgMTAwLCAxMDEsIDExNSwgOTksIDExNCwgMTA1LCAxMTIsIDExNiwgMTA1LCAxMTEsIDExMCwgNDYsIDEwNiwgMTE1LCAxMTIsIDYzLCAxMDUsIDEwMCwgNjEsIDQ4LCA1MCwgNDgsIDU0LCAxMCwgMTBd\n        None\n      )\n    )\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_sys (list (alias &stdin:0 None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name &stdin:0 Load) s_readline Load) None)\n    (FunctionDef\n      &main:0\n      (arguments nil (list (arg &args:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &L:1 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n              None\n            )\n            (If (Compare (Name &L:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n            (Assign (list (Name &ans:1 Store)) (Constant s_NA None) None)\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Constant i12 None) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (_starred_content (Name &M:1 Store)) (_starred_content (Name &N:1 Store))) Store))\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &ans:1 Load) (list Eq) (list (Constant s_NA None)))\n                  (/seq\n                    (AugAssign (Name &L:1 Store) Sub (BinOp (Name &M:1 Load) Sub (Name &N:1 Load)))\n                    (If\n                      (Compare (Name &L:1 Load) (list LtE) (list (Constant i0 None)))\n                      (/seq (Assign (list (Name &ans:1 Store)) (Name &i:1 Load) None))\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Expr\n          (Call\n            (Name &main:0 Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Attribute (Name &sys:0 Load) s_argv Load)\n                  (_slice_slice (Slice (Constant i1 None) None None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &acc:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (AugAssign (Name &acc:0 Store) Add (BinOp (Name &m:0 Load) Sub (Name &n:0 Load)))\n            (If\n              (BoolOp\n                And\n                (list (UnaryOp Not (Name &ans:0 Load)) (Compare (Name &acc:0 Load) (list GtE) (list (Name &l:0 Load))))\n              )\n              (/seq (Assign (list (Name &ans:0 Store)) (Name &i:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (UnaryOp Not (Name &ans:0 Load))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &L:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (UnaryOp Not (Name &L:0 Load)) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (If (Compare (Name &L:0 Load) (list LtE) (list (Constant i0 None))) (/seq Continue) (/seq))\n            (Assign (list (Name &c:0 Store)) (Name &i:0 Load) None)\n            (AugAssign (Name &L:0 Store) Sub (BinOp (Name &m:0 Load) Sub (Name &n:0 Load)))\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &L:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &L:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &L:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (AugAssign (Name &s:0 Store) Add (BinOp (Name &m:0 Load) Sub (Name &n:0 Load)))\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &s:0 Load) (list GtE) (list (Name &L:0 Load)))\n                  (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Assign (list (Name &k:0 Store)) (Name &i:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None)))\n                  (Name &k:0 Load)\n                  (Constant s_NA None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i12 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i0 None))) (/seq Continue) (/seq))\n            (Assign (list (Name &c:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)\n            (AugAssign (Name &n:0 Store) Sub (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign (list (Name &z:0 Store)) (Constant True None) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i12 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (AugAssign (Name &a:0 Store) Sub (BinOp (Name &b:0 Load) Sub (Name &c:0 Load)))\n            (If\n              (BoolOp And (list (Compare (Name &a:0 Load) (list LtE) (list (Constant i0 None))) (Name &z:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))))\n                    nil\n                  )\n                )\n                (Assign (list (Name &z:0 Store)) (Constant False None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Expr (Constant s-WzEwLCAxMDQsIDExNiwgMTE2LCAxMTIsIDU4LCA0NywgNDcsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NiwgMTE3LCA0NSwgOTcsIDEwNSwgMTIyLCAxMTcsIDQ2LCA5NywgOTksIDQ2LCAxMDYsIDExMiwgNDcsIDExMSwgMTEwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NywgMTAwLCAxMDEsIDExNSwgOTksIDExNCwgMTA1LCAxMTIsIDExNiwgMTA1LCAxMTEsIDExMCwgNDYsIDEwNiwgMTE1LCAxMTIsIDYzLCAxMDUsIDEwMCwgNjEsIDQ4LCA1MCwgNDgsIDU0LCAxMCwgMTBd None)) (Import (list (alias &sys:0 None))) (ImportFrom s_sys (list (alias &stdin:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name &stdin:0 Load) s_readline Load) None) (FunctionDef &main:0 (arguments nil (list (arg &args:1 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &L:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (If (Compare (Name &L:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &ans:1 Store)) (Constant s_NA None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i12 None) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &ans:1 Load) (list Eq) (list (Constant s_NA None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &M:1 Store)) (_starred_content (Name &N:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &L:1 Store) Sub (BinOp (Name &M:1 Load) Sub (Name &N:1 Load))) (If (Compare (Name &L:1 Load) (list LtE) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:1 Store)) (Name &i:1 Load) None)) (/seq))) (/seq (Assign (list (Name &_:1 Store)) (Call (Name &input:0 Load) nil nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))) (/seq))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) (list (_starred_content (Subscript (Attribute (Name &sys:0 Load) s_argv Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 &num:0)) (Assign (list (Name &num_list:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i12 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &num_list:0 Load) s_append Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil))) (/seq) None) (If (Compare (Name &num:0 Load) (list Gt) (list (Call (Name g_sum Load) (list (_starred_content (Name &num_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)) Continue) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i12 None))) nil) (/seq (AugAssign (Name &num:0 Store) Sub (Subscript (Name &num_list:0 Load) (_slice_content (Name &i:0 Load)) Load)) (If (Compare (Name &num:0 Load) (list LtE) (list (Constant i0 None))) (/seq Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (While (Constant True None) (/seq (/splice (fn_1 &L:0)) (Assign (list (Name &savings:0 Store)) (Constant i0 None) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i12 None)) nil i0))) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Tuple (list (_starred_content (Name &M:0 Store)) (_starred_content (Name &N:0 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &a:0 Load))) (list (keyword s_start (Constant i1 None)))) (/seq (AugAssign (Name &savings:0 Store) Add (BinOp (Name &M:0 Load) Sub (Name &N:0 Load))) (If (Compare (Name &savings:0 Load) (list GtE) (list (Name &L:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil))) None)) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (/splice (fn_1 &l:0)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:1 Load))) nil) (list (comprehension (Name &_:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (AugAssign (Name &l:0 Store) Sub (BinOp (Name &m:0 Load) Sub (Name &n:0 Load))) (If (BoolOp And (list (Compare (Name &s:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &l:0 Load) (list LtE) (list (Constant i0 None))))) (/seq (Assign (list (Name &s:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (Expr (IfExp (Compare (Name &s:0 Load) (list NotEq) (list (Constant i0 None))) (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil) (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil)))) (/seq))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCAxMDQsIDExNiwgMTE2LCAxMTIsIDU4LCA0NywgNDcsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NiwgMTE3LCA0NSwgOTcsIDEwNSwgMTIyLCAxMTcsIDQ2LCA5NywgOTksIDQ2LCAxMDYsIDExMiwgNDcsIDExMSwgMTEwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NywgMTAwLCAxMDEsIDExNSwgOTksIDExNCwgMTA1LCAxMTIsIDExNiwgMTA1LCAxMTEsIDExMCwgNDYsIDEwNiwgMTE1LCAxMTIsIDYzLCAxMDUsIDEwMCwgNjEsIDQ4LCA1MCwgNDgsIDU0LCAxMCwgMTBd None)) (Import (list (alias &sys:0 None))) (ImportFrom s_sys (list (alias &stdin:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name &stdin:0 Load) s_readline Load) None) (FunctionDef &main:0 (arguments nil (list (arg &args:1 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &L:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (If (Compare (Name &L:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &ans:1 Store)) (Constant s_NA None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i12 None) Add (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &M:1 Store)) (_starred_content (Name &N:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &ans:1 Load) (list Eq) (list (Constant s_NA None))) (/seq (AugAssign (Name &L:1 Store) Sub (BinOp (Name &M:1 Load) Sub (Name &N:1 Load))) (If (Compare (Name &L:1 Load) (list LtE) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:1 Store)) (Name &i:1 Load) None)) (/seq))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))) (/seq))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) (list (_starred_content (Subscript (Attribute (Name &sys:0 Load) s_argv Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 &l:0)) (Assign (list (Name &acc:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &acc:0 Store) Add (BinOp (Name &m:0 Load) Sub (Name &n:0 Load))) (If (BoolOp And (list (UnaryOp Not (Name &ans:0 Load)) (Compare (Name &acc:0 Load) (list GtE) (list (Name &l:0 Load))))) (/seq (Assign (list (Name &ans:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (If (UnaryOp Not (Name &ans:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &L:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (UnaryOp Not (Name &L:0 Load)) (/seq Break) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &L:0 Load) (list LtE) (list (Constant i0 None))) (/seq Continue) (/seq)) (Assign (list (Name &c:0 Store)) (Name &i:0 Load) None) (AugAssign (Name &L:0 Store) Sub (BinOp (Name &m:0 Load) Sub (Name &n:0 Load)))) (/seq) None) (If (Compare (Name &L:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 &L:0)) (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i13 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &s:0 Store) Add (BinOp (Name &m:0 Load) Sub (Name &n:0 Load))) (If (BoolOp And (list (Compare (Name &s:0 Load) (list GtE) (list (Name &L:0 Load))) (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Assign (list (Name &k:0 Store)) (Name &i:0 Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Name &k:0 Load) (Constant s_NA None)))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (/splice (fn_1 &n:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i12 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i0 None))) (/seq Continue) (/seq)) (Assign (list (Name &c:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None) (AugAssign (Name &n:0 Store) Sub (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) (/seq) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &z:0 Store)) (Constant True None) None) (/splice (fn_1 &a:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i12 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &a:0 Store) Sub (BinOp (Name &b:0 Load) Sub (Name &c:0 Load))) (If (BoolOp And (list (Compare (Name &a:0 Load) (list LtE) (list (Constant i0 None))) (Name &z:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) (Assign (list (Name &z:0 Store)) (Constant False None) None)) (/seq))) (/seq) None) (If (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NA None))) nil))) (/seq))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &num:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &e:0 Load) Sub (Name &b:0 Load)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content\n                      (Subscript\n                        (Name &num:0 Load)\n                        (_slice_content (BinOp (Name &b:0 Load) Add (Name &i:0 Load)))\n                        Store\n                      )\n                    )\n                    (_starred_content\n                      (Subscript\n                        (Name &num:0 Load)\n                        (_slice_content (BinOp (Name &t:0 Load) Add (Name &i:0 Load)))\n                        Store\n                      )\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &num:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &i:0 Load))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &num:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &i:0 Load))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Call (Name g_str Load) (list (_starred_content (Name &n:1 Load))) nil)\n                    (list (comprehension (Name &n:1 Store) (Name &num:0 Load) nil i0))\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &t:0 Load) (list Gt) (list (Name &b:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &b:0 Load) None)) Load)\n                      Add\n                      (Subscript\n                        (Name &a:0 Load)\n                        (_slice_slice\n                          (Slice\n                            (Name &t:0 Load)\n                            (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load))\n                            None\n                          )\n                        )\n                        Load\n                      )\n                    )\n                    Add\n                    (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) (Name &t:0 Load) None)) Load)\n                  )\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)\n                )\n                Add\n                (Subscript\n                  (Name &a:0 Load)\n                  (_slice_slice\n                    (Slice (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load)) None None)\n                  )\n                  Load\n                )\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &t:0 Load) None)) Load)\n                      Add\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)\n                    )\n                    Add\n                    (Subscript\n                      (Name &a:0 Load)\n                      (_slice_slice\n                        (Slice\n                          (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load))\n                          (Name &b:0 Load)\n                          None\n                        )\n                      )\n                      Load\n                    )\n                  )\n                  Add\n                  (Subscript\n                    (Name &a:0 Load)\n                    (_slice_slice\n                      (Slice\n                        (Name &t:0 Load)\n                        (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load))\n                        None\n                      )\n                    )\n                    Load\n                  )\n                )\n                Add\n                (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) None None)) Load)\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &resolve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (ImportFrom s_collections (list (alias &deque:1 None)) i0)\n        (Assign\n          (list (Name &N:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &A:1 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &Q:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &ans:1 Store))\n          (ListComp\n            (Name &i:2 Load)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &Q:1 Load))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &b:1 Store))\n                    (_starred_content (Name &e:1 Store))\n                    (_starred_content (Name &t:1 Store))\n                  )\n                  Store\n                )\n              )\n              (ListComp\n                (Call (Name g_int Load) (list (_starred_content (Name &i:4 Load))) nil)\n                (list\n                  (comprehension\n                    (Name &i:4 Store)\n                    (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &tmp:1 Store))\n              (Call\n                (Name &deque:1 Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &ans:1 Load)\n                      (_slice_slice\n                        (Slice\n                          (Name &t:1 Load)\n                          (BinOp (Name &t:1 Load) Add (BinOp (Name &e:1 Load) Sub (Name &b:1 Load)))\n                          None\n                        )\n                      )\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &e:1 Load)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &ans:1 Load)\n                      (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &t:1 Load)) Sub (Name &b:1 Load)))\n                      Store\n                    )\n                  )\n                  (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Store))\n                  (Subscript (Name &tmp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &b:1 Load))) Load)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &prt:1 Store))\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:1 Load))\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &prt:1 Load) (_slice_content (Name &i:1 Load)) Store))\n              (Subscript\n                (Name &A:1 Load)\n                (_slice_content (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &prt:1 Load) Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &resolve:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &box:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &k:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &e:0 Load) Sub (Name &b:0 Load)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content\n                      (Subscript\n                        (Name &box:0 Load)\n                        (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load)))\n                        Store\n                      )\n                    )\n                    (_starred_content\n                      (Subscript\n                        (Name &box:0 Load)\n                        (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load)))\n                        Store\n                      )\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &box:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &box:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &box:0 Load) Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &my_swap:0\n      (arguments\n        nil\n        (list (arg &ary:1 None None) (arg &b:1 None None) (arg &e:1 None None) (arg &t:1 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign (list (Name &k:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &k:1 Load) (list Lt) (list (BinOp (Name &e:1 Load) Sub (Name &b:1 Load))))\n          (/seq\n            (Assign\n              (list (Name &temp:1 Store))\n              (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &b:1 Load) Add (Name &k:1 Load))) Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &b:1 Load) Add (Name &k:1 Load))) Store))\n              (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &t:1 Load) Add (Name &k:1 Load))) Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &t:1 Load) Add (Name &k:1 Load))) Store))\n              (Name &temp:1 Load)\n              None\n            )\n            (AugAssign (Name &k:1 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Return (Name &ary:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Expr (Call (Name g_input Load) nil nil))\n        (Assign\n          (list (Name &ary:2 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call\n                  (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                  (list (_starred_content (Constant s-WzMyXQ== None)))\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &q:2 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &q:2 Load))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &b:2 Store))\n                    (_starred_content (Name &e:2 Store))\n                    (_starred_content (Name &t:2 Store))\n                  )\n                  Store\n                )\n              )\n              (ListComp\n                (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil)\n                (list\n                  (comprehension\n                    (Name &x:4 Store)\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzMyXQ== None)))\n                      nil\n                    )\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &ary:2 Store))\n              (Call\n                (Name &my_swap:0 Load)\n                (list\n                  (_starred_content (Name &ary:2 Load))\n                  (_starred_content (Name &b:2 Load))\n                  (_starred_content (Name &e:2 Load))\n                  (_starred_content (Name &t:2 Load))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (ListComp\n                        (Call (Name g_str Load) (list (_starred_content (Name &x:5 Load))) nil)\n                        (list (comprehension (Name &x:5 Store) (Name &ary:2 Load) nil i0))\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &k:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &e:0 Load) Sub (Name &b:0 Load)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content\n                      (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Store)\n                    )\n                    (_starred_content\n                      (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Store)\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list (_starred_content (Name g_str Load)) (_starred_content (Name &a:0 Load)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NiwgOTcsIDExNSwgMTA1LCA5OSwgMzIsIDc3LCAxMTEsIDEwMCwgMTA1LCAxMDIsIDEwNSwgOTksIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDExNSwgMzIsIDQ1LCAzMiwgODMsIDExOSwgOTcsIDExMiwgMTAsIDEwNCwgMTE2LCAxMTYsIDExMiwgNTgsIDQ3LCA0NywgMTA2LCAxMTcsIDEwMCwgMTAzLCAxMDEsIDQ2LCAxMTcsIDQ1LCA5NywgMTA1LCAxMjIsIDExNywgNDYsIDk3LCA5OSwgNDYsIDEwNiwgMTEyLCA0NywgMTExLCAxMTAsIDEwOCwgMTA1LCAxMTAsIDEwMSwgMTA2LCAxMTcsIDEwMCwgMTAzLCAxMDEsIDQ3LCAxMDAsIDEwMSwgMTE1LCA5OSwgMTE0LCAxMDUsIDExMiwgMTE2LCAxMDUsIDExMSwgMTEwLCA0NiwgMTA2LCAxMTUsIDExMiwgNjMsIDEwNSwgMTAwLCA2MSwgNzMsIDg0LCA4MCwgNTAsIDk1LCA1MiwgOTUsIDY3LCAzOCwgMTA4LCA5NywgMTEwLCAxMDMsIDYxLCAxMDYsIDExMiwgMTAsIDEwXQ==\n        None\n      )\n    )\n    (Assign (list (Name &_:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &k:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &e:0 Load) Sub (Name &b:0 Load)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content\n                      (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Store)\n                    )\n                    (_starred_content\n                      (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Store)\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_starred (Starred (Name &A:0 Load) Load)))\n        (list (keyword s_sep (Constant s-WzMyXQ== None)))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Tuple (list (_starred_starred (Starred (Name &a:0 Store) Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &r:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content\n                  (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &l:0 Load) (Name &r:0 Load) None)) Store)\n                )\n                (_starred_content\n                  (Subscript\n                    (Name &a:0 Load)\n                    (_slice_slice\n                      (Slice\n                        (Name &t:0 Load)\n                        (BinOp (BinOp (Name &t:0 Load) Add (Name &r:0 Load)) Sub (Name &l:0 Load))\n                        None\n                      )\n                    )\n                    Store\n                  )\n                )\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &a:0 Load)\n                  (_slice_slice\n                    (Slice\n                      (Name &t:0 Load)\n                      (BinOp (BinOp (Name &t:0 Load) Add (Name &r:0 Load)) Sub (Name &l:0 Load))\n                      None\n                    )\n                  )\n                  Load\n                )\n              )\n              (_starred_content\n                (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &l:0 Load) (Name &r:0 Load) None)) Load)\n              )\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &e:0 Load) Sub (Name &b:0 Load)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content\n                      (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &j:0 Load))) Store)\n                    )\n                    (_starred_content\n                      (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &j:0 Load))) Store)\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &j:0 Load))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &j:0 Load))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &q:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &e:0 Store))\n                (_starred_content (Name &t:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &s:0 Store))\n          (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load))\n          None\n        )\n        (If\n          (Compare (Name &t:0 Load) (list Gt) (list (Name &b:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &b:0 Load) None)) Load)\n                      Add\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (Name &s:0 Load) None)) Load)\n                    )\n                    Add\n                    (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) (Name &t:0 Load) None)) Load)\n                  )\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)\n                )\n                Add\n                (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &s:0 Load) None None)) Load)\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &t:0 Load) None)) Load)\n                      Add\n                      (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)\n                    )\n                    Add\n                    (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &s:0 Load) (Name &b:0 Load) None)) Load)\n                  )\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (Name &s:0 Load) None)) Load)\n                )\n                Add\n                (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) None None)) Load)\n              )\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) #0 None) (For (Name %7 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %5 Load) Sub (Name %6 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp #1 Add (Name %7 Load))) Store)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp #2 Add (Name %7 Load))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp #2 Add (Name %7 Load))) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp #1 Add (Name %7 Load))) Load))) Load) None)) (/seq) None)) (/seq) None))",
        "sym_arity": 8,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) (Name &b:0 Load) (Name &t:0 Load) &n:0 &num:0 &q:0 &t:0 &e:0 &b:0 &i:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_str Load) (list (_starred_content (Name &n:1 Load))) nil) (list (comprehension (Name &n:1 Store) (Name &num:0 Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &e:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &t:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &b:0 Load) None)) Load) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load)) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) (Name &t:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load)) None None)) Load)) None)) (/seq (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &t:0 Load) None)) Load) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load)) (Name &b:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load)) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) None None)) Load)) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &resolve:0 (arguments nil nil None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &deque:1 None)) i0) (Assign (list (Name &N:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:1 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &Q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &ans:1 Store)) (ListComp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) nil i0))) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &Q:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &e:1 Store)) (_starred_content (Name &t:1 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:4 Load))) nil) (list (comprehension (Name &i:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &tmp:1 Store)) (Call (Name &deque:1 Load) (list (_starred_content (Subscript (Name &ans:1 Load) (_slice_slice (Slice (Name &t:1 Load) (BinOp (Name &t:1 Load) Add (BinOp (Name &e:1 Load) Sub (Name &b:1 Load))) None)) Load))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &e:1 Load))) nil) (/seq (Assign (list (Subscript (Name &ans:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &t:1 Load)) Sub (Name &b:1 Load))) Store)) (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &tmp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &b:1 Load))) Load) None)) (/seq) None)) (/seq) None) (Assign (list (Name &prt:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (Assign (list (Subscript (Name &prt:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &A:1 Load) (_slice_content (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load)) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &prt:1 Load) Load))) nil))) nil None None) (Expr (Call (Name &resolve:0 Load) nil nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) (Name &t:0 Load) (Name &b:0 Load) &n:0 &box:0 &q:0 &t:0 &e:0 &b:0 &k:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &box:0 Load) Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &my_swap:0 (arguments nil (list (arg &ary:1 None None) (arg &b:1 None None) (arg &e:1 None None) (arg &t:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &k:1 Store)) (Constant i0 None) None) (While (Compare (Name &k:1 Load) (list Lt) (list (BinOp (Name &e:1 Load) Sub (Name &b:1 Load)))) (/seq (Assign (list (Name &temp:1 Store)) (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &b:1 Load) Add (Name &k:1 Load))) Load) None) (Assign (list (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &b:1 Load) Add (Name &k:1 Load))) Store)) (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &t:1 Load) Add (Name &k:1 Load))) Load) None) (Assign (list (Subscript (Name &ary:1 Load) (_slice_content (BinOp (Name &t:1 Load) Add (Name &k:1 Load))) Store)) (Name &temp:1 Load) None) (AugAssign (Name &k:1 Store) Add (Constant i1 None))) (/seq)) (Return (Name &ary:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &ary:2 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Assign (list (Name &q:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:2 Store)) (_starred_content (Name &e:2 Store)) (_starred_content (Name &t:2 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Assign (list (Name &ary:2 Store)) (Call (Name &my_swap:0 Load) (list (_starred_content (Name &ary:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &e:2 Load)) (_starred_content (Name &t:2 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (ListComp (Call (Name g_str Load) (list (_starred_content (Name &x:5 Load))) nil) (list (comprehension (Name &x:5 Store) (Name &ary:2 Load) nil i0))))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (Name &b:0 Load) (Name &t:0 Load) &n:0 &a:0 &q:0 &t:0 &e:0 &b:0 &k:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &a:0 Load))) nil))) nil))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NiwgOTcsIDExNSwgMTA1LCA5OSwgMzIsIDc3LCAxMTEsIDEwMCwgMTA1LCAxMDIsIDEwNSwgOTksIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDExNSwgMzIsIDQ1LCAzMiwgODMsIDExOSwgOTcsIDExMiwgMTAsIDEwNCwgMTE2LCAxMTYsIDExMiwgNTgsIDQ3LCA0NywgMTA2LCAxMTcsIDEwMCwgMTAzLCAxMDEsIDQ2LCAxMTcsIDQ1LCA5NywgMTA1LCAxMjIsIDExNywgNDYsIDk3LCA5OSwgNDYsIDEwNiwgMTEyLCA0NywgMTExLCAxMTAsIDEwOCwgMTA1LCAxMTAsIDEwMSwgMTA2LCAxMTcsIDEwMCwgMTAzLCAxMDEsIDQ3LCAxMDAsIDEwMSwgMTE1LCA5OSwgMTE0LCAxMDUsIDExMiwgMTE2LCAxMDUsIDExMSwgMTEwLCA0NiwgMTA2LCAxMTUsIDExMiwgNjMsIDEwNSwgMTAwLCA2MSwgNzMsIDg0LCA4MCwgNTAsIDk1LCA1MiwgOTUsIDY3LCAzOCwgMTA4LCA5NywgMTEwLCAxMDMsIDYxLCAxMDYsIDExMiwgMTAsIDEwXQ== None)) (Assign (list (Name &_:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &e:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &e:0 Load) Sub (Name &b:0 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Store)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &t:0 Load) Add (Name &k:0 Load))) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &b:0 Load) Add (Name &k:0 Load))) Load))) Load) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) (list (keyword s_sep (Constant s-WzMyXQ== None)))))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Tuple (list (_starred_starred (Starred (Name &a:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &l:0 Load) (Name &r:0 Load) None)) Store)) (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (BinOp (BinOp (Name &t:0 Load) Add (Name &r:0 Load)) Sub (Name &l:0 Load)) None)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (BinOp (BinOp (Name &t:0 Load) Add (Name &r:0 Load)) Sub (Name &l:0 Load)) None)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &l:0 Load) (Name &r:0 Load) None)) Load))) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (Name &b:0 Load) (Name &t:0 Load) &n:0 &A:0 &q:0 &t:0 &e:0 &b:0 &j:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &A:0 Load) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &e:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &t:0 Load) Add (Name &e:0 Load)) Sub (Name &b:0 Load)) None) (If (Compare (Name &t:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &b:0 Load) None)) Load) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (Name &s:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) (Name &t:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &s:0 Load) None None)) Load)) None)) (/seq (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_slice (Slice None (Name &t:0 Load) None)) Load) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &b:0 Load) (Name &e:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &s:0 Load) (Name &b:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &t:0 Load) (Name &s:0 Load) None)) Load)) Add (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &e:0 Load) None None)) Load)) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign\n      (list (Name &max_val:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Constant f10000000000000.0 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &min_val:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (UnaryOp USub (Constant f10000000000000.0 None)))) nil)\n      None\n    )\n    (FunctionDef\n      &read_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_str:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_input Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_strs:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Name &x:1 Load)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_str_list:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Name &x:2 Load)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Call\n                  (Attribute\n                    (Call\n                      (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load)\n                      nil\n                      nil\n                    )\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list (_starred_content (Name &nb_elemets:0 Store)) (_starred_content (Name &value_needed:0 Store)))\n          Store\n        )\n      )\n      (Call (Name &read_ints:0 Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &elements:0 Store))\n      (Call (Name g_sorted Load) (list (_starred_content (Call (Name &read_ints:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &mid:0 Store)) (BinOp (Name &nb_elemets:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign\n      (list (Name &ans:0 Store))\n      (Call\n        (Name g_abs Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript (Name &elements:0 Load) (_slice_content (Name &mid:0 Load)) Load)\n              Sub\n              (Name &value_needed:0 Load)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (AugAssign\n      (Name &ans:0 Store)\n      Add\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (BinOp (Name &a:4 Load) Sub (Name &value_needed:0 Load)))\n                )\n                nil\n              )\n              (list\n                (comprehension\n                  (Name &a:4 Store)\n                  (Subscript (Name &elements:0 Load) (_slice_slice (Slice None (Name &mid:0 Load) None)) Load)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (AugAssign\n      (Name &ans:0 Store)\n      Add\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (BinOp (Name &value_needed:0 Load) Sub (Name &a:5 Load)))\n                )\n                nil\n              )\n              (list\n                (comprehension\n                  (Name &a:5 Store)\n                  (Subscript\n                    (Name &elements:0 Load)\n                    (_slice_slice (Slice (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None None))\n                    Load\n                  )\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c1:0 Store))\n      (Call\n        (Name g_abs Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load)\n              Sub\n              (Name &x:0 Load)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Gt)\n            (list (Name &x:0 Load))\n          )\n          (/seq\n            (AugAssign\n              (Name &c1:0 Store)\n              Add\n              (BinOp (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &x:0 Load))\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))\n          (_starred_content (Name &n:0 Load))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Lt)\n            (list (Name &x:0 Load))\n          )\n          (/seq\n            (AugAssign\n              (Name &c1:0 Store)\n              Add\n              (BinOp (Name &x:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c1:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (Call\n        (Name g_tuple Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &num:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &num:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &k:0 Store))\n      (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) FloorDiv (Constant i2 None))\n      None\n    )\n    (If\n      (Compare (Subscript (Name &num:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Eq) (list (Name &s:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Assign (list (Name &sum:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &sum:0 Store))\n          (BinOp\n            (Name &sum:0 Load)\n            Add\n            (Call\n              (Name g_abs Load)\n              (list\n                (_starred_content\n                  (BinOp (Name &s:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Name &k:0 Load)) Load))\n                )\n              )\n              nil\n            )\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &num:0 Load) (_slice_content (Name &k:0 Load)) Store)) (Name &s:0 Load) None)\n        (For\n          (Name &u:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &k:0 Load) Sub (Constant i1 None)))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load)\n                (list Gt)\n                (list (Name &s:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &sum:0 Store))\n                  (BinOp\n                    (Name &sum:0 Load)\n                    Add\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &s:0 Load)\n                            Sub\n                            (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n              )\n              (/seq Break)\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &u:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &n:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load)\n                (list Lt)\n                (list (Name &s:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &sum:0 Store))\n                  (BinOp\n                    (Name &sum:0 Load)\n                    Add\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Name &s:0 Load)\n                            Sub\n                            (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n              )\n              (/seq Break)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &sum:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign (list (Name &cnt:0 Store)) (Call (Name g_int Load) (list (_starred_content (Constant i0 None))) nil) None)\n    (If\n      (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load) (list Eq) (list (Name &s:0 Load)))\n      (/seq\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Constant i0 None))) nil)\n          None\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load)\n            (list Lt)\n            (list (Name &s:0 Load))\n          )\n          (/seq\n            (For\n              (Name &i:0 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Name &m:0 Load)) (_starred_content (Name &n:0 Load)))\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Lt)\n                    (list (Name &s:0 Load))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Name &cnt:0 Store)\n                      Add\n                      (BinOp (Name &s:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                    )\n                  )\n                  (/seq Break)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load)\n                (list Gt)\n                (list (Name &s:0 Load))\n              )\n              (/seq\n                (For\n                  (Name &i:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content (Name &m:0 Load))\n                      (_starred_content (UnaryOp USub (Constant i1 None)))\n                      (_starred_content (UnaryOp USub (Constant i1 None)))\n                    )\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Gt)\n                        (list (Name &s:0 Load))\n                      )\n                      (/seq\n                        (AugAssign\n                          (Name &cnt:0 Store)\n                          Add\n                          (BinOp\n                            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                            Sub\n                            (Name &s:0 Load)\n                          )\n                        )\n                      )\n                      (/seq Break)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &numbers:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &counter:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &numbers:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Gt)\n            (list (Name &s:0 Load))\n          )\n          (/seq\n            (AugAssign\n              (Name &counter:0 Store)\n              Add\n              (BinOp (Subscript (Name &numbers:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &s:0 Load))\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))\n          (_starred_content (Name &n:0 Load))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &numbers:0 Load) (_slice_content (Name &j:0 Load)) Load)\n            (list Lt)\n            (list (Name &s:0 Load))\n          )\n          (/seq\n            (AugAssign\n              (Name &counter:0 Store)\n              Add\n              (BinOp (Name &s:0 Load) Sub (Subscript (Name &numbers:0 Load) (_slice_content (Name &j:0 Load)) Load))\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (AugAssign\n      (Name &counter:0 Store)\n      Add\n      (Call\n        (Name g_abs Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Subscript\n                (Name &numbers:0 Load)\n                (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))\n                Load\n              )\n              Sub\n              (Name &s:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &counter:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &solv:0\n      (arguments nil (list (arg &arr:1 None None) (arg &med:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &half:1 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &arr:1 Load))) nil) Div (Constant i2 None))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &sm:1 Store)) (List nil Load) None)\n        (Assign (list (Name &gt:1 Store)) (List nil Load) None)\n        (For\n          (Name &item:1 Store)\n          (Name &arr:1 Load)\n          (/seq\n            (If\n              (Compare (Name &item:1 Load) (list Lt) (list (Name &med:1 Load)))\n              (/seq\n                (Expr\n                  (Call (Attribute (Name &sm:1 Load) s_append Load) (list (_starred_content (Name &item:1 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &item:1 Load) (list Gt) (list (Name &med:1 Load)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &gt:1 Load) s_append Load)\n                        (list (_starred_content (Name &item:1 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &sm:1 Load))) nil)\n                (list LtE)\n                (list (Name &half:1 Load))\n              )\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &gt:1 Load))) nil)\n                (list LtE)\n                (list (Name &half:1 Load))\n              )\n            )\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &sm:1 Load))) nil)\n                (list Gt)\n                (list (Name &half:1 Load))\n              )\n              (/seq\n                (Expr\n                  (Call (Attribute (Name &sm:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))\n                )\n                (Assign\n                  (list (Name &li:1 Store))\n                  (Subscript\n                    (Name &sm:1 Load)\n                    (_slice_slice\n                      (Slice\n                        None\n                        (BinOp\n                          (Call (Name g_len Load) (list (_starred_content (Name &sm:1 Load))) nil)\n                          Sub\n                          (Name &half:1 Load)\n                        )\n                        None\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Assign (list (Name &result:1 Store)) (Constant i0 None) None)\n                (For\n                  (Name &item:1 Store)\n                  (Name &li:1 Load)\n                  (/seq (AugAssign (Name &result:1 Store) Add (BinOp (Name &med:1 Load) Sub (Name &item:1 Load))))\n                  (/seq)\n                  None\n                )\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &gt:1 Load) s_sort Load) nil nil))\n                (Assign\n                  (list (Name &li:1 Store))\n                  (Subscript\n                    (Name &gt:1 Load)\n                    (_slice_slice\n                      (Slice\n                        None\n                        (BinOp\n                          (Call (Name g_len Load) (list (_starred_content (Name &gt:1 Load))) nil)\n                          Sub\n                          (Name &half:1 Load)\n                        )\n                        None\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Assign (list (Name &result:1 Store)) (Constant i0 None) None)\n                (For\n                  (Name &item:1 Store)\n                  (Name &li:1 Load)\n                  (/seq (AugAssign (Name &result:1 Store) Add (BinOp (Name &item:1 Load) Sub (Name &med:1 Load))))\n                  (/seq)\n                  None\n                )\n              )\n            )\n          )\n        )\n        (Return (Name &result:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &solv:0 Load)\n              (list (_starred_content (Name &arr:0 Load)) (_starred_content (Name &s:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Import (list (alias &math:0 None)))\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &ind:0 Store))\n      (BinOp\n        (Call\n          (Name g_int Load)\n          (list\n            (_starred_content\n              (BinOp\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil) Add (Constant i1 None))\n                Div\n                (Constant i2 None)\n              )\n            )\n          )\n          nil\n        )\n        Sub\n        (Constant i1 None)\n      )\n      None\n    )\n    (If\n      (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &ind:0 Load)) Load) (list Eq) (list (Name &s:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare\n            (Subscript (Name &l:0 Load) (_slice_content (Name &ind:0 Load)) Load)\n            (list Eq)\n            (list (Name &s:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq\n            (If\n              (Compare\n                (Name &s:0 Load)\n                (list Gt)\n                (list (Subscript (Name &l:0 Load) (_slice_content (Name &ind:0 Load)) Load))\n              )\n              (/seq\n                (For\n                  (Name &i:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content (Name &ind:0 Load))\n                      (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil))\n                    )\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Name &s:0 Load)\n                        (list Gt)\n                        (list (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &c:0 Store))\n                          (BinOp\n                            (BinOp (Name &c:0 Load) Add (Name &s:0 Load))\n                            Sub\n                            (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          )\n                          None\n                        )\n                      )\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n              )\n              (/seq\n                (For\n                  (Name &i:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (BinOp (Name &ind:0 Load) Add (Constant i1 None))))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Gt)\n                        (list (Name &s:0 Load))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &c:0 Store))\n                          (BinOp\n                            (BinOp\n                              (Name &c:0 Load)\n                              Add\n                              (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                            )\n                            Sub\n                            (Name &s:0 Load)\n                          )\n                          None\n                        )\n                      )\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &mid:0 Store))\n          (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load)\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &k:0 Load) (list Gt) (list (Name &mid:0 Load)))\n          (/seq\n            (For\n              (Name &x:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Name &k:0 Load)\n                    (list Gt)\n                    (list (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &c:0 Store))\n                      (BinOp\n                        (Name &c:0 Load)\n                        Add\n                        (BinOp (Name &k:0 Load) Sub (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load))\n                      )\n                      None\n                    )\n                  )\n                  (/seq Break)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq\n            (For\n              (Name &x:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Name &k:0 Load)\n                    (list Lt)\n                    (list (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &c:0 Store))\n                      (BinOp\n                        (Name &c:0 Load)\n                        Add\n                        (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load) Sub (Name &k:0 Load))\n                      )\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &z:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &k:0 Store)) (BinOp (Name &a:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Lt) (list (Name &b:0 Load)))\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &k:0 Load) (list Lt) (list (Name &a:0 Load)))\n              (Compare\n                (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load)\n                (list Lt)\n                (list (Name &b:0 Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &s:0 Store)\n              Add\n              (BinOp (Name &b:0 Load) Sub (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load))\n            )\n            (AugAssign (Name &k:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load)\n            (list Gt)\n            (list (Name &b:0 Load))\n          )\n          (/seq\n            (While\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &k:0 Load) (list Gt) (list (UnaryOp USub (Constant i1 None))))\n                  (Compare\n                    (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load)\n                    (list Gt)\n                    (list (Name &b:0 Load))\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &s:0 Store)\n                  Add\n                  (BinOp (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) Sub (Name &b:0 Load))\n                )\n                (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_stdout Load) s_write Load)\n        (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &mid:0 Store))\n      (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load)\n      None\n    )\n    (If\n      (Compare (Name &mid:0 Load) (list Lt) (list (Name &m:0 Load)))\n      (/seq\n        (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Lt)\n                (list (Name &m:0 Load))\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &c:0 Store))\n              (BinOp\n                (Name &c:0 Load)\n                Add\n                (Call\n                  (Name g_abs Load)\n                  (list\n                    (_starred_content\n                      (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &m:0 Load))\n                    )\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &mid:0 Load) (list Gt) (list (Name &m:0 Load)))\n          (/seq\n            (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n            (While\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list GtE) (list (Constant i0 None)))\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Gt)\n                    (list (Name &m:0 Load))\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &c:0 Store))\n                  (BinOp\n                    (Name &c:0 Load)\n                    Add\n                    (Call\n                      (Name g_abs Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                            Sub\n                            (Name &m:0 Load)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name %4 Store)) #0 None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %2 Load) FloorDiv (Constant i2 None)))) nil) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (list Gt) (list (Name %1 Load))) (/seq (AugAssign (Name %4 Store) Add (BinOp (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) Sub (Name %1 Load)))) (/seq))) (/seq) None))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_os None))) (ImportFrom s_sys (list (alias g_stdin None)) i0) (Assign (list (Name &max_val:0 Store)) (Call (Name g_int Load) (list (_starred_content (Constant f10000000000000.0 None))) nil) None) (Assign (list (Name &min_val:0 Store)) (Call (Name g_int Load) (list (_starred_content (UnaryOp USub (Constant f10000000000000.0 None)))) nil) None) (FunctionDef &read_int:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &read_str:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_input Load) nil nil))) nil None None) (FunctionDef &read_strs:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Name &x:1 Load) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &read_str_list:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Name &x:2 Load) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &nb_elemets:0 Store)) (_starred_content (Name &value_needed:0 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Assign (list (Name &elements:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name &read_ints:0 Load) nil nil))) nil) None) (Assign (list (Name &mid:0 Store)) (BinOp (Name &nb_elemets:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &elements:0 Load) (_slice_content (Name &mid:0 Load)) Load) Sub (Name &value_needed:0 Load)))) nil) None) (AugAssign (Name &ans:0 Store) Add (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &a:4 Load) Sub (Name &value_needed:0 Load)))) nil) (list (comprehension (Name &a:4 Store) (Subscript (Name &elements:0 Load) (_slice_slice (Slice None (Name &mid:0 Load) None)) Load) nil i0))))) nil)) (AugAssign (Name &ans:0 Store) Add (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &value_needed:0 Load) Sub (Name &a:5 Load)))) nil) (list (comprehension (Name &a:5 Store) (Subscript (Name &elements:0 Load) (_slice_slice (Slice (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None None)) Load) nil i0))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load) Sub (Name &x:0 Load)))) nil) &x:0 &n:0 &arr:0 &c1:0 &i:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Name &x:0 Load))) (/seq (AugAssign (Name &c1:0 Store) Add (BinOp (Name &x:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c1:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Attribute (Name &num:0 Load) s_sort Load) nil nil)) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) FloorDiv (Constant i2 None)) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Eq) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &sum:0 Store)) (Constant i0 None) None) (Assign (list (Name &sum:0 Store)) (BinOp (Name &sum:0 Load) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &s:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Name &k:0 Load)) Load)))) nil)) None) (Assign (list (Subscript (Name &num:0 Load) (_slice_content (Name &k:0 Load)) Store)) (Name &s:0 Load) None) (For (Name &u:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load) (list Gt) (list (Name &s:0 Load))) (/seq (Assign (list (Name &sum:0 Store)) (BinOp (Name &sum:0 Load) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &s:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load)))) nil)) None)) (/seq Break))) (/seq) None) (For (Name &u:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load) (list Lt) (list (Name &s:0 Load))) (/seq (Assign (list (Name &sum:0 Store)) (BinOp (Name &sum:0 Load) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &s:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Name &u:0 Load)) Load)))) nil)) None)) (/seq Break))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &sum:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &cnt:0 Store)) (Call (Name g_int Load) (list (_starred_content (Constant i0 None))) nil) None) (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load) (list Eq) (list (Name &s:0 Load))) (/seq (Assign (list (Name &cnt:0 Store)) (Call (Name g_int Load) (list (_starred_content (Constant i0 None))) nil) None)) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load) (list Lt) (list (Name &s:0 Load))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Name &s:0 Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (BinOp (Name &s:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) (/seq Break))) (/seq) None)) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &m:0 Load)) Load) (list Gt) (list (Name &s:0 Load))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Name &s:0 Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &s:0 Load)))) (/seq Break))) (/seq) None)) (/seq)))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Constant i0 None) &s:0 &n:0 &numbers:0 &counter:0 &i:0)) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &numbers:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Lt) (list (Name &s:0 Load))) (/seq (AugAssign (Name &counter:0 Store) Add (BinOp (Name &s:0 Load) Sub (Subscript (Name &numbers:0 Load) (_slice_content (Name &j:0 Load)) Load)))) (/seq))) (/seq) None) (AugAssign (Name &counter:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &numbers:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load) Sub (Name &s:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &counter:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (FunctionDef &solv:0 (arguments nil (list (arg &arr:1 None None) (arg &med:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &half:1 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &arr:1 Load))) nil) Div (Constant i2 None)))) nil) None) (Assign (list (Name &sm:1 Store)) (List nil Load) None) (Assign (list (Name &gt:1 Store)) (List nil Load) None) (For (Name &item:1 Store) (Name &arr:1 Load) (/seq (If (Compare (Name &item:1 Load) (list Lt) (list (Name &med:1 Load))) (/seq (Expr (Call (Attribute (Name &sm:1 Load) s_append Load) (list (_starred_content (Name &item:1 Load))) nil))) (/seq (If (Compare (Name &item:1 Load) (list Gt) (list (Name &med:1 Load))) (/seq (Expr (Call (Attribute (Name &gt:1 Load) s_append Load) (list (_starred_content (Name &item:1 Load))) nil))) (/seq))))) (/seq) None) (If (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &sm:1 Load))) nil) (list LtE) (list (Name &half:1 Load))) (Compare (Call (Name g_len Load) (list (_starred_content (Name &gt:1 Load))) nil) (list LtE) (list (Name &half:1 Load))))) (/seq (Return (Constant i0 None))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &sm:1 Load))) nil) (list Gt) (list (Name &half:1 Load))) (/seq (Expr (Call (Attribute (Name &sm:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &li:1 Store)) (Subscript (Name &sm:1 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &sm:1 Load))) nil) Sub (Name &half:1 Load)) None)) Load) None) (Assign (list (Name &result:1 Store)) (Constant i0 None) None) (For (Name &item:1 Store) (Name &li:1 Load) (/seq (AugAssign (Name &result:1 Store) Add (BinOp (Name &med:1 Load) Sub (Name &item:1 Load)))) (/seq) None)) (/seq (Expr (Call (Attribute (Name &gt:1 Load) s_sort Load) nil nil)) (Assign (list (Name &li:1 Store)) (Subscript (Name &gt:1 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &gt:1 Load))) nil) Sub (Name &half:1 Load)) None)) Load) None) (Assign (list (Name &result:1 Store)) (Constant i0 None) None) (For (Name &item:1 Store) (Name &li:1 Load) (/seq (AugAssign (Name &result:1 Store) Add (BinOp (Name &item:1 Load) Sub (Name &med:1 Load)))) (/seq) None))))) (Return (Name &result:1 Load))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solv:0 Load) (list (_starred_content (Name &arr:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &n:0 Load))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &s:0 Load))) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Import (list (alias &math:0 None))) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ind:0 Store)) (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil) Add (Constant i1 None)) Div (Constant i2 None)))) nil) Sub (Constant i1 None)) None) (If (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &ind:0 Load)) Load) (list Eq) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (If (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &ind:0 Load)) Load) (list Eq) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &s:0 Load) (list Gt) (list (Subscript (Name &l:0 Load) (_slice_content (Name &ind:0 Load)) Load))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &ind:0 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &l:0 Load))) nil))) nil) (/seq (If (Compare (Name &s:0 Load) (list Gt) (list (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (BinOp (Name &c:0 Load) Add (Name &s:0 Load)) Sub (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &ind:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Name &s:0 Load))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (BinOp (Name &c:0 Load) Add (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)) Sub (Name &s:0 Load)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))))))))) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Assign (list (Name &mid:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (If (Compare (Name &k:0 Load) (list Gt) (list (Name &mid:0 Load))) (/seq (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &k:0 Load) (list Gt) (list (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Add (BinOp (Name &k:0 Load) Sub (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load))) None)) (/seq Break))) (/seq) None)) (/seq (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &k:0 Load) (list Lt) (list (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Add (BinOp (Subscript (Name &l:0 Load) (_slice_content (Name &x:0 Load)) Load) Sub (Name &k:0 Load))) None)) (/seq))) (/seq) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &z:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &a:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (If (Compare (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Lt) (list (Name &b:0 Load))) (/seq (While (BoolOp And (list (Compare (Name &k:0 Load) (list Lt) (list (Name &a:0 Load))) (Compare (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Lt) (list (Name &b:0 Load))))) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &b:0 Load) Sub (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load))) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq))) (/seq (If (Compare (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Gt) (list (Name &b:0 Load))) (/seq (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (UnaryOp USub (Constant i1 None)))) (Compare (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) (list Gt) (list (Name &b:0 Load))))) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Subscript (Name &z:0 Load) (_slice_content (Name &k:0 Load)) Load) Sub (Name &b:0 Load))) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) (/seq))) (/seq)))) (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (Assign (list (Name &mid:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load) None) (If (Compare (Name &mid:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None) (While (BoolOp And (list (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Name &m:0 Load))))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &m:0 Load)))) nil)) None) (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq (If (Compare (Name &mid:0 Load) (list Gt) (list (Name &m:0 Load))) (/seq (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None) (While (BoolOp And (list (Compare (Name &i:0 Load) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Name &m:0 Load))))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Name &m:0 Load)))) nil)) None) (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None)) (/seq))) (/seq)))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_0 None))\n          )\n          (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n          (/seq (AugAssign (Name &c:0 Store) Sub (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (BinOp (BinOp (Constant s_1 None) Add (Constant s-WzEwXQ== None)) Add (Name &s:0 Load)))\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Constant s_2 None) Add (Constant s-WzEwXQ== None))\n                  Add\n                  (Subscript\n                    (Name &s:0 Load)\n                    (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None))\n                    Load\n                  )\n                )\n              )\n              (_starred_content (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n        (list NotEq)\n        (list (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_2 None))) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &s:0 Load)\n                  (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None))\n                  Load\n                )\n              )\n              (_starred_content\n                (Subscript (Name &s:0 Load) (_slice_slice (Slice (UnaryOp USub (Constant i1 None)) None None)) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &c0:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &c1:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant s_0 None))\n          )\n          (/seq (AugAssign (Name &c0:0 Store) Add (Constant i1 None)))\n          (/seq (AugAssign (Name &c1:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &c0:0 Load) (list Eq) (list (Name &c1:0 Load)))\n          (Compare (Name &c0:0 Load) (list Gt) (list (Constant i0 None)))\n          (Compare (Name &c1:0 Load) (list Gt) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &a:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load)\n                    Add\n                    (Constant s-WzMyXQ== None)\n                  )\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &c0:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c1:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &cnt0:0 Store)) (_starred_content (Name &cnt1:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content\n                (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n              )\n              (_starred_content\n                (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n              )\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &cnt0:0 Load) (list Eq) (list (Name &cnt1:0 Load)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))\n                  (_starred_content\n                    (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &l:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &sum:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (Assign\n          (list (Name &sum:0 Store))\n          (BinOp (Name &sum:0 Load) Add (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &sum:0 Load) (list Eq) (list (BinOp (Name &l:0 Load) Div (Constant i2 None))))\n      (/seq\n        (Assign (list (Name &s_1:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None)\n        (Assign\n          (list (Name &s_2:0 Store))\n          (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_2 None))) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &s_1:0 Load)) (_starred_content (Name &s_2:0 Load)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (Assign (list (Name &a:0 Store)) (Constant i1 None) None)\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &z:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &o:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_0 None)))\n          (/seq (AugAssign (Name &z:0 Store) Sub (UnaryOp USub (Constant i1 None))))\n          (/seq (AugAssign (Name &o:0 Store) Sub (UnaryOp USub (Constant i1 None))))\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &z:0 Load) (list NotEq) (list (Name &o:0 Load)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &s:0 Load)\n                  (_slice_slice (Slice None (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None))\n                  Load\n                )\n              )\n              (_starred_content\n                (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n        (list NotEq)\n        (list (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &a:0 Load)\n                  (_slice_slice (Slice None (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None))\n                  Load\n                )\n              )\n              (_starred_content\n                (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &gstr:0 Store))\n      (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare\n        (BinOp (Call (Name g_len Load) (list (_starred_content (Name &gstr:0 Load))) nil) Mod (Constant i2 None))\n        (list NotEq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &gstr:0 Load))) nil))\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &gstr:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n            (list NotEq)\n            (list (Call (Attribute (Name &gstr:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &gstr:0 Load))) nil))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &gstr:0 Load)\n                      (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None))\n                      Load\n                    )\n                  )\n                  (_starred_content\n                    (Subscript (Name &gstr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &zero:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n      None\n    )\n    (Assign (list (Name &one:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &zero:0 Load)) None)\n    (If\n      (Compare (Name &zero:0 Load) (list NotEq) (list (Name &one:0 Load)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))\n              (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &b:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n        (list Eq)\n        (list (Call (Attribute (Name &b:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil) Sub (Constant i1 None))\n              )\n            )\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                (list (keyword s_end (Constant s_ None)))\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Constant s_ None))\n              (_starred_content (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_0 None))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &c:0 Store) Sub (Constant i1 None))))) (/seq) None) (If (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant s_1 None) Add (Constant s-WzEwXQ== None)) Add (Name &s:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant s_2 None) Add (Constant s-WzEwXQ== None)) Add (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None)) Load))) (_starred_content (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil) (list NotEq) (list (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None)) Load)) (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (UnaryOp USub (Constant i1 None)) None None)) Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &c0:0 Store)) (Constant i0 None) None) (Assign (list (Name &c1:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_0 None))) (/seq (AugAssign (Name &c0:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &c1:0 Store) Add (Constant i1 None))))) (/seq) None) (If (BoolOp And (list (Compare (Name &c0:0 Load) (list Eq) (list (Name &c1:0 Load))) (Compare (Name &c0:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &c1:0 Load) (list Gt) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load) Add (Constant s-WzMyXQ== None)) Add (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))) nil))) (/seq (If (BoolOp Or (list (Compare (Name &c0:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c1:0 Load) (list Eq) (list (Constant i0 None))))) (fn_1 &a:0) (fn_1 &a:0))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (fn_1 &s:0) (/seq (Assign (list (Tuple (list (_starred_content (Name &cnt0:0 Store)) (_starred_content (Name &cnt1:0 Store))) Store)) (Tuple (list (_starred_content (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)) (_starred_content (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil))) Load) None) (If (Compare (Name &cnt0:0 Load) (list Eq) (list (Name &cnt1:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (fn_1 &s:0))))) nil)",
      "(Module (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &sum:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (Assign (list (Name &sum:0 Store)) (BinOp (Name &sum:0 Load) Add (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil)) None)) (/seq) None) (If (Compare (Name &sum:0 Load) (list Eq) (list (BinOp (Name &l:0 Load) Div (Constant i2 None)))) (/seq (Assign (list (Name &s_1:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &s_2:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s_1:0 Load)) (_starred_content (Name &s_2:0 Load))) nil))) (/seq (Assign (list (Name &a:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &z:0 Store)) (Constant i0 None) None) (Assign (list (Name &o:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_0 None))) (/seq (AugAssign (Name &z:0 Store) Sub (UnaryOp USub (Constant i1 None)))) (/seq (AugAssign (Name &o:0 Store) Sub (UnaryOp USub (Constant i1 None)))))) (/seq) None) (If (Compare (Name &z:0 Load) (list NotEq) (list (Name &o:0 Load))) (fn_1 &s:0) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice None (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)) Load)) (_starred_content (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil) (list NotEq) (list (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))) (fn_1 &a:0) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice None (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &gstr:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (BinOp (Call (Name g_len Load) (list (_starred_content (Name &gstr:0 Load))) nil) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None))) (fn_1 &gstr:0) (/seq (If (Compare (Call (Attribute (Name &gstr:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil) (list NotEq) (list (Call (Attribute (Name &gstr:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))) (fn_1 &gstr:0) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &gstr:0 Load) (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i1 None)) None)) Load)) (_starred_content (Subscript (Name &gstr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &zero:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil) None) (Assign (list (Name &one:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &zero:0 Load)) None) (If (Compare (Name &zero:0 Load) (list NotEq) (list (Name &one:0 Load))) (fn_1 &s:0) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &b:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil) (list Eq) (list (Call (Attribute (Name &b:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) (list (keyword s_end (Constant s_ None)))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None)) (_starred_content (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) (fn_1 &b:0))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias s_defaultdict g_dd)) i0)\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (ImportFrom s_functools (list (alias g_* None)) i0)\n    (ImportFrom s_fractions (list (alias s_Fraction g_f)) i0)\n    (ImportFrom s_copy (list (alias g_* None)) i0)\n    (ImportFrom s_bisect (list (alias g_* None)) i0)\n    (ImportFrom s_heapq (list (alias g_* None)) i0)\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (ImportFrom s_itertools (list (alias g_permutations None) (alias g_product None)) i0)\n    (FunctionDef\n      &eprint:0\n      (arguments nil nil (arg &args:1 None None) nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_starred (Starred (Name &args:1 Load) Load)))\n            (list (keyword s_file (Attribute (Name g_sys Load) s_stderr Load)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &zz:0 Store)) (Constant i1 None) None)\n    (If\n      (Name &zz:0 Load)\n      (/seq\n        (Assign\n          (list (Name &input:0 Store))\n          (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)\n          None\n        )\n      )\n      (/seq\n        (Assign\n          (list (Attribute (Name g_sys Load) s_stdin Store))\n          (Call\n            (Name g_open Load)\n            (list (_starred_content (Constant s_input.txt None)) (_starred_content (Constant s_r None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Attribute (Name g_sys Load) s_stdout Store))\n          (Call\n            (Name g_open Load)\n            (list (_starred_content (Constant s_all.txt None)) (_starred_content (Constant s_w None)))\n            nil\n          )\n          None\n        )\n      )\n    )\n    (FunctionDef\n      &inc:0\n      (arguments nil (list (arg &d:2 None None) (arg &c:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &d:2 Load) (_slice_content (Name &c:2 Load)) Store))\n          (IfExp\n            (Compare (Name &c:2 Load) (list In) (list (Name &d:2 Load)))\n            (BinOp (Subscript (Name &d:2 Load) (_slice_content (Name &c:2 Load)) Load) Add (Constant i1 None))\n            (Constant i1 None)\n          )\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &bo:0\n      (arguments nil (list (arg &i:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Name g_ord Load) (list (_starred_content (Name &i:3 Load))) nil)\n            Sub\n            (Call (Name g_ord Load) (list (_starred_content (Constant s_A None))) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &li:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &xx:11 Load))) nil)\n            (list\n              (comprehension\n                (Name &xx:11 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &fli:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_float Load) (list (_starred_content (Name &x:12 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:12 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &comp:0\n      (arguments nil (list (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &a:4 Load) (list Gt) (list (Name &b:4 Load))) (/seq (Return (Constant i2 None))) (/seq))\n        (Return\n          (IfExp (Compare (Name &a:4 Load) (list Eq) (list (Name &b:4 Load))) (Constant i2 None) (Constant i0 None))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &gi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Name &xx:10 Load)\n            (list\n              (comprehension\n                (Name &xx:10 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &fi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &pro:0\n      (arguments nil (list (arg &a:5 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_reduce Load)\n            (list\n              (_starred_content\n                (Lambda\n                  (arguments nil (list (arg &a:13 None None) (arg &b:13 None None)) None nil nil None nil)\n                  (BinOp (Name &a:13 Load) Mult (Name &b:13 Load))\n                )\n              )\n              (_starred_content (Name &a:5 Load))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &swap:0\n      (arguments nil (list (arg &a:6 None None) (arg &i:6 None None) (arg &j:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &i:6 Load)) Store))\n                (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &j:6 Load)) Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &j:6 Load)) Load))\n              (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &i:6 Load)) Load))\n            )\n            Load\n          )\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &si:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &gh:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_flush Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isvalid:0\n      (arguments nil (list (arg &i:7 None None) (arg &j:7 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BoolOp\n            And\n            (list\n              (Compare (Constant i0 None) (list LtE Lt) (list (Name &i:7 Load) (Name &n:0 Load)))\n              (Compare (Constant i0 None) (list LtE Lt) (list (Name &j:7 Load) (Name &n:0 Load)))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &bo:0\n      (arguments nil (list (arg &i:8 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Name g_ord Load) (list (_starred_content (Name &i:8 Load))) nil)\n            Sub\n            (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &graph:0\n      (arguments nil (list (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &i:9 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:9 Load))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:9 Store)) (_starred_content (Name &y:9 Store))) Store))\n              (Call (Name &mi:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &a:0 Load) (_slice_content (Name &x:9 Load)) Load) s_append Load)\n                (list (_starred_content (Name &y:9 Load)))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &a:0 Load) (_slice_content (Name &y:9 Load)) Load) s_append Load)\n                (list (_starred_content (Name &x:9 Load)))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name &fi:0 Load) nil nil) None)\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call (Name &mi:0 Load) nil nil)\n          None\n        )\n        (AugAssign (Name &n:0 Store) Add (Constant i1 None))\n        (If\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)))) nil)\n            )\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil)))\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwMCwgMTAxLCAxMDIsIDMyLCAxMjAsIDExMSwgMTE0LCA0MCwgMTIwLCA0NCwgMTIxLCA0NCwgMTIyLCA0MSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTE0LCAxMDEsIDExNSwgMzIsIDYxLCAzMiwgNDgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAyLCAxMTEsIDExNCwgMzIsIDEwNSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDUxLCA0OSwgNDQsIDQ1LCA0OSwgNDQsIDQ1LCA0OSwgNDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA5OCwgNDksIDMyLCA2MSwgMzIsIDEyMCwgMzgsIDQwLCA0OSwgMzIsIDYwLCA2MCwgMzIsIDEwNSwgNDEsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDk4LCA1MCwgMzIsIDYxLCAzMiwgMTIxLCAzOCwgNDAsIDQ5LCAzMiwgNjAsIDYwLCAzMiwgMTA1LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDUxLCAzMiwgNjEsIDMyLCAxMjIsIDM4LCA0MCwgNDksIDMyLCA2MCwgNjAsIDMyLCAxMDUsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA5OCwgNDksIDMyLCA2MSwgMzIsIDEwOSwgMTA1LCAxMTAsIDQwLCA5OCwgNDksIDMyLCA0NCwgMzIsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDUwLCAzMiwgNjEsIDMyLCAxMDksIDEwNSwgMTEwLCA0MCwgOTgsIDUwLCAzMiwgNDQsIDMyLCA0OSwgNDEsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDk4LCA1MSwgMzIsIDYxLCAzMiwgMTA5LCAxMDUsIDExMCwgNDAsIDk4LCA1MCwgMzIsIDQ0LCAzMiwgNDksIDQxLCAxMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTIwLCAxMTEsIDExNCwgNjYsIDEwNSwgMTE2LCAzMiwgNjEsIDMyLCA0OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTA1LCAxMDIsIDQwLCA5OCwgNDksIDM4LCA5OCwgNTAsIDM4LCA5OCwgNTEsIDQxLCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDEyMCwgMTExLCAxMTQsIDY2LCAxMDUsIDExNiwgMzIsIDYxLCAzMiwgNDgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDEwMSwgMTA4LCAxMTUsIDEwMSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMjAsIDExMSwgMTE0LCA2NiwgMTA1LCAxMTYsIDMyLCA2MSwgMzIsIDQwLCA5OCwgNDksIDEyNCwgOTgsIDUwLCAxMjQsIDk4LCA1MSwgNDEsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTQsIDEwMSwgMTE1LCAzMiwgNjAsIDYwLCA2MSwgMzIsIDQ5LCA1OSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTE0LCAxMDEsIDExNSwgMzIsIDEyNCwgNjEsIDEyMCwgMTExLCAxMTQsIDY2LCAxMDUsIDExNiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMTQsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAzMiwgMTE0LCAxMDEsIDExNSwgMTAsIDEwLCAxMTYsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMTYsIDQxLCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMjAsIDQ0LCAxMjEsIDQ0LCAxMjIsIDYxLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCA0MCwgMTIyLCA2MSwgNjEsIDQ4LCA0MSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTIwLCAxMTEsIDExNCwgNDAsIDEyMCwgNDQsIDEyMiwgNDQsIDEyMSwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwMSwgMTA4LCAxMTUsIDEwMSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTIwLCAxMTEsIDExNCwgNDAsIDEyMCwgNDQsIDEyMSwgNDQsIDEyMiwgNDEsIDQxLCAxMF0=\n        None\n      )\n    )\n    (Expr\n      (Constant\n        s-WzExNiwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDExNiwgNDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCA5NywgNjEsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTA5LCAxMDUsIDExMCwgNDAsIDk3LCA0MSwgNDQsIDEwOSwgOTcsIDEyMCwgNDAsIDk3LCA0MSwgNDEsIDEwXQ==\n        None\n      )\n    )\n    (ImportFrom s_operator (list (alias &xor:0 None)) i0)\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &f:0 Store))\n          (List\n            (list\n              (_starred_content (Name &a:0 Load))\n              (_starred_content (Name &b:0 Load))\n              (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)))\n            )\n            Load\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &f:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i3 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &input_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &output_list:0\n      (arguments nil (list (arg &v:1 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (GeneratorExp\n                        (Call (Name g_str Load) (list (_starred_content (Name &x:3 Load))) nil)\n                        (list (comprehension (Name &x:3 Store) (Name &v:1 Load) nil i0))\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &t:2 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (For\n          (Name &_:2 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &t:2 Load))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:2 Store))\n                    (_starred_content (Name &b:2 Store))\n                    (_starred_content (Name &n:2 Store))\n                  )\n                  Store\n                )\n              )\n              (Call (Name &input_ints:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (List\n                        (list\n                          (_starred_content (Name &a:2 Load))\n                          (_starred_content (Name &b:2 Load))\n                          (_starred_content (BinOp (Name &a:2 Load) BitXor (Name &b:2 Load)))\n                        )\n                        Load\n                      )\n                      (_slice_content (BinOp (Name &n:2 Load) Mod (Constant i3 None)))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &XORinacci:0\n      (arguments nil (list (arg &s0:1 None None) (arg &s1:1 None None) (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n:1 Load) (list Lt) (list (Constant i1 None)))\n          (/seq (Return (Name &s0:1 Load)))\n          (/seq\n            (If\n              (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Return (Name &s1:1 Load)))\n              (/seq\n                (Return\n                  (BinOp\n                    (Call\n                      (Name &XORinacci:0 Load)\n                      (list\n                        (_starred_content (Name &s0:1 Load))\n                        (_starred_content (Name &s1:1 Load))\n                        (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))\n                      )\n                      nil\n                    )\n                    BitXor\n                    (Call\n                      (Name &XORinacci:0 Load)\n                      (list\n                        (_starred_content (Name &s0:1 Load))\n                        (_starred_content (Name &s1:1 Load))\n                        (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i2 None)))\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &num:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &ins:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &ins:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &XORinacci:0 Load)\n                  (list\n                    (_starred_content\n                      (Subscript\n                        (Subscript (Name &ins:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                    )\n                    (_starred_content\n                      (Subscript\n                        (Subscript (Name &ins:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                    (_starred_content\n                      (BinOp\n                        (Subscript\n                          (Subscript (Name &ins:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                          (_slice_content (Constant i2 None))\n                          Load\n                        )\n                        Mod\n                        (Constant i3 None)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &num:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &x:0 Store)) (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)) None)\n        (Assign (list (Name &ans:0 Store)) (BinOp (Name &num:0 Load) Mod (Constant i3 None)) None)\n        (If\n          (Compare (Name &ans:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare (Name &ans:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &it:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &A:0 Store))\n          (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i3 None))\n          None\n        )\n        (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Store)) (Name &a:0 Load) None)\n        (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Store)) (Name &b:0 Load) None)\n        (Assign\n          (list (Subscript (Name &A:0 Load) (_slice_content (Constant i2 None)) Store))\n          (BinOp\n            (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)\n            BitXor\n            (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load)\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i3 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i3 None)) None)\n        (If\n          (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load))))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &T:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &tc:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &T:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i3 None)) None)\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil)))\n          (/seq\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil)))\n              (/seq\n                (If\n                  (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load))))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &l:0 Store)) (List (list (_starred_content (Name &a:0 Load))) Load) None)\n        (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &b:0 Load))) nil))\n        (Expr\n          (Call\n            (Attribute (Name &l:0 Load) s_append Load)\n            (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load))))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i3 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &n:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &res:0 Store))\n          (Dict\n            (list (Constant i0 None) (Constant i1 None) (Constant i2 None))\n            (list (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)) (Name &a:0 Load) (Name &b:0 Load))\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &res:0 Load)\n                  (_slice_content (BinOp (BinOp (Name &n:0 Load) Add (Constant i1 None)) Mod (Constant i3 None)))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0 (Assign (list (Name %4 Store)) (BinOp (Name %1 Load) Mod (Constant i3 None)) None) (If (Compare (Name %4 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %3 Load))) nil))) (/seq (If (Compare (Name %4 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)))))))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias s_defaultdict g_dd)) i0) (ImportFrom s_collections (list (alias g_deque None)) i0) (ImportFrom s_functools (list (alias g_* None)) i0) (ImportFrom s_fractions (list (alias s_Fraction g_f)) i0) (ImportFrom s_copy (list (alias g_* None)) i0) (ImportFrom s_bisect (list (alias g_* None)) i0) (ImportFrom s_heapq (list (alias g_* None)) i0) (ImportFrom s_math (list (alias g_* None)) i0) (ImportFrom s_itertools (list (alias g_permutations None) (alias g_product None)) i0) (FunctionDef &eprint:0 (arguments nil nil (arg &args:1 None None) nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &args:1 Load) Load))) (list (keyword s_file (Attribute (Name g_sys Load) s_stderr Load)))))) nil None None) (Assign (list (Name &zz:0 Store)) (Constant i1 None) None) (If (Name &zz:0 Load) (/seq (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)) (/seq (Assign (list (Attribute (Name g_sys Load) s_stdin Store)) (Call (Name g_open Load) (list (_starred_content (Constant s_input.txt None)) (_starred_content (Constant s_r None))) nil) None) (Assign (list (Attribute (Name g_sys Load) s_stdout Store)) (Call (Name g_open Load) (list (_starred_content (Constant s_all.txt None)) (_starred_content (Constant s_w None))) nil) None))) (FunctionDef &inc:0 (arguments nil (list (arg &d:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &d:2 Load) (_slice_content (Name &c:2 Load)) Store)) (IfExp (Compare (Name &c:2 Load) (list In) (list (Name &d:2 Load))) (BinOp (Subscript (Name &d:2 Load) (_slice_content (Name &c:2 Load)) Load) Add (Constant i1 None)) (Constant i1 None)) None)) nil None None) (FunctionDef &bo:0 (arguments nil (list (arg &i:3 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name g_ord Load) (list (_starred_content (Name &i:3 Load))) nil) Sub (Call (Name g_ord Load) (list (_starred_content (Constant s_A None))) nil)))) nil None None) (FunctionDef &li:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &xx:11 Load))) nil) (list (comprehension (Name &xx:11 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &fli:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_float Load) (list (_starred_content (Name &x:12 Load))) nil) (list (comprehension (Name &x:12 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &comp:0 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:4 Load) (list Gt) (list (Name &b:4 Load))) (/seq (Return (Constant i2 None))) (/seq)) (Return (IfExp (Compare (Name &a:4 Load) (list Eq) (list (Name &b:4 Load))) (Constant i2 None) (Constant i0 None)))) nil None None) (FunctionDef &gi:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Name &xx:10 Load) (list (comprehension (Name &xx:10 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &fi:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &pro:0 (arguments nil (list (arg &a:5 None None)) None nil nil None nil) (/seq (Return (Call (Name g_reduce Load) (list (_starred_content (Lambda (arguments nil (list (arg &a:13 None None) (arg &b:13 None None)) None nil nil None nil) (BinOp (Name &a:13 Load) Mult (Name &b:13 Load)))) (_starred_content (Name &a:5 Load))) nil))) nil None None) (FunctionDef &swap:0 (arguments nil (list (arg &a:6 None None) (arg &i:6 None None) (arg &j:6 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &i:6 Load)) Store)) (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &j:6 Load)) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &j:6 Load)) Load)) (_starred_content (Subscript (Name &a:6 Load) (_slice_content (Name &i:6 Load)) Load))) Load) None)) nil None None) (FunctionDef &si:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil))) nil))) nil None None) (FunctionDef &mi:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &gh:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_flush Load) nil nil))) nil None None) (FunctionDef &isvalid:0 (arguments nil (list (arg &i:7 None None) (arg &j:7 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Compare (Constant i0 None) (list LtE Lt) (list (Name &i:7 Load) (Name &n:0 Load))) (Compare (Constant i0 None) (list LtE Lt) (list (Name &j:7 Load) (Name &n:0 Load))))))) nil None None) (FunctionDef &bo:0 (arguments nil (list (arg &i:8 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name g_ord Load) (list (_starred_content (Name &i:8 Load))) nil) Sub (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)))) nil None None) (FunctionDef &graph:0 (arguments nil (list (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil) (/seq (For (Name &i:9 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:9 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:9 Store)) (_starred_content (Name &y:9 Store))) Store)) (Call (Name &mi:0 Load) nil nil) None) (Expr (Call (Attribute (Subscript (Name &a:0 Load) (_slice_content (Name &x:9 Load)) Load) s_append Load) (list (_starred_content (Name &y:9 Load))) nil)) (Expr (Call (Attribute (Subscript (Name &a:0 Load) (_slice_content (Name &y:9 Load)) Load) s_append Load) (list (_starred_content (Name &x:9 Load))) nil))) (/seq) None)) nil None None) (Assign (list (Name &t:0 Store)) (Call (Name &fi:0 Load) nil nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name &mi:0 Load) nil nil) None) (AugAssign (Name &n:0 Store) Add (Constant i1 None)) (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))))))) (/seq))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwMCwgMTAxLCAxMDIsIDMyLCAxMjAsIDExMSwgMTE0LCA0MCwgMTIwLCA0NCwgMTIxLCA0NCwgMTIyLCA0MSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTE0LCAxMDEsIDExNSwgMzIsIDYxLCAzMiwgNDgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAyLCAxMTEsIDExNCwgMzIsIDEwNSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDUxLCA0OSwgNDQsIDQ1LCA0OSwgNDQsIDQ1LCA0OSwgNDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA5OCwgNDksIDMyLCA2MSwgMzIsIDEyMCwgMzgsIDQwLCA0OSwgMzIsIDYwLCA2MCwgMzIsIDEwNSwgNDEsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDk4LCA1MCwgMzIsIDYxLCAzMiwgMTIxLCAzOCwgNDAsIDQ5LCAzMiwgNjAsIDYwLCAzMiwgMTA1LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDUxLCAzMiwgNjEsIDMyLCAxMjIsIDM4LCA0MCwgNDksIDMyLCA2MCwgNjAsIDMyLCAxMDUsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA5OCwgNDksIDMyLCA2MSwgMzIsIDEwOSwgMTA1LCAxMTAsIDQwLCA5OCwgNDksIDMyLCA0NCwgMzIsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDUwLCAzMiwgNjEsIDMyLCAxMDksIDEwNSwgMTEwLCA0MCwgOTgsIDUwLCAzMiwgNDQsIDMyLCA0OSwgNDEsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDk4LCA1MSwgMzIsIDYxLCAzMiwgMTA5LCAxMDUsIDExMCwgNDAsIDk4LCA1MCwgMzIsIDQ0LCAzMiwgNDksIDQxLCAxMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTIwLCAxMTEsIDExNCwgNjYsIDEwNSwgMTE2LCAzMiwgNjEsIDMyLCA0OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTA1LCAxMDIsIDQwLCA5OCwgNDksIDM4LCA5OCwgNTAsIDM4LCA5OCwgNTEsIDQxLCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDEyMCwgMTExLCAxMTQsIDY2LCAxMDUsIDExNiwgMzIsIDYxLCAzMiwgNDgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDEwMSwgMTA4LCAxMTUsIDEwMSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMjAsIDExMSwgMTE0LCA2NiwgMTA1LCAxMTYsIDMyLCA2MSwgMzIsIDQwLCA5OCwgNDksIDEyNCwgOTgsIDUwLCAxMjQsIDk4LCA1MSwgNDEsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTQsIDEwMSwgMTE1LCAzMiwgNjAsIDYwLCA2MSwgMzIsIDQ5LCA1OSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTE0LCAxMDEsIDExNSwgMzIsIDEyNCwgNjEsIDEyMCwgMTExLCAxMTQsIDY2LCAxMDUsIDExNiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMTQsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAzMiwgMTE0LCAxMDEsIDExNSwgMTAsIDEwLCAxMTYsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMTYsIDQxLCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMjAsIDQ0LCAxMjEsIDQ0LCAxMjIsIDYxLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCA0MCwgMTIyLCA2MSwgNjEsIDQ4LCA0MSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTIwLCAxMTEsIDExNCwgNDAsIDEyMCwgNDQsIDEyMiwgNDQsIDEyMSwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwMSwgMTA4LCAxMTUsIDEwMSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTIwLCAxMTEsIDExNCwgNDAsIDEyMCwgNDQsIDEyMSwgNDQsIDEyMiwgNDEsIDQxLCAxMF0= None)) (Expr (Constant s-WzExNiwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDExNiwgNDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCA5NywgNjEsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTA5LCAxMDUsIDExMCwgNDAsIDk3LCA0MSwgNDQsIDEwOSwgOTcsIDEyMCwgNDAsIDk3LCA0MSwgNDEsIDEwXQ== None)) (ImportFrom s_operator (list (alias &xor:0 None)) i0) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &f:0 Store)) (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &f:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i3 None))) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &input_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &output_list:0 (arguments nil (list (arg &v:1 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_str Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Name &v:1 Load) nil i0))))) nil))) nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &t:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &n:2 Store))) Store)) (Call (Name &input_ints:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (BinOp (Name &a:2 Load) BitXor (Name &b:2 Load)))) Load) (_slice_content (BinOp (Name &n:2 Load) Mod (Constant i3 None))) Load))) nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &XORinacci:0 (arguments nil (list (arg &s0:1 None None) (arg &s1:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Lt) (list (Constant i1 None))) (/seq (Return (Name &s0:1 Load))) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Name &s1:1 Load))) (/seq (Return (BinOp (Call (Name &XORinacci:0 Load) (list (_starred_content (Name &s0:1 Load)) (_starred_content (Name &s1:1 Load)) (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil) BitXor (Call (Name &XORinacci:0 Load) (list (_starred_content (Name &s0:1 Load)) (_starred_content (Name &s1:1 Load)) (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i2 None)))) nil)))))))) nil None None) (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &ins:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil) (/seq (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Name &ins:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &XORinacci:0 Load) (list (_starred_content (Subscript (Subscript (Name &ins:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Subscript (Name &ins:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (BinOp (Subscript (Subscript (Name &ins:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i2 None)) Load) Mod (Constant i3 None)))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (fn_1 (Name &x:0 Load) &num:0 &b:0 &a:0 &ans:0 (Assign (list (Name &x:0 Store)) (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)) None)) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &it:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i3 None)) None) (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Store)) (Name &a:0 Load) None) (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Store)) (Name &b:0 Load) None) (Assign (list (Subscript (Name &A:0 Load) (_slice_content (Constant i2 None)) Store)) (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) BitXor (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i3 None))) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (fn_1 (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)) &n:0 &b:0 &a:0 &k:0 /nothing) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &T:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &tc:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &T:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i3 None)) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)))) nil))) (/seq))))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (List (list (_starred_content (Name &a:0 Load))) Load) None) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Name &b:0 Load))) nil)) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Constant i3 None))) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &res:0 Store)) (Dict (list (Constant i0 None) (Constant i1 None) (Constant i2 None)) (list (BinOp (Name &a:0 Load) BitXor (Name &b:0 Load)) (Name &a:0 Load) (Name &b:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &res:0 Load) (_slice_content (BinOp (BinOp (Name &n:0 Load) Add (Constant i1 None)) Mod (Constant i3 None))) Load))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_pi None) (alias g_cos None)) i0)\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &theta:0 Store)) (BinOp (Name g_pi Load) Div (Constant i4 None)) None)\n        (Assign (list (Name &delta:0 Store)) (BinOp (Name g_pi Load) Div (Name &n:0 Load)) None)\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &maxi:0 Store))\n                (_starred_content (Name &mini:0 Store))\n                (_starred_content (Name &x:0 Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content (Constant i0 None))\n              (_starred_content (Constant i0 None))\n            )\n            Load\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content (BinOp (Constant i2 None) Mult (Name &n:0 Load)))\n            )\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &x:0 Store)\n              Add\n              (Call (Name g_cos Load) (list (_starred_content (Name &theta:0 Load))) nil)\n            )\n            (AugAssign (Name &theta:0 Store) Sub (Name &delta:0 Load))\n            (Assign\n              (list (Name &maxi:0 Store))\n              (Call\n                (Name g_max Load)\n                (list (_starred_content (Name &maxi:0 Load)) (_starred_content (Name &x:0 Load)))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &mini:0 Store))\n              (Call\n                (Name g_min Load)\n                (list (_starred_content (Name &mini:0 Load)) (_starred_content (Name &x:0 Load)))\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &maxi:0 Load) Sub (Name &mini:0 Load)))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Constant s-WzEwLCAxMCwgNTEsIDEwLCA1MSwgMTAsIDUzLCAxMCwgNDksIDU3LCA1NywgMTAsIDEwLCAxMF0= None))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name g_math Load) s_cos Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Name g_math Load) s_radians Load)\n                          (list (_starred_content (BinOp (Constant i45 None) Div (Name &n:0 Load))))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Div\n                  (Call\n                    (Attribute (Name g_math Load) s_sin Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Attribute (Name g_math Load) s_radians Load)\n                          (list (_starred_content (BinOp (Constant i90 None) Div (Name &n:0 Load))))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (For\n      (Name &ad:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (AugAssign (Name &n:0 Store) Mult (Constant i2 None))\n        (Assign (list (Name &t:0 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Div (Name &n:0 Load)) None)\n        (Assign\n          (list (Name &x:0 Store))\n          (BinOp\n            (Call\n              (Attribute (Name g_math Load) s_cos Load)\n              (list (_starred_content (BinOp (Name &t:0 Load) Div (Constant i2 None))))\n              nil\n            )\n            Div\n            (BinOp\n              (Constant i2 None)\n              Mult\n              (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &t:0 Load))) nil)\n            )\n          )\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &x:0 Load)))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &t:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &pi:0 Store)) (Attribute (Name g_math Load) s_pi Load) None)\n        (Assign (list (Name &theta:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Constant i2 None) Mult (Name &theta:0 Load)) (list Lt) (list (Name &pi:0 Load)))\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (Name &theta:0 Load))) nil)\n            )\n            (AugAssign (Name &theta:0 Store) Add (BinOp (Name &pi:0 Load) Div (Name &n:0 Load)))\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &k:0 Store))\n          (BinOp (BinOp (Constant i2 None) Mult (Name &ans:0 Load)) Sub (Constant i1 None))\n          None\n        )\n        (Assign (list (Name &theta:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Constant i4 None) Mult (Name &theta:0 Load)) (list Lt) (list (Name &pi:0 Load)))\n          (/seq (AugAssign (Name &theta:0 Store) Add (BinOp (Name &pi:0 Load) Div (Name &n:0 Load))))\n          (/seq)\n        )\n        (If\n          (Compare\n            (Call\n              (Name g_abs Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp (Name &theta:0 Load) Sub (BinOp (Name &pi:0 Load) Div (Name &n:0 Load)))\n                    Sub\n                    (BinOp (Name &pi:0 Load) Div (Constant i4 None))\n                  )\n                )\n              )\n              nil\n            )\n            (list Lt)\n            (list\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content (BinOp (Name &theta:0 Load) Sub (BinOp (Name &pi:0 Load) Div (Constant i4 None))))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (AugAssign (Name &theta:0 Store) Sub (BinOp (Name &pi:0 Load) Div (Name &n:0 Load))))\n          (/seq)\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (Name &k:0 Load)\n                Mult\n                (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &theta:0 Load))) nil)\n              )\n              Div\n              (Call\n                (Attribute (Name g_math Load) s_sin Load)\n                (list (_starred_content (BinOp (Name &pi:0 Load) Div (Constant i4 None))))\n                nil\n              )\n            )\n            Add\n            (BinOp\n              (BinOp\n                (Name &k:0 Load)\n                Mult\n                (Call\n                  (Attribute (Name g_math Load) s_sin Load)\n                  (list\n                    (_starred_content (BinOp (BinOp (Name &pi:0 Load) Div (Constant i2 None)) Sub (Name &theta:0 Load)))\n                  )\n                  nil\n                )\n              )\n              Div\n              (Call\n                (Attribute (Name g_math Load) s_sin Load)\n                (list (_starred_content (BinOp (Name &pi:0 Load) Div (Constant i4 None))))\n                nil\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Div (Constant i2 None)))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &m:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (BinOp (Constant i2 None) Mult (Name &m:0 Load)) None)\n        (Assign\n          (list (Name &value:0 Store))\n          (BinOp\n            (Constant f0.5 None)\n            Div\n            (Call\n              (Attribute (Name g_math Load) s_sin Load)\n              (list\n                (_starred_content\n                  (BinOp (Attribute (Name g_math Load) s_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load)))\n                )\n              )\n              nil\n            )\n          )\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &value:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &rad:0\n      (arguments nil (list (arg &angle:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp (BinOp (Name &angle:1 Load) Div (Constant i180 None)) Mult (Attribute (Name g_math Load) s_pi Load))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &dist:0\n      (arguments\n        nil\n        (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (Call\n            (Attribute (Name g_math Load) s_sqrt Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &a:2 Load) Sub (Name &c:2 Load))\n                    Mult\n                    (BinOp (Name &a:2 Load) Sub (Name &c:2 Load))\n                  )\n                  Add\n                  (BinOp\n                    (BinOp (Name &b:2 Load) Sub (Name &d:2 Load))\n                    Mult\n                    (BinOp (Name &b:2 Load) Sub (Name &d:2 Load))\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &tt:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &tt:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &tt:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &angle:0 Store))\n          (Call\n            (Name &rad:0 Load)\n            (list (_starred_content (BinOp (Constant i360 None) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load)))))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &l1:0 Store)) (_starred_content (Name &l2:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))\n              (_starred_content (BinOp (Name &n:0 Load) Sub (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &px:0 Store)) (_starred_content (Name &py:0 Store))) Store))\n          (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &vx:0 Store)) (_starred_content (Name &vy:0 Store))) Store))\n          (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &cur:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (AugAssign (Name &px:0 Store) Add (Name &vx:0 Load))\n            (AugAssign (Name &py:0 Store) Add (Name &vy:0 Load))\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &i:0 Load) (list Eq) (list (Name &l1:0 Load)))\n                  (Compare (Name &i:0 Load) (list Eq) (list (Name &l2:0 Load)))\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Call\n                    (Name &dist:0 Load)\n                    (list\n                      (_starred_content (Constant i0 None))\n                      (_starred_content (Constant i0 None))\n                      (_starred_content (Name &px:0 Load))\n                      (_starred_content (Name &py:0 Load))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n            (AugAssign (Name &cur:0 Store) Add (Name &angle:0 Load))\n            (Assign\n              (list (Name &vx:0 Store))\n              (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (Name &cur:0 Load))) nil)\n              None\n            )\n            (Assign\n              (list (Name &vy:0 Store))\n              (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &cur:0 Load))) nil)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Name &ans:0 Load)\n                  Div\n                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Constant i2 None))) nil)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &a:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Name g_math Load) s_cos Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Attribute (Name g_math Load) s_pi Load)\n                          Div\n                          (BinOp (Constant i4 None) Mult (Name &n:0 Load))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Div\n                  (Call\n                    (Attribute (Name g_math Load) s_sin Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Attribute (Name g_math Load) s_pi Load)\n                          Div\n                          (BinOp (Constant i2 None) Mult (Name &n:0 Load))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_cos None) (alias g_pi None) (alias g_sin None)) i0)\n    (FunctionDef\n      &ntvdm:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &t:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &t:1 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &n:1 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_cos Load)\n                        (list\n                          (_starred_content\n                            (BinOp (BinOp (Name g_pi Load) Div (Constant i4 None)) Div (Name &n:1 Load))\n                          )\n                        )\n                        nil\n                      )\n                      Div\n                      (Call\n                        (Name g_sin Load)\n                        (list\n                          (_starred_content\n                            (BinOp (BinOp (Name g_pi Load) Div (Constant i2 None)) Div (Name &n:1 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &ntvdm:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s___future__ (list (alias g_division None) (alias g_print_function None)) i0)\n    (Import (list (alias g_sys None)))\n    (If\n      (Compare\n        (Subscript (Attribute (Name &sys:0 Load) s_version_info Load) (_slice_content (Constant i0 None)) Load)\n        (list Lt)\n        (list (Constant i3 None))\n      )\n      (/seq\n        (ImportFrom s___builtin__ (list (alias s_xrange &range:0)) i0)\n        (ImportFrom\n          s_future_builtins\n          (list\n            (alias &ascii:0 None)\n            (alias &filter:0 None)\n            (alias &hex:0 None)\n            (alias &map:0 None)\n            (alias &oct:0 None)\n            (alias &zip:0 None)\n          )\n          i0\n        )\n      )\n      (/seq)\n    )\n    (Import (list (alias &os:0 None) (alias &sys:0 None) (alias &bisect:0 None) (alias &copy:0 None)))\n    (ImportFrom s_collections (list (alias &defaultdict:0 None) (alias &Counter:0 None) (alias &deque:0 None)) i0)\n    (If\n      (Call\n        (Attribute (Attribute (Name &os:0 Load) s_path Load) s_exists Load)\n        (list (_starred_content (Constant s_in.txt None)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Attribute (Name &sys:0 Load) s_stdin Store))\n          (Call\n            (Name g_open Load)\n            (list (_starred_content (Constant s_in.txt None)) (_starred_content (Constant s_r None)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (If\n      (Call\n        (Attribute (Attribute (Name &os:0 Load) s_path Load) s_exists Load)\n        (list (_starred_content (Constant s_out.txt None)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Attribute (Name &sys:0 Load) s_stdout Store))\n          (Call\n            (Name g_open Load)\n            (list (_starred_content (Constant s_out.txt None)) (_starred_content (Constant s_w None)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mapi:0\n      (arguments nil (list (arg &arg:1 None None)) None nil nil None (list (Constant i0 None)))\n      (/seq\n        (Return\n          (Call\n            (Name &map:0 Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare (Name &arg:1 Load) (list Eq) (list (Constant i0 None)))\n                  (Name g_int Load)\n                  (Name g_str Load)\n                )\n              )\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ImportFrom s_math (list (alias &*:0 None)) i0)\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name &range:0 Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &l:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &r:0 Store))\n          (BinOp (Name g_pi Load) Div (BinOp (Constant i4 None) Mult (Name &n:0 Load)))\n          None\n        )\n        (Assign\n          (list (Name &res:0 Store))\n          (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n          None\n        )\n        (While\n          (Compare (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) (list Gt) (list (Constant f1e-09 None)))\n          (/seq\n            (Assign\n              (list (Name &mid1:0 Store))\n              (BinOp (Name &l:0 Load) Add (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Div (Constant i3 None)))\n              None\n            )\n            (Assign\n              (list (Name &mid2:0 Store))\n              (BinOp\n                (Name &mid1:0 Load)\n                Add\n                (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Div (Constant i3 None))\n              )\n              None\n            )\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp\n                (Call (Name g_cos Load) (list (_starred_content (Name &mid1:0 Load))) nil)\n                Div\n                (Call\n                  (Name g_sin Load)\n                  (list\n                    (_starred_content (BinOp (Name g_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &b:0 Store))\n              (BinOp\n                (Call (Name g_cos Load) (list (_starred_content (Name &mid2:0 Load))) nil)\n                Div\n                (Call\n                  (Name g_sin Load)\n                  (list\n                    (_starred_content (BinOp (Name g_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &res:0 Store))\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &res:0 Load))\n                  (_starred_content (Name &a:0 Load))\n                  (_starred_content (Name &b:0 Load))\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &a:0 Load) (list Lt) (list (Name &b:0 Load)))\n              (/seq (Assign (list (Name &r:0 Store)) (Name &mid2:0 Load) None))\n              (/seq (Assign (list (Name &l:0 Store)) (Name &mid1:0 Load) None))\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Import (list (alias s_math &m:0)))\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &p1:0 Store))\n          (BinOp\n            (BinOp (Constant i180 None) Div (Name &n:0 Load))\n            Mult\n            (BinOp (BinOp (Name &n:0 Load) Add (Constant i1 None)) FloorDiv (Constant i4 None))\n          )\n          None\n        )\n        (Assign\n          (list (Name &p:0 Store))\n          (BinOp\n            (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (Attribute (Name &m:0 Load) s_pi Load))\n            Div\n            (BinOp (Name &n:0 Load) Mult (Constant i2 None))\n          )\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (BinOp\n            (Call (Attribute (Name &m:0 Load) s_sin Load) (list (_starred_content (Name &p:0 Load))) nil)\n            Div\n            (Call\n              (Attribute (Name &m:0 Load) s_sin Load)\n              (list (_starred_content (BinOp (Constant i2 None) Mult (Name &p:0 Load))))\n              nil\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Constant i2 None) Pow (Constant f0.5 None))\n                  Mult\n                  (BinOp\n                    (BinOp (BinOp (Constant i2 None) Pow (Constant f0.5 None)) Mult (Name &x:0 Load))\n                    Mult\n                    (Call\n                      (Attribute (Name &m:0 Load) s_sin Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (BinOp\n                              (BinOp (Constant i135 None) Sub (Name &p1:0 Load))\n                              Mult\n                              (Attribute (Name &m:0 Load) s_pi Load)\n                            )\n                            Div\n                            (Constant i180 None)\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (ImportFrom s_math (list (alias g_pi None) (alias g_cos None)) i0) (fn_1 &t:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &t:0 Load))) nil) (/seq (fn_1 &n:0) (Assign (list (Name &theta:0 Store)) (BinOp (Name g_pi Load) Div (Constant i4 None)) None) (Assign (list (Name &delta:0 Store)) (BinOp (Name g_pi Load) Div (Name &n:0 Load)) None) (Assign (list (Tuple (list (_starred_content (Name &maxi:0 Store)) (_starred_content (Name &mini:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Constant i2 None) Mult (Name &n:0 Load)))) nil) (/seq (AugAssign (Name &x:0 Store) Add (Call (Name g_cos Load) (list (_starred_content (Name &theta:0 Load))) nil)) (AugAssign (Name &theta:0 Store) Sub (Name &delta:0 Load)) (Assign (list (Name &maxi:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &maxi:0 Load)) (_starred_content (Name &x:0 Load))) nil) None) (Assign (list (Name &mini:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &mini:0 Load)) (_starred_content (Name &x:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &maxi:0 Load) Sub (Name &mini:0 Load)))) nil))) (/seq) None) (Expr (Constant s-WzEwLCAxMCwgNTEsIDEwLCA1MSwgMTAsIDUzLCAxMCwgNDksIDU3LCA1NywgMTAsIDEwLCAxMF0= None))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &t:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (fn_1 &n:0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_radians Load) (list (_starred_content (BinOp (Constant i45 None) Div (Name &n:0 Load)))) nil))) nil) Div (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_radians Load) (list (_starred_content (BinOp (Constant i90 None) Div (Name &n:0 Load)))) nil))) nil)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &ad:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &n:0) (AugAssign (Name &n:0 Store) Mult (Constant i2 None)) (Assign (list (Name &t:0 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Div (Name &n:0 Load)) None) (Assign (list (Name &x:0 Store)) (BinOp (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (BinOp (Name &t:0 Load) Div (Constant i2 None)))) nil) Div (BinOp (Constant i2 None) Mult (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &t:0 Load))) nil))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &x:0 Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil) None) (Assign (list (Name &pi:0 Store)) (Attribute (Name g_math Load) s_pi Load) None) (Assign (list (Name &theta:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Constant i2 None) Mult (Name &theta:0 Load)) (list Lt) (list (Name &pi:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (Name &theta:0 Load))) nil)) (AugAssign (Name &theta:0 Store) Add (BinOp (Name &pi:0 Load) Div (Name &n:0 Load)))) (/seq)) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Constant i2 None) Mult (Name &ans:0 Load)) Sub (Constant i1 None)) None) (Assign (list (Name &theta:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Constant i4 None) Mult (Name &theta:0 Load)) (list Lt) (list (Name &pi:0 Load))) (/seq (AugAssign (Name &theta:0 Store) Add (BinOp (Name &pi:0 Load) Div (Name &n:0 Load)))) (/seq)) (If (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Name &theta:0 Load) Sub (BinOp (Name &pi:0 Load) Div (Name &n:0 Load))) Sub (BinOp (Name &pi:0 Load) Div (Constant i4 None))))) nil) (list Lt) (list (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &theta:0 Load) Sub (BinOp (Name &pi:0 Load) Div (Constant i4 None))))) nil))) (/seq (AugAssign (Name &theta:0 Store) Sub (BinOp (Name &pi:0 Load) Div (Name &n:0 Load)))) (/seq)) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (BinOp (Name &k:0 Load) Mult (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &theta:0 Load))) nil)) Div (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (BinOp (Name &pi:0 Load) Div (Constant i4 None)))) nil)) Add (BinOp (BinOp (Name &k:0 Load) Mult (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (BinOp (BinOp (Name &pi:0 Load) Div (Constant i2 None)) Sub (Name &theta:0 Load)))) nil)) Div (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (BinOp (Name &pi:0 Load) Div (Constant i4 None)))) nil))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Div (Constant i2 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &m:0) (Assign (list (Name &n:0 Store)) (BinOp (Constant i2 None) Mult (Name &m:0 Load)) None) (Assign (list (Name &value:0 Store)) (BinOp (Constant f0.5 None) Div (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (BinOp (Attribute (Name g_math Load) s_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &value:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &rad:0 (arguments nil (list (arg &angle:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &angle:1 Load) Div (Constant i180 None)) Mult (Attribute (Name g_math Load) s_pi Load)))) nil None None) (FunctionDef &dist:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:2 Load) Sub (Name &c:2 Load)) Mult (BinOp (Name &a:2 Load) Sub (Name &c:2 Load))) Add (BinOp (BinOp (Name &b:2 Load) Sub (Name &d:2 Load)) Mult (BinOp (Name &b:2 Load) Sub (Name &d:2 Load)))))) nil))) nil None None) (fn_1 &tt:0) (While (Compare (Name &tt:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &tt:0 Store) Sub (Constant i1 None)) (fn_1 &n:0) (Assign (list (Name &angle:0 Store)) (Call (Name &rad:0 Load) (list (_starred_content (BinOp (Constant i360 None) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &l1:0 Store)) (_starred_content (Name &l2:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) (_starred_content (BinOp (Name &n:0 Load) Sub (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &px:0 Store)) (_starred_content (Name &py:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &vx:0 Store)) (_starred_content (Name &vy:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &cur:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &px:0 Store) Add (Name &vx:0 Load)) (AugAssign (Name &py:0 Store) Add (Name &vy:0 Load)) (If (BoolOp Or (list (Compare (Name &i:0 Load) (list Eq) (list (Name &l1:0 Load))) (Compare (Name &i:0 Load) (list Eq) (list (Name &l2:0 Load))))) (/seq (AugAssign (Name &ans:0 Store) Add (Call (Name &dist:0 Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) nil))) (/seq)) (AugAssign (Name &cur:0 Store) Add (Name &angle:0 Load)) (Assign (list (Name &vx:0 Store)) (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (Name &cur:0 Load))) nil) None) (Assign (list (Name &vy:0 Store)) (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &cur:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Constant i2 None))) nil)))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &a:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &a:0 Load))) nil) (/seq (fn_1 &n:0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_cos Load) (list (_starred_content (BinOp (Attribute (Name g_math Load) s_pi Load) Div (BinOp (Constant i4 None) Mult (Name &n:0 Load))))) nil) Div (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (BinOp (Attribute (Name g_math Load) s_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))) nil)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_cos None) (alias g_pi None) (alias g_sin None)) i0) (FunctionDef &ntvdm:0 (arguments nil nil None nil nil None nil) (/seq (fn_1 &t:1) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:1 Load))) nil) (/seq (fn_1 &n:1) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_cos Load) (list (_starred_content (BinOp (BinOp (Name g_pi Load) Div (Constant i4 None)) Div (Name &n:1 Load)))) nil) Div (Call (Name g_sin Load) (list (_starred_content (BinOp (BinOp (Name g_pi Load) Div (Constant i2 None)) Div (Name &n:1 Load)))) nil)))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &ntvdm:0 Load) nil nil))) nil)",
      "(Module (/seq (ImportFrom s___future__ (list (alias g_division None) (alias g_print_function None)) i0) (Import (list (alias g_sys None))) (If (Compare (Subscript (Attribute (Name &sys:0 Load) s_version_info Load) (_slice_content (Constant i0 None)) Load) (list Lt) (list (Constant i3 None))) (/seq (ImportFrom s___builtin__ (list (alias s_xrange &range:0)) i0) (ImportFrom s_future_builtins (list (alias &ascii:0 None) (alias &filter:0 None) (alias &hex:0 None) (alias &map:0 None) (alias &oct:0 None) (alias &zip:0 None)) i0)) (/seq)) (Import (list (alias &os:0 None) (alias &sys:0 None) (alias &bisect:0 None) (alias &copy:0 None))) (ImportFrom s_collections (list (alias &defaultdict:0 None) (alias &Counter:0 None) (alias &deque:0 None)) i0) (If (Call (Attribute (Attribute (Name &os:0 Load) s_path Load) s_exists Load) (list (_starred_content (Constant s_in.txt None))) nil) (/seq (Assign (list (Attribute (Name &sys:0 Load) s_stdin Store)) (Call (Name g_open Load) (list (_starred_content (Constant s_in.txt None)) (_starred_content (Constant s_r None))) nil) None)) (/seq)) (If (Call (Attribute (Attribute (Name &os:0 Load) s_path Load) s_exists Load) (list (_starred_content (Constant s_out.txt None))) nil) (/seq (Assign (list (Attribute (Name &sys:0 Load) s_stdout Store)) (Call (Name g_open Load) (list (_starred_content (Constant s_out.txt None)) (_starred_content (Constant s_w None))) nil) None)) (/seq)) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil))) nil None None) (FunctionDef &mapi:0 (arguments nil (list (arg &arg:1 None None)) None nil nil None (list (Constant i0 None))) (/seq (Return (Call (Name &map:0 Load) (list (_starred_content (IfExp (Compare (Name &arg:1 Load) (list Eq) (list (Constant i0 None))) (Name g_int Load) (Name g_str Load))) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (ImportFrom s_math (list (alias &*:0 None)) i0) (For (Name &_:0 Store) (Call (Name &range:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (Constant i0 None) None) (Assign (list (Name &r:0 Store)) (BinOp (Name g_pi Load) Div (BinOp (Constant i4 None) Mult (Name &n:0 Load))) None) (Assign (list (Name &res:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (While (Compare (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) (list Gt) (list (Constant f1e-09 None))) (/seq (Assign (list (Name &mid1:0 Store)) (BinOp (Name &l:0 Load) Add (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Div (Constant i3 None))) None) (Assign (list (Name &mid2:0 Store)) (BinOp (Name &mid1:0 Load) Add (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Div (Constant i3 None))) None) (Assign (list (Name &a:0 Store)) (BinOp (Call (Name g_cos Load) (list (_starred_content (Name &mid1:0 Load))) nil) Div (Call (Name g_sin Load) (list (_starred_content (BinOp (Name g_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))) nil)) None) (Assign (list (Name &b:0 Store)) (BinOp (Call (Name g_cos Load) (list (_starred_content (Name &mid2:0 Load))) nil) Div (Call (Name g_sin Load) (list (_starred_content (BinOp (Name g_pi Load) Div (BinOp (Constant i2 None) Mult (Name &n:0 Load))))) nil)) None) (Assign (list (Name &res:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &res:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil) None) (If (Compare (Name &a:0 Load) (list Lt) (list (Name &b:0 Load))) (/seq (Assign (list (Name &r:0 Store)) (Name &mid2:0 Load) None)) (/seq (Assign (list (Name &l:0 Store)) (Name &mid1:0 Load) None)))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &t:0) (Import (list (alias s_math &m:0))) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (fn_1 &n:0) (Assign (list (Name &p1:0 Store)) (BinOp (BinOp (Constant i180 None) Div (Name &n:0 Load)) Mult (BinOp (BinOp (Name &n:0 Load) Add (Constant i1 None)) FloorDiv (Constant i4 None))) None) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (Attribute (Name &m:0 Load) s_pi Load)) Div (BinOp (Name &n:0 Load) Mult (Constant i2 None))) None) (Assign (list (Name &x:0 Store)) (BinOp (Call (Attribute (Name &m:0 Load) s_sin Load) (list (_starred_content (Name &p:0 Load))) nil) Div (Call (Attribute (Name &m:0 Load) s_sin Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &p:0 Load)))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant i2 None) Pow (Constant f0.5 None)) Mult (BinOp (BinOp (BinOp (Constant i2 None) Pow (Constant f0.5 None)) Mult (Name &x:0 Load)) Mult (Call (Attribute (Name &m:0 Load) s_sin Load) (list (_starred_content (BinOp (BinOp (BinOp (Constant i135 None) Sub (Name &p1:0 Load)) Mult (Attribute (Name &m:0 Load) s_pi Load)) Div (Constant i180 None)))) nil))))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list NotEq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n              (/seq\n                (Assign (list (Name &threes:0 Store)) (Constant i0 None) None)\n                (Assign (list (Name &twos:0 Store)) (Constant i0 None) None)\n                (While\n                  (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign (Name &threes:0 Store) Add (Constant i1 None))\n                    (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i3 None)) None)\n                  )\n                  (/seq)\n                )\n                (While\n                  (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign (Name &twos:0 Store) Add (Constant i1 None))\n                    (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n                  )\n                  (/seq)\n                )\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare (Name &n:0 Load) (list NotEq) (list (Constant i1 None)))\n                      (Compare (Name &twos:0 Load) (list Gt) (list (Name &threes:0 Load)))\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (_starred_content\n                            (BinOp (BinOp (Constant i2 None) Mult (Name &threes:0 Load)) Sub (Name &twos:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &k2:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &k3:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &n:1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:1 Store) FloorDiv (Constant i2 None))\n            (AugAssign (Name &k2:1 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (While\n          (Compare (BinOp (Name &n:1 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:1 Store) FloorDiv (Constant i3 None))\n            (AugAssign (Name &k3:1 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &k2:1 Load) (list Gt) (list (Name &k3:1 Load)))\n              (Compare (Name &n:1 Load) (list NotEq) (list (Constant i1 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (BinOp (BinOp (Name &k3:1 Load) Mult (Constant i2 None)) Sub (Name &k2:1 Load)))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq (Expr (Call (Name &f:0 Load) nil nil)))\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &mulTwoDivSix:0\n      (arguments nil (list (arg &num:1 (Name g_int Load) None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &cont:1 Store)) (Constant True None) None)\n        (Assign (list (Name &count:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &cont:1 Load)\n          (/seq\n            (If\n              (Compare (Name &num:1 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Assign (list (Name &cont:1 Store)) (Constant False None) None))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &num:1 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq (Assign (list (Name &num:1 Store)) (BinOp (Name &num:1 Load) FloorDiv (Constant i6 None)) None))\n                  (/seq\n                    (If\n                      (BoolOp\n                        And\n                        (list\n                          (BoolOp\n                            Or\n                            (list\n                              (Compare\n                                (BinOp (Name &num:1 Load) Mod (Constant i1 None))\n                                (list Eq)\n                                (list (Constant i0 None))\n                              )\n                              (Compare\n                                (BinOp (Constant i2 None) Mod (BinOp (Name &num:1 Load) Mod (Constant i1 None)))\n                                (list Eq)\n                                (list (Constant i0 None))\n                              )\n                            )\n                          )\n                          (Compare\n                            (BinOp (Name &num:1 Load) Mod (Constant i3 None))\n                            (list Eq)\n                            (list (Constant i0 None))\n                          )\n                        )\n                      )\n                      (/seq (AugAssign (Name &num:1 Store) Mult (Constant i2 None)))\n                      (/seq (Assign (list (Name &cont:1 Store)) (Constant False None) None))\n                    )\n                  )\n                )\n                (AugAssign (Name &count:1 Store) Add (Constant i1 None))\n              )\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &num:1 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:1 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n        (Return None)\n      )\n      nil\n      (Constant None None)\n      None\n    )\n    (Assign\n      (list (Name &test_cases:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &test_cases:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &num:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Expr (Call (Name &mulTwoDivSix:0 Load) (list (_starred_content (Name &num:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_0 None))) nil)))\n          (/seq\n            (While\n              (Compare (Name &n:0 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare\n                        (BinOp (BinOp (Name &n:0 Load) Mult (Constant i2 None)) Mod (Constant i6 None))\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None)))\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (AugAssign (Name &n:0 Store) Div (Constant i6 None))\n                        (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n                        (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n                      )\n                      (/seq\n                        (If\n                          (Compare\n                            (BinOp (BinOp (Name &n:0 Load) Mult (Constant i2 None)) Mod (Constant i6 None))\n                            (list Eq)\n                            (list (Constant i0 None))\n                          )\n                          (/seq\n                            (AugAssign (Name &n:0 Store) Mult (Constant i2 None))\n                            (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n                            (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n                          )\n                          (/seq)\n                        )\n                      )\n                    )\n                  )\n                  (/seq Break)\n                )\n              )\n              (/seq)\n            )\n            (If\n              (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &cnt2:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &cnt3:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:0 Store) Div (Constant i2 None))\n            (AugAssign (Name &cnt2:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (While\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:0 Store) Div (Constant i3 None))\n            (AugAssign (Name &cnt3:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n              (Compare (Name &cnt3:0 Load) (list GtE) (list (Name &cnt2:0 Load)))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name &cnt3:0 Load)) Sub (Name &cnt2:0 Load)))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &move:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i6 None)) None)\n                (AugAssign (Name &move:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i3 None)) None)\n                (AugAssign (Name &move:0 Store) Add (Constant i2 None))\n              )\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &move:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &s:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &add:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n        (While\n          (Constant True None)\n          (/seq\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant i6 None) None) Break)\n              (/seq)\n            )\n            (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i3 None)) None)\n            (If\n              (Compare (Name &q:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break)\n              (/seq)\n            )\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i3 None)) None)\n            (AugAssign (Name &add:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Assign (list (Name &plus:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (If\n                  (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n                  (/seq (Assign (list (Name &flag:0 Store)) (Constant i6 None) None) Break)\n                  (/seq)\n                )\n                (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i2 None)) None)\n                (If\n                  (Compare (Name &q:0 Load) (list NotEq) (list (Constant i0 None)))\n                  (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break)\n                  (/seq)\n                )\n                (AugAssign (Name &plus:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n              )\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None))\n            )\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &flag:0 Load) (list Eq) (list (Constant i6 None)))\n              (Compare (Name &add:0 Load) (list GtE) (list (Name &plus:0 Load)))\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &sol:0 Store))\n              (BinOp\n                (Name &plus:0 Load)\n                Add\n                (BinOp (BinOp (Name &add:0 Load) Sub (Name &plus:0 Load)) Mult (Constant i2 None))\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &sol:0 Load))) nil))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n        (While\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Add (Constant i1 None)) None)\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n          )\n          (/seq)\n        )\n        (While\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Add (Constant i1 None)) None)\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i3 None)) None)\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &n:0 Load) (list LtE) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Gt) (list (Name &b:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (BinOp (BinOp (Name &b:0 Load) Sub (Name &a:0 Load)) Add (Name &b:0 Load))))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &T:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &T:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &three_f:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &two_f:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq\n            (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n            (While\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &three_f:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i3 None)) None)\n              )\n              (/seq)\n            )\n            (While\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &two_f:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i2 None)) None)\n              )\n              (/seq)\n            )\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &n:0 Load) (list NotEq) (list (Constant i1 None)))\n                  (Compare (Name &three_f:0 Load) (list Lt) (list (Name &two_f:0 Load)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &three_f:0 Load)) Sub (Name &two_f:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &x:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &x:0 Store) Div (Constant i6 None))\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (While\n          (Compare (BinOp (Name &x:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &x:0 Store) Div (Constant i3 None))\n            (AugAssign (Name &cnt:0 Store) Add (Constant i2 None))\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (List\n                    (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Name &cnt:0 Load)))\n                    Load\n                  )\n                  (_slice_content (Compare (Name &x:0 Load) (list Eq) (list (Constant i1 None))))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (While (Compare (BinOp (Name %2 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) (Assign (list (Name %2 Store)) #0 None)) (/seq)) (While (Compare (BinOp (Name %2 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name %3 Store) Add (Constant i1 None)) (Assign (list (Name %2 Store)) #1 None)) (/seq)) (If (BoolOp Or (list (Compare (Name %2 Load) (list NotEq) (list (Constant i1 None))) #2)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name %1 Load)) Sub (Name %3 Load)))) nil)))))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Assign (list (Name &threes:0 Store)) (Constant i0 None) None) (Assign (list (Name &twos:0 Store)) (Constant i0 None) None) (/splice (fn_1 (BinOp (Name &n:0 Load) FloorDiv (Constant i3 None)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) (Compare (Name &twos:0 Load) (list Gt) (list (Name &threes:0 Load))) &threes:0 &n:0 &twos:0))))))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &f:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &k2:1 Store)) (Constant i0 None) None) (Assign (list (Name &k3:1 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &n:1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:1 Store) FloorDiv (Constant i2 None)) (AugAssign (Name &k2:1 Store) Add (Constant i1 None))) (/seq)) (While (Compare (BinOp (Name &n:1 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:1 Store) FloorDiv (Constant i3 None)) (AugAssign (Name &k3:1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp Or (list (Compare (Name &k2:1 Load) (list Gt) (list (Name &k3:1 Load))) (Compare (Name &n:1 Load) (list NotEq) (list (Constant i1 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name &k3:1 Load) Mult (Constant i2 None)) Sub (Name &k2:1 Load)))) nil))))) nil None None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Expr (Call (Name &f:0 Load) nil nil))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &mulTwoDivSix:0 (arguments nil (list (arg &num:1 (Name g_int Load) None)) None nil nil None nil) (/seq (Assign (list (Name &cont:1 Store)) (Constant True None) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (While (Name &cont:1 Load) (/seq (If (Compare (Name &num:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &cont:1 Store)) (Constant False None) None)) (/seq (If (Compare (BinOp (Name &num:1 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &num:1 Store)) (BinOp (Name &num:1 Load) FloorDiv (Constant i6 None)) None)) (/seq (If (BoolOp And (list (BoolOp Or (list (Compare (BinOp (Name &num:1 Load) Mod (Constant i1 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Constant i2 None) Mod (BinOp (Name &num:1 Load) Mod (Constant i1 None))) (list Eq) (list (Constant i0 None))))) (Compare (BinOp (Name &num:1 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))))) (/seq (AugAssign (Name &num:1 Store) Mult (Constant i2 None))) (/seq (Assign (list (Name &cont:1 Store)) (Constant False None) None))))) (AugAssign (Name &count:1 Store) Add (Constant i1 None))))) (/seq)) (If (Compare (Name &num:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:1 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))) (Return None)) nil (Constant None None) None) (Assign (list (Name &test_cases:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &test_cases:0 Load))) nil) (/seq (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name &mulTwoDivSix:0 Load) (list (_starred_content (Name &num:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_0 None))) nil))) (/seq (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (If (BoolOp Or (list (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Constant i2 None)) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:0 Store) Div (Constant i6 None)) (AugAssign (Name &count:0 Store) Add (Constant i1 None)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq (If (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Constant i2 None)) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:0 Store) Mult (Constant i2 None)) (AugAssign (Name &count:0 Store) Add (Constant i1 None)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq))))) (/seq Break))) (/seq)) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cnt2:0 Store)) (Constant i0 None) None) (Assign (list (Name &cnt3:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:0 Store) Div (Constant i2 None)) (AugAssign (Name &cnt2:0 Store) Add (Constant i1 None))) (/seq)) (While (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:0 Store) Div (Constant i3 None)) (AugAssign (Name &cnt3:0 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &cnt3:0 Load) (list GtE) (list (Name &cnt2:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name &cnt3:0 Load)) Sub (Name &cnt2:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &move:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i6 None)) None) (AugAssign (Name &move:0 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i3 None)) None) (AugAssign (Name &move:0 Store) Add (Constant i2 None))))) (/seq)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &move:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &s:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &add:0 Store)) (Constant i0 None) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i6 None) None) Break) (/seq)) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i3 None)) None) (If (Compare (Name &q:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break) (/seq)) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i3 None)) None) (AugAssign (Name &add:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &plus:0 Store)) (Constant i0 None) None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None))) (/seq (While (Constant True None) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i6 None) None) Break) (/seq)) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i2 None)) None) (If (Compare (Name &q:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break) (/seq)) (AugAssign (Name &plus:0 Store) Add (Constant i1 None)) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)))) (/seq)) (If (BoolOp And (list (Compare (Name &flag:0 Load) (list Eq) (list (Constant i6 None))) (Compare (Name &add:0 Load) (list GtE) (list (Name &plus:0 Load))))) (/seq (Assign (list (Name &sol:0 Store)) (BinOp (Name &plus:0 Load) Add (BinOp (BinOp (Name &add:0 Load) Sub (Name &plus:0 Load)) Mult (Constant i2 None))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &sol:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (While (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)) (/seq)) (While (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i3 None)) None)) (/seq)) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i1 None))) (/seq (If (Compare (Name &a:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name &b:0 Load) Sub (Name &a:0 Load)) Add (Name &b:0 Load)))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &T:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &T:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &three_f:0 Store)) (Constant i0 None) None) (Assign (list (Name &two_f:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (/splice (fn_1 (BinOp (Name &n:0 Load) Div (Constant i3 None)) (BinOp (Name &n:0 Load) Div (Constant i2 None)) (Compare (Name &three_f:0 Load) (list Lt) (list (Name &two_f:0 Load))) &three_f:0 &n:0 &two_f:0))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &x:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &x:0 Store) Div (Constant i6 None)) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq)) (While (Compare (BinOp (Name &x:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &x:0 Store) Div (Constant i3 None)) (AugAssign (Name &cnt:0 Store) Add (Constant i2 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Name &cnt:0 Load))) Load) (_slice_content (Compare (Name &x:0 Load) (list Eq) (list (Constant i1 None)))) Load))) nil))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &calc:0\n      (arguments nil (list (arg &a:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load)\n                      Sub\n                      (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)\n                    )\n                    Add\n                    (BinOp\n                      (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load)\n                      Add\n                      (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)\n                    )\n                  )\n                  Div\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Mod (Constant i2 None))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (Compare\n            (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Mod (Constant i2 None))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name &calc:0 Load) (list (_starred_content (Name &a:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Mod (Constant i2 None))\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (Compare\n                (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Mod (Constant i2 None))\n                (list Eq)\n                (list (Constant i0 None))\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Call (Name &calc:0 Load) (list (_starred_content (Name &a:0 Load))) nil)))\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (If\n      (Compare\n        (BinOp\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Compare\n                  (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Mod (Constant i2 None))\n                  (list Eq)\n                  (list (Constant i0 None))\n                )\n              )\n            )\n            nil\n          )\n          Add\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Compare\n                  (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Mod (Constant i2 None))\n                  (list Eq)\n                  (list (Constant i0 None))\n                )\n              )\n            )\n            nil\n          )\n        )\n        (list Eq)\n        (list (Constant i1 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n                            Sub\n                            (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                          )\n                          Add\n                          (BinOp\n                            (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n                            Add\n                            (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                          )\n                        )\n                        Div\n                        (Constant i2 None)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &pixel:0\n      (arguments nil (list (arg &input:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &red:1 Store))\n                (_starred_content (Name &green:1 Store))\n                (_starred_content (Name &blue:1 Store))\n              )\n              Store\n            )\n          )\n          (Call (Attribute (Name &input:1 Load) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &red:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Name &red:1 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &green:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Name &green:1 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &blue:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Name &blue:1 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &plist:1 Store))\n          (List\n            (list\n              (_starred_content (Name &red:1 Load))\n              (_starred_content (Name &green:1 Load))\n              (_starred_content (Name &blue:1 Load))\n            )\n            Load\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &plist:1 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &lowestChet:1 Store))\n          (Call\n            (Name &is_chet:0 Load)\n            (list (_starred_content (Subscript (Name &plist:1 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &midChet:1 Store))\n          (Call\n            (Name &is_chet:0 Load)\n            (list (_starred_content (Subscript (Name &plist:1 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (BinOp (Name &midChet:1 Load) Add (Name &lowestChet:1 Load)) (list Eq) (list (Constant i2 None)))\n              (Compare (BinOp (Name &midChet:1 Load) Add (Name &lowestChet:1 Load)) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Subscript (Name &plist:1 Load) (_slice_content (Constant i1 None)) Load)))\n          (/seq (Return (Subscript (Name &plist:1 Load) (_slice_content (Constant i2 None)) Load)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &is_chet:0\n      (arguments nil (list (arg &n:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (IfExp\n            (Compare (BinOp (Name &n:2 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n            (Constant i1 None)\n            (Constant i0 None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Name &pixel:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &li:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list (comprehension (Name &i:1 Store) (Name &l:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &maxa:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)\n    (Expr (Call (Attribute (Name &li:0 Load) s_sort Load) nil nil))\n    (If\n      (Compare\n        (BinOp\n          (BinOp\n            (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load)\n            Sub\n            (Subscript (Name &li:0 Load) (_slice_content (Constant i1 None)) Load)\n          )\n          Mod\n          (Constant i2 None)\n        )\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Assign\n          (list (Name &maxa:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &maxa:0 Load))\n              (_starred_content (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (If\n      (Compare\n        (BinOp\n          (BinOp\n            (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load)\n            Sub\n            (Subscript (Name &li:0 Load) (_slice_content (Constant i0 None)) Load)\n          )\n          Mod\n          (Constant i2 None)\n        )\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Assign\n          (list (Name &maxa:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &maxa:0 Load))\n              (_starred_content (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (If\n      (Compare\n        (BinOp\n          (BinOp\n            (Subscript (Name &li:0 Load) (_slice_content (Constant i1 None)) Load)\n            Sub\n            (Subscript (Name &li:0 Load) (_slice_content (Constant i0 None)) Load)\n          )\n          Mod\n          (Constant i2 None)\n        )\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Assign\n          (list (Name &maxa:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &maxa:0 Load))\n              (_starred_content (Subscript (Name &li:0 Load) (_slice_content (Constant i1 None)) Load))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (If\n      (Compare (Name &maxa:0 Load) (list Eq) (list (BinOp (Constant i10 None) Pow (Constant i18 None))))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &maxa:0 Load))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) ?0 (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &a:0 (FunctionDef &calc:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (BinOp (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)) Add (BinOp (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load) Add (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load))) Div (Constant i2 None)))) nil))) nil None None))) (If (BoolOp And (list (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &calc:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) (/seq (If (BoolOp Or (list (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &calc:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))))))) nil)",
      "(Module (/seq (/splice (fn_1 &a:0 /nothing)) (If (Compare (BinOp (Call (Name g_int Load) (list (_starred_content (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) nil) Add (Call (Name g_int Load) (list (_starred_content (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) nil)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) Add (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) Div (Constant i2 None)))) nil))) nil))))) nil)",
      "(Module (/seq (FunctionDef &pixel:0 (arguments nil (list (arg &input:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &red:1 Store)) (_starred_content (Name &green:1 Store)) (_starred_content (Name &blue:1 Store))) Store)) (Call (Attribute (Name &input:1 Load) s_split Load) nil nil) None) (Assign (list (Name &red:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &red:1 Load))) nil) None) (Assign (list (Name &green:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &green:1 Load))) nil) None) (Assign (list (Name &blue:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &blue:1 Load))) nil) None) (Assign (list (Name &plist:1 Store)) (List (list (_starred_content (Name &red:1 Load)) (_starred_content (Name &green:1 Load)) (_starred_content (Name &blue:1 Load))) Load) None) (Expr (Call (Attribute (Name &plist:1 Load) s_sort Load) nil nil)) (Assign (list (Name &lowestChet:1 Store)) (Call (Name &is_chet:0 Load) (list (_starred_content (Subscript (Name &plist:1 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &midChet:1 Store)) (Call (Name &is_chet:0 Load) (list (_starred_content (Subscript (Name &plist:1 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (If (BoolOp Or (list (Compare (BinOp (Name &midChet:1 Load) Add (Name &lowestChet:1 Load)) (list Eq) (list (Constant i2 None))) (Compare (BinOp (Name &midChet:1 Load) Add (Name &lowestChet:1 Load)) (list Eq) (list (Constant i0 None))))) (/seq (Return (Subscript (Name &plist:1 Load) (_slice_content (Constant i1 None)) Load))) (/seq (Return (Subscript (Name &plist:1 Load) (_slice_content (Constant i2 None)) Load))))) nil None None) (FunctionDef &is_chet:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Return (IfExp (Compare (BinOp (Name &n:2 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None)))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &pixel:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &li:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Name &l:0 Load) nil i0))) None) (Assign (list (Name &maxa:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None) (Expr (Call (Attribute (Name &li:0 Load) s_sort Load) nil nil)) (If (Compare (BinOp (BinOp (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load) Sub (Subscript (Name &li:0 Load) (_slice_content (Constant i1 None)) Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &maxa:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &maxa:0 Load)) (_starred_content (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None)) (/seq)) (If (Compare (BinOp (BinOp (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load) Sub (Subscript (Name &li:0 Load) (_slice_content (Constant i0 None)) Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &maxa:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &maxa:0 Load)) (_starred_content (Subscript (Name &li:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None)) (/seq)) (If (Compare (BinOp (BinOp (Subscript (Name &li:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &li:0 Load) (_slice_content (Constant i0 None)) Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &maxa:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &maxa:0 Load)) (_starred_content (Subscript (Name &li:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None)) (/seq)) (If (Compare (Name &maxa:0 Load) (list Eq) (list (BinOp (Constant i10 None) Pow (Constant i18 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &maxa:0 Load))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &getInts:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &s:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &s:3 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getInt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getStrs:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Name &s:2 Load)\n            (list\n              (comprehension\n                (Name &s:2 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getStr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name &input:0 Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &listStr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (Import (list (alias s_collections &col:0)))\n    (Import (list (alias &math:0 None)))\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &N:1 Store)) (Call (Name &getInt:0 Load) nil nil) None)\n        (If (Compare (Name &N:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq))\n        (If (Compare (Name &N:1 Load) (list Eq) (list (Constant i2 None))) (/seq (Return (Constant i2 None))) (/seq))\n        (If\n          (Compare (BinOp (Name &N:1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None)))\n                Mult\n                (BinOp (Name &N:1 Load) Sub (Constant i2 None))\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None)))\n                    Mult\n                    (BinOp (Name &N:1 Load) Sub (Constant i2 None))\n                  )\n                  FloorDiv\n                  (Constant i2 None)\n                )\n              )\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &N:1 Load) Sub (Constant i1 None))\n                    Mult\n                    (BinOp (Name &N:1 Load) Sub (Constant i2 None))\n                  )\n                  Mult\n                  (BinOp (Name &N:1 Load) Sub (Constant i3 None))\n                )\n              )\n              (_starred_content\n                (IfExp\n                  (Compare (BinOp (Name &N:1 Load) Mod (Constant i3 None)) (list Gt) (list (Constant i0 None)))\n                  (BinOp\n                    (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None)))\n                    Mult\n                    (BinOp (Name &N:1 Load) Sub (Constant i3 None))\n                  )\n                  (Constant i0 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) nil nil))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (BinOp (Name &n:0 Load) BitAnd (Constant i1 None))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                      Mult\n                      (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (BinOp (Name &n:0 Load) Sub (Constant i3 None)) Mult (Name &n:0 Load))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp\n                            (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                            Mult\n                            (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                          )\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                      Mult\n                      (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp\n                            (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                            Mult\n                            (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                          )\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA3NywgMTExLCAxMTAsIDMyLCA3NywgOTcsIDExNCwgMzIsIDUxLCA0OCwgMzIsIDQ5LCA0OSwgNTgsIDQ5LCA1MCwgNTgsIDUwLCA1MCwgMzIsIDUwLCA0OCwgNTAsIDQ4LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTAwLCAxMTQsIDEwMSwgMTBd\n        None\n      )\n    )\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (Name &a:1 Load)))\n          (/seq\n            (Return\n              (Call\n                (Name &gcd:0 Load)\n                (list\n                  (_starred_content (Name &b:1 Load))\n                  (_starred_content (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lcm:0\n      (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (Name &a:2 Load)\n              FloorDiv\n              (Call\n                (Name &gcd:0 Load)\n                (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)))\n                nil\n              )\n            )\n            Mult\n            (Name &b:2 Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n          (/seq\n            (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &who1:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &who2:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &who3:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_max Load)\n                      (list\n                        (_starred_content (BinOp (Name &a:0 Load) Sub (Constant i55 None)))\n                        (_starred_content (Constant i1 None))\n                      )\n                      nil\n                    )\n                  )\n                  (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (For\n                  (Name &j:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content (Name &i:0 Load))\n                      (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                  (/seq\n                    (For\n                      (Name &k:0 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Name &j:0 Load))\n                          (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))\n                        )\n                        nil\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &ans:0 Store))\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (_starred_content (Name &ans:0 Load))\n                              (_starred_content\n                                (Call\n                                  (Name &lcm:0 Load)\n                                  (list\n                                    (_starred_content\n                                      (Call\n                                        (Name &lcm:0 Load)\n                                        (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load)))\n                                        nil\n                                      )\n                                    )\n                                    (_starred_content (Name &k:0 Load))\n                                  )\n                                  nil\n                                )\n                              )\n                            )\n                            nil\n                          )\n                          None\n                        )\n                      )\n                      (/seq)\n                      None\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i6 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i60 None))) nil)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (_starred_content\n                            (BinOp (Name &m:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None)))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list NotEq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content\n                                (BinOp (Name &m:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None)))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (BinOp\n                                    (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                                    Mult\n                                    (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                                  )\n                                  Mult\n                                  (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_gcd None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil)))\n      (/seq\n        (If\n          (UnaryOp Not (BinOp (Name &n:0 Load) Mod (Constant i6 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                        Mult\n                        (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                      )\n                      Mult\n                      (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (UnaryOp Not (BinOp (Name &n:0 Load) Mod (Constant i2 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                        Mult\n                        (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                      )\n                      Mult\n                      (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Lt) (list (Constant i3 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                      Mult\n                      (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (BinOp (Name &n:0 Load) Mod (Constant i3 None))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (BinOp\n                            (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                            Mult\n                            (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                          )\n                          Mult\n                          (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias s_math g_m)))\n    (FunctionDef\n      &lcm:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &a:1 Load) Mult (Name &b:1 Load))\n            FloorDiv\n            (Call\n              (Attribute (Name g_m Load) s_gcd Load)\n              (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)))\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &var:0 Store))\n      (Call\n        (Attribute (Name g_m Load) s_gcd Load)\n        (list (_starred_content (Name &n:0 Load)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &mx:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i6 None))) nil)))\n              (/seq\n                (If\n                  (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i12 None))) nil)))\n                  (/seq\n                    (For\n                      (Name &i:0 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Constant i0 None))\n                          (_starred_content\n                            (Call\n                              (Name g_min Load)\n                              (list (_starred_content (Constant i50 None)) (_starred_content (Name &n:0 Load)))\n                              nil\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      (/seq\n                        (For\n                          (Name &j:0 Store)\n                          (Call\n                            (Name g_range Load)\n                            (list\n                              (_starred_content (Constant i0 None))\n                              (_starred_content\n                                (Call\n                                  (Name g_min Load)\n                                  (list (_starred_content (Constant i50 None)) (_starred_content (Name &n:0 Load)))\n                                  nil\n                                )\n                              )\n                            )\n                            nil\n                          )\n                          (/seq\n                            (For\n                              (Name &k:0 Store)\n                              (Call\n                                (Name g_range Load)\n                                (list\n                                  (_starred_content (Constant i0 None))\n                                  (_starred_content\n                                    (Call\n                                      (Name g_min Load)\n                                      (list (_starred_content (Constant i50 None)) (_starred_content (Name &n:0 Load)))\n                                      nil\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Name &mx:0 Store))\n                                  (Call\n                                    (Name g_max Load)\n                                    (list\n                                      (_starred_content (Name &mx:0 Load))\n                                      (_starred_content\n                                        (Call\n                                          (Name &lcm:0 Load)\n                                          (list\n                                            (_starred_content (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)))\n                                            (_starred_content\n                                              (Call\n                                                (Name &lcm:0 Load)\n                                                (list\n                                                  (_starred_content (BinOp (Name &n:0 Load) Sub (Name &j:0 Load)))\n                                                  (_starred_content (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)))\n                                                )\n                                                nil\n                                              )\n                                            )\n                                          )\n                                          nil\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                  None\n                                )\n                              )\n                              (/seq)\n                              None\n                            )\n                          )\n                          (/seq)\n                          None\n                        )\n                      )\n                      (/seq)\n                      None\n                    )\n                    (Expr (Call (Name g_print Load) (list (_starred_content (Name &mx:0 Load))) nil))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_fractions (list (alias g_gcd None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i6 None))) nil)))\n              (/seq\n                (If\n                  (BinOp (Name &n:0 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (_starred_content\n                            (BinOp\n                              (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                              Mult\n                              (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Call\n                          (Name g_gcd Load)\n                          (list\n                            (_starred_content (Name &n:0 Load))\n                            (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i3 None)))\n                          )\n                          nil\n                        )\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                                  Mult\n                                  (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (_starred_content\n                                (BinOp\n                                  (BinOp\n                                    (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                                    Mult\n                                    (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                                  )\n                                  Mult\n                                  (BinOp (Name &n:0 Load) Sub (Constant i3 None))\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name %1 Load) Mult (BinOp (Name %1 Load) Sub (Constant i1 None))) Mult (BinOp (Name %1 Load) Sub #0)))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_sys None) (alias g_math None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &getInts:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &s:3 Load))) nil) (list (comprehension (Name &s:3 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &getInt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &getStrs:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Name &s:2 Load) (list (comprehension (Name &s:2 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &getStr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name &input:0 Load) nil nil))) nil None None) (FunctionDef &listStr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (Import (list (alias s_collections &col:0))) (Import (list (alias &math:0 None))) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &N:1 Store)) (Call (Name &getInt:0 Load) nil nil) None) (If (Compare (Name &N:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq)) (If (Compare (Name &N:1 Load) (list Eq) (list (Constant i2 None))) (/seq (Return (Constant i2 None))) (/seq)) (If (Compare (BinOp (Name &N:1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Return (BinOp (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None))) Mult (BinOp (Name &N:1 Load) Sub (Constant i2 None))))) (/seq)) (Return (Call (Name g_max Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None))) Mult (BinOp (Name &N:1 Load) Sub (Constant i2 None))) FloorDiv (Constant i2 None))) (_starred_content (BinOp (BinOp (BinOp (Name &N:1 Load) Sub (Constant i1 None)) Mult (BinOp (Name &N:1 Load) Sub (Constant i2 None))) Mult (BinOp (Name &N:1 Load) Sub (Constant i3 None)))) (_starred_content (IfExp (Compare (BinOp (Name &N:1 Load) Mod (Constant i3 None)) (list Gt) (list (Constant i0 None))) (BinOp (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None))) Mult (BinOp (Name &N:1 Load) Sub (Constant i3 None))) (Constant i0 None)))) nil))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) nil nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) nil))) (/seq (If (BinOp (Name &n:0 Load) BitAnd (Constant i1 None)) (fn_1 (Constant i2 None) &n:0) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i3 None)) Mult (Name &n:0 Load)) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i2 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (fn_1 (Constant i2 None) &n:0) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i2 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))) (fn_1 (Constant i3 None) &n:0))))))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA3NywgMTExLCAxMTAsIDMyLCA3NywgOTcsIDExNCwgMzIsIDUxLCA0OCwgMzIsIDQ5LCA0OSwgNTgsIDQ5LCA1MCwgNTgsIDUwLCA1MCwgMzIsIDUwLCA0OCwgNTAsIDQ4LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTAwLCAxMTQsIDEwMSwgMTBd None)) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &a:1 Load))) (/seq (Return (Call (Name &gcd:0 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)))) nil))))) nil None None) (FunctionDef &lcm:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &a:2 Load) FloorDiv (Call (Name &gcd:0 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load))) nil)) Mult (Name &b:2 Load)))) nil None None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &who1:0 Store)) (Constant i0 None) None) (Assign (list (Name &who2:0 Store)) (Constant i0 None) None) (Assign (list (Name &who3:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Constant i55 None))) (_starred_content (Constant i1 None))) nil)) (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &j:0 Load)) (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Call (Name &lcm:0 Load) (list (_starred_content (Call (Name &lcm:0 Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) nil)) (_starred_content (Name &k:0 Load))) nil))) nil) None)) (/seq) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i6 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i60 None))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &m:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None))))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &m:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))))))))))))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_gcd None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) (/seq (If (UnaryOp Not (BinOp (Name &n:0 Load) Mod (Constant i6 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))) (/seq (If (UnaryOp Not (BinOp (Name &n:0 Load) Mod (Constant i2 None))) (fn_1 (Constant i3 None) &n:0) (fn_1 (Constant i2 None) &n:0))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i6 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (fn_1 (Constant i3 None) &n:0) (fn_1 (Constant i2 None) &n:0))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Lt) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) (/seq (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (fn_1 (Constant i2 None) &n:0) (/seq (If (BinOp (Name &n:0 Load) Mod (Constant i3 None)) (fn_1 (Constant i3 None) &n:0) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))))))))) nil)",
      "(Module (/seq (Import (list (alias s_math g_m))) (FunctionDef &lcm:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &a:1 Load) Mult (Name &b:1 Load)) FloorDiv (Call (Attribute (Name g_m Load) s_gcd Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &var:0 Store)) (Call (Attribute (Name g_m Load) s_gcd Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) None) (Assign (list (Name &mx:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i6 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i4 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i12 None))) nil))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i50 None)) (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i50 None)) (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i50 None)) (_starred_content (Name &n:0 Load))) nil))) nil) (/seq (Assign (list (Name &mx:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &mx:0 Load)) (_starred_content (Call (Name &lcm:0 Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &i:0 Load))) (_starred_content (Call (Name &lcm:0 Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &j:0 Load))) (_starred_content (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)))) nil))) nil))) nil) None)) (/seq) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &mx:0 Load))) nil))))))))))) nil)",
      "(Module (/seq (ImportFrom s_fractions (list (alias g_gcd None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i6 None))) nil))) (/seq (If (BinOp (Name &n:0 Load) BitAnd (Constant i1 None)) (fn_1 (Constant i2 None) &n:0) (/seq (If (Compare (Call (Name g_gcd Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i3 None)))) nil) (list Eq) (list (Constant i1 None))) (fn_1 (Constant i3 None) &n:0) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Mult (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Mult (BinOp (Name &n:0 Load) Sub (Constant i3 None))))) nil))))))))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &f:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (_starred_content (Name g_int Load))\n            (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call (Name &f:0 Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call (Name g_sorted Load) (list (_starred_content (Call (Name &f:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &d:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Name &k:0 Load)))\n          (_starred_content (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (BinOp (Name &d:0 Load) Add (Constant i1 None)))\n          (_starred_content (BinOp (BinOp (Name &k:0 Load) Sub (Name &d:0 Load)) Add (Constant i1 None)))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &g:0 Store))\n      (BinOp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &u:0 Load))\n        Mult\n        (Name &v:0 Load)\n      )\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &a:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &u:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &j:0 Store))\n          (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &m:0 Load)) Add (Name &a:0 Load)) Sub (Constant i1 None))\n          None\n        )\n        (For\n          (Name &b:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &v:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (IfExp\n                (Name &b:0 Load)\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &g:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                    Add\n                    (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                  )\n                  Sub\n                  (Subscript\n                    (Name &p:0 Load)\n                    (_slice_content (BinOp (BinOp (Name &j:0 Load) Sub (Name &m:0 Load)) Add (Constant i1 None)))\n                    Load\n                  )\n                )\n                (Constant f9000000000.0 None)\n              )\n              None\n            )\n            (Assign\n              (list (Name &y:0 Store))\n              (IfExp\n                (Name &a:0 Load)\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &g:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Name &v:0 Load))) Load)\n                    Add\n                    (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                  )\n                  Sub\n                  (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Name &m:0 Load))) Load)\n                )\n                (Constant f9000000000.0 None)\n              )\n              None\n            )\n            (If\n              (Name &i:0 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Name &g:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                  (Call\n                    (Name g_min Load)\n                    (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load)))\n                    nil\n                  )\n                  None\n                )\n              )\n              (/seq)\n            )\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n            (AugAssign (Name &j:0 Store) Add (Name &m:0 Load))\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &g:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &As:1 None None)) None nil nil None nil)\n      (/seq\n        (Expr (Call (Attribute (Name &As:1 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &r:1 Store))) Store))\n          (Call (Name g_divmod Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &dp:1 Store))\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Mult\n            (BinOp (Name &r:1 Load) Add (Constant i1 None))\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load)))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &im:1 Store)) (BinOp (Name &i:1 Load) Mult (Name &m:1 Load)) None)\n            (Assign\n              (list (Name &new_dp:1 Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp (Name &r:1 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (Assign\n              (list (Subscript (Name &new_dp:1 Load) (_slice_content (Constant i0 None)) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &As:1 Load) (_slice_content (Name &im:1 Load)) Load)\n                )\n                Sub\n                (Subscript (Name &As:1 Load) (_slice_content (BinOp (Name &im:1 Load) Sub (Constant i1 None))) Load)\n              )\n              None\n            )\n            (For\n              (Name &h:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content\n                    (BinOp\n                      (Call\n                        (Name g_min Load)\n                        (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &r:1 Load)))\n                        nil\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &new_dp:1 Load) (_slice_content (Name &h:1 Load)) Store))\n                  (BinOp\n                    (BinOp\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &h:1 Load)) Load))\n                          (_starred_content\n                            (Subscript\n                              (Name &dp:1 Load)\n                              (_slice_content (BinOp (Name &h:1 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Add\n                      (Subscript (Name &As:1 Load) (_slice_content (BinOp (Name &im:1 Load) Add (Name &h:1 Load))) Load)\n                    )\n                    Sub\n                    (Subscript\n                      (Name &As:1 Load)\n                      (_slice_content (BinOp (BinOp (Name &im:1 Load) Add (Name &h:1 Load)) Sub (Constant i1 None)))\n                      Load\n                    )\n                  )\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign (list (Name &dp:1 Store)) (Name &new_dp:1 Load) None)\n          )\n          (/seq)\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (Subscript (Name &As:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n              Sub\n              (Subscript (Name &As:1 Load) (_slice_content (Constant i0 None)) Load)\n            )\n            Sub\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &r:1 Load)) Load))\n                (_starred_content\n                  (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &r:1 Load) Sub (Constant i1 None))) Load)\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &As:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &solve:0 Load)\n              (list\n                (_starred_content (Name &n:0 Load))\n                (_starred_content (Name &k:0 Load))\n                (_starred_content (Name &As:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &INF:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i18 None)) Add (Constant i179 None))\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content\n              (List (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)\n            )\n            (_starred_content (Name &a:0 Store))\n          )\n          Store\n        )\n      )\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &dp:0 Store)) (_starred_content (Name &l:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content\n            (ListComp\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &k:0 Load) Sub (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)))\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (list\n                (comprehension\n                  (Name &x:2 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (_starred_content (BinOp (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n          (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Name &k:0 Load)))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Name &k:0 Load) Sub (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)))\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &pos:0 Store))\n              (BinOp\n                (BinOp (Name &i:0 Load) Mult (BinOp (Name &l:0 Load) Add (Constant i1 None)))\n                Add\n                (BinOp (Name &j:0 Load) Mult (Name &l:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (IfExp\n                (BoolOp Or (list (Name &i:0 Load) (Name &j:0 Load)))\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (IfExp\n                        (Name &i:0 Load)\n                        (BinOp\n                          (BinOp\n                            (Subscript\n                              (Subscript\n                                (Name &dp:0 Load)\n                                (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                                Load\n                              )\n                              (_slice_content (Name &j:0 Load))\n                              Load\n                            )\n                            Add\n                            (Subscript\n                              (Name &a:0 Load)\n                              (_slice_content (BinOp (Name &pos:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          Sub\n                          (Subscript\n                            (Name &a:0 Load)\n                            (_slice_content\n                              (BinOp (BinOp (Name &pos:0 Load) Sub (Name &l:0 Load)) Sub (Constant i1 None))\n                            )\n                            Load\n                          )\n                        )\n                        (Name &INF:0 Load)\n                      )\n                    )\n                    (_starred_content\n                      (IfExp\n                        (Name &j:0 Load)\n                        (BinOp\n                          (BinOp\n                            (Subscript\n                              (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                            Add\n                            (Subscript\n                              (Name &a:0 Load)\n                              (_slice_content (BinOp (Name &pos:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          Sub\n                          (Subscript\n                            (Name &a:0 Load)\n                            (_slice_content (BinOp (Name &pos:0 Load) Sub (Name &l:0 Load)))\n                            Load\n                          )\n                        )\n                        (Name &INF:0 Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n                (Constant i0 None)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &n:0 Load) Mod (Name &k:0 Load))) Load)\n              (_slice_content (BinOp (Name &k:0 Load) Sub (BinOp (Name &n:0 Load) Mod (Name &k:0 Load))))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &L:0 Store)) (_starred_content (Name &M:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Name &k:0 Load)))\n          (_starred_content (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (BinOp\n          (List (list (_starred_content (Constant i0 None))) Load)\n          Mult\n          (BinOp (BinOp (Name &k:0 Load) Sub (Name &M:0 Load)) Add (Constant i1 None))\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &M:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &M:0 Load) Add (Constant i1 None)))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (BinOp (BinOp (Name &k:0 Load) Sub (Name &M:0 Load)) Add (Constant i1 None))))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &pos:0 Store))\n              (BinOp\n                (BinOp (Name &i:0 Load) Mult (BinOp (Name &L:0 Load) Add (Constant i1 None)))\n                Add\n                (BinOp (Name &j:0 Load) Mult (Name &L:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Store\n                )\n              )\n              (IfExp\n                (BoolOp Or (list (Name &i:0 Load) (Name &j:0 Load)))\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (IfExp\n                        (Name &i:0 Load)\n                        (BinOp\n                          (BinOp\n                            (Subscript\n                              (Subscript\n                                (Name &dp:0 Load)\n                                (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n                                Load\n                              )\n                              (_slice_content (Name &j:0 Load))\n                              Load\n                            )\n                            Add\n                            (Subscript\n                              (Name &a:0 Load)\n                              (_slice_content (BinOp (Name &pos:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          Sub\n                          (Subscript\n                            (Name &a:0 Load)\n                            (_slice_content\n                              (BinOp (BinOp (Name &pos:0 Load) Sub (Name &L:0 Load)) Sub (Constant i1 None))\n                            )\n                            Load\n                          )\n                        )\n                        (Name &inf:0 Load)\n                      )\n                    )\n                    (_starred_content\n                      (IfExp\n                        (Name &j:0 Load)\n                        (BinOp\n                          (BinOp\n                            (Subscript\n                              (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                            Add\n                            (Subscript\n                              (Name &a:0 Load)\n                              (_slice_content (BinOp (Name &pos:0 Load) Sub (Constant i1 None)))\n                              Load\n                            )\n                          )\n                          Sub\n                          (Subscript\n                            (Name &a:0 Load)\n                            (_slice_content (BinOp (Name &pos:0 Load) Sub (Name &L:0 Load)))\n                            Load\n                          )\n                        )\n                        (Name &inf:0 Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n                (Constant i0 None)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Subscript (Name &dp:0 Load) (_slice_content (Name &M:0 Load)) Load)\n              (_slice_content (BinOp (Name &k:0 Load) Sub (Name &M:0 Load)))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp #0 Add (Constant i1 None)))) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %8 Load) Sub #0) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name %4 Store)) (BinOp (BinOp (Name %3 Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) Add (BinOp (Name %2 Load) Mult (Name %1 Load))) None) (Assign (list (Subscript (Subscript (Name %7 Load) (_slice_content (Name %3 Load)) Load) (_slice_content (Name %2 Load)) Store)) (IfExp (BoolOp Or (list (Name %3 Load) (Name %2 Load))) (Call (Name g_min Load) (list (_starred_content (IfExp (Name %3 Load) (BinOp (BinOp (Subscript (Subscript (Name %7 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) (_slice_content (Name %2 Load)) Load) Add (Subscript (Name %6 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Load)) Sub (Subscript (Name %6 Load) (_slice_content (BinOp (BinOp (Name %4 Load) Sub (Name %1 Load)) Sub (Constant i1 None))) Load)) (Name %5 Load))) (_starred_content (IfExp (Name %2 Load) (BinOp (BinOp (Subscript (Subscript (Name %7 Load) (_slice_content (Name %3 Load)) Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name %6 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Load)) Sub (Subscript (Name %6 Load) (_slice_content (BinOp (Name %4 Load) Sub (Name %1 Load))) Load)) (Name %5 Load)))) nil) (Constant i0 None)) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Subscript (Name %7 Load) (_slice_content #0) Load) (_slice_content (BinOp (Name %8 Load) Sub #0)) Load))) nil)))",
        "sym_arity": 8,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &f:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name &f:0 Load) nil nil) None) (Assign (list (Name &p:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name &f:0 Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Name &k:0 Load))) (_starred_content (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &d:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (BinOp (Name &k:0 Load) Sub (Name &d:0 Load)) Add (Constant i1 None)))) Load) None) (Assign (list (Name &g:0 Store)) (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &u:0 Load)) Mult (Name &v:0 Load)) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (For (Name &a:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &u:0 Load))) nil) (/seq (Assign (list (Name &j:0 Store)) (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &m:0 Load)) Add (Name &a:0 Load)) Sub (Constant i1 None)) None) (For (Name &b:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &v:0 Load))) nil) (/seq (Assign (list (Name &x:0 Store)) (IfExp (Name &b:0 Load) (BinOp (BinOp (Subscript (Name &g:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)) Sub (Subscript (Name &p:0 Load) (_slice_content (BinOp (BinOp (Name &j:0 Load) Sub (Name &m:0 Load)) Add (Constant i1 None))) Load)) (Constant f9000000000.0 None)) None) (Assign (list (Name &y:0 Store)) (IfExp (Name &a:0 Load) (BinOp (BinOp (Subscript (Name &g:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Name &v:0 Load))) Load) Add (Subscript (Name &p:0 Load) (_slice_content (Name &j:0 Load)) Load)) Sub (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Name &m:0 Load))) Load)) (Constant f9000000000.0 None)) None) (If (Name &i:0 Load) (/seq (Assign (list (Subscript (Name &g:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil) None)) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (AugAssign (Name &j:0 Store) Add (Name &m:0 Load))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &g:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &As:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &As:1 Load) s_sort Load) nil nil)) (Assign (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &r:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil) None) (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &r:1 Load) Add (Constant i1 None))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Name &im:1 Store)) (BinOp (Name &i:1 Load) Mult (Name &m:1 Load)) None) (Assign (list (Name &new_dp:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &r:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &new_dp:1 Load) (_slice_content (Constant i0 None)) Store)) (BinOp (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &As:1 Load) (_slice_content (Name &im:1 Load)) Load)) Sub (Subscript (Name &As:1 Load) (_slice_content (BinOp (Name &im:1 Load) Sub (Constant i1 None))) Load)) None) (For (Name &h:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &r:1 Load))) nil) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &new_dp:1 Load) (_slice_content (Name &h:1 Load)) Store)) (BinOp (BinOp (Call (Name g_max Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &h:1 Load)) Load)) (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &h:1 Load) Sub (Constant i1 None))) Load))) nil) Add (Subscript (Name &As:1 Load) (_slice_content (BinOp (Name &im:1 Load) Add (Name &h:1 Load))) Load)) Sub (Subscript (Name &As:1 Load) (_slice_content (BinOp (BinOp (Name &im:1 Load) Add (Name &h:1 Load)) Sub (Constant i1 None))) Load)) None)) (/seq) None) (Assign (list (Name &dp:1 Store)) (Name &new_dp:1 Load) None)) (/seq) None) (Return (BinOp (BinOp (Subscript (Name &As:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Sub (Subscript (Name &As:1 Load) (_slice_content (Constant i0 None)) Load)) Sub (Call (Name g_max Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &r:1 Load)) Load)) (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &r:1 Load) Sub (Constant i1 None))) Load))) nil)))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &As:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &As:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &INF:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i18 None)) Add (Constant i179 None)) None) (Assign (list (Tuple (list (_starred_content (List (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (_starred_content (Name &a:0 Store))) Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Tuple (list (_starred_content (Name &dp:0 Store)) (_starred_content (Name &l:0 Store))) Store)) (Tuple (list (_starred_content (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Name &k:0 Load) Sub (BinOp (Name &n:0 Load) Mod (Name &k:0 Load))) Add (Constant i1 None))) (list (comprehension (Name &x:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)) Add (Constant i1 None)))) nil) nil i0)))) (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Name &k:0 Load)))) Load) None) (/splice (fn_1 (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)) &l:0 &j:0 &i:0 &pos:0 &INF:0 &a:0 &dp:0 &k:0))) nil)",
      "(Module (/seq (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &L:0 Store)) (_starred_content (Name &M:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Name &k:0 Load))) (_starred_content (BinOp (Name &n:0 Load) Mod (Name &k:0 Load)))) Load) None) (Assign (list (Name &dp:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Name &k:0 Load) Sub (Name &M:0 Load)) Add (Constant i1 None))) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &M:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (/splice (fn_1 (Name &M:0 Load) &L:0 &j:0 &i:0 &pos:0 &inf:0 &a:0 &dp:0 &k:0))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &sum:0 Store)) (Name &v0:0 Load) None)\n    (While\n      (Compare (Name &sum:0 Load) (list Lt) (list (Name &c:0 Load)))\n      (/seq\n        (AugAssign\n          (Name &sum:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Name &v0:0 Load) Add (BinOp (Name &count:0 Load) Mult (Name &a:0 Load)))\n                  Sub\n                  (Name &l:0 Load)\n                )\n              )\n              (_starred_content (BinOp (Name &v1:0 Load) Sub (Name &l:0 Load)))\n            )\n            nil\n          )\n        )\n        (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &cur:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &v:0 Store)) (Name &v0:0 Load) None)\n    (While\n      (Compare (Name &cur:0 Load) (list Lt) (list (Name &c:0 Load)))\n      (/seq\n        (If\n          (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq (AugAssign (Name &cur:0 Store) Sub (Name &l:0 Load)))\n          (/seq)\n        )\n        (AugAssign (Name &cur:0 Store) Add (Name &v:0 Load))\n        (Assign\n          (list (Name &v:0 Store))\n          (Call\n            (Name g_min Load)\n            (list (_starred_content (BinOp (Name &v:0 Load) Add (Name &a:0 Load))) (_starred_content (Name &v1:0 Load)))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (AugAssign (Name &v:0 Store) Sub (Name &l:0 Load)) (AugAssign (Name &v1:0 Store) Sub (Name &l:0 Load)))\n          (/seq)\n        )\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &c:0 Store) Sub (Name &v:0 Load))\n        (Assign\n          (list (Name &v:0 Store))\n          (Call\n            (Name g_min Load)\n            (list (_starred_content (Name &v1:0 Load)) (_starred_content (BinOp (Name &v:0 Load) Add (Name &a:0 Load))))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &c:0 Store) Sub (Name &v0:0 Load))\n        (Assign\n          (list (Name &v0:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (BinOp (Name &v0:0 Load) Add (Name &a:0 Load)))\n              (_starred_content (Name &v1:0 Load))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq (AugAssign (Name &c:0 Store) Add (Name &l:0 Load)))\n          (/seq)\n        )\n        (AugAssign (Name &n:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &d:0 Store))) Store))\n      (Tuple (list (_starred_content (Name &v0:0 Load)) (_starred_content (Constant i1 None))) Load)\n      None\n    )\n    (While\n      (Compare (Name &p:0 Load) (list Lt) (list (Name &c:0 Load)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &v0:0 Load) Add (Name &a:0 Load)) (list LtE) (list (Name &v1:0 Load)))\n          (/seq (AugAssign (Name &v0:0 Store) Add (Name &a:0 Load)))\n          (/seq (Assign (list (Name &v0:0 Store)) (Name &v1:0 Load) None))\n        )\n        (AugAssign (Name &p:0 Store) Sub (Name &l:0 Load))\n        (If\n          (Compare (Name &p:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Assign (list (Name &p:0 Store)) (Constant i0 None) None))\n          (/seq)\n        )\n        (AugAssign (Name &p:0 Store) Add (Name &v0:0 Load))\n        (AugAssign (Name &d:0 Store) Add (Constant i1 None))\n        (If (Compare (Name &p:0 Load) (list GtE) (list (Name &c:0 Load))) (/seq Break) (/seq))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &c:0 Load) (list LtE) (list (Name &v0:0 Load)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))\n        (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n      )\n      (/seq)\n    )\n    (Assign (list (Name &lastv:0 Store)) (Name &v0:0 Load) None)\n    (Assign (list (Name &day:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &s:0 Store)) (Name &v0:0 Load) None)\n    (While\n      (Constant True None)\n      (/seq\n        (AugAssign (Name &day:0 Store) Add (Constant i1 None))\n        (Assign (list (Name &lastv:0 Store)) (BinOp (Name &lastv:0 Load) Add (Name &a:0 Load)) None)\n        (If\n          (Compare (Name &lastv:0 Load) (list Gt) (list (Name &v1:0 Load)))\n          (/seq (Assign (list (Name &lastv:0 Store)) (Name &v1:0 Load) None))\n          (/seq)\n        )\n        (Assign\n          (list (Name &s:0 Store))\n          (BinOp (BinOp (Name &s:0 Load) Sub (Name &l:0 Load)) Add (Name &lastv:0 Load))\n          None\n        )\n        (If (Compare (Name &s:0 Load) (list GtE) (list (Name &c:0 Load))) (/seq Break) (/seq))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &day:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1000000 None)))\n        nil\n      )\n      (/seq\n        (AugAssign (Name &c:0 Store) Sub (Name &v:0 Load))\n        (If\n          (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq (AugAssign (Name &c:0 Store) Add (Name &l:0 Load)))\n          (/seq)\n        )\n        (If\n          (Compare (Name &c:0 Load) (list LtE) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break)\n          (/seq)\n        )\n        (AugAssign (Name &v:0 Store) Add (Name &a:0 Load))\n        (Assign\n          (list (Name &v:0 Store))\n          (Call (Name g_min Load) (list (_starred_content (Name &v:0 Load)) (_starred_content (Name &v1:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cur:0 Store) (Name &cnt:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &cur:0 Load) (list Lt) (list (Name &c:0 Load)))\n      (/seq\n        (Assign\n          (list (Name &cur:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content (BinOp (Name &cur:0 Load) Sub (Name &l:0 Load)))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &cur:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Name &v1:0 Load))\n              (_starred_content (BinOp (Name &v0:0 Load) Add (BinOp (Name &a:0 Load) Mult (Name &cnt:0 Load))))\n            )\n            nil\n          )\n        )\n        (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &v:0 Store)) (Name &v0:0 Load) None)\n    (Assign (list (Name &d:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &r:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &r:0 Load) (list Lt) (list (Name &c:0 Load)))\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq (AugAssign (Name &r:0 Store) Sub (Name &l:0 Load)))\n          (/seq)\n        )\n        (AugAssign (Name &d:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &r:0 Store) Add (Name &v:0 Load))\n        (AugAssign (Name &v:0 Store) Add (Name &a:0 Load))\n        (If\n          (Compare (Name &v:0 Load) (list Gt) (list (Name &v1:0 Load)))\n          (/seq (Assign (list (Name &v:0 Store)) (Name &v1:0 Load) None))\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &v0:0 Store))\n            (_starred_content (Name &v1:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &l:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &speed:0 Store)) (Name &v0:0 Load) None)\n    (Assign (list (Name &pages:0 Store)) (Name &v0:0 Load) None)\n    (Assign (list (Name &days:0 Store)) (Constant i1 None) None)\n    (While\n      (Compare (Name &pages:0 Load) (list Lt) (list (Name &c:0 Load)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &speed:0 Load) Add (Name &a:0 Load)) (list LtE) (list (Name &v1:0 Load)))\n          (/seq (AugAssign (Name &speed:0 Store) Add (Name &a:0 Load)))\n          (/seq (Assign (list (Name &speed:0 Store)) (Name &v1:0 Load) None))\n        )\n        (Assign\n          (list (Name &pages:0 Store))\n          (BinOp (BinOp (Name &pages:0 Load) Add (Name &speed:0 Load)) Sub (Name &l:0 Load))\n          None\n        )\n        (AugAssign (Name &days:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &days:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &v0:0 Store)) (_starred_content (Name &v1:0 Store)) (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &count:0 Store)) (Constant i1 None) None) (Assign (list (Name &sum:0 Store)) (Name &v0:0 Load) None) (While (Compare (Name &sum:0 Load) (list Lt) (list (Name &c:0 Load))) (/seq (AugAssign (Name &sum:0 Store) Add (Call (Name g_min Load) (list (_starred_content (BinOp (BinOp (Name &v0:0 Load) Add (BinOp (Name &count:0 Load) Mult (Name &a:0 Load))) Sub (Name &l:0 Load))) (_starred_content (BinOp (Name &v1:0 Load) Sub (Name &l:0 Load)))) nil)) (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v0:0 &c:0) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &cur:0 Store)) (Constant i0 None) None) (Assign (list (Name &v:0 Store)) (Name &v0:0 Load) None) (While (Compare (Name &cur:0 Load) (list Lt) (list (Name &c:0 Load))) (/seq (If (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &cur:0 Store) Sub (Name &l:0 Load))) (/seq)) (AugAssign (Name &cur:0 Store) Add (Name &v:0 Load)) (Assign (list (Name &v:0 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (Name &v:0 Load) Add (Name &a:0 Load))) (_starred_content (Name &v1:0 Load))) nil) None) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v:0 &c:0) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &v:0 Store) Sub (Name &l:0 Load)) (AugAssign (Name &v1:0 Store) Sub (Name &l:0 Load))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (AugAssign (Name &c:0 Store) Sub (Name &v:0 Load)) (Assign (list (Name &v:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &v1:0 Load)) (_starred_content (BinOp (Name &v:0 Load) Add (Name &a:0 Load)))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v0:0 &c:0) (Assign (list (Name &n:0 Store)) (Constant i0 None) None) (While (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &c:0 Store) Sub (Name &v0:0 Load)) (Assign (list (Name &v0:0 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (Name &v0:0 Load) Add (Name &a:0 Load))) (_starred_content (Name &v1:0 Load))) nil) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &c:0 Store) Add (Name &l:0 Load))) (/seq)) (AugAssign (Name &n:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v0:0 &c:0) (Assign (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Tuple (list (_starred_content (Name &v0:0 Load)) (_starred_content (Constant i1 None))) Load) None) (While (Compare (Name &p:0 Load) (list Lt) (list (Name &c:0 Load))) (/seq (If (Compare (BinOp (Name &v0:0 Load) Add (Name &a:0 Load)) (list LtE) (list (Name &v1:0 Load))) (/seq (AugAssign (Name &v0:0 Store) Add (Name &a:0 Load))) (/seq (Assign (list (Name &v0:0 Store)) (Name &v1:0 Load) None))) (AugAssign (Name &p:0 Store) Sub (Name &l:0 Load)) (If (Compare (Name &p:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (Constant i0 None) None)) (/seq)) (AugAssign (Name &p:0 Store) Add (Name &v0:0 Load)) (AugAssign (Name &d:0 Store) Add (Constant i1 None)) (If (Compare (Name &p:0 Load) (list GtE) (list (Name &c:0 Load))) (/seq Break) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &v0:0 Store)) (_starred_content (Name &v1:0 Store)) (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (Compare (Name &c:0 Load) (list LtE) (list (Name &v0:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (Assign (list (Name &lastv:0 Store)) (Name &v0:0 Load) None) (Assign (list (Name &day:0 Store)) (Constant i1 None) None) (Assign (list (Name &s:0 Store)) (Name &v0:0 Load) None) (While (Constant True None) (/seq (AugAssign (Name &day:0 Store) Add (Constant i1 None)) (Assign (list (Name &lastv:0 Store)) (BinOp (Name &lastv:0 Load) Add (Name &a:0 Load)) None) (If (Compare (Name &lastv:0 Load) (list Gt) (list (Name &v1:0 Load))) (/seq (Assign (list (Name &lastv:0 Store)) (Name &v1:0 Load) None)) (/seq)) (Assign (list (Name &s:0 Store)) (BinOp (BinOp (Name &s:0 Load) Sub (Name &l:0 Load)) Add (Name &lastv:0 Load)) None) (If (Compare (Name &s:0 Load) (list GtE) (list (Name &c:0 Load))) (/seq Break) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &day:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v:0 &c:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1000000 None))) nil) (/seq (AugAssign (Name &c:0 Store) Sub (Name &v:0 Load)) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &c:0 Store) Add (Name &l:0 Load))) (/seq)) (If (Compare (Name &c:0 Load) (list LtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break) (/seq)) (AugAssign (Name &v:0 Store) Add (Name &a:0 Load)) (Assign (list (Name &v:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &v:0 Load)) (_starred_content (Name &v1:0 Load))) nil) None)) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v0:0 &c:0) (Assign (list (Name &cur:0 Store) (Name &cnt:0 Store)) (Constant i0 None) None) (While (Compare (Name &cur:0 Load) (list Lt) (list (Name &c:0 Load))) (/seq (Assign (list (Name &cur:0 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &cur:0 Load) Sub (Name &l:0 Load)))) nil) None) (AugAssign (Name &cur:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Name &v1:0 Load)) (_starred_content (BinOp (Name &v0:0 Load) Add (BinOp (Name &a:0 Load) Mult (Name &cnt:0 Load))))) nil)) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v0:0 &c:0) (Assign (list (Name &v:0 Store)) (Name &v0:0 Load) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (Assign (list (Name &r:0 Store)) (Constant i0 None) None) (While (Compare (Name &r:0 Load) (list Lt) (list (Name &c:0 Load))) (/seq (If (Compare (Name &d:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &r:0 Store) Sub (Name &l:0 Load))) (/seq)) (AugAssign (Name &d:0 Store) Add (Constant i1 None)) (AugAssign (Name &r:0 Store) Add (Name &v:0 Load)) (AugAssign (Name &v:0 Store) Add (Name &a:0 Load)) (If (Compare (Name &v:0 Load) (list Gt) (list (Name &v1:0 Load))) (/seq (Assign (list (Name &v:0 Store)) (Name &v1:0 Load) None)) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &l:0 &a:0 &v1:0 &v0:0 &c:0) (Assign (list (Name &speed:0 Store)) (Name &v0:0 Load) None) (Assign (list (Name &pages:0 Store)) (Name &v0:0 Load) None) (Assign (list (Name &days:0 Store)) (Constant i1 None) None) (While (Compare (Name &pages:0 Load) (list Lt) (list (Name &c:0 Load))) (/seq (If (Compare (BinOp (Name &speed:0 Load) Add (Name &a:0 Load)) (list LtE) (list (Name &v1:0 Load))) (/seq (AugAssign (Name &speed:0 Store) Add (Name &a:0 Load))) (/seq (Assign (list (Name &speed:0 Store)) (Name &v1:0 Load) None))) (Assign (list (Name &pages:0 Store)) (BinOp (BinOp (Name &pages:0 Load) Add (Name &speed:0 Load)) Sub (Name &l:0 Load)) None) (AugAssign (Name &days:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &days:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &num:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &spectator:0 Store)) (Constant i3 None) None)\n    (Assign (list (Name &p1:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &p2:0 Store)) (Constant i2 None) None)\n    (Assign (list (Name &yes:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &num:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &winner:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &winner:0 Load) (list Is) (list (Name &spectator:0 Load)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Assign (list (Name &yes:0 Store)) (Constant False None) None)\n            Break\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &p1:0 Load) (list Is) (list (Name &winner:0 Load)))\n          (/seq\n            (Assign (list (Name &temp:0 Store)) (Name &spectator:0 Load) None)\n            (Assign (list (Name &spectator:0 Store)) (Name &p2:0 Load) None)\n            (Assign (list (Name &p2:0 Store)) (Name &temp:0 Load) None)\n          )\n          (/seq\n            (Assign (list (Name &temp:0 Store)) (Name &spectator:0 Load) None)\n            (Assign (list (Name &spectator:0 Store)) (Name &p1:0 Load) None)\n            (Assign (list (Name &p1:0 Store)) (Name &temp:0 Load) None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Name &yes:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &input:0 Store))\n          (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_read Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &data:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Name &input:0 Load) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (Subscript (Name &data:0 Load) (_slice_content (Constant i0 None)) Load) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (Subscript (Name &data:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n          None\n        )\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &playing1:0 Store))\n                (_starred_content (Name &playing2:0 Store))\n                (_starred_content (Name &spectate:0 Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Constant i2 None))\n              (_starred_content (Constant i3 None))\n            )\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &Yes:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Name &spectate:0 Load))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n                (Assign (list (Name &Yes:0 Store)) (Constant i0 None) None)\n                Break\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Name &playing1:0 Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list (_starred_content (Name &playing2:0 Store)) (_starred_content (Name &spectate:0 Store)))\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list (_starred_content (Name &spectate:0 Load)) (_starred_content (Name &playing2:0 Load)))\n                        Load\n                      )\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list (_starred_content (Name &playing1:0 Store)) (_starred_content (Name &spectate:0 Store)))\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list (_starred_content (Name &spectate:0 Load)) (_starred_content (Name &playing1:0 Load)))\n                        Load\n                      )\n                      None\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &Yes:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &out:0 Store)) (Constant i3 None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &win:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &win:0 Load) (list Eq) (list (Name &out:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n          (/seq\n            (Assign\n              (list (Name &l:0 Store))\n              (List\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Constant i3 None))\n                )\n                Load\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &out:0 Load))) nil))\n            (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &win:0 Load))) nil))\n            (Assign\n              (list (Name &out:0 Store))\n              (Subscript (Name &l:0 Load) (_slice_content (Constant i0 None)) Load)\n              None\n            )\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &num_games:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &roster:0 Store))\n      (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n      None\n    )\n    (For\n      (Name &game:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &num_games:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &winner:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &winner:0 Load) (list In) (list (Name &roster:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &roster:0 Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &winner:0 Load))\n                  (_starred_content\n                    (BinOp\n                      (Constant i6 None)\n                      Sub\n                      (Call (Name g_sum Load) (list (_starred_content (Name &roster:0 Load))) nil)\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i3 None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &x:0 Load)))\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n              (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n              None\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Name &x:0 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (_starred_content (Name &a:0 Store))\n                        (_starred_content (Name &b:0 Store))\n                        (_starred_content (Name &c:0 Store))\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (_starred_content (Name &b:0 Load))\n                      (_starred_content (Name &c:0 Load))\n                      (_starred_content (Name &a:0 Load))\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &c:0 Load) (list Eq) (list (Name &x:0 Load)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n                    (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &x:0 Load) (list NotEq) (list (Name &a:0 Load)))\n              (Compare (Name &x:0 Load) (list NotEq) (list (Name &b:0 Load)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Constant i3 None) (list NotEq) (list (Name &a:0 Load)))\n              (Compare (Constant i3 None) (list NotEq) (list (Name &b:0 Load)))\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n              (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Constant i3 None))) Load)\n              None\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Constant i2 None) (list NotEq) (list (Name &a:0 Load)))\n                  (Compare (Constant i2 None) (list NotEq) (list (Name &b:0 Load)))\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n                  (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Constant i2 None))) Load)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n                  (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Constant i1 None))) Load)\n                  None\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &lst:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &lst:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &players:0 Store))\n      (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n      None\n    )\n    (Assign (list (Name &hasPrint:0 Store)) (Constant False None) None)\n    (For\n      (Name &x:0 Store)\n      (Name &lst:0 Load)\n      (/seq\n        (If\n          (UnaryOp Not (Compare (Name &x:0 Load) (list In) (list (Name &players:0 Load))))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Assign (list (Name &hasPrint:0 Store)) (Constant True None) None)\n            Break\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &total:0 Store))\n          (List\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Constant i2 None))\n              (_starred_content (Constant i3 None))\n            )\n            Load\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &total:0 Load) s_remove Load)\n            (list (_starred_content (Subscript (Name &players:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &total:0 Load) s_remove Load)\n            (list (_starred_content (Subscript (Name &players:0 Load) (_slice_content (Constant i1 None)) Load)))\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Name &players:0 Load) s_clear Load) nil nil))\n        (Expr (Call (Attribute (Name &players:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil))\n        (Expr\n          (Call\n            (Attribute (Name &players:0 Load) s_append Load)\n            (list (_starred_content (Subscript (Name &total:0 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (UnaryOp Not (Name &hasPrint:0 Load))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n      None\n    )\n    (Assign (list (Name &o:0 Store)) (Constant i3 None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list In) (list (Name &p:0 Load)))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content\n                      (Subscript\n                        (Name &p:0 Load)\n                        (_slice_content\n                          (BinOp\n                            (BinOp\n                              (Call\n                                (Attribute (Name &p:0 Load) s_index Load)\n                                (list (_starred_content (Name &a:0 Load)))\n                                nil\n                              )\n                              Add\n                              (Constant i1 None)\n                            )\n                            Mod\n                            (Constant i2 None)\n                          )\n                        )\n                        Store\n                      )\n                    )\n                    (_starred_content (Name &o:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Name &o:0 Load))\n                  (_starred_content\n                    (Subscript\n                      (Name &p:0 Load)\n                      (_slice_content\n                        (BinOp\n                          (BinOp\n                            (Call\n                              (Attribute (Name &p:0 Load) s_index Load)\n                              (list (_starred_content (Name &a:0 Load)))\n                              nil\n                            )\n                            Add\n                            (Constant i1 None)\n                          )\n                          Mod\n                          (Constant i2 None)\n                        )\n                      )\n                      Load\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &l:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &c:0 Store)) (Constant True None) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n      None\n    )\n    (Assign (list (Name &e:0 Store)) (Constant i3 None) None)\n    (Assign (list (Name &j:0 Store)) (Constant i0 None) None)\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &j:0 Load) (list Lt) (list (Name &n:0 Load)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant True None)))\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &h:0 Store))\n          (Call\n            (Attribute (Name &d:0 Load) s_count Load)\n            (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &h:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &f:0 Store))\n              (Subscript\n                (Name &d:0 Load)\n                (_slice_content\n                  (BinOp\n                    (Constant i1 None)\n                    Sub\n                    (Call\n                      (Attribute (Name &d:0 Load) s_index Load)\n                      (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n                      nil\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Name &d:0 Load)\n                  (_slice_content\n                    (BinOp\n                      (Constant i1 None)\n                      Sub\n                      (Call\n                        (Attribute (Name &d:0 Load) s_index Load)\n                        (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n                        nil\n                      )\n                    )\n                  )\n                  Store\n                )\n              )\n              (Name &e:0 Load)\n              None\n            )\n            (Assign (list (Name &e:0 Store)) (Name &f:0 Load) None)\n            (Assign (list (Name &j:0 Store)) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)\n          )\n          (/seq (Assign (list (Name &c:0 Store)) (Constant False None) None))\n        )\n      )\n      (/seq)\n    )\n    (If\n      (Compare (Name &c:0 Load) (list Eq) (list (Constant True None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (List\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Constant i2 None))\n              (_starred_content (Constant i3 None))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &x:0 Load) s_remove Load) (list (_starred_content (Name &b:0 Load))) nil))\n        (Expr (Call (Attribute (Name &x:0 Load) s_remove Load) (list (_starred_content (Name &a:0 Load))) nil))\n        (Assign (list (Name &b:0 Store)) (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &num:0) (Assign (list (Name &spectator:0 Store)) (Constant i3 None) None) (Assign (list (Name &p1:0 Store)) (Constant i1 None) None) (Assign (list (Name &p2:0 Store)) (Constant i2 None) None) (Assign (list (Name &yes:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &num:0 Load))) nil) (/seq (fn_1 &winner:0) (If (Compare (Name &winner:0 Load) (list Is) (list (Name &spectator:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Assign (list (Name &yes:0 Store)) (Constant False None) None) Break) (/seq)) (If (Compare (Name &p1:0 Load) (list Is) (list (Name &winner:0 Load))) (/seq (Assign (list (Name &temp:0 Store)) (Name &spectator:0 Load) None) (Assign (list (Name &spectator:0 Store)) (Name &p2:0 Load) None) (Assign (list (Name &p2:0 Store)) (Name &temp:0 Load) None)) (/seq (Assign (list (Name &temp:0 Store)) (Name &spectator:0 Load) None) (Assign (list (Name &spectator:0 Store)) (Name &p1:0 Load) None) (Assign (list (Name &p1:0 Store)) (Name &temp:0 Load) None)))) (/seq) None) (If (Name &yes:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &input:0 Store)) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_read Load) nil nil) None) (Assign (list (Name &data:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &input:0 Load) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &n:0 Store)) (Subscript (Name &data:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &a:0 Store)) (Subscript (Name &data:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &playing1:0 Store)) (_starred_content (Name &playing2:0 Store)) (_starred_content (Name &spectate:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load) None) (Assign (list (Name &Yes:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &spectate:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Assign (list (Name &Yes:0 Store)) (Constant i0 None) None) Break) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &playing1:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &playing2:0 Store)) (_starred_content (Name &spectate:0 Store))) Store)) (Tuple (list (_starred_content (Name &spectate:0 Load)) (_starred_content (Name &playing2:0 Load))) Load) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &playing1:0 Store)) (_starred_content (Name &spectate:0 Store))) Store)) (Tuple (list (_starred_content (Name &spectate:0 Load)) (_starred_content (Name &playing1:0 Load))) Load) None)))))) (/seq) None) (If (Name &Yes:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))) (/seq))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &out:0 Store)) (Constant i3 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (fn_1 &win:0) (If (Compare (Name &win:0 Load) (list Eq) (list (Name &out:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq (Assign (list (Name &l:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load) None) (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &out:0 Load))) nil)) (Expr (Call (Attribute (Name &l:0 Load) s_remove Load) (list (_starred_content (Name &win:0 Load))) nil)) (Assign (list (Name &out:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Constant i0 None)) Load) None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
      "(Module (/seq (fn_1 &num_games:0) (Assign (list (Name &roster:0 Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (For (Name &game:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &num_games:0 Load))) nil) (/seq (fn_1 &winner:0) (If (Compare (Name &winner:0 Load) (list In) (list (Name &roster:0 Load))) (/seq (Assign (list (Name &roster:0 Store)) (Tuple (list (_starred_content (Name &winner:0 Load)) (_starred_content (BinOp (Constant i6 None) Sub (Call (Name g_sum Load) (list (_starred_content (Name &roster:0 Load))) nil)))) Load) None)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) nil nil))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (fn_1 &x:0) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &x:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &b:0 Load))) Load) None)) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Name &x:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) Load) None)) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (fn_1 &x:0) (If (BoolOp And (list (Compare (Name &x:0 Load) (list NotEq) (list (Name &a:0 Load))) (Compare (Name &x:0 Load) (list NotEq) (list (Name &b:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (BoolOp And (list (Compare (Constant i3 None) (list NotEq) (list (Name &a:0 Load))) (Compare (Constant i3 None) (list NotEq) (list (Name &b:0 Load))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Constant i3 None))) Load) None)) (/seq (If (BoolOp And (list (Compare (Constant i2 None) (list NotEq) (list (Name &a:0 Load))) (Compare (Constant i2 None) (list NotEq) (list (Name &b:0 Load))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Constant i2 None))) Load) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Constant i1 None))) Load) None)))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &lst:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Assign (list (Name &players:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (Assign (list (Name &hasPrint:0 Store)) (Constant False None) None) (For (Name &x:0 Store) (Name &lst:0 Load) (/seq (If (UnaryOp Not (Compare (Name &x:0 Load) (list In) (list (Name &players:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Assign (list (Name &hasPrint:0 Store)) (Constant True None) None) Break) (/seq)) (Assign (list (Name &total:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load) None) (Expr (Call (Attribute (Name &total:0 Load) s_remove Load) (list (_starred_content (Subscript (Name &players:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Attribute (Name &total:0 Load) s_remove Load) (list (_starred_content (Subscript (Name &players:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) (Expr (Call (Attribute (Name &players:0 Load) s_clear Load) nil nil)) (Expr (Call (Attribute (Name &players:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Attribute (Name &players:0 Load) s_append Load) (list (_starred_content (Subscript (Name &total:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (/seq) None) (If (UnaryOp Not (Name &hasPrint:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (Assign (list (Name &o:0 Store)) (Constant i3 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (fn_1 &a:0) (If (Compare (Name &a:0 Load) (list In) (list (Name &p:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (BinOp (Call (Attribute (Name &p:0 Load) s_index Load) (list (_starred_content (Name &a:0 Load))) nil) Add (Constant i1 None)) Mod (Constant i2 None))) Store)) (_starred_content (Name &o:0 Store))) Store)) (Tuple (list (_starred_content (Name &o:0 Load)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (BinOp (Call (Attribute (Name &p:0 Load) s_index Load) (list (_starred_content (Name &a:0 Load))) nil) Add (Constant i1 None)) Mod (Constant i2 None))) Load))) Load) None)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (Assign (list (Name &c:0 Store)) (Constant True None) None) (Assign (list (Name &d:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (Assign (list (Name &e:0 Store)) (Constant i3 None) None) (Assign (list (Name &j:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &j:0 Load) (list Lt) (list (Name &n:0 Load))) (Compare (Name &c:0 Load) (list Eq) (list (Constant True None))))) (/seq (Assign (list (Name &h:0 Store)) (Call (Attribute (Name &d:0 Load) s_count Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil) None) (If (Compare (Name &h:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &f:0 Store)) (Subscript (Name &d:0 Load) (_slice_content (BinOp (Constant i1 None) Sub (Call (Attribute (Name &d:0 Load) s_index Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil))) Load) None) (Assign (list (Subscript (Name &d:0 Load) (_slice_content (BinOp (Constant i1 None) Sub (Call (Attribute (Name &d:0 Load) s_index Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil))) Store)) (Name &e:0 Load) None) (Assign (list (Name &e:0 Store)) (Name &f:0 Load) None) (Assign (list (Name &j:0 Store)) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &c:0 Store)) (Constant False None) None)))) (/seq)) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &b:0 Store)) (Constant i3 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &x:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load) None) (fn_1 &a:0) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Expr (Call (Attribute (Name &x:0 Load) s_remove Load) (list (_starred_content (Name &b:0 Load))) nil)) (Expr (Call (Attribute (Name &x:0 Load) s_remove Load) (list (_starred_content (Name &a:0 Load))) nil)) (Assign (list (Name &b:0 Store)) (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content\n            (Subscript (Name &l:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n          )\n          (_starred_content (UnaryOp USub (Name &m:0 Load)))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (While\n          (Compare (Name &b:0 Load) (list Lt) (list (Name &a:0 Load)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list LtE) (list (BinOp (Name &b:0 Load) Add (Name &m:0 Load))))\n              (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None)))\n              (/seq)\n            )\n            (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &t:0 Load) s_pop Load) nil nil) None)\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &A:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &B:1 Store)) (Call (Name g_set Load) nil nil) None)\n        (Assign\n          (list (Name &a:1 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &A:1 Load))) nil)))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &a:1 Load) s_append Load)\n            (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i7 None)) Sub (Constant i1 None))))\n            nil\n          )\n        )\n        (Assign (list (Name &i:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare\n            (Name &i:1 Load)\n            (list Lt)\n            (list\n              (BinOp (Call (Name g_len Load) (list (_starred_content (Name &a:1 Load))) nil) Sub (Constant i1 None))\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                    (list Lt)\n                    (list\n                      (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)\n                    )\n                  )\n                  (Compare\n                    (BinOp (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Name &k:1 Load))\n                    (list GtE)\n                    (list\n                      (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &B:1 Load) s_add Load)\n                    (list (_starred_content (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq)\n            )\n            (Assign (list (Name &i:1 Store)) (BinOp (Name &i:1 Load) Add (Constant i1 None)) None)\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &res:1 Store))\n          (ListComp\n            (Name &x:2 Load)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Name &A:1 Load)\n                (list (Compare (Name &x:2 Load) (list NotIn) (list (Name &B:1 Load))))\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &res:1 Load))) nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &stfn:0 Store)) (_starred_content (Name &stfk:0 Store))) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &stfn:0 Load))) nil))\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &stfk:0 Load))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &array:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &s:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &array:0 Store))\n      (Call (Name g_sorted Load) (list (_starred_content (Name &array:0 Load))) nil)\n      None\n    )\n    (Assign (list (Name &hmap:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (Assign\n      (list (Name &ar:0 Store))\n      (List (list (_starred_content (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load))) Load)\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Name &array:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Name &j:0 Load)\n            (list NotEq)\n            (list (Subscript (Name &ar:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr (Call (Attribute (Name &ar:0 Load) s_append Load) (list (_starred_content (Name &j:0 Load))) nil))\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &j:0 Load) (list In) (list (Name &hmap:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &hmap:0 Load) (_slice_content (Name &j:0 Load)) Store) Add (Constant i1 None))\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &hmap:0 Load) (_slice_content (Name &j:0 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &arr:0 Store)) (List nil Load) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare\n        (Name &i:0 Load)\n        (list Lt)\n        (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &ar:0 Load))) nil) Sub (Constant i1 None)))\n      )\n      (/seq\n        (If\n          (UnaryOp\n            Not\n            (BoolOp\n              And\n              (list\n                (Compare\n                  (Subscript (Name &ar:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (list Gt)\n                  (list (Subscript (Name &ar:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                (Compare\n                  (Subscript (Name &ar:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  (list LtE)\n                  (list\n                    (BinOp (Subscript (Name &ar:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &K:0 Load))\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &arr:0 Load) s_append Load)\n                (list (_starred_content (Subscript (Name &ar:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_append Load)\n        (list (_starred_content (Subscript (Name &ar:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))\n        nil\n      )\n    )\n    (Assign (list (Name &additLength:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &j:0 Store)\n      (Name &arr:0 Load)\n      (/seq\n        (If\n          (Compare (Name &j:0 Load) (list In) (list (Name &hmap:0 Load)))\n          (/seq\n            (AugAssign\n              (Name &additLength:0 Store)\n              Add\n              (BinOp (Subscript (Name &hmap:0 Load) (_slice_content (Name &j:0 Load)) Load) Sub (Constant i1 None))\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil)\n              Add\n              (Name &additLength:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &counts:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &indi:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (For\n      (Name &s:0 Store)\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &counts:0 Load) (_slice_content (Name &s:0 Load)) Store))\n          (BinOp\n            (Call\n              (Attribute (Name &counts:0 Load) s_get Load)\n              (list (_starred_content (Name &s:0 Load)) (_starred_content (Constant i0 None)))\n              nil\n            )\n            Add\n            (Constant i1 None)\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &indi:0 Load) s_add Load) (list (_starred_content (Name &s:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &sizes:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Name &indi:0 Load))) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &sizes:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare\n        (Name &i:0 Load)\n        (list Lt)\n        (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                (list Lt)\n                (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))\n              )\n              (Compare\n                (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Lt)\n                (list\n                  (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              (Compare\n                (BinOp (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &K:0 Load))\n                (list GtE)\n                (list\n                  (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              (Compare\n                (Subscript\n                  (Name &counts:0 Load)\n                  (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  Load\n                )\n                (list NotEq)\n                (list (Constant i1 None))\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &counts:0 Load)\n                  (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  Store\n                )\n              )\n              (Constant i1 None)\n              None\n            )\n          )\n          (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare\n        (Name &i:0 Load)\n        (list Lt)\n        (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                (list Lt)\n                (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))\n              )\n              (Compare\n                (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Lt)\n                (list\n                  (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              (Compare\n                (BinOp (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &K:0 Load))\n                (list GtE)\n                (list\n                  (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              (Compare\n                (Subscript\n                  (Name &counts:0 Load)\n                  (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  Load\n                )\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &counts:0 Load)\n                  (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  Store\n                )\n              )\n              (Constant i0 None)\n              None\n            )\n          )\n          (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n    )\n    (Assign (list (Name &counting:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &key:0 Store)\n      (Call (Attribute (Name &counts:0 Load) s_keys Load) nil nil)\n      (/seq\n        (AugAssign\n          (Name &counting:0 Store)\n          Add\n          (Subscript (Name &counts:0 Load) (_slice_content (Name &key:0 Load)) Load)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &counting:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (_starred_content (Name g_int Load))\n            (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name &R:0 Load) nil nil))) nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &a:0 Store)) (Subscript (Name &r:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Subscript (Name &r:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Name &a:0 Load)))\n          (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &i:0 Load) Sub (Name &a:0 Load)) (list LtE) (list (Name &m:0 Load)))\n              (/seq Pass)\n              (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &c:0 Load) Add (Constant i1 None))))\n            )\n            (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n          )\n        )\n        (Assign (list (Name &a:0 Store)) (Name &i:0 Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &c:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)))\n              nil\n            )\n          )\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)))\n              nil\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list (comprehension (Name &i:1 Store) (Name &d:0 Load) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp\n                  (Subscript (Name &d:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  Sub\n                  (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n                (list LtE)\n                (list (Name &K:0 Load))\n              )\n              (Compare\n                (Subscript (Name &d:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                (list Gt)\n                (list (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n            (If\n              (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list\n                      (Subscript (Name &d:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &j:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None)\n                    (While\n                      (Compare\n                        (Subscript (Name &d:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                        (list Eq)\n                        (list (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                      )\n                      (/seq\n                        (AugAssign (Name &j:0 Store) Sub (Constant i1 None))\n                        (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n                      )\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n            Continue\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &c:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (UnaryOp Not (Name &s:0 Load))\n          (/seq\n            (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))\n            Continue\n          )\n          (/seq)\n        )\n        (While\n          (Name &s:0 Load)\n          (/seq\n            (If\n              (Compare\n                (BinOp (Name &a:0 Load) Sub (Name &K:0 Load))\n                (list LtE Lt)\n                (list\n                  (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                  (Name &a:0 Load)\n                )\n              )\n              (/seq (Expr (Call (Attribute (Name &s:0 Load) s_pop Load) nil nil)))\n              (/seq Break)\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &peso:0 Store))\n      (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &cont:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Lt)\n                (list\n                  (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                (list LtE)\n                (list (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &k:0 Load)))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &cont:0 Store) Add (Subscript (Name &peso:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list\n                  (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &peso:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n                  Add\n                  (Subscript (Name &peso:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Name &cont:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &bacteria:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &bacteria:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &previous_bacterium:0 Store))\n      (Subscript (Name &bacteria:0 Load) (_slice_content (Constant i0 None)) Load)\n      None\n    )\n    (Assign (list (Name &same_bacteria:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &bacterium:0 Store)\n      (Subscript (Name &bacteria:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n      (/seq\n        (If\n          (Compare (Name &bacterium:0 Load) (list Gt) (list (Name &previous_bacterium:0 Load)))\n          (/seq\n            (AugAssign (Name &same_bacteria:0 Store) Add (Constant i1 None))\n            (If\n              (Compare\n                (BinOp (Name &bacterium:0 Load) Sub (Name &previous_bacterium:0 Load))\n                (list LtE)\n                (list (Name &k:0 Load))\n              )\n              (/seq (AugAssign (Name &n:0 Store) Sub (Name &same_bacteria:0 Load)))\n              (/seq)\n            )\n            (Assign (list (Name &same_bacteria:0 Store)) (Constant i0 None) None)\n          )\n          (/seq (AugAssign (Name &same_bacteria:0 Store) Add (Constant i1 None)))\n        )\n        (Assign (list (Name &previous_bacterium:0 Store)) (Name &bacterium:0 Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_bisect None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &list:0 Store))\n      (Call\n        (Name &list:0 Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &list:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &item:0 Store)\n      (Name &list:0 Load)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Attribute (Name g_bisect Load) s_bisect Load)\n            (list (_starred_content (Name &list:0 Load)) (_starred_content (Name &item:0 Load)))\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list NotEq) (list (Name &n:0 Load)))\n              (Compare\n                (BinOp (Subscript (Name &list:0 Load) (_slice_content (Name &a:0 Load)) Load) Sub (Name &item:0 Load))\n                (list LtE)\n                (list (Name &k:0 Load))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &cnt:0 Load)))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Name g_sorted Load) &m:0 &n:0 &l:0)) (Assign (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &l:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)) (_starred_content (UnaryOp USub (Name &m:0 Load)))) Load) None) (For (Name &a:0 Store) (Name &l:0 Load) (/seq (While (Compare (Name &b:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (If (Compare (Name &a:0 Load) (list LtE) (list (BinOp (Name &b:0 Load) Add (Name &m:0 Load)))) (/seq (AugAssign (Name &n:0 Store) Sub (Constant i1 None))) (/seq)) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &t:0 Load) s_pop Load) nil nil) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &A:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &a:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &A:1 Load))) nil))) nil) None) (Expr (Call (Attribute (Name &a:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i7 None)) Sub (Constant i1 None)))) nil)) (Assign (list (Name &i:1 Store)) (Constant i0 None) None) (While (Compare (Name &i:1 Load) (list Lt) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &a:1 Load))) nil) Sub (Constant i1 None)))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Lt) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (Compare (BinOp (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Name &k:1 Load)) (list GtE) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))))) (/seq (Expr (Call (Attribute (Name &B:1 Load) s_add Load) (list (_starred_content (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil))) (/seq)) (Assign (list (Name &i:1 Store)) (BinOp (Name &i:1 Load) Add (Constant i1 None)) None)) (/seq)) (Assign (list (Name &res:1 Store)) (ListComp (Name &x:2 Load) (list (comprehension (Name &x:2 Store) (Name &A:1 Load) (list (Compare (Name &x:2 Load) (list NotIn) (list (Name &B:1 Load)))) i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &res:1 Load))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &stfn:0 Store)) (_starred_content (Name &stfk:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &stfn:0 Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &stfk:0 Load))) nil))) Load) None) (Assign (list (Name &array:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &array:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &array:0 Load))) nil) None) (Assign (list (Name &hmap:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Name &ar:0 Store)) (List (list (_starred_content (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load))) Load) None) (For (Name &j:0 Store) (Name &array:0 Load) (/seq (If (Compare (Name &j:0 Load) (list NotEq) (list (Subscript (Name &ar:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Attribute (Name &ar:0 Load) s_append Load) (list (_starred_content (Name &j:0 Load))) nil))) (/seq)) (If (Compare (Name &j:0 Load) (list In) (list (Name &hmap:0 Load))) (/seq (AugAssign (Subscript (Name &hmap:0 Load) (_slice_content (Name &j:0 Load)) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &hmap:0 Load) (_slice_content (Name &j:0 Load)) Store)) (Constant i1 None) None)))) (/seq) None) (Assign (list (Name &arr:0 Store)) (List nil Load) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &ar:0 Load))) nil) Sub (Constant i1 None)))) (/seq (If (UnaryOp Not (BoolOp And (list (Compare (Subscript (Name &ar:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list Gt) (list (Subscript (Name &ar:0 Load) (_slice_content (Name &i:0 Load)) Load))) (Compare (Subscript (Name &ar:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list LtE) (list (BinOp (Subscript (Name &ar:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &K:0 Load))))))) (/seq (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Subscript (Name &ar:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Subscript (Name &ar:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil)) (Assign (list (Name &additLength:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Name &arr:0 Load) (/seq (If (Compare (Name &j:0 Load) (list In) (list (Name &hmap:0 Load))) (/seq (AugAssign (Name &additLength:0 Store) Add (BinOp (Subscript (Name &hmap:0 Load) (_slice_content (Name &j:0 Load)) Load) Sub (Constant i1 None)))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil) Add (Name &additLength:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &counts:0 Store)) (Dict nil nil) None) (Assign (list (Name &indi:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &s:0 Store) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) (/seq (Assign (list (Subscript (Name &counts:0 Load) (_slice_content (Name &s:0 Load)) Store)) (BinOp (Call (Attribute (Name &counts:0 Load) s_get Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Constant i0 None))) nil) Add (Constant i1 None)) None) (Expr (Call (Attribute (Name &indi:0 Load) s_add Load) (list (_starred_content (Name &s:0 Load))) nil))) (/seq) None) (Assign (list (Name &sizes:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &indi:0 Load))) nil) None) (Expr (Call (Attribute (Name &sizes:0 Load) s_sort Load) nil nil)) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:0 Load) Add (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))) (Compare (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (Compare (BinOp (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &K:0 Load)) (list GtE) (list (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (Compare (Subscript (Name &counts:0 Load) (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load)) Load) (list NotEq) (list (Constant i1 None))))) (/seq (Assign (list (Subscript (Name &counts:0 Load) (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None))))) (/seq)) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:0 Load) Add (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sizes:0 Load))) nil))) (Compare (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (Compare (BinOp (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &K:0 Load)) (list GtE) (list (Subscript (Name &sizes:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (Compare (Subscript (Name &counts:0 Load) (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Assign (list (Subscript (Name &counts:0 Load) (_slice_content (Subscript (Name &sizes:0 Load) (_slice_content (Name &i:0 Load)) Load)) Store)) (Constant i0 None) None)) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None))))) (/seq)) (Assign (list (Name &counting:0 Store)) (Constant i0 None) None) (For (Name &key:0 Store) (Call (Attribute (Name &counts:0 Load) s_keys Load) nil nil) (/seq (AugAssign (Name &counting:0 Store) Add (Subscript (Name &counts:0 Load) (_slice_content (Name &key:0 Load)) Load))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &counting:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &R:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name &R:0 Load) nil nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name &R:0 Load) nil nil))) nil))) nil) None) (Assign (list (Name &s:0 Store)) (Constant i1 None) None) (Assign (list (Name &a:0 Store)) (Subscript (Name &r:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Subscript (Name &r:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Name &a:0 Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &i:0 Load) Sub (Name &a:0 Load)) (list LtE) (list (Name &m:0 Load))) (/seq Pass) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &c:0 Load) Add (Constant i1 None))))) (Assign (list (Name &c:0 Store)) (Constant i0 None) None))) (Assign (list (Name &a:0 Store)) (Name &i:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &K:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load))) nil))) Load) None) (Assign (list (Name &d:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &d:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Name &d:0 Load) nil i0))) None) (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil nil)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &d:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list LtE) (list (Name &K:0 Load))) (Compare (Subscript (Name &d:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list Gt) (list (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load))))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Subscript (Name &d:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load))) (/seq (Assign (list (Name &j:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None) (While (Compare (Subscript (Name &d:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Eq) (list (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Name &j:0 Store) Sub (Constant i1 None)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq))) (/seq))) (/seq)) Continue) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &K:0 &n:0 &A:0)) (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil)) (Assign (list (Name &s:0 Store)) (List nil Load) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (UnaryOp Not (Name &s:0 Load)) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil)) Continue) (/seq)) (While (Name &s:0 Load) (/seq (If (Compare (BinOp (Name &a:0 Load) Sub (Name &K:0 Load)) (list LtE Lt) (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (Name &a:0 Load))) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_pop Load) nil nil))) (/seq Break))) (/seq)) (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &k:0 &n:0 &s:0)) (Assign (list (Name &peso:0 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:0 Load)) None) (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil)) (Assign (list (Name &cont:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list LtE) (list (BinOp (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Name &k:0 Load)))))) (/seq (AugAssign (Name &cont:0 Store) Add (Subscript (Name &peso:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (/seq (AugAssign (Subscript (Name &peso:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Add (Subscript (Name &peso:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Name &cont:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_list Load) &k:0 &n:0 &bacteria:0)) (Expr (Call (Attribute (Name &bacteria:0 Load) s_sort Load) nil nil)) (Assign (list (Name &previous_bacterium:0 Store)) (Subscript (Name &bacteria:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &same_bacteria:0 Store)) (Constant i0 None) None) (For (Name &bacterium:0 Store) (Subscript (Name &bacteria:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Name &bacterium:0 Load) (list Gt) (list (Name &previous_bacterium:0 Load))) (/seq (AugAssign (Name &same_bacteria:0 Store) Add (Constant i1 None)) (If (Compare (BinOp (Name &bacterium:0 Load) Sub (Name &previous_bacterium:0 Load)) (list LtE) (list (Name &k:0 Load))) (/seq (AugAssign (Name &n:0 Store) Sub (Name &same_bacteria:0 Load))) (/seq)) (Assign (list (Name &same_bacteria:0 Store)) (Constant i0 None) None)) (/seq (AugAssign (Name &same_bacteria:0 Store) Add (Constant i1 None)))) (Assign (list (Name &previous_bacterium:0 Store)) (Name &bacterium:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_bisect None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (Assign (list (Name &list:0 Store)) (Call (Name &list:0 Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Attribute (Name &list:0 Load) s_sort Load) nil nil)) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &item:0 Store) (Name &list:0 Load) (/seq (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect Load) (list (_starred_content (Name &list:0 Load)) (_starred_content (Name &item:0 Load))) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list NotEq) (list (Name &n:0 Load))) (Compare (BinOp (Subscript (Name &list:0 Load) (_slice_content (Name &a:0 Load)) Load) Sub (Name &item:0 Load)) (list LtE) (list (Name &k:0 Load))))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &cnt:0 Load)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Name &n:0 Load) (_slice_content (BinOp (Name &K:0 Load) Sub (Constant i1 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &lis:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &lis:0 Load)\n              (_slice_content\n                (BinOp\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &A:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &A:0 Load)\n              (_slice_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i1 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &A:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (List\n              (list\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i5 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i5 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i14 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i5 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i5 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i15 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i2 None))\n                (_starred_content (Constant i5 None))\n                (_starred_content (Constant i4 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i4 None))\n                (_starred_content (Constant i1 None))\n                (_starred_content (Constant i51 None))\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &l:0 Load)\n              (_slice_content\n                (BinOp\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Tuple\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (AugAssign (Name &b:0 Store) Sub (Constant i1 None))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &b:0 Load)) Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Name &N:0 Load) (_slice_content (BinOp (Name &M:0 Load) Sub (Constant i1 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &p:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Name &p:0 Load)\n              (_slice_content\n                (BinOp\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a_list:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i14 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i15 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i51 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &K:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Name &a_list:0 Load) (_slice_content (BinOp (Name &K:0 Load) Sub (Constant i1 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i15 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i51 None))) Load) None) ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (BinOp #0 Sub (Constant i1 None))) Load))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 (Name &K:0 Load) &n:0 (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) nil)",
      "(Module (fn_1 (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) &lis:0 /nothing) nil)",
      "(Module (/seq (Assign (list (Name &A:0 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i15 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i51 None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) Load))) nil))) nil)",
      "(Module (fn_1 (Name &b:0 Load) &a:0 (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) nil)",
      "(Module (fn_1 (Name &n:0 Load) &A:0 (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) nil)",
      "(Module (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i15 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i51 None))) Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) Sub (Constant i1 None))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i14 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i15 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i51 None))) Load) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (AugAssign (Name &b:0 Store) Sub (Constant i1 None)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &b:0 Load)) Load))) nil))) nil)",
      "(Module (fn_1 (Name &M:0 Load) &N:0 (Assign (list (Name &M:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) nil)",
      "(Module (fn_1 (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) &p:0 /nothing) nil)",
      "(Module (fn_1 (Name &K:0 Load) &a_list:0 (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias g_combinations None) (alias g_permutations None)) i0)\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i7 None))\n          (_starred_content (Constant i12 None))\n          (_starred_content (Constant i20 None))\n          (_starred_content (Constant i29 None))\n          (_starred_content (Constant i38 None))\n          (_starred_content (Constant i52 None))\n          (_starred_content (Constant i73 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &w:0 Store))\n      (ListComp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None))\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript (Name &w:0 Load) (_slice_content (Constant i0 None)) Load)\n          (_slice_content (Constant i1 None))\n          Store\n        )\n        (Subscript\n          (Subscript (Name &w:0 Load) (_slice_content (Constant i1 None)) Load)\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &n:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign (list (Name &M:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &perm:0 Store)\n          (Call\n            (Name g_permutations Load)\n            (list\n              (_starred_content\n                (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n              )\n              (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign (list (Name &tmp:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil)\n              (/seq\n                (AugAssign\n                  (Name &tmp:0 Store)\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Name &w:0 Load)\n                      (_slice_content (Subscript (Name &perm:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                      Load\n                    )\n                    (_slice_content\n                      (Subscript\n                        (Name &perm:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign\n              (list (Name &M:0 Store))\n              (Call\n                (Name g_max Load)\n                (list (_starred_content (Name &M:0 Load)) (_starred_content (Name &tmp:0 Load)))\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (AugAssign (Name &M:0 Store) Add (Constant i1 None))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                  Store\n                )\n                (Subscript\n                  (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (Name &i:0 Load))\n                  Store\n                )\n              )\n              (BinOp (Name &M:0 Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (ListComp\n                        (Call (Name g_str Load) (list (_starred_content (Name &j:2 Load))) nil)\n                        (list\n                          (comprehension\n                            (Name &j:2 Store)\n                            (Subscript\n                              (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_slice (Slice None (Name &N:0 Load) None))\n                              Load\n                            )\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Import (list (alias &itertools:0 None)))\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i4 None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i12 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &sum_2:0 Store))\n          (Call\n            (Name g_set Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (BinOp (Name &x:4 Load) Add (Name &y:4 Load))\n                  (list\n                    (comprehension\n                      (Tuple (list (_starred_content (Name &x:4 Store)) (_starred_content (Name &y:4 Store))) Store)\n                      (Call\n                        (Attribute (Name &itertools:0 Load) s_combinations Load)\n                        (list (_starred_content (Name &A:0 Load)) (_starred_content (Constant i2 None)))\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &avoid:0 Store))\n          (Call\n            (Name g_set Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (BinOp (Name &x:5 Load) Sub (Name &y:5 Load))\n                  (list\n                    (comprehension\n                      (Tuple (list (_starred_content (Name &x:5 Store)) (_starred_content (Name &y:5 Store))) Store)\n                      (Call\n                        (Attribute (Name &itertools:0 Load) s_product Load)\n                        (list (_starred_content (Name &sum_2:0 Load)) (_starred_content (Name &A:0 Load)))\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Call\n                        (Name g_set Load)\n                        (list\n                          (_starred_content\n                            (Call\n                              (Name g_range Load)\n                              (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1000 None)))\n                              nil\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      Sub\n                      (Name &avoid:0 Load)\n                    )\n                    Sub\n                    (Name &sum_2:0 Load)\n                  )\n                  Sub\n                  (Call (Name g_set Load) (list (_starred_content (Name &A:0 Load))) nil)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &A:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &L:0 Store))\n      (ListComp\n        (BinOp\n          (List (list (_starred_content (Constant i0 None))) Load)\n          Mult\n          (BinOp (BinOp (Name &N:0 Load) Sub (Constant i1 None)) Sub (Name &i:1 Load))\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &n:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &L:0 Load) (_slice_content (Name &n:0 Load)) Store))\n          (ListComp\n            (BinOp (Name &x:0 Load) Mult (Name &a:3 Load))\n            (list\n              (comprehension\n                (Name &a:3 Store)\n                (Subscript\n                  (Name &A:0 Load)\n                  (_slice_slice\n                    (Slice None (BinOp (BinOp (Name &N:0 Load) Sub (Constant i1 None)) Sub (Name &n:0 Load)) None)\n                  )\n                  Load\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i2 None))))\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (BinOp\n                (Subscript\n                  (Subscript (Name &L:0 Load) (_slice_content (Name &n:0 Load)) Load)\n                  (_slice_content (UnaryOp USub (Constant i1 None)))\n                  Load\n                )\n                Add\n                (Subscript\n                  (Subscript (Name &L:0 Load) (_slice_content (Name &n:0 Load)) Load)\n                  (_slice_content (UnaryOp USub (Constant i2 None)))\n                  Load\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &graph:0 Store))\n      (ListComp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (For\n          (Tuple (list (_starred_content (Name &j:0 Store)) (_starred_content (Name &x:0 Store))) Store)\n          (Call\n            (Name g_enumerate Load)\n            (list (_starred_content (Subscript (Name &L:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &graph:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Add (Constant i1 None)))\n                  Store\n                )\n              )\n              (Name &x:0 Load)\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Subscript\n                    (Name &graph:0 Load)\n                    (_slice_content (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Add (Constant i1 None)))\n                    Load\n                  )\n                  (_slice_content (Name &i:0 Load))\n                  Store\n                )\n              )\n              (Name &x:0 Load)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &row:0 Store)\n      (Name &graph:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &row:0 Load) Load))) nil)))\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (Assign (list (Name &t:0 Store)) (List nil Load) None)\n    (Assign (list (Name &i:0 Store)) (Constant i1 None) None)\n    (While\n      (Compare\n        (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n        (list Lt)\n        (list (Name &N:0 Load))\n      )\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &i:0 Load) (list In) (list (Name &t:0 Load)))\n              (Call\n                (Name g_any Load)\n                (list\n                  (_starred_content\n                    (GeneratorExp\n                      (Compare (BinOp (Name &i:0 Load) Add (Name &s_:2 Load)) (list In) (list (Name &t:0 Load)))\n                      (list (comprehension (Name &s_:2 Store) (Name &s:0 Load) nil i0))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) Continue)\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &t:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n        (For\n          (Name &s_:0 Store)\n          (Name &s:0 Load)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &t:0 Load) s_append Load)\n                (list (_starred_content (BinOp (Name &i:0 Load) Add (Name &s_:0 Load))))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &w:0 Store))\n      (ListComp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None))\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Subscript\n          (Subscript (Name &w:0 Load) (_slice_content (Constant i0 None)) Load)\n          (_slice_content (Constant i1 None))\n          Store\n        )\n        (Subscript\n          (Subscript (Name &w:0 Load) (_slice_content (Constant i1 None)) Load)\n          (_slice_content (Constant i0 None))\n          Store\n        )\n      )\n      (Constant i1 None)\n      None\n    )\n    (Assign (list (Name &M:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &n:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (AugAssign (Name &M:0 Store) Add (Constant i1 None))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                  Store\n                )\n                (Subscript\n                  (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (Name &i:0 Load))\n                  Store\n                )\n              )\n              (BinOp (Name &M:0 Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (AugAssign\n          (Name &M:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (BinOp\n                (Subscript\n                  (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))\n                  Load\n                )\n                Add\n                (Subscript\n                  (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i3 None)))\n                  Load\n                )\n              )\n              Sub\n              (Subscript\n                (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load)\n                (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i3 None)))\n                Load\n              )\n            )\n            Sub\n            (Constant i1 None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (ListComp\n                        (Call (Name g_str Load) (list (_starred_content (Name &j:3 Load))) nil)\n                        (list\n                          (comprehension\n                            (Name &j:3 Store)\n                            (Subscript\n                              (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                              (_slice_slice (Slice None (Name &N:0 Load) None))\n                              Load\n                            )\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n:1 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Constant s-WzQ4LCAzMiwgNDksIDEwLCA0OSwgMzIsIDQ4XQ== None)))\n                nil\n              )\n            )\n            (Return None)\n          )\n          (/seq)\n        )\n        (Assign (list (Name &can:1 Store)) (List nil Load) None)\n        (Assign (list (Name &ban:1 Store)) (Call (Name g_set Load) nil nil) None)\n        (Assign (list (Name &k:1 Store)) (Constant i1 None) None)\n        (While\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &can:1 Load))) nil)\n            (list Lt)\n            (list (Constant i9 None))\n          )\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &k:1 Load) (list In) (list (Name &ban:1 Load)))\n                  (Call\n                    (Name g_any Load)\n                    (list\n                      (_starred_content\n                        (GeneratorExp\n                          (Compare (BinOp (Name &k:1 Load) Add (Name &l:5 Load)) (list In) (list (Name &ban:1 Load)))\n                          (list (comprehension (Name &l:5 Store) (Name &can:1 Load) nil i0))\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &k:1 Store) Add (Constant i1 None)) Continue)\n              (/seq)\n            )\n            (Expr (Call (Attribute (Name &ban:1 Load) s_add Load) (list (_starred_content (Name &k:1 Load))) nil))\n            (Expr\n              (Call\n                (Attribute (Name &ban:1 Load) s_update Load)\n                (list\n                  (_starred_content\n                    (GeneratorExp\n                      (BinOp (Name &k:1 Load) Add (Name &l:3 Load))\n                      (list (comprehension (Name &l:3 Store) (Name &can:1 Load) nil i0))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (Expr (Call (Attribute (Name &can:1 Load) s_append Load) (list (_starred_content (Name &k:1 Load))) nil))\n            (AugAssign (Name &k:1 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ans:1 Store))\n          (ListComp\n            (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load))\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load))\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Subscript (Name &ans:1 Load) (_slice_content (Constant i0 None)) Load)\n              (_slice_content (Constant i1 None))\n              Store\n            )\n            (Subscript\n              (Subscript (Name &ans:1 Load) (_slice_content (Constant i1 None)) Load)\n              (_slice_content (Constant i0 None))\n              Store\n            )\n          )\n          (Constant i1 None)\n          None\n        )\n        (Assign (list (Name &longest_path:1 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load)))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &np:1 Store)) (BinOp (Name &longest_path:1 Load) Add (Constant i1 None)) None)\n            (For\n              (Tuple (list (_starred_content (Name &j:1 Store)) (_starred_content (Name &c:1 Store))) Store)\n              (Call\n                (Name g_zip Load)\n                (list\n                  (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil))\n                  (_starred_content (Name &can:1 Load))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                      (_slice_content (Name &j:1 Load))\n                      Store\n                    )\n                    (Subscript\n                      (Subscript (Name &ans:1 Load) (_slice_content (Name &j:1 Load)) Load)\n                      (_slice_content (Name &i:1 Load))\n                      Store\n                    )\n                  )\n                  (BinOp (Name &np:1 Load) Mult (Name &c:1 Load))\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n            (AugAssign\n              (Name &longest_path:1 Store)\n              Add\n              (BinOp\n                (BinOp\n                  (Subscript\n                    (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                    (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))\n                    Load\n                  )\n                  Add\n                  (Subscript\n                    (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                    (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i2 None)))\n                    Load\n                  )\n                )\n                Sub\n                (Subscript\n                  (Subscript (Name &ans:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i2 None)))\n                  Load\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                  (list\n                    (_starred_content\n                      (GeneratorExp\n                        (Call\n                          (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                          (list\n                            (_starred_content\n                              (Call\n                                (Name g_map Load)\n                                (list (_starred_content (Name g_str Load)) (_starred_content (Name &row:4 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        (list (comprehension (Name &row:4 Store) (Name &ans:1 Load) nil i0))\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias g_permutations None)) i0)\n    (Import (list (alias g_sys None)))\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None))))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &int1:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n        (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) Sub (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &p2D:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n        (Call\n          (Name g_print Load)\n          (list (_starred_starred (Starred (Name &x:4 Load) Load)))\n          (list (keyword s_sep (Constant s-WzEwXQ== None)))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &II:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute\n                          (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                          s_split\n                          Load\n                        )\n                        nil\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LLI:0\n      (arguments nil (list (arg &rows_number:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name &LI:0 Load) nil nil)\n            (list\n              (comprehension\n                (Name &_:5 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &rows_number:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &SI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Subscript\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None))\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name &II:0 Load) nil nil) None)\n        (Assign\n          (list (Name &base:2 Store))\n          (List\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Constant i2 None))\n              (_starred_content (Constant i4 None))\n              (_starred_content (Constant i7 None))\n              (_starred_content (Constant i12 None))\n              (_starred_content (Constant i20 None))\n              (_starred_content (Constant i29 None))\n              (_starred_content (Constant i38 None))\n              (_starred_content (Constant i52 None))\n              (_starred_content (Constant i73 None))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:2 Store))\n          (ListComp\n            (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load))\n            (list\n              (comprehension\n                (Name &_:6 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Subscript (Name &ans:2 Load) (_slice_content (Constant i1 None)) Load)\n              (_slice_content (Constant i0 None))\n              Store\n            )\n            (Subscript\n              (Subscript (Name &ans:2 Load) (_slice_content (Constant i0 None)) Load)\n              (_slice_content (Constant i1 None))\n              Store\n            )\n          )\n          (Constant i1 None)\n          None\n        )\n        (For\n          (Name &vn:2 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i3 None))\n              (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign (list (Name &mx:2 Store)) (Constant i0 None) None)\n            (For\n              (Name &path:2 Store)\n              (Call\n                (Name g_permutations Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_range Load)\n                      (list (_starred_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None))))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &cur:2 Store))\n                  (Call\n                    (Name g_sum Load)\n                    (list\n                      (_starred_content\n                        (GeneratorExp\n                          (Subscript\n                            (Subscript (Name &ans:2 Load) (_slice_content (Name &v0:7 Load)) Load)\n                            (_slice_content (Name &v1:7 Load))\n                            Load\n                          )\n                          (list\n                            (comprehension\n                              (Tuple\n                                (list (_starred_content (Name &v0:7 Store)) (_starred_content (Name &v1:7 Store)))\n                                Store\n                              )\n                              (Call\n                                (Name g_zip Load)\n                                (list\n                                  (_starred_content (Name &path:2 Load))\n                                  (_starred_content\n                                    (Subscript\n                                      (Name &path:2 Load)\n                                      (_slice_slice (Slice (Constant i1 None) None None))\n                                      Load\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                              nil\n                              i0\n                            )\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &cur:2 Load) (list Gt) (list (Name &mx:2 Load)))\n                  (/seq (Assign (list (Name &mx:2 Store)) (Name &cur:2 Load) None))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &ans:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (Constant i0 None))\n                  Store\n                )\n                (Subscript\n                  (Subscript (Name &ans:2 Load) (_slice_content (Constant i0 None)) Load)\n                  (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None)))\n                  Store\n                )\n              )\n              (BinOp\n                (Subscript (Name &base:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i2 None))) Load)\n                Mult\n                (BinOp (Name &mx:2 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &ans:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None))) Load)\n                  (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i2 None)))\n                  Store\n                )\n                (Subscript\n                  (Subscript (Name &ans:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i2 None))) Load)\n                  (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None)))\n                  Store\n                )\n              )\n              (BinOp\n                (Subscript (Name &base:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i3 None))) Load)\n                Mult\n                (BinOp (Name &mx:2 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (For\n              (Name &j:2 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Name &vn:2 Load) Sub (Constant i2 None)))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript\n                        (Name &ans:2 Load)\n                        (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                      (_slice_content (Name &j:2 Load))\n                      Store\n                    )\n                    (Subscript\n                      (Subscript (Name &ans:2 Load) (_slice_content (Name &j:2 Load)) Load)\n                      (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (BinOp\n                    (Subscript\n                      (Name &base:2 Load)\n                      (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None)))\n                      Load\n                    )\n                    Mult\n                    (BinOp (Name &mx:2 Load) Add (Constant i1 None))\n                  )\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &row:2 Store)\n          (Name &ans:2 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &row:2 Load) Load))) nil)))\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Subscript (Subscript (Name %1 Load) (_slice_content #1) Load) (_slice_content #2) Store) (Subscript (Subscript (Name %1 Load) (_slice_content #2) Load) (_slice_content #1) Store)) #0 None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (ImportFrom s_itertools (list (alias g_combinations None) (alias g_permutations None)) i0) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i12 None)) (_starred_content (Constant i20 None)) (_starred_content (Constant i29 None)) (_starred_content (Constant i38 None)) (_starred_content (Constant i52 None)) (_starred_content (Constant i73 None))) Load) None) (Assign (list (Name &w:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None)) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) nil i0))) None) (fn_1 (Constant i1 None) (Constant i0 None) (Constant i1 None) &w:0) (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &M:0 Store)) (Constant i0 None) None) (For (Name &perm:0 Store) (Call (Name g_permutations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &tmp:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (AugAssign (Name &tmp:0 Store) Add (Subscript (Subscript (Name &w:0 Load) (_slice_content (Subscript (Name &perm:0 Load) (_slice_content (Name &i:0 Load)) Load)) Load) (_slice_content (Subscript (Name &perm:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) Load))) (/seq) None) (Assign (list (Name &M:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &M:0 Load)) (_starred_content (Name &tmp:0 Load))) nil) None)) (/seq) None) (AugAssign (Name &M:0 Store) Add (Constant i1 None)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (fn_1 (BinOp (Name &M:0 Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)) (Name &i:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) &w:0)) (/seq) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (ListComp (Call (Name g_str Load) (list (_starred_content (Name &j:2 Load))) nil) (list (comprehension (Name &j:2 Store) (Subscript (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_slice (Slice None (Name &N:0 Load) None)) Load) nil i0))))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Import (list (alias &itertools:0 None))) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None))) Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i12 None))) nil) (/seq (Assign (list (Name &sum_2:0 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (BinOp (Name &x:4 Load) Add (Name &y:4 Load)) (list (comprehension (Tuple (list (_starred_content (Name &x:4 Store)) (_starred_content (Name &y:4 Store))) Store) (Call (Attribute (Name &itertools:0 Load) s_combinations Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Constant i2 None))) nil) nil i0))))) nil) None) (Assign (list (Name &avoid:0 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (BinOp (Name &x:5 Load) Sub (Name &y:5 Load)) (list (comprehension (Tuple (list (_starred_content (Name &x:5 Store)) (_starred_content (Name &y:5 Store))) Store) (Call (Attribute (Name &itertools:0 Load) s_product Load) (list (_starred_content (Name &sum_2:0 Load)) (_starred_content (Name &A:0 Load))) nil) nil i0))))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (BinOp (BinOp (Call (Name g_set Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1000 None))) nil))) nil) Sub (Name &avoid:0 Load)) Sub (Name &sum_2:0 Load)) Sub (Call (Name g_set Load) (list (_starred_content (Name &A:0 Load))) nil)))) nil) None) (Expr (Call (Attribute (Name &A:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil))) (/seq) None) (Assign (list (Name &L:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Name &N:0 Load) Sub (Constant i1 None)) Sub (Name &i:1 Load))) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (Assign (list (Name &x:0 Store)) (Constant i1 None) None) (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Subscript (Name &L:0 Load) (_slice_content (Name &n:0 Load)) Store)) (ListComp (BinOp (Name &x:0 Load) Mult (Name &a:3 Load)) (list (comprehension (Name &a:3 Store) (Subscript (Name &A:0 Load) (_slice_slice (Slice None (BinOp (BinOp (Name &N:0 Load) Sub (Constant i1 None)) Sub (Name &n:0 Load)) None)) Load) nil i0))) None) (If (Compare (Name &n:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i2 None)))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Subscript (Subscript (Name &L:0 Load) (_slice_content (Name &n:0 Load)) Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Subscript (Name &L:0 Load) (_slice_content (Name &n:0 Load)) Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)) None)) (/seq))) (/seq) None) (Assign (list (Name &graph:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (For (Tuple (list (_starred_content (Name &j:0 Store)) (_starred_content (Name &x:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Subscript (Name &L:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &graph:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Add (Constant i1 None))) Store)) (Name &x:0 Load) None) (Assign (list (Subscript (Subscript (Name &graph:0 Load) (_slice_content (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Add (Constant i1 None))) Load) (_slice_content (Name &i:0 Load)) Store)) (Name &x:0 Load) None)) (/seq) None)) (/seq) None) (For (Name &row:0 Store) (Name &graph:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &row:0 Load) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (Assign (list (Name &t:0 Store)) (List nil Load) None) (Assign (list (Name &i:0 Store)) (Constant i1 None) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) (list Lt) (list (Name &N:0 Load))) (/seq (If (BoolOp Or (list (Compare (Name &i:0 Load) (list In) (list (Name &t:0 Load))) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (BinOp (Name &i:0 Load) Add (Name &s_:2 Load)) (list In) (list (Name &t:0 Load))) (list (comprehension (Name &s_:2 Store) (Name &s:0 Load) nil i0))))) nil))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) Continue) (/seq)) (Expr (Call (Attribute (Name &t:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil)) (For (Name &s_:0 Store) (Name &s:0 Load) (/seq (Expr (Call (Attribute (Name &t:0 Load) s_append Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Name &s_:0 Load)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &w:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None)) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) nil i0))) None) (fn_1 (Constant i1 None) (Constant i0 None) (Constant i1 None) &w:0) (Assign (list (Name &M:0 Store)) (Constant i1 None) None) (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &M:0 Store) Add (Constant i1 None)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (fn_1 (BinOp (Name &M:0 Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)) (Name &i:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) &w:0)) (/seq) None) (AugAssign (Name &M:0 Store) Add (BinOp (BinOp (BinOp (Subscript (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load) Add (Subscript (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i3 None))) Load)) Sub (Subscript (Subscript (Name &w:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i3 None))) Load)) Sub (Constant i1 None)))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (ListComp (Call (Name g_str Load) (list (_starred_content (Name &j:3 Load))) nil) (list (comprehension (Name &j:3 Store) (Subscript (Subscript (Name &w:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_slice (Slice None (Name &N:0 Load) None)) Load) nil i0))))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ4LCAzMiwgNDksIDEwLCA0OSwgMzIsIDQ4XQ== None))) nil)) (Return None)) (/seq)) (Assign (list (Name &can:1 Store)) (List nil Load) None) (Assign (list (Name &ban:1 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &k:1 Store)) (Constant i1 None) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &can:1 Load))) nil) (list Lt) (list (Constant i9 None))) (/seq (If (BoolOp Or (list (Compare (Name &k:1 Load) (list In) (list (Name &ban:1 Load))) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (BinOp (Name &k:1 Load) Add (Name &l:5 Load)) (list In) (list (Name &ban:1 Load))) (list (comprehension (Name &l:5 Store) (Name &can:1 Load) nil i0))))) nil))) (/seq (AugAssign (Name &k:1 Store) Add (Constant i1 None)) Continue) (/seq)) (Expr (Call (Attribute (Name &ban:1 Load) s_add Load) (list (_starred_content (Name &k:1 Load))) nil)) (Expr (Call (Attribute (Name &ban:1 Load) s_update Load) (list (_starred_content (GeneratorExp (BinOp (Name &k:1 Load) Add (Name &l:3 Load)) (list (comprehension (Name &l:3 Store) (Name &can:1 Load) nil i0))))) nil)) (Expr (Call (Attribute (Name &can:1 Load) s_append Load) (list (_starred_content (Name &k:1 Load))) nil)) (AugAssign (Name &k:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &ans:1 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) (list (comprehension (Name &_:2 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) nil i0))) None) (fn_1 (Constant i1 None) (Constant i0 None) (Constant i1 None) &ans:1) (Assign (list (Name &longest_path:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &np:1 Store)) (BinOp (Name &longest_path:1 Load) Add (Constant i1 None)) None) (For (Tuple (list (_starred_content (Name &j:1 Store)) (_starred_content (Name &c:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil)) (_starred_content (Name &can:1 Load))) nil) (/seq (fn_1 (BinOp (Name &np:1 Load) Mult (Name &c:1 Load)) (Name &i:1 Load) (Name &j:1 Load) &ans:1)) (/seq) None) (AugAssign (Name &longest_path:1 Store) Add (BinOp (BinOp (Subscript (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Add (Subscript (Subscript (Name &ans:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i2 None))) Load)) Sub (Subscript (Subscript (Name &ans:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i2 None))) Load)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &row:4 Load))) nil))) nil) (list (comprehension (Name &row:4 Store) (Name &ans:1 Load) nil i0))))) nil))) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_itertools (list (alias g_permutations None)) i0) (Import (list (alias g_sys None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None)))) nil)) (Assign (list (Name &int1:0 Store)) (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) Sub (Constant i1 None))) None) (Assign (list (Name &p2D:0 Store)) (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Call (Name g_print Load) (list (_starred_starred (Starred (Name &x:4 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None))))) None) (FunctionDef &II:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &MI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &LLI:0 (arguments nil (list (arg &rows_number:1 None None)) None nil nil None nil) (/seq (Return (ListComp (Call (Name &LI:0 Load) nil nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &rows_number:1 Load))) nil) nil i0))))) nil None None) (FunctionDef &SI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Subscript (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name &II:0 Load) nil nil) None) (Assign (list (Name &base:2 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i12 None)) (_starred_content (Constant i20 None)) (_starred_content (Constant i29 None)) (_starred_content (Constant i38 None)) (_starred_content (Constant i52 None)) (_starred_content (Constant i73 None))) Load) None) (Assign (list (Name &ans:2 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load)) (list (comprehension (Name &_:6 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) nil i0))) None) (fn_1 (Constant i1 None) (Constant i1 None) (Constant i0 None) &ans:2) (For (Name &vn:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &mx:2 Store)) (Constant i0 None) None) (For (Name &path:2 Store) (Call (Name g_permutations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Name &vn:2 Load) Sub (Constant i1 None)))) nil))) nil) (/seq (Assign (list (Name &cur:2 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Subscript (Subscript (Name &ans:2 Load) (_slice_content (Name &v0:7 Load)) Load) (_slice_content (Name &v1:7 Load)) Load) (list (comprehension (Tuple (list (_starred_content (Name &v0:7 Store)) (_starred_content (Name &v1:7 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &path:2 Load)) (_starred_content (Subscript (Name &path:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) nil i0))))) nil) None) (If (Compare (Name &cur:2 Load) (list Gt) (list (Name &mx:2 Load))) (/seq (Assign (list (Name &mx:2 Store)) (Name &cur:2 Load) None)) (/seq))) (/seq) None) (fn_1 (BinOp (Subscript (Name &base:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i2 None))) Load) Mult (BinOp (Name &mx:2 Load) Add (Constant i1 None))) (BinOp (Name &vn:2 Load) Sub (Constant i1 None)) (Constant i0 None) &ans:2) (fn_1 (BinOp (Subscript (Name &base:2 Load) (_slice_content (BinOp (Name &vn:2 Load) Sub (Constant i3 None))) Load) Mult (BinOp (Name &mx:2 Load) Add (Constant i1 None))) (BinOp (Name &vn:2 Load) Sub (Constant i1 None)) (BinOp (Name &vn:2 Load) Sub (Constant i2 None)) &ans:2) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &vn:2 Load) Sub (Constant i2 None)))) nil) (/seq (fn_1 (BinOp (Subscript (Name &base:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) Mult (BinOp (Name &mx:2 Load) Add (Constant i1 None))) (BinOp (Name &vn:2 Load) Sub (Constant i1 None)) (Name &j:2 Load) &ans:2)) (/seq) None)) (/seq) None) (For (Name &row:2 Store) (Name &ans:2 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &row:2 Load) Load))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Name &n:0 Load))\n              Add\n              (Constant i1 None)\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &S:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n              Add\n              (Subscript\n                (Name &S:0 Load)\n                (_slice_slice (Slice (BinOp (Name &i:0 Load) Add (Name &n:0 Load)) None None))\n                Load\n              )\n            )\n            (list Eq)\n            (list (Name &k:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None)\n    (Assign (list (Name &r:0 Store)) (Constant s_NO None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &k:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n              Add\n              (Subscript\n                (Name &s:0 Load)\n                (_slice_slice (Slice (BinOp (UnaryOp USub (Constant i7 None)) Add (Name &i:0 Load)) None None))\n                Load\n              )\n            )\n            (list Eq)\n            (list (Name &k:0 Load))\n          )\n          (/seq (Assign (list (Name &r:0 Store)) (Constant s_YES None) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &f:0 Store)) (Constant False None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n                  Add\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)\n                )\n                (list Eq)\n                (list (Constant s_keyence None))\n              )\n              (/seq (Assign (list (Name &f:0 Store)) (Constant True None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Name &f:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n                  Add\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)\n                )\n                (list Eq)\n                (list (Constant s_keyence None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &k:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Call\n                (Attribute (Name &S:0 Load) s_startswith Load)\n                (list\n                  (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load))\n                )\n                nil\n              )\n              (Call\n                (Attribute (Name &S:0 Load) s_endswith Load)\n                (list\n                  (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Name &i:0 Load))\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &S:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n                  Add\n                  (Subscript\n                    (Name &S:0 Load)\n                    (_slice_slice (Slice (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) None None))\n                    Load\n                  )\n                )\n                (list Eq)\n                (list (Constant s_keyence None))\n              )\n              (/seq (Assign (list (Name &a:0 Store)) (Constant i0 None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript (Constant s_YNEOS None) (_slice_slice (Slice (Name &a:0 Load) None (Constant i2 None))) Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &S:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &S:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &S:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n                  Add\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)\n                )\n                (list Eq)\n                (list (Constant s_keyence None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) None)\n    (Assign (list (Name &ans:0 Store)) (Constant s_NO None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &S:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n                  Add\n                  (Subscript (Name &S:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)\n                )\n                (list Eq)\n                (list (Constant s_keyence None))\n              )\n              (/seq (Assign (list (Name &ans:0 Store)) (Constant s_YES None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i8 None))) nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Call\n                (Attribute (Name &s:0 Load) s_startswith Load)\n                (list\n                  (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load))\n                )\n                nil\n              )\n              (Call\n                (Attribute (Name &s:0 Load) s_endswith Load)\n                (list\n                  (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load)\n                  Add\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)\n                )\n                (list Eq)\n                (list (Constant s_keyence None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_input Load) nil nil) None) ?0 (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content #1)) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content #0)) nil) (/seq (If (Compare (BinOp (Subscript (Name %1 Load) (_slice_slice (Slice None (Name %3 Load) None)) Load) Add (Subscript (Name %1 Load) (_slice_slice (Slice (Name %2 Load) None None)) Load)) (list Eq) (list (Constant s_keyence None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None) (Assign (list (Name &n:0 Store)) (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Constant i7 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Name &n:0 Load)) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &S:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load) Add (Subscript (Name &S:0 Load) (_slice_slice (Slice (BinOp (Name &i:0 Load) Add (Name &n:0 Load)) None None)) Load)) (list Eq) (list (Name &k:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None) (Assign (list (Name &r:0 Store)) (Constant s_NO None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &k:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load) Add (Subscript (Name &s:0 Load) (_slice_slice (Slice (BinOp (UnaryOp USub (Constant i7 None)) Add (Name &i:0 Load)) None None)) Load)) (list Eq) (list (Name &k:0 Load))) (/seq (Assign (list (Name &r:0 Store)) (Constant s_YES None) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &f:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load) Add (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)) (list Eq) (list (Constant s_keyence None))) (/seq (Assign (list (Name &f:0 Store)) (Constant True None) None)) (/seq))) (/seq) None)) (/seq) None) (If (Name &f:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil)",
      "(Module (fn_1 (Name &n:0 Load) (Name &n:0 Load) &s:0 &j:0 &i:0 (Assign (list (Name &n:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &k:0 Load))) nil))) nil) (/seq (If (BoolOp And (list (Call (Attribute (Name &S:0 Load) s_startswith Load) (list (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load))) nil) (Call (Attribute (Name &S:0 Load) s_endswith Load) (list (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Name &i:0 Load)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &S:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load) Add (Subscript (Name &S:0 Load) (_slice_slice (Slice (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) None None)) Load)) (list Eq) (list (Constant s_keyence None))) (/seq (Assign (list (Name &a:0 Store)) (Constant i0 None) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Constant s_YNEOS None) (_slice_slice (Slice (Name &a:0 Load) None (Constant i2 None))) Load))) nil))) nil)",
      "(Module (fn_1 (Name &S:0 Load) (BinOp (Name &S:0 Load) Sub (Constant i1 None)) &s:0 &j:0 &i:0 (Assign (list (Name &S:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant s_NO None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (BinOp (Subscript (Name &S:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load) Add (Subscript (Name &S:0 Load) (_slice_slice (Slice (Name &j:0 Load) None None)) Load)) (list Eq) (list (Constant s_keyence None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_YES None) None) Break) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Constant s_keyence None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i8 None))) nil) (/seq (If (BoolOp And (list (Call (Attribute (Name &s:0 Load) s_startswith Load) (list (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice None (Name &i:0 Load) None)) Load))) nil) (Call (Attribute (Name &s:0 Load) s_endswith Load) (list (_starred_content (Subscript (Name &k:0 Load) (_slice_slice (Slice (Name &i:0 Load) None None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) None)) nil)",
      "(Module (fn_1 (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) &s:0 &j:0 &i:0 /nothing) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &S:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content\n                        (Call\n                          (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                          (list (_starred_content (Constant s-WzMyXQ== None)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &S:0 Load) Sub (Name &N:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &S:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_sum Load) (list (_starred_content (Name &S:0 Load))) nil)\n              Sub\n              (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (ListComp\n                    (BinOp\n                      (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil)\n                      Sub\n                      (Constant i1 None)\n                    )\n                    (list\n                      (comprehension\n                        (Name &s:1 Store)\n                        (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &L:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &L:0 Load))) nil) Sub (Name &N:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) Sub (Name &n:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &arr:0 Load))) nil) Sub (Name &n:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (ListComp\n                    (BinOp\n                      (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil)\n                      Sub\n                      (Constant i1 None)\n                    )\n                    (list\n                      (comprehension\n                        (Name &x:0 Store)\n                        (Call\n                          (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                          (list (_starred_content (Constant s-WzMyXQ== None)))\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)\n              Sub\n              (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (BinOp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) Sub (Constant i1 None))\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &A:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Name &n:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name %1 Load))) nil) Sub #0))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &S:0 Load) Sub (Name &N:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) &S:0))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil) Sub (Constant i1 None)) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &L:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &L:0 Load))) nil) Sub (Name &N:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Name &n:0 Load) &l:0))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Name &n:0 Load) &arr:0))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Constant i1 None)) (list (comprehension (Name &x:0 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (/splice (fn_1 (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil) &a:0))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) Sub (Constant i1 None)) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &A:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Name &n:0 Load) &x:0))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &p:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil))\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content\n                      (Subscript\n                        (Name &p:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Store\n                      )\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  )\n                  (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)))\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp (BinOp (Name &s:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))\n            )\n            (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (AugAssign\n      (Name &ans:0 Store)\n      Add\n      (BinOp (BinOp (Name &s:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n            (If\n              (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)\n                  )\n                  (Constant i0 None)\n                  None\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n            (list Eq)\n            (list (Name &i:0 Load))\n          )\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                    (_starred_content\n                      (Subscript\n                        (Name &p:0 Load)\n                        (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        Store\n                      )\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content\n                    (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  )\n                  (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Subscript (Name &p:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n        (list Eq)\n        (list (Name &n:0 Load))\n      )\n      (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &list_p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &list_p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n            (AugAssign (Name &i:0 Store) Add (Constant i2 None))\n          )\n          (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) Continue)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Name &ans:0 Store) Add (Name &a:0 Load))\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &a:0 Store)) (Constant i1 None) None))\n              (/seq (Assign (list (Name &a:0 Store)) (Constant i0 None) None))\n            )\n          )\n          (/seq (Assign (list (Name &a:0 Store)) (Constant i1 None) None))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list LtE) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n            (AugAssign (Name &i:0 Store) Add (Constant i2 None))\n          )\n          (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &i:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &n:0 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                        (_starred_content\n                          (Subscript\n                            (Name &p:0 Load)\n                            (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            Store\n                          )\n                        )\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (_starred_content\n                        (Subscript\n                          (Name &p:0 Load)\n                          (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                          Load\n                        )\n                      )\n                      (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              (/seq)\n            )\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &N:0 Load)))\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &i:0 Load) Add (Constant i1 None))\n            (list Eq)\n            (list (Subscript (Name &P:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n            (AugAssign (Name &i:0 Store) Add (Constant i2 None))\n          )\n          (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (Constant i0 None) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &N:0 &p:0 &cnt:0 (Expr (Call (Attribute (Name &p:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil)))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (If (Compare (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &a:0 &s:0 (Assign (list (Name &ans:0 Store)) (Constant i0 None) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &s:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))) (Assign (list (Name &s:0 Store)) (Constant i0 None) None)))) (/seq) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &s:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &p:0 &ans:0 /nothing)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (If (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)) (Constant i0 None) None)) (/seq))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &p:0 &ans:0 /nothing)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)) (list Eq) (list (Name &i:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Subscript (Name &p:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Name &n:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &p:0 &ans:0 (Assign (list (Name &i:0 Store)) (Constant i0 None) None))) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (/seq (If (Compare (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &list_p:0 &i:0 (Assign (list (Name &count:0 Store)) (Constant i0 None) None))) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (/seq (If (Compare (Subscript (Name &list_p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)) (AugAssign (Name &i:0 Store) Add (Constant i2 None))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) Continue))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &p:0 &ans:0 (Assign (list (Name &a:0 Store)) (Constant i1 None) None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &ans:0 Store) Add (Name &a:0 Load)) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &a:0 Store)) (Constant i1 None) None)) (/seq (Assign (list (Name &a:0 Store)) (Constant i0 None) None)))) (/seq (Assign (list (Name &a:0 Store)) (Constant i1 None) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &p:0 &i:0 (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None))) (While (Compare (Name &i:0 Load) (list LtE) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)) (AugAssign (Name &i:0 Store) Add (Constant i2 None))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))) (/seq (If (Compare (BinOp (Name &i:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &n:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) None)) (/seq)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &N:0 &P:0 &i:0 (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None))) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &N:0 Load))) (/seq (If (Compare (BinOp (Name &i:0 Load) Add (Constant i1 None)) (list Eq) (list (Subscript (Name &P:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)) (AugAssign (Name &i:0 Store) Add (Constant i2 None))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &rect:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &loze:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &n:0 Store))\n                    (_starred_content (Name &m:0 Store))\n                    (_starred_content (Name &o:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare\n                (BinOp\n                  (BinOp (Name &n:0 Load) Pow (Constant i2 None))\n                  Add\n                  (BinOp (Name &m:0 Load) Pow (Constant i2 None))\n                )\n                (list Eq)\n                (list (BinOp (Name &o:0 Load) Pow (Constant i2 None)))\n              )\n              (/seq (AugAssign (Name &rect:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Name &m:0 Load)))\n              (/seq (AugAssign (Name &loze:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (list\n            (ExceptHandler\n              None\n              None\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Name &rect:0 Load))) nil))\n                (Expr (Call (Name g_print Load) (list (_starred_content (Name &loze:0 Load))) nil))\n                Break\n              )\n            )\n          )\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &Rectangle:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &Rhombus:0 Store)) (Constant i0 None) None)\n    (Try\n      (/seq\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n              (/seq (AugAssign (Name &Rhombus:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (Name &a:0 Load) Pow (Constant i2 None))\n                      Add\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    )\n                    (list Eq)\n                    (list (BinOp (Name &c:0 Load) Pow (Constant i2 None)))\n                  )\n                  (/seq (AugAssign (Name &Rectangle:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (list (ExceptHandler (Name g_EOFError Load) None (/seq Pass)))\n      (/seq)\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &Rectangle:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &Rhombus:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &rec:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &rhom:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &s:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call\n                  (Attribute (Name &s:0 Load) s_split Load)\n                  (list (_starred_content (Constant s-WzQ0XQ== None)))\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp (Name &c:0 Load) Pow (Constant i2 None))\n            (list Eq)\n            (list\n              (BinOp\n                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                Add\n                (BinOp (Name &a:0 Load) Pow (Constant i2 None))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &rec:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n                  (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list Gt) (list (Name &c:0 Load)))\n                )\n              )\n              (/seq (AugAssign (Name &rhom:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &rec:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &rhom:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &n0:0 Store) (Name &n1:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &l:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Call\n                  (Attribute (Name &l:0 Load) s_split Load)\n                  (list (_starred_content (Constant s-WzQ0XQ== None)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)))\n              Sub\n              (BinOp (Name &c:0 Load) Mult (Name &c:0 Load))\n            )\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq (AugAssign (Name &n0:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n              (/seq (AugAssign (Name &n1:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &n0:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &n1:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &Rec:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &Dia:1 Store)) (Constant i0 None) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Try\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (_starred_content (Name &a:1 Store))\n                        (_starred_content (Name &b:1 Store))\n                        (_starred_content (Name &c:1 Store))\n                      )\n                      Store\n                    )\n                  )\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content\n                        (Call\n                          (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                          (list (_starred_content (Constant s-WzQ0XQ== None)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &a:1 Load) (list Eq) (list (Name &b:1 Load)))\n                  (/seq (AugAssign (Name &Dia:1 Store) Add (Constant i1 None)))\n                  (/seq\n                    (If\n                      (BoolOp\n                        And\n                        (list\n                          (Compare (Name &a:1 Load) (list NotEq) (list (Name &b:1 Load)))\n                          (Compare (Name &c:1 Load) (list Gt) (list (Name &a:1 Load)))\n                          (Compare (Name &c:1 Load) (list Gt) (list (Name &b:1 Load)))\n                        )\n                      )\n                      (/seq (AugAssign (Name &Rec:1 Store) Add (Constant i1 None)))\n                      (/seq)\n                    )\n                  )\n                )\n              )\n              (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n              (/seq)\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &Rec:1 Load))) nil))\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &Dia:1 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &rect:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &dia:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          (list\n            (ExceptHandler\n              (Name g_EOFError Load)\n              None\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Name &rect:0 Load))) nil))\n                (Expr (Call (Name g_print Load) (list (_starred_content (Name &dia:0 Load))) nil))\n                Break\n              )\n            )\n          )\n          (/seq)\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp (BinOp (Name &a:0 Load) Pow (Constant i2 None)) Add (BinOp (Name &b:0 Load) Pow (Constant i2 None)))\n            (list Eq)\n            (list (BinOp (Name &c:0 Load) Pow (Constant i2 None)))\n          )\n          (/seq (AugAssign (Name &rect:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n              (/seq (AugAssign (Name &dia:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &rectangle:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &parallelogram:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &d:0 Store))\n                  )\n                  Store\n                )\n              )\n              (GeneratorExp\n                (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n                (list\n                  (comprehension\n                    (Name &x:1 Store)\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (If\n              (Compare\n                (BinOp (Name &d:0 Load) Mult (Name &d:0 Load))\n                (list Eq)\n                (list\n                  (BinOp\n                    (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))\n                    Add\n                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &rectangle:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n                  (/seq (AugAssign (Name &parallelogram:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &rectangle:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &parallelogram:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &h:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          (list (ExceptHandler None None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp (BinOp (Name &a:0 Load) Pow (Constant i2 None)) Add (BinOp (Name &b:0 Load) Pow (Constant i2 None)))\n            (list Eq)\n            (list (BinOp (Name &c:0 Load) Pow (Constant i2 None)))\n          )\n          (/seq (Assign (list (Name &s:0 Store)) (BinOp (Name &s:0 Load) Add (Constant i1 None)) None))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n              (/seq (Assign (list (Name &h:0 Store)) (BinOp (Name &h:0 Load) Add (Constant i1 None)) None))\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &h:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &square:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &rhombus:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant i1 None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n              (/seq (AugAssign (Name &rhombus:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (Name &a:0 Load) Pow (Constant i2 None))\n                      Add\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    )\n                    (list Eq)\n                    (list (BinOp (Name &c:0 Load) Pow (Constant i2 None)))\n                  )\n                  (/seq (AugAssign (Name &square:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n            )\n          )\n          (list (ExceptHandler None None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &square:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &rhombus:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &rect_num:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &diam_num:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (_starred_content (Constant s-WzQ0XQ== None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare\n                (BinOp\n                  (BinOp (Name &a:0 Load) Pow (Constant i2 None))\n                  Add\n                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                )\n                (list Eq)\n                (list (BinOp (Name &c:0 Load) Pow (Constant i2 None)))\n              )\n              (/seq (AugAssign (Name &rect_num:0 Store) Add (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n                  (/seq (AugAssign (Name &diam_num:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &rect_num:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &diam_num:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If (Compare (BinOp (BinOp (Name %4 Load) Pow (Constant i2 None)) Add (BinOp (Name %3 Load) Pow (Constant i2 None))) (list Eq) (list (BinOp (Name %2 Load) Pow (Constant i2 None)))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq ?0))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &rect:0 Store)) (Constant i0 None) None) (Assign (list (Name &loze:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store)) (_starred_content (Name &o:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None) (fn_1 &rect:0 &o:0 &m:0 &n:0 /nothing) (If (Compare (Name &n:0 Load) (list Eq) (list (Name &m:0 Load))) (/seq (AugAssign (Name &loze:0 Store) Add (Constant i1 None))) (/seq))) (list (ExceptHandler None None (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &rect:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &loze:0 Load))) nil)) Break))) (/seq) (/seq))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &Rectangle:0 Store)) (Constant i0 None) None) (Assign (list (Name &Rhombus:0 Store)) (Constant i0 None) None) (Try (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (AugAssign (Name &Rhombus:0 Store) Add (Constant i1 None))) (/seq (fn_1 &Rectangle:0 &c:0 &b:0 &a:0 /nothing)))) (/seq))) (list (ExceptHandler (Name g_EOFError Load) None (/seq Pass))) (/seq) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &Rectangle:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &Rhombus:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &rec:0 Store)) (Constant i0 None) None) (Assign (list (Name &rhom:0 Store)) (Constant i0 None) None) (For (Name &s:0 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Name &s:0 Load) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil) nil i0))) None) (If (Compare (BinOp (Name &c:0 Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Add (BinOp (Name &a:0 Load) Pow (Constant i2 None))))) (/seq (AugAssign (Name &rec:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list Gt) (list (Name &c:0 Load))))) (/seq (AugAssign (Name &rhom:0 Store) Add (Constant i1 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &rec:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &rhom:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n0:0 Store) (Name &n1:0 Store)) (Constant i0 None) None) (For (Name &l:0 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &l:0 Load) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None) (If (Compare (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))) Sub (BinOp (Name &c:0 Load) Mult (Name &c:0 Load))) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n0:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (AugAssign (Name &n1:0 Store) Add (Constant i1 None))) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &n0:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &n1:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &Rec:1 Store)) (Constant i0 None) None) (Assign (list (Name &Dia:1 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None) (If (Compare (Name &a:1 Load) (list Eq) (list (Name &b:1 Load))) (/seq (AugAssign (Name &Dia:1 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (Name &a:1 Load) (list NotEq) (list (Name &b:1 Load))) (Compare (Name &c:1 Load) (list Gt) (list (Name &a:1 Load))) (Compare (Name &c:1 Load) (list Gt) (list (Name &b:1 Load))))) (/seq (AugAssign (Name &Rec:1 Store) Add (Constant i1 None))) (/seq))))) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &Rec:1 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &Dia:1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &rect:0 Store)) (Constant i0 None) None) (Assign (list (Name &dia:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None)) (list (ExceptHandler (Name g_EOFError Load) None (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &rect:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &dia:0 Load))) nil)) Break))) (/seq) (/seq)) (fn_1 &rect:0 &c:0 &b:0 &a:0 (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (AugAssign (Name &dia:0 Store) Add (Constant i1 None))) (/seq)))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &rectangle:0 Store)) (Constant i0 None) None) (Assign (list (Name &parallelogram:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil) nil i0))) None) (If (Compare (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) (list Eq) (list (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))))) (/seq (AugAssign (Name &rectangle:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (AugAssign (Name &parallelogram:0 Store) Add (Constant i1 None))) (/seq))))) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &rectangle:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &parallelogram:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (Assign (list (Name &h:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None)) (list (ExceptHandler None None (/seq Break))) (/seq) (/seq)) (If (Compare (BinOp (BinOp (Name &a:0 Load) Pow (Constant i2 None)) Add (BinOp (Name &b:0 Load) Pow (Constant i2 None))) (list Eq) (list (BinOp (Name &c:0 Load) Pow (Constant i2 None)))) (/seq (Assign (list (Name &s:0 Store)) (BinOp (Name &s:0 Load) Add (Constant i1 None)) None)) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (Assign (list (Name &h:0 Store)) (BinOp (Name &h:0 Load) Add (Constant i1 None)) None)) (/seq))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &h:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &square:0 Store)) (Constant i0 None) None) (Assign (list (Name &rhombus:0 Store)) (Constant i0 None) None) (While (Constant i1 None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (AugAssign (Name &rhombus:0 Store) Add (Constant i1 None))) (/seq (fn_1 &square:0 &c:0 &b:0 &a:0 /nothing)))) (list (ExceptHandler None None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &square:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &rhombus:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &rect_num:0 Store)) (Constant i0 None) None) (Assign (list (Name &diam_num:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil))) nil) None) (fn_1 &rect_num:0 &c:0 &b:0 &a:0 (If (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (AugAssign (Name &diam_num:0 Store) Add (Constant i1 None))) (/seq)))) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &rect_num:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &diam_num:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &lst:0 Store))\n      (ListComp\n        (Call\n          (Name g_set Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &rec:0 Store)) (List nil Load) None)\n    (While\n      (Name &lst:0 Load)\n      (/seq\n        (Assign (list (Name &x:0 Store)) (Subscript (Name &lst:0 Load) (_slice_content (Constant i0 None)) Load) None)\n        (Assign\n          (list (Name &count:0 Store))\n          (Call (Attribute (Name &lst:0 Load) s_count Load) (list (_starred_content (Name &x:0 Load))) nil)\n          None\n        )\n        (If\n          (Compare (BinOp (Name &count:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)) Break)\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &rec:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Tuple (list (_starred_content (Name &count:0 Load)) (_starred_content (Name &x:0 Load))) Load)\n              )\n            )\n            nil\n          )\n        )\n        (For\n          (Name &_:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &count:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &lst:0 Load) s_pop Load)\n                (list\n                  (_starred_content\n                    (Call (Attribute (Name &lst:0 Load) s_index Load) (list (_starred_content (Name &x:0 Load))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (_starred_content (Name &rec:0 Load))) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq\n            (If\n              (Compare\n                (Call\n                  (Name g_len Load)\n                  (list\n                    (_starred_content\n                      (Subscript\n                        (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                  nil\n                )\n                (list Eq)\n                (list (Constant i1 None))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &rec:0 Load))) nil)\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &rec:0 Load) s_sort Load) nil nil))\n                (If\n                  (Compare\n                    (BinOp\n                      (Subscript\n                        (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                      BitAnd\n                      (Subscript\n                        (Subscript (Name &rec:0 Load) (_slice_content (Constant i1 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil)))\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)))\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Call (Name g_len Load) (list (_starred_content (Name &rec:0 Load))) nil)\n                    (list Eq)\n                    (list (Constant i3 None))\n                  )\n                  (/seq\n                    (If\n                      (BoolOp\n                        And\n                        (list\n                          (Compare\n                            (Call\n                              (Name g_len Load)\n                              (list\n                                (_starred_content\n                                  (Subscript\n                                    (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load)\n                                    (_slice_content (Constant i1 None))\n                                    Load\n                                  )\n                                )\n                              )\n                              nil\n                            )\n                            (list Eq Eq Eq)\n                            (list\n                              (Call\n                                (Name g_len Load)\n                                (list\n                                  (_starred_content\n                                    (Subscript\n                                      (Subscript (Name &rec:0 Load) (_slice_content (Constant i1 None)) Load)\n                                      (_slice_content (Constant i1 None))\n                                      Load\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                              (Call\n                                (Name g_len Load)\n                                (list\n                                  (_starred_content\n                                    (Subscript\n                                      (Subscript (Name &rec:0 Load) (_slice_content (Constant i2 None)) Load)\n                                      (_slice_content (Constant i1 None))\n                                      Load\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                              (Constant i2 None)\n                            )\n                          )\n                          (Compare\n                            (BinOp\n                              (Subscript\n                                (Subscript (Name &rec:0 Load) (_slice_content (Constant i2 None)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                              BitAnd\n                              (BinOp\n                                (Subscript\n                                  (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load)\n                                  (_slice_content (Constant i1 None))\n                                  Load\n                                )\n                                BitOr\n                                (Subscript\n                                  (Subscript (Name &rec:0 Load) (_slice_content (Constant i1 None)) Load)\n                                  (_slice_content (Constant i1 None))\n                                  Load\n                                )\n                              )\n                            )\n                            (list Eq)\n                            (list\n                              (Subscript\n                                (Subscript (Name &rec:0 Load) (_slice_content (Constant i2 None)) Load)\n                                (_slice_content (Constant i1 None))\n                                Load\n                              )\n                            )\n                          )\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil)))\n                      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)))\n                    )\n                  )\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &c:0 Store))\n      (BinOp\n        (List\n          (list\n            (_starred_content\n              (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n            )\n          )\n          Load\n        )\n        Mult\n        (Constant i6 None)\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i0 None))\n          (_starred_content (Constant i6 None))\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (List (list (_starred_content (Constant s_no None)) (_starred_content (Constant s_yes None))) Load)\n                  (_slice_content\n                    (BoolOp\n                      And\n                      (list\n                        (Compare\n                          (Subscript\n                            (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n                            (_slice_content (Constant i0 None))\n                            Load\n                          )\n                          (list Eq)\n                          (list\n                            (Subscript\n                              (Subscript (Name &c:0 Load) (_slice_content (Constant i2 None)) Load)\n                              (_slice_content (Constant i0 None))\n                              Load\n                            )\n                          )\n                        )\n                        (Compare\n                          (Subscript\n                            (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n                            (_slice_content (Constant i1 None))\n                            Load\n                          )\n                          (list Eq)\n                          (list\n                            (Subscript\n                              (Subscript (Name &c:0 Load) (_slice_content (Constant i4 None)) Load)\n                              (_slice_content (Constant i0 None))\n                              Load\n                            )\n                          )\n                        )\n                        (Compare\n                          (Subscript\n                            (Subscript (Name &c:0 Load) (_slice_content (Constant i2 None)) Load)\n                            (_slice_content (Constant i1 None))\n                            Load\n                          )\n                          (list Eq)\n                          (list\n                            (Subscript\n                              (Subscript (Name &c:0 Load) (_slice_content (Constant i4 None)) Load)\n                              (_slice_content (Constant i1 None))\n                              Load\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_sorted Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_list Load)\n                        (list\n                          (_starred_content\n                            (Call\n                              (Name g_map Load)\n                              (list\n                                (_starred_content (Name g_int Load))\n                                (_starred_content\n                                  (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                                )\n                              )\n                              nil\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &a:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n              (Subscript (Name &x:1 Load) (_slice_content (Constant i1 None)) Load)\n            )\n          )\n        )\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name &a:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n              (Subscript (Name &x:2 Load) (_slice_content (Constant i0 None)) Load)\n            )\n          )\n        )\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n                  )\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &a:0 Load) (_slice_content (Constant i3 None)) Load))\n                  )\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Constant i4 None)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &a:0 Load) (_slice_content (Constant i5 None)) Load))\n                  )\n                  (Compare\n                    (Subscript\n                      (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                      (_slice_content (Constant i0 None))\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                    )\n                  )\n                  (Compare\n                    (Subscript\n                      (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Subscript (Name &a:0 Load) (_slice_content (Constant i4 None)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                    )\n                  )\n                  (Compare\n                    (Subscript\n                      (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load)\n                      (_slice_content (Constant i1 None))\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Subscript (Name &a:0 Load) (_slice_content (Constant i4 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (Constant s_yes None)\n              (Constant s_no None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Name g_int Load))\n                        (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              (list\n                (comprehension\n                  (Name &i:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Call\n        (Name g_all Load)\n        (list\n          (_starred_content\n            (GeneratorExp\n              (Compare (Name &a:2 Load) (list Eq) (list (Name &b:2 Load)))\n              (list\n                (comprehension\n                  (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store)\n                  (Call\n                    (Name g_zip Load)\n                    (list\n                      (_starred_content\n                        (Subscript (Name &A:0 Load) (_slice_slice (Slice None None (Constant i2 None))) Load)\n                      )\n                      (_starred_content\n                        (Subscript\n                          (Name &A:0 Load)\n                          (_slice_slice (Slice (Constant i1 None) None (Constant i2 None)))\n                          Load\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &p:0 Store))\n                (_starred_content (Name &q:0 Store))\n                (_starred_content (Name &r:0 Store))\n              )\n              Store\n            )\n          )\n          (Subscript (Name &A:0 Load) (_slice_slice (Slice None None (Constant i2 None))) Load)\n          None\n        )\n        (If\n          (BoolOp\n            Or\n            (list\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list In)\n                    (list (Name &q:0 Load))\n                  )\n                  (Compare\n                    (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load)\n                    (list In)\n                    (list (Name &r:0 Load))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &q:0 Load)\n                      (_slice_content\n                        (BinOp\n                          (Call\n                            (Attribute (Name &q:0 Load) s_index Load)\n                            (list\n                              (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load))\n                            )\n                            nil\n                          )\n                          BitXor\n                          (Constant i1 None)\n                        )\n                      )\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Name &r:0 Load)\n                        (_slice_content\n                          (BinOp\n                            (Call\n                              (Attribute (Name &r:0 Load) s_index Load)\n                              (list\n                                (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load))\n                              )\n                              nil\n                            )\n                            BitXor\n                            (Constant i1 None)\n                          )\n                        )\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list In)\n                    (list (Name &r:0 Load))\n                  )\n                  (Compare\n                    (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load)\n                    (list In)\n                    (list (Name &q:0 Load))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &r:0 Load)\n                      (_slice_content\n                        (BinOp\n                          (Call\n                            (Attribute (Name &r:0 Load) s_index Load)\n                            (list\n                              (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load))\n                            )\n                            nil\n                          )\n                          BitXor\n                          (Constant i1 None)\n                        )\n                      )\n                      Load\n                    )\n                    (list Eq)\n                    (list\n                      (Subscript\n                        (Name &q:0 Load)\n                        (_slice_content\n                          (BinOp\n                            (Call\n                              (Attribute (Name &q:0 Load) s_index Load)\n                              (list\n                                (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load))\n                              )\n                              nil\n                            )\n                            BitXor\n                            (Constant i1 None)\n                          )\n                        )\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &lst:0 Store)) (ListComp (Call (Name g_set Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil) nil i0))) None) (Assign (list (Name &rec:0 Store)) (List nil Load) None) (While (Name &lst:0 Load) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &lst:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &count:0 Store)) (Call (Attribute (Name &lst:0 Load) s_count Load) (list (_starred_content (Name &x:0 Load))) nil) None) (If (Compare (BinOp (Name &count:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)) Break) (/seq)) (Expr (Call (Attribute (Name &rec:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &count:0 Load)) (_starred_content (Name &x:0 Load))) Load))) nil)) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &count:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &lst:0 Load) s_pop Load) (list (_starred_content (Call (Attribute (Name &lst:0 Load) s_index Load) (list (_starred_content (Name &x:0 Load))) nil))) nil))) (/seq) None)) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &rec:0 Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (fn_1 (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load))) nil) (list Eq) (list (Constant i1 None))))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &rec:0 Load))) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &rec:0 Load) s_sort Load) nil nil)) (fn_1 (Compare (BinOp (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load) BitAnd (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Load)) (list Eq) (list (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load))))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &rec:0 Load))) nil) (list Eq) (list (Constant i3 None))) (/seq (fn_1 (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load))) nil) (list Eq Eq Eq) (list (Call (Name g_len Load) (list (_starred_content (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Load))) nil) (Call (Name g_len Load) (list (_starred_content (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i1 None)) Load))) nil) (Constant i2 None))) (Compare (BinOp (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i1 None)) Load) BitAnd (BinOp (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load) BitOr (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Load))) (list Eq) (list (Subscript (Subscript (Name &rec:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i1 None)) Load))))))) (/seq))))))))) nil)",
      "(Module (/seq (Assign (list (Name &c:0 Store)) (BinOp (List (list (_starred_content (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load))) Load) Mult (Constant i6 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Store)) (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load) None)) (/seq) None) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i2 None))) nil) (/seq (If (Compare (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_no None)) (_starred_content (Constant s_yes None))) Load) (_slice_content (BoolOp And (list (Compare (Subscript (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &c:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &c:0 Load) (_slice_content (Constant i4 None)) Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Subscript (Name &c:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &c:0 Load) (_slice_content (Constant i4 None)) Load) (_slice_content (Constant i1 None)) Load)))))) Load))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Subscript (Name &x:1 Load) (_slice_content (Constant i1 None)) Load)))))) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (_slice_content (Constant i0 None)) Load)))))) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (Constant i3 None)) Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i4 None)) Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (Constant i5 None)) Load))) (Compare (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i4 None)) Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i4 None)) Load) (_slice_content (Constant i1 None)) Load))))) (Constant s_yes None) (Constant s_no None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &A:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (GeneratorExp (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i6 None))) nil) nil i0))))) nil) None) (If (Call (Name g_all Load) (list (_starred_content (GeneratorExp (Compare (Name &a:2 Load) (list Eq) (list (Name &b:2 Load))) (list (comprehension (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Subscript (Name &A:0 Load) (_slice_slice (Slice None None (Constant i2 None))) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_slice (Slice (Constant i1 None) None (Constant i2 None))) Load))) nil) nil i0))))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &q:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Subscript (Name &A:0 Load) (_slice_slice (Slice None None (Constant i2 None))) Load) None) (fn_1 (BoolOp Or (list (BoolOp And (list (Compare (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load) (list In) (list (Name &q:0 Load))) (Compare (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load) (list In) (list (Name &r:0 Load))) (Compare (Subscript (Name &q:0 Load) (_slice_content (BinOp (Call (Attribute (Name &q:0 Load) s_index Load) (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load))) nil) BitXor (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &r:0 Load) (_slice_content (BinOp (Call (Attribute (Name &r:0 Load) s_index Load) (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load))) nil) BitXor (Constant i1 None))) Load))))) (BoolOp And (list (Compare (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load) (list In) (list (Name &r:0 Load))) (Compare (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load) (list In) (list (Name &q:0 Load))) (Compare (Subscript (Name &r:0 Load) (_slice_content (BinOp (Call (Attribute (Name &r:0 Load) s_index Load) (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i0 None)) Load))) nil) BitXor (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &q:0 Load) (_slice_content (BinOp (Call (Attribute (Name &q:0 Load) s_index Load) (list (_starred_content (Subscript (Name &p:0 Load) (_slice_content (Constant i1 None)) Load))) nil) BitXor (Constant i1 None))) Load))))))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &T:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &T:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &cal:0 Store)) (Name &C:0 Load) None)\n    (Assign (list (Name &cost:0 Store)) (Name &A:0 Load) None)\n    (For\n      (Name &t:0 Store)\n      (Name &T:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &cal:0 Load) Div (Name &cost:0 Load))\n            (list Lt)\n            (list\n              (BinOp\n                (BinOp (Name &cal:0 Load) Add (Name &t:0 Load))\n                Div\n                (BinOp (Name &cost:0 Load) Add (Name &B:0 Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &cal:0 Store) Add (Name &t:0 Load))\n            (AugAssign (Name &cost:0 Store) Add (Name &B:0 Load))\n          )\n          (/seq Break)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (_starred_content (BinOp (Name &cal:0 Load) FloorDiv (Name &cost:0 Load)))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &ans:0 Store)) (_starred_content (Name &p:0 Store))) Store))\n      (Tuple\n        (list (_starred_content (BinOp (Name &c:0 Load) Div (Name &a:0 Load))) (_starred_content (Name &a:0 Load)))\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp\n            (BinOp (Name &c:0 Load) Add (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            Div\n            (BinOp (Name &p:0 Load) Add (Name &b:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &t:0 Load) (list Gt) (list (Name &ans:0 Load)))\n          (/seq\n            (Assign (list (Name &ans:0 Store)) (Name &t:0 Load) None)\n            (AugAssign (Name &c:0 Store) Add (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (AugAssign (Name &p:0 Store) Add (Name &b:0 Load))\n          )\n          (/seq Break)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ans:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &r:0 Store)) (BinOp (Name &k:0 Load) Div (Name &c:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (AugAssign (Name &k:0 Store) Add (Name &i:0 Load))\n        (AugAssign (Name &c:0 Store) Add (Name &b:0 Load))\n        (If\n          (Compare (BinOp (Name &k:0 Load) Div (Name &c:0 Load)) (list LtE) (list (Name &r:0 Load)))\n          (/seq Break)\n          (/seq (Assign (list (Name &r:0 Store)) (BinOp (Name &k:0 Load) Div (Name &c:0 Load)) None))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &r:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              (list\n                (comprehension\n                  (Name &_:1 Store)\n                  (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        (list (keyword s_reverse (Constant True None)))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &c:0 Load) Div (Name &a:0 Load))\n            (list Lt)\n            (list\n              (BinOp (BinOp (Name &c:0 Load) Add (Name &i:0 Load)) Div (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))\n            )\n          )\n          (/seq (AugAssign (Name &c:0 Store) Add (Name &i:0 Load)) (AugAssign (Name &a:0 Store) Add (Name &b:0 Load)))\n          (/seq Break)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &c:0 Load) FloorDiv (Name &a:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAxMDQsIDExNiwgMTE2LCAxMTIsIDU4LCA0NywgNDcsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NiwgMTE3LCA0NSwgOTcsIDEwNSwgMTIyLCAxMTcsIDQ2LCA5NywgOTksIDQ2LCAxMDYsIDExMiwgNDcsIDExMSwgMTEwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NywgMTAwLCAxMDEsIDExNSwgOTksIDExNCwgMTA1LCAxMTIsIDExNiwgMTA1LCAxMTEsIDExMCwgNDYsIDEwNiwgMTE1LCAxMTIsIDYzLCAxMDUsIDEwMCwgNjEsIDQ4LCA1MywgNTQsIDU1LCAxMCwgNjUsIDY3LCAxMF0=\n        None\n      )\n    )\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_sys (list (alias &stdin:0 None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name &stdin:0 Load) s_readline Load) None)\n    (ImportFrom s_collections (list (alias &namedtuple:0 None)) i0)\n    (Assign\n      (list (Name &item:0 Store))\n      (Call\n        (Name &namedtuple:0 Load)\n        (list\n          (_starred_content (Constant s_item None))\n          (_starred_content\n            (List (list (_starred_content (Constant s_cal None)) (_starred_content (Constant s_pri None))) Load)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &Cond:0\n      (arguments\n        nil\n        (list (arg &x:1 None None) (arg &n:1 None None) (arg &items:1 None None) (arg &pizza:1 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &y:1 Store))\n          (ListComp\n            (BinOp\n              (Attribute (Subscript (Name &items:1 Load) (_slice_content (Name &i:3 Load)) Load) s_cal Load)\n              Sub\n              (BinOp\n                (Name &x:1 Load)\n                Mult\n                (Attribute (Subscript (Name &items:1 Load) (_slice_content (Name &i:3 Load)) Load) s_pri Load)\n              )\n            )\n            (list\n              (comprehension\n                (Name &i:3 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &y:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n        (Assign\n          (list (Name &total:1 Store))\n          (BinOp\n            (Attribute (Name &pizza:1 Load) s_cal Load)\n            Sub\n            (BinOp (Name &x:1 Load) Mult (Attribute (Name &pizza:1 Load) s_pri Load))\n          )\n          None\n        )\n        (For\n          (Name &c:1 Store)\n          (Name &y:1 Load)\n          (/seq\n            (If\n              (Compare (Name &c:1 Load) (list Gt) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &total:1 Store) Add (Name &c:1 Load)))\n              (/seq Break)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Compare (Name &total:1 Load) (list GtE) (list (Constant i0 None))))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil (list (arg &args:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &N:2 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &A:2 Store)) (_starred_content (Name &B:2 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &C:2 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &toppings:2 Store)) (List nil Load) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &N:2 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &toppings:2 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name &item:0 Load)\n                      (list\n                        (_starred_content\n                          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n                        )\n                        (_starred_content (Name &B:2 Load))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &pizza:2 Store))\n          (Call (Name &item:0 Load) (list (_starred_content (Name &C:2 Load)) (_starred_content (Name &A:2 Load))) nil)\n          None\n        )\n        (Assign (list (Name &lb:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ub:2 Store)) (Constant f100000.0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &mid:2 Store))\n              (BinOp (BinOp (Name &lb:2 Load) Add (Name &ub:2 Load)) Div (Constant i2 None))\n              None\n            )\n            (If\n              (Call\n                (Name &Cond:0 Load)\n                (list\n                  (_starred_content (Name &mid:2 Load))\n                  (_starred_content (Name &N:2 Load))\n                  (_starred_content (Name &toppings:2 Load))\n                  (_starred_content (Name &pizza:2 Load))\n                )\n                nil\n              )\n              (/seq (Assign (list (Name &lb:2 Store)) (Name &mid:2 Load) None))\n              (/seq (Assign (list (Name &ub:2 Store)) (Name &mid:2 Load) None))\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ub:2 Load))) nil)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Expr\n          (Call\n            (Name &main:0 Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Attribute (Name &sys:0 Load) s_argv Load)\n                  (_slice_slice (Slice (Constant i1 None) None None))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &topping:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &topping:0 Load) s_append Load) (list (_starred_content (Name &d:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &topping:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &ans:0 Store)) (BinOp (Name &c:0 Load) FloorDiv (Name &a:0 Load)) None)\n    (Assign (list (Name &total:0 Store)) (Name &c:0 Load) None)\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &t:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &topping:0 Load))) nil)\n      (/seq\n        (AugAssign (Name &total:0 Store) Add (Name &t:0 Load))\n        (Assign\n          (list (Name &cal:0 Store))\n          (BinOp\n            (Name &total:0 Load)\n            FloorDiv\n            (BinOp (Name &a:0 Load) Add (BinOp (BinOp (Name &i:0 Load) Add (Constant i1 None)) Mult (Name &b:0 Load)))\n          )\n          None\n        )\n        (If\n          (Compare (Name &ans:0 Load) (list LtE) (list (Name &cal:0 Load)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &cal:0 Load) None))\n          (/seq Break)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &A:0 Store)) (Name &a:0 Load) None)\n    (Assign (list (Name &C:0 Store)) (Name &c:0 Load) None)\n    (Assign (list (Name &top:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &top:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &top:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &ans:0 Store)) (BinOp (Name &C:0 Load) Div (Name &A:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Name &top:0 Load)\n      (/seq\n        (AugAssign (Name &C:0 Store) Add (Name &i:0 Load))\n        (AugAssign (Name &A:0 Store) Add (Name &b:0 Load))\n        (Assign (list (Name &now:0 Store)) (BinOp (Name &C:0 Load) Div (Name &A:0 Load)) None)\n        (If\n          (Compare (Name &ans:0 Load) (list Lt) (list (Name &now:0 Load)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &now:0 Load) None))\n          (/seq (If (Compare (Name &ans:0 Load) (list GtE) (list (Name &now:0 Load))) (/seq Break) (/seq)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ans:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (Subscript\n        (Call\n          (Name g_sorted Load)\n          (list\n            (_starred_content\n              (GeneratorExp\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                (list\n                  (comprehension\n                    (Name &_:1 Store)\n                    (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &E:0 Store)) (BinOp (Name &C:0 Load) FloorDiv (Name &A:0 Load)) None)\n    (For\n      (Name &x:0 Store)\n      (Name &D:0 Load)\n      (/seq\n        (AugAssign (Name &A:0 Store) Add (Name &B:0 Load))\n        (AugAssign (Name &C:0 Store) Add (Name &x:0 Load))\n        (Assign\n          (list (Name &E:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Name &E:0 Load))\n              (_starred_content (BinOp (Name &C:0 Load) FloorDiv (Name &A:0 Load)))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &E:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (Subscript\n        (Call\n          (Name g_sorted Load)\n          (list\n            (_starred_content\n              (GeneratorExp\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                (list\n                  (comprehension\n                    (Name &_:1 Store)\n                    (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (BinOp\n                      (BinOp\n                        (Name &C:0 Load)\n                        Add\n                        (Call\n                          (Name g_sum Load)\n                          (list\n                            (_starred_content\n                              (Subscript (Name &D:0 Load) (_slice_slice (Slice None (Name &i:2 Load) None)) Load)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                      FloorDiv\n                      (BinOp (Name &A:0 Load) Add (BinOp (Name &i:2 Load) Mult (Name &B:0 Load)))\n                    )\n                    (list\n                      (comprehension\n                        (Name &i:2 Store)\n                        (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias g_accumulate None)) i0)\n    (Assign\n      (list (Name &num:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &T:0 Store)) (List nil Load) None)\n    (Assign (list (Name &C:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &T:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &C:0 Load) s_append Load)\n        (list\n          (_starred_content\n            (Call (Name g_int Load) (list (_starred_content (BinOp (Name &p:0 Load) Div (Name &a:0 Load)))) nil)\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Attribute (Name &T:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &c:0 Store))) Store)\n      (Call\n        (Name g_enumerate Load)\n        (list (_starred_content (Call (Name g_accumulate Load) (list (_starred_content (Name &T:0 Load))) nil)))\n        (list (keyword s_start (Constant i1 None)))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &C:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp (Name &p:0 Load) Add (Name &c:0 Load))\n                        Div\n                        (BinOp (Name &a:0 Load) Add (BinOp (Name &i:0 Load) Mult (Name &b:0 Load)))\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (Call\n                (Name g_sorted Load)\n                (list (_starred_content (Name &C:0 Load)))\n                (list (keyword s_reverse (Constant True None)))\n              )\n              (_slice_content (Constant i0 None))\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &N:0 &B:0 &A:0 &C:0)) (Assign (list (Name &T:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &T:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &cal:0 Store)) (Name &C:0 Load) None) (Assign (list (Name &cost:0 Store)) (Name &A:0 Load) None) (For (Name &t:0 Store) (Name &T:0 Load) (/seq (If (Compare (BinOp (Name &cal:0 Load) Div (Name &cost:0 Load)) (list Lt) (list (BinOp (BinOp (Name &cal:0 Load) Add (Name &t:0 Load)) Div (BinOp (Name &cost:0 Load) Add (Name &B:0 Load))))) (/seq (AugAssign (Name &cal:0 Store) Add (Name &t:0 Load)) (AugAssign (Name &cost:0 Store) Add (Name &B:0 Load))) (/seq Break))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &cal:0 Load) FloorDiv (Name &cost:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &b:0 &a:0 &c:0)) (Assign (list (Tuple (list (_starred_content (Name &ans:0 Store)) (_starred_content (Name &p:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &c:0 Load) Div (Name &a:0 Load))) (_starred_content (Name &a:0 Load))) Load) None) (Assign (list (Name &d:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &t:0 Store)) (BinOp (BinOp (Name &c:0 Load) Add (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load)) Div (BinOp (Name &p:0 Load) Add (Name &b:0 Load))) None) (If (Compare (Name &t:0 Load) (list Gt) (list (Name &ans:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &t:0 Load) None) (AugAssign (Name &c:0 Store) Add (Subscript (Name &d:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &p:0 Store) Add (Name &b:0 Load))) (/seq Break))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &b:0 &c:0 &k:0)) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &r:0 Store)) (BinOp (Name &k:0 Load) Div (Name &c:0 Load)) None) (For (Name &i:0 Store) (Name &A:0 Load) (/seq (AugAssign (Name &k:0 Store) Add (Name &i:0 Load)) (AugAssign (Name &c:0 Store) Add (Name &b:0 Load)) (If (Compare (BinOp (Name &k:0 Load) Div (Name &c:0 Load)) (list LtE) (list (Name &r:0 Load))) (/seq Break) (/seq (Assign (list (Name &r:0 Store)) (BinOp (Name &k:0 Load) Div (Name &c:0 Load)) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &r:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &b:0 &a:0 &c:0)) (Assign (list (Name &d:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) nil i0))))) (list (keyword s_reverse (Constant True None)))) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (BinOp (Name &c:0 Load) Div (Name &a:0 Load)) (list Lt) (list (BinOp (BinOp (Name &c:0 Load) Add (Name &i:0 Load)) Div (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))) (/seq (AugAssign (Name &c:0 Store) Add (Name &i:0 Load)) (AugAssign (Name &a:0 Store) Add (Name &b:0 Load))) (/seq Break))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &c:0 Load) FloorDiv (Name &a:0 Load)))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCAxMDQsIDExNiwgMTE2LCAxMTIsIDU4LCA0NywgNDcsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NiwgMTE3LCA0NSwgOTcsIDEwNSwgMTIyLCAxMTcsIDQ2LCA5NywgOTksIDQ2LCAxMDYsIDExMiwgNDcsIDExMSwgMTEwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDEwNiwgMTE3LCAxMDAsIDEwMywgMTAxLCA0NywgMTAwLCAxMDEsIDExNSwgOTksIDExNCwgMTA1LCAxMTIsIDExNiwgMTA1LCAxMTEsIDExMCwgNDYsIDEwNiwgMTE1LCAxMTIsIDYzLCAxMDUsIDEwMCwgNjEsIDQ4LCA1MywgNTQsIDU1LCAxMCwgNjUsIDY3LCAxMF0= None)) (Import (list (alias &sys:0 None))) (ImportFrom s_sys (list (alias &stdin:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name &stdin:0 Load) s_readline Load) None) (ImportFrom s_collections (list (alias &namedtuple:0 None)) i0) (Assign (list (Name &item:0 Store)) (Call (Name &namedtuple:0 Load) (list (_starred_content (Constant s_item None)) (_starred_content (List (list (_starred_content (Constant s_cal None)) (_starred_content (Constant s_pri None))) Load))) nil) None) (FunctionDef &Cond:0 (arguments nil (list (arg &x:1 None None) (arg &n:1 None None) (arg &items:1 None None) (arg &pizza:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &y:1 Store)) (ListComp (BinOp (Attribute (Subscript (Name &items:1 Load) (_slice_content (Name &i:3 Load)) Load) s_cal Load) Sub (BinOp (Name &x:1 Load) Mult (Attribute (Subscript (Name &items:1 Load) (_slice_content (Name &i:3 Load)) Load) s_pri Load))) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &y:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &total:1 Store)) (BinOp (Attribute (Name &pizza:1 Load) s_cal Load) Sub (BinOp (Name &x:1 Load) Mult (Attribute (Name &pizza:1 Load) s_pri Load))) None) (For (Name &c:1 Store) (Name &y:1 Load) (/seq (If (Compare (Name &c:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &total:1 Store) Add (Name &c:1 Load))) (/seq Break))) (/seq) None) (Return (Compare (Name &total:1 Load) (list GtE) (list (Constant i0 None))))) nil None None) (FunctionDef &main:0 (arguments nil (list (arg &args:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &N:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &A:2 Store)) (_starred_content (Name &B:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &C:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &toppings:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:2 Load))) nil) (/seq (Expr (Call (Attribute (Name &toppings:2 Load) s_append Load) (list (_starred_content (Call (Name &item:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)) (_starred_content (Name &B:2 Load))) nil))) nil))) (/seq) None) (Assign (list (Name &pizza:2 Store)) (Call (Name &item:0 Load) (list (_starred_content (Name &C:2 Load)) (_starred_content (Name &A:2 Load))) nil) None) (Assign (list (Name &lb:2 Store)) (Constant i0 None) None) (Assign (list (Name &ub:2 Store)) (Constant f100000.0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (/seq (Assign (list (Name &mid:2 Store)) (BinOp (BinOp (Name &lb:2 Load) Add (Name &ub:2 Load)) Div (Constant i2 None)) None) (If (Call (Name &Cond:0 Load) (list (_starred_content (Name &mid:2 Load)) (_starred_content (Name &N:2 Load)) (_starred_content (Name &toppings:2 Load)) (_starred_content (Name &pizza:2 Load))) nil) (/seq (Assign (list (Name &lb:2 Store)) (Name &mid:2 Load) None)) (/seq (Assign (list (Name &ub:2 Store)) (Name &mid:2 Load) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ub:2 Load))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) (list (_starred_content (Subscript (Attribute (Name &sys:0 Load) s_argv Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &b:0 &a:0 &c:0)) (Assign (list (Name &topping:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &topping:0 Load) s_append Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &topping:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &ans:0 Store)) (BinOp (Name &c:0 Load) FloorDiv (Name &a:0 Load)) None) (Assign (list (Name &total:0 Store)) (Name &c:0 Load) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &t:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &topping:0 Load))) nil) (/seq (AugAssign (Name &total:0 Store) Add (Name &t:0 Load)) (Assign (list (Name &cal:0 Store)) (BinOp (Name &total:0 Load) FloorDiv (BinOp (Name &a:0 Load) Add (BinOp (BinOp (Name &i:0 Load) Add (Constant i1 None)) Mult (Name &b:0 Load)))) None) (If (Compare (Name &ans:0 Load) (list LtE) (list (Name &cal:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &cal:0 Load) None)) (/seq Break))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &n:0 &b:0 &a:0 &c:0)) (Assign (list (Name &A:0 Store)) (Name &a:0 Load) None) (Assign (list (Name &C:0 Store)) (Name &c:0 Load) None) (Assign (list (Name &top:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &top:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &top:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &ans:0 Store)) (BinOp (Name &C:0 Load) Div (Name &A:0 Load)) None) (For (Name &i:0 Store) (Name &top:0 Load) (/seq (AugAssign (Name &C:0 Store) Add (Name &i:0 Load)) (AugAssign (Name &A:0 Store) Add (Name &b:0 Load)) (Assign (list (Name &now:0 Store)) (BinOp (Name &C:0 Load) Div (Name &A:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Lt) (list (Name &now:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &now:0 Load) None)) (/seq (If (Compare (Name &ans:0 Load) (list GtE) (list (Name &now:0 Load))) (/seq Break) (/seq))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &N:0 &B:0 &A:0 &C:0)) (Assign (list (Name &D:0 Store)) (Subscript (Call (Name g_sorted Load) (list (_starred_content (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) nil i0))))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (Assign (list (Name &E:0 Store)) (BinOp (Name &C:0 Load) FloorDiv (Name &A:0 Load)) None) (For (Name &x:0 Store) (Name &D:0 Load) (/seq (AugAssign (Name &A:0 Store) Add (Name &B:0 Load)) (AugAssign (Name &C:0 Store) Add (Name &x:0 Load)) (Assign (list (Name &E:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &E:0 Load)) (_starred_content (BinOp (Name &C:0 Load) FloorDiv (Name &A:0 Load)))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &E:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &N:0 &B:0 &A:0 &C:0)) (Assign (list (Name &D:0 Store)) (Subscript (Call (Name g_sorted Load) (list (_starred_content (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load)) nil i0))))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (GeneratorExp (BinOp (BinOp (Name &C:0 Load) Add (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &D:0 Load) (_slice_slice (Slice None (Name &i:2 Load) None)) Load))) nil)) FloorDiv (BinOp (Name &A:0 Load) Add (BinOp (Name &i:2 Load) Mult (Name &B:0 Load)))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (ImportFrom s_itertools (list (alias g_accumulate None)) i0) (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &T:0 Store)) (List nil Load) None) (Assign (list (Name &C:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &num:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &T:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &C:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Name &p:0 Load) Div (Name &a:0 Load)))) nil))) nil)) (Expr (Call (Attribute (Name &T:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &c:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Call (Name g_accumulate Load) (list (_starred_content (Name &T:0 Load))) nil))) (list (keyword s_start (Constant i1 None)))) (/seq (Expr (Call (Attribute (Name &C:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name &p:0 Load) Add (Name &c:0 Load)) Div (BinOp (Name &a:0 Load) Add (BinOp (Name &i:0 Load) Mult (Name &b:0 Load)))))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Call (Name g_sorted Load) (list (_starred_content (Name &C:0 Load))) (list (keyword s_reverse (Constant True None)))) (_slice_content (Constant i0 None)) Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &l:0 Store))\n                    (_starred_content (Name &x:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &temp:0 Store))\n              (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Div (Constant i2 None))\n              None\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n        (FunctionDef\n          &heron:0\n          (arguments nil (list (arg &i:1 None None) (arg &j:1 None None) (arg &k:1 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &d:1 Store))\n              (BinOp (BinOp (BinOp (Name &i:1 Load) Add (Name &j:1 Load)) Add (Name &k:1 Load)) Div (Constant i2 None))\n              None\n            )\n            (Return\n              (Call\n                (Attribute (Name g_math Load) s_sqrt Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &d:1 Load) Mult (BinOp (Name &d:1 Load) Sub (Name &i:1 Load)))\n                        Mult\n                        (BinOp (Name &d:1 Load) Sub (Name &j:1 Load))\n                      )\n                      Mult\n                      (BinOp (Name &d:1 Load) Sub (Name &k:1 Load))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_str Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (Call\n                          (Name &heron:0 Load)\n                          (list\n                            (_starred_content (Name &a:0 Load))\n                            (_starred_content (Name &l:0 Load))\n                            (_starred_content (Name &l:0 Load))\n                          )\n                          nil\n                        )\n                        Add\n                        (BinOp\n                          (Call\n                            (Name &heron:0 Load)\n                            (list\n                              (_starred_content (Name &l:0 Load))\n                              (_starred_content (Name &temp:0 Load))\n                              (_starred_content (Name &temp:0 Load))\n                            )\n                            nil\n                          )\n                          Mult\n                          (Constant i2 None)\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (For\n      (Name &s:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &x:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_float Load))\n              (_starred_content (Call (Attribute (Name &s:0 Load) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &a:0 Load) Div (Constant i2 None))\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &l:0 Load) Mult (Name &l:0 Load))\n                        Sub\n                        (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Div (Constant i4 None))\n                      )\n                      Pow\n                      (Constant f0.5 None)\n                    )\n                  )\n                  Add\n                  (BinOp\n                    (BinOp (Name &l:0 Load) Div (Constant i2 None))\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &l:0 Load)) Mult (Name &x:0 Load))\n                        Add\n                        (BinOp (Name &x:0 Load) Mult (Name &x:0 Load))\n                      )\n                      Pow\n                      (Constant f0.5 None)\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Try\n      (/seq\n        (While\n          (Constant i1 None)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &l:0 Store))\n                    (_starred_content (Name &x:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                      Mod\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (Name &l:0 Load)\n                            Mult\n                            (Call\n                              (Name g_sqrt Load)\n                              (list\n                                (_starred_content\n                                  (BinOp\n                                    (Name &x:0 Load)\n                                    Mult\n                                    (BinOp (BinOp (Constant i2 None) Mult (Name &l:0 Load)) Add (Name &x:0 Load))\n                                  )\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Add\n                        (BinOp\n                          (BinOp\n                            (Name &a:0 Load)\n                            Mult\n                            (Call\n                              (Name g_sqrt Load)\n                              (list\n                                (_starred_content\n                                  (BinOp\n                                    (BinOp (Constant i4 None) Mult (BinOp (Name &l:0 Load) Pow (Constant i2 None)))\n                                    Sub\n                                    (BinOp (Name &a:0 Load) Pow (Constant i2 None))\n                                  )\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i4 None)\n                        )\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (list (ExceptHandler (Name g_EOFError Load) None (/seq (Expr (Constant Ellipsis None)))))\n      (/seq)\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (For\n      (Name &line:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &x:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_float Load))\n              (_starred_content (Call (Attribute (Name &line:0 Load) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &center:0 Store))\n          (BinOp\n            (BinOp (BinOp (Constant i1 None) Div (Constant i2 None)) Mult (Name &a:0 Load))\n            Mult\n            (BinOp\n              (BinOp\n                (BinOp (Name &l:0 Load) Pow (Constant i2 None))\n                Sub\n                (BinOp (BinOp (Name &a:0 Load) Div (Constant i2 None)) Pow (Constant i2 None))\n              )\n              Pow\n              (Constant f0.5 None)\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &side:0 Store))\n          (BinOp\n            (BinOp (BinOp (Constant i1 None) Div (Constant i2 None)) Mult (Name &l:0 Load))\n            Mult\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Div (Constant i2 None))\n                  Pow\n                  (Constant i2 None)\n                )\n                Sub\n                (BinOp (BinOp (Name &l:0 Load) Div (Constant i2 None)) Pow (Constant i2 None))\n              )\n              Pow\n              (Constant f0.5 None)\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                  (list\n                    (_starred_content\n                      (BinOp (Name &center:0 Load) Add (BinOp (Name &side:0 Load) Mult (Constant i2 None)))\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (For\n      (Name &i:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &x:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Name &i:0 Load) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Name &a:0 Load)\n                      Mult\n                      (BinOp\n                        (BinOp\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &l:0 Load)) Mult (Name &l:0 Load))\n                          Sub\n                          (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Add\n                    (BinOp\n                      (BinOp (Constant i2 None) Mult (Name &l:0 Load))\n                      Mult\n                      (BinOp\n                        (BinOp\n                          (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Pow (Constant i2 None))\n                          Sub\n                          (BinOp (Name &l:0 Load) Mult (Name &l:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                  )\n                  Div\n                  (Constant i4 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &l:0 Store))\n                    (_starred_content (Name &x:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n        (Assign\n          (list (Name &s1:0 Store))\n          (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &l:0 Load)) Add (Name &x:0 Load)) Div (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Name &v1:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp (Name &s1:0 Load) Mult (BinOp (Name &l:0 Load) Div (Constant i2 None)))\n                Mult\n                (BinOp (Name &l:0 Load) Div (Constant i2 None))\n              )\n              Mult\n              (BinOp (Name &x:0 Load) Div (Constant i2 None))\n            )\n            Pow\n            (BinOp (Constant i1 None) Div (Constant i2 None))\n          )\n          None\n        )\n        (Assign\n          (list (Name &s2:0 Store))\n          (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &l:0 Load)) Add (Name &a:0 Load)) Div (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Name &v2:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp (Name &s2:0 Load) Mult (BinOp (Name &s2:0 Load) Sub (Name &l:0 Load)))\n                Mult\n                (BinOp (Name &s2:0 Load) Sub (Name &l:0 Load))\n              )\n              Mult\n              (BinOp (Name &s2:0 Load) Sub (Name &a:0 Load))\n            )\n            Pow\n            (BinOp (Constant i1 None) Div (Constant i2 None))\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (BinOp (BinOp (Name &v1:0 Load) Mult (Constant i2 None)) Add (Name &v2:0 Load))))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (For\n      (Name &s:0 Store)\n      (Attribute (Name g_sys Load) s_stdin Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &l:0 Store))\n                (_starred_content (Name &x:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_float Load))\n              (_starred_content (Call (Attribute (Name &s:0 Load) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &a:0 Load) Div (Constant i2 None))\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &l:0 Load) Mult (Name &l:0 Load))\n                        Sub\n                        (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Div (Constant i4 None))\n                      )\n                      Pow\n                      (Constant f0.5 None)\n                    )\n                  )\n                  Add\n                  (BinOp\n                    (BinOp (Name &l:0 Load) Div (Constant i2 None))\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &l:0 Load)) Mult (Name &x:0 Load))\n                        Add\n                        (BinOp (Name &x:0 Load) Mult (Name &x:0 Load))\n                      )\n                      Pow\n                      (Constant f0.5 None)\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &l:0 Store))\n                    (_starred_content (Name &x:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (list (ExceptHandler (Name g_EOFError Load) None (/seq Break)))\n          (/seq)\n          (/seq)\n        )\n        (Assign\n          (list (Name &HC:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_sqrt Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Name &l:0 Load) Pow (Constant i2 None))\n                  Sub\n                  (BinOp (BinOp (Name &a:0 Load) Pow (Constant i2 None)) Div (Constant i4 None))\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &I:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_sqrt Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Div (Constant i2 None))\n                    Pow\n                    (Constant i2 None)\n                  )\n                  Sub\n                  (BinOp (BinOp (Name &l:0 Load) Pow (Constant i2 None)) Div (Constant i4 None))\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &S1:0 Store))\n          (BinOp (BinOp (Name &a:0 Load) Mult (Name &HC:0 Load)) Div (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Name &S2:0 Store))\n          (BinOp (BinOp (Name &l:0 Load) Mult (Name &I:0 Load)) Div (Constant i2 None))\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NiwgMTAyLCAxMjVd None) s_format Load)\n                  (list\n                    (_starred_content (BinOp (Name &S1:0 Load) Add (BinOp (Name &S2:0 Load) Mult (Constant i2 None))))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Import (list (alias g_sys None))) (For (Name %1 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Name %1 Load) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %4 Load) Div (Constant i2 None)) Mult (BinOp (BinOp (BinOp (Name %3 Load) Mult (Name %3 Load)) Sub (BinOp (BinOp (Name %4 Load) Mult (Name %4 Load)) Div (Constant i4 None))) Pow (Constant f0.5 None))) Add (BinOp (BinOp (Name %3 Load) Div (Constant i2 None)) Mult (BinOp (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name %3 Load)) Mult (Name %2 Load)) Add (BinOp (Name %2 Load) Mult (Name %2 Load))) Pow (Constant f0.5 None)))))) nil))) (/seq) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_math None))) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &temp:0 Store)) (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Div (Constant i2 None)) None)) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq)) (FunctionDef &heron:0 (arguments nil (list (arg &i:1 None None) (arg &j:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &d:1 Store)) (BinOp (BinOp (BinOp (Name &i:1 Load) Add (Name &j:1 Load)) Add (Name &k:1 Load)) Div (Constant i2 None)) None) (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &d:1 Load) Mult (BinOp (Name &d:1 Load) Sub (Name &i:1 Load))) Mult (BinOp (Name &d:1 Load) Sub (Name &j:1 Load))) Mult (BinOp (Name &d:1 Load) Sub (Name &k:1 Load))))) nil))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Call (Name &heron:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &l:0 Load)) (_starred_content (Name &l:0 Load))) nil) Add (BinOp (Call (Name &heron:0 Load) (list (_starred_content (Name &l:0 Load)) (_starred_content (Name &temp:0 Load)) (_starred_content (Name &temp:0 Load))) nil) Mult (Constant i2 None))))) nil))) nil))) (/seq))) nil)",
      "(Module (fn_1 &s:0 &x:0 &l:0 &a:0) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Try (/seq (While (Constant i1 None) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (BinOp (BinOp (Name &l:0 Load) Mult (Call (Name g_sqrt Load) (list (_starred_content (BinOp (Name &x:0 Load) Mult (BinOp (BinOp (Constant i2 None) Mult (Name &l:0 Load)) Add (Name &x:0 Load))))) nil)) Div (Constant i2 None)) Add (BinOp (BinOp (Name &a:0 Load) Mult (Call (Name g_sqrt Load) (list (_starred_content (BinOp (BinOp (Constant i4 None) Mult (BinOp (Name &l:0 Load) Pow (Constant i2 None))) Sub (BinOp (Name &a:0 Load) Pow (Constant i2 None))))) nil)) Div (Constant i4 None)))))) nil))) (/seq))) (list (ExceptHandler (Name g_EOFError Load) None (/seq (Expr (Constant Ellipsis None))))) (/seq) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (For (Name &line:0 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Name &line:0 Load) s_split Load) nil nil))) nil) None) (Assign (list (Name &center:0 Store)) (BinOp (BinOp (BinOp (Constant i1 None) Div (Constant i2 None)) Mult (Name &a:0 Load)) Mult (BinOp (BinOp (BinOp (Name &l:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Name &a:0 Load) Div (Constant i2 None)) Pow (Constant i2 None))) Pow (Constant f0.5 None))) None) (Assign (list (Name &side:0 Store)) (BinOp (BinOp (BinOp (Constant i1 None) Div (Constant i2 None)) Mult (Name &l:0 Load)) Mult (BinOp (BinOp (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Div (Constant i2 None)) Pow (Constant i2 None)) Sub (BinOp (BinOp (Name &l:0 Load) Div (Constant i2 None)) Pow (Constant i2 None))) Pow (Constant f0.5 None))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &center:0 Load) Add (BinOp (Name &side:0 Load) Mult (Constant i2 None))))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (For (Name &i:0 Store) (Attribute (Name g_sys Load) s_stdin Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &i:0 Load) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (BinOp (BinOp (BinOp (BinOp (Constant i4 None) Mult (Name &l:0 Load)) Mult (Name &l:0 Load)) Sub (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))) Pow (Constant f0.5 None))) Add (BinOp (BinOp (Constant i2 None) Mult (Name &l:0 Load)) Mult (BinOp (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Pow (Constant i2 None)) Sub (BinOp (Name &l:0 Load) Mult (Name &l:0 Load))) Pow (Constant f0.5 None)))) Div (Constant i4 None)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq)) (Assign (list (Name &s1:0 Store)) (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &l:0 Load)) Add (Name &x:0 Load)) Div (Constant i2 None)) None) (Assign (list (Name &v1:0 Store)) (BinOp (BinOp (BinOp (BinOp (Name &s1:0 Load) Mult (BinOp (Name &l:0 Load) Div (Constant i2 None))) Mult (BinOp (Name &l:0 Load) Div (Constant i2 None))) Mult (BinOp (Name &x:0 Load) Div (Constant i2 None))) Pow (BinOp (Constant i1 None) Div (Constant i2 None))) None) (Assign (list (Name &s2:0 Store)) (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &l:0 Load)) Add (Name &a:0 Load)) Div (Constant i2 None)) None) (Assign (list (Name &v2:0 Store)) (BinOp (BinOp (BinOp (BinOp (Name &s2:0 Load) Mult (BinOp (Name &s2:0 Load) Sub (Name &l:0 Load))) Mult (BinOp (Name &s2:0 Load) Sub (Name &l:0 Load))) Mult (BinOp (Name &s2:0 Load) Sub (Name &a:0 Load))) Pow (BinOp (Constant i1 None) Div (Constant i2 None))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name &v1:0 Load) Mult (Constant i2 None)) Add (Name &v2:0 Load)))) nil))) (/seq))) nil)",
      "(Module (fn_1 &s:0 &x:0 &l:0 &a:0) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (While (Constant True None) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)) (list (ExceptHandler (Name g_EOFError Load) None (/seq Break))) (/seq) (/seq)) (Assign (list (Name &HC:0 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &l:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Name &a:0 Load) Pow (Constant i2 None)) Div (Constant i4 None))))) nil) None) (Assign (list (Name &I:0 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &x:0 Load)) Div (Constant i2 None)) Pow (Constant i2 None)) Sub (BinOp (BinOp (Name &l:0 Load) Pow (Constant i2 None)) Div (Constant i4 None))))) nil) None) (Assign (list (Name &S1:0 Store)) (BinOp (BinOp (Name &a:0 Load) Mult (Name &HC:0 Load)) Div (Constant i2 None)) None) (Assign (list (Name &S2:0 Store)) (BinOp (BinOp (Name &l:0 Load) Mult (Name &I:0 Load)) Div (Constant i2 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NiwgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (BinOp (Name &S1:0 Load) Add (BinOp (Name &S2:0 Load) Mult (Constant i2 None))))) nil))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (BinOp (Name &t:0 Load) Pow (BinOp (Constant i1 None) Div (Constant i2 None)))))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &end:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content (BinOp (Name &a:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &t:0 Load) Mod (Name &j:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &end:0 Store)) (Constant i1 None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &end:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Expr (Call (Name g_input Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Compare\n                      (Constant i2 None)\n                      (list In)\n                      (list\n                        (List\n                          (list\n                            (_starred_content (Name &x:0 Load))\n                            (_starred_content\n                              (Call\n                                (Name g_pow Load)\n                                (list\n                                  (_starred_content (Constant i2 None))\n                                  (_starred_content (Name &x:0 Load))\n                                  (_starred_content (Name &x:0 Load))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          Load\n                        )\n                      )\n                    )\n                    (list\n                      (comprehension\n                        (Name &x:0 Store)\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &isprime:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &divider:1 Store)) (Constant i2 None) None)\n        (While\n          (Compare (BinOp (Name &divider:1 Load) Pow (Constant i2 None)) (list LtE) (list (Name &n:1 Load)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:1 Load) Mod (Name &divider:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant False None)))\n              (/seq)\n            )\n            (AugAssign (Name &divider:1 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &result:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &n:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Name &result:0 Store)\n          Add\n          (Call\n            (Name &isprime:0 Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &is_prime:0\n      (arguments nil (list (arg &a:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &j:1 Store)) (Constant i2 None) None)\n        (While\n          (Compare\n            (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &a:1 Load))) nil)\n            (list GtE)\n            (list (Name &j:1 Load))\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &a:1 Load) Mod (Name &j:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant i0 None)))\n              (/seq)\n            )\n            (AugAssign (Name &j:1 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Return (Constant i1 None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (Call (Name &is_prime:0 Load) (list (_starred_content (Name &a:0 Load))) nil)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (BinOp (Name &a:0 Load) Pow (Constant f0.5 None))))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &a:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq Break)\n              (/seq)\n            )\n          )\n          (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &x:0 Store)\n      (GeneratorExp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      (/seq\n        (Assign (list (Name &flg:0 Store)) (Constant True None) None)\n        (For\n          (Name &y:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content\n                (Call\n                  (Name g_int Load)\n                  (list\n                    (_starred_content (BinOp (BinOp (Name &x:0 Load) Pow (Constant f0.5 None)) Add (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:0 Load) Mod (Name &y:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &flg:0 Store)) (Constant False None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If (Name &flg:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &ok:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &z:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_int Load)\n                    (list (_starred_content (Call (Name g_sqrt Load) (list (_starred_content (Name &x:0 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:0 Load) Mod (Name &z:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &ok:0 Store)) (Constant i0 None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (AugAssign (Name &ans:0 Store) Add (Name &ok:0 Load))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &a:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (/seq Continue)\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Name g_pow Load)\n                      (list\n                        (_starred_content (Constant i2 None))\n                        (_starred_content (BinOp (Name &a:0 Load) Sub (Constant i1 None)))\n                        (_starred_content (Name &a:0 Load))\n                      )\n                      nil\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None) (alias g_floor None)) i0)\n    (FunctionDef\n      &is_prime:0\n      (arguments nil (list (arg &p:1 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_floor Load)\n                    (list (_starred_content (Call (Name g_sqrt Load) (list (_starred_content (Name &p:1 Load))) nil)))\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (UnaryOp Not (BinOp (Name &p:1 Load) Mod (Name &i:1 Load)))\n              (/seq (Return (Constant False None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Call\n                      (Name &is_prime:0 Load)\n                      (list\n                        (_starred_content\n                          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                        )\n                      )\n                      nil\n                    )\n                    (list\n                      (comprehension\n                        (Name &_:2 Store)\n                        (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &m:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &rm:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &m:0 Load))) nil)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content (BinOp (Name &rm:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &m:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (Assign (list (Name %2 Store)) #0 None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp #2 Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name %1 Load) Mod (Name %3 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name %2 Store)) #1 None) Break) (/seq))) (/seq) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (/splice (fn_1 (Constant i0 None) (Constant i1 None) (Name &a:0 Load) &t:0 &end:0 &j:0 (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Name &t:0 Load) Pow (BinOp (Constant i1 None) Div (Constant i2 None))))) nil) None))) (If (Compare (Name &end:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Expr (Call (Name g_input Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Compare (Constant i2 None) (list In) (list (List (list (_starred_content (Name &x:0 Load)) (_starred_content (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &x:0 Load)) (_starred_content (Name &x:0 Load))) nil))) Load))) (list (comprehension (Name &x:0 Store) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil))) nil) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (FunctionDef &isprime:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &divider:1 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &divider:1 Load) Pow (Constant i2 None)) (list LtE) (list (Name &n:1 Load))) (/seq (If (Compare (BinOp (Name &n:1 Load) Mod (Name &divider:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) (/seq)) (AugAssign (Name &divider:1 Store) Add (Constant i1 None))) (/seq)) (Return (Constant True None))) nil None None) (Assign (list (Name &result:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &result:0 Store) Add (Call (Name &isprime:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &is_prime:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &j:1 Store)) (Constant i2 None) None) (While (Compare (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &a:1 Load))) nil) (list GtE) (list (Name &j:1 Load))) (/seq (If (Compare (BinOp (Name &a:1 Load) Mod (Name &j:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) (/seq)) (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq)) (Return (Constant i1 None))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (Call (Name &is_prime:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name &a:0 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name &a:0 Load) Mod (Name &i:0 Load)) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) (/seq (Assign (list (Name &flg:0 Store)) (Constant True None) None) (For (Name &y:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Pow (Constant f0.5 None)) Add (Constant i1 None)))) nil))) nil) (/seq (If (Compare (BinOp (Name &x:0 Load) Mod (Name &y:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &flg:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Name &flg:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (/splice (fn_1 (Constant i1 None) (Constant i0 None) (Call (Name g_int Load) (list (_starred_content (Call (Name g_sqrt Load) (list (_starred_content (Name &x:0 Load))) nil))) nil) &x:0 &ok:0 &z:0 /nothing)) (AugAssign (Name &ans:0 Store) Add (Name &ok:0 Load))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i2 None))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &a:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq (If (Compare (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) (_starred_content (Name &a:0 Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None) (alias g_floor None)) i0) (FunctionDef &is_prime:0 (arguments nil (list (arg &p:1 None None)) None nil nil None nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_floor Load) (list (_starred_content (Call (Name g_sqrt Load) (list (_starred_content (Name &p:1 Load))) nil))) nil) Add (Constant i1 None)))) nil) (/seq (If (UnaryOp Not (BinOp (Name &p:1 Load) Mod (Name &i:1 Load))) (/seq (Return (Constant False None))) (/seq))) (/seq) None) (Return (Constant True None))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name &is_prime:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (/splice (fn_1 (Constant i0 None) (Constant i1 None) (Name &rm:0 Load) &m:0 &flag:0 &i:0 (Assign (list (Name &rm:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &m:0 Load))) nil))) nil) None))) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None))) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &a:0 Load))) nil)\n          (/seq\n            (Assign (list (Name &s:0 Store)) (Constant s_ None) None)\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &b:0 Load))) nil)\n              (/seq\n                (AugAssign\n                  (Name &s:0 Store)\n                  Add\n                  (IfExp\n                    (Compare\n                      (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Mod (Constant i2 None))\n                      (list Eq)\n                      (list (Constant i0 None))\n                    )\n                    (Constant s-WzM1XQ== None)\n                    (Constant s_. None)\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &h:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Subscript\n                        (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (Name &w:0 Load))\n                        (_slice_slice (Slice (BinOp (Name &i:0 Load) Mod (Constant i2 None)) None None))\n                        Load\n                      )\n                      (_slice_slice (Slice None (Name &w:0 Load) None))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &h:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &w:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &w:0 Load))) nil)\n              (/seq\n                (Assign\n                  (list (Name &ch:0 Store))\n                  (IfExp\n                    (Compare\n                      (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Mod (Constant i2 None))\n                      (list Eq)\n                      (list (Constant i0 None))\n                    )\n                    (Constant s-WzM1XQ== None)\n                    (Constant s_. None)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &ch:0 Load)))\n                    (list (keyword s_end (Constant s_ None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &t:0 Store))\n          (BinOp\n            (BinOp\n              (Constant s-WzEyMywgNDgsIDEyNSwgMTIzLCA0OSwgMTI1XQ== None)\n              Mult\n              (BinOp (Name &b:0 Load) FloorDiv (Constant i2 None))\n            )\n            Add\n            (IfExp\n              (Compare (BinOp (Name &b:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Constant s-WzEwXQ== None)\n              (Constant s-WzEyMywgNDgsIDEyNSwgMTBd None)\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &t1:0 Store))\n          (Call\n            (Attribute (Name &t:0 Load) s_format Load)\n            (list (_starred_content (Constant s-WzM1XQ== None)) (_starred_content (Constant s_. None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &t2:0 Store))\n          (Call\n            (Attribute (Name &t:0 Load) s_format Load)\n            (list (_starred_content (Constant s_. None)) (_starred_content (Constant s-WzM1XQ== None)))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &t1:0 Load) Add (Name &t2:0 Load))\n                    Mult\n                    (BinOp (Name &a:0 Load) FloorDiv (Constant i2 None))\n                  )\n                  Add\n                  (IfExp\n                    (Compare (BinOp (Name &a:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n                    (Constant s_ None)\n                    (Name &t1:0 Load)\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &H:0 Store)) (_starred_content (Name &W:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &H:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &W:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &line:0 Store))\n          (List\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (BinOp (Name &W:0 Load) FloorDiv (Constant i2 None)))\n                  Add\n                  (BinOp (Constant s-WzM1XQ== None) Mult (BinOp (Name &W:0 Load) Mod (Constant i2 None)))\n                )\n              )\n              (_starred_content\n                (BinOp\n                  (BinOp (Constant s-WzQ2LCAzNV0= None) Mult (BinOp (Name &W:0 Load) FloorDiv (Constant i2 None)))\n                  Add\n                  (BinOp (Constant s_. None) Mult (BinOp (Name &W:0 Load) Mod (Constant i2 None)))\n                )\n              )\n            )\n            Load\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &H:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &line:0 Load)\n                      (_slice_content (BinOp (Name &i:0 Load) Mod (Constant i2 None)))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &h:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &w:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (For\n          (Name &y:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Attribute (Constant s_ None) s_join Load)\n                      (list\n                        (_starred_content\n                          (GeneratorExp\n                            (Subscript\n                              (Constant s-WzM1LCA0Nl0= None)\n                              (_slice_content\n                                (BinOp (BinOp (Name &x:1 Load) Add (Name &y:0 Load)) Mod (Constant i2 None))\n                              )\n                              Load\n                            )\n                            (list\n                              (comprehension\n                                (Name &x:1 Store)\n                                (Call (Name g_range Load) (list (_starred_content (Name &w:0 Load))) nil)\n                                nil\n                                i0\n                              )\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &h:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &w:0 Load))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Mod (Constant i2 None))\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (_starred_content (Constant s-WzM1XQ== None)))\n                        (list (keyword s_end (Constant s_ None)))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (_starred_content (Constant s_. None)))\n                        (list (keyword s_end (Constant s_ None)))\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) nil nil))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (Constant i151 None)) None)\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (Tuple (list (_starred_content (Name &h:0 Load)) (_starred_content (Name &w:0 Load))) Load)\n            (list Eq)\n            (list (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load))\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &a:0 Load)\n                      (_slice_slice\n                        (Slice\n                          (BinOp (Name &i:0 Load) Mod (Constant i2 None))\n                          (BinOp (BinOp (Name &i:0 Load) Mod (Constant i2 None)) Add (Name &w:0 Load))\n                          None\n                        )\n                      )\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &h:0 Load) (list Eq Eq) (list (Name &w:0 Load) (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &s:0 Store))\n          (BinOp\n            (Constant s-WzM1LCA0Nl0= None)\n            Mult\n            (BinOp (BinOp (Name &w:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None))\n          )\n          None\n        )\n        (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &s:0 Load)\n                      (_slice_slice (Slice (Name &a:0 Load) (BinOp (Name &w:0 Load) Add (Name &a:0 Load)) None))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (AugAssign (Name &a:0 Store) BitXor (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &chess:0\n      (arguments nil (list (arg &h:1 None None) (arg &w:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (BinOp (Name &h:1 Load) Add (Name &w:1 Load)) Mod (Constant i2 None))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq (Return (Constant s-WzM1XQ== None)))\n          (/seq)\n        )\n        (Return (Constant s_. None))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &H:0 Store)) (_starred_content (Name &W:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &H:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &W:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &H:0 Load))) nil)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &W:0 Load))) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name &chess:0 Load)\n                          (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load)))\n                          nil\n                        )\n                      )\n                    )\n                    (list (keyword s_end (Constant s_ None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) nil nil))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) nil nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (BoolOp And (list (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))))) (/seq Break) (/seq)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None))) (/seq Break) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &a:0 Load))) nil) (/seq (Assign (list (Name &s:0 Store)) (Constant s_ None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &b:0 Load))) nil) (/seq (AugAssign (Name &s:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant s-WzM1XQ== None) (Constant s_. None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &h:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Subscript (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (Name &w:0 Load)) (_slice_slice (Slice (BinOp (Name &i:0 Load) Mod (Constant i2 None)) None None)) Load) (_slice_slice (Slice None (Name &w:0 Load) None)) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (/splice (fn_1 &w:0 &h:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &w:0 Load))) nil) (/seq (Assign (list (Name &ch:0 Store)) (IfExp (Compare (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant s-WzM1XQ== None) (Constant s_. None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ch:0 Load))) (list (keyword s_end (Constant s_ None)))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ None))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 &b:0 &a:0)) (Assign (list (Name &t:0 Store)) (BinOp (BinOp (Constant s-WzEyMywgNDgsIDEyNSwgMTIzLCA0OSwgMTI1XQ== None) Mult (BinOp (Name &b:0 Load) FloorDiv (Constant i2 None))) Add (IfExp (Compare (BinOp (Name &b:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant s-WzEwXQ== None) (Constant s-WzEyMywgNDgsIDEyNSwgMTBd None))) None) (Assign (list (Name &t1:0 Store)) (Call (Attribute (Name &t:0 Load) s_format Load) (list (_starred_content (Constant s-WzM1XQ== None)) (_starred_content (Constant s_. None))) nil) None) (Assign (list (Name &t2:0 Store)) (Call (Attribute (Name &t:0 Load) s_format Load) (list (_starred_content (Constant s_. None)) (_starred_content (Constant s-WzM1XQ== None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &t1:0 Load) Add (Name &t2:0 Load)) Mult (BinOp (Name &a:0 Load) FloorDiv (Constant i2 None))) Add (IfExp (Compare (BinOp (Name &a:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Constant s_ None) (Name &t1:0 Load))))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 &W:0 &H:0)) (Assign (list (Name &line:0 Store)) (List (list (_starred_content (BinOp (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (BinOp (Name &W:0 Load) FloorDiv (Constant i2 None))) Add (BinOp (Constant s-WzM1XQ== None) Mult (BinOp (Name &W:0 Load) Mod (Constant i2 None))))) (_starred_content (BinOp (BinOp (Constant s-WzQ2LCAzNV0= None) Mult (BinOp (Name &W:0 Load) FloorDiv (Constant i2 None))) Add (BinOp (Constant s_. None) Mult (BinOp (Name &W:0 Load) Mod (Constant i2 None)))))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &H:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &line:0 Load) (_slice_content (BinOp (Name &i:0 Load) Mod (Constant i2 None))) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 &w:0 &h:0)) (For (Name &y:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Subscript (Constant s-WzM1LCA0Nl0= None) (_slice_content (BinOp (BinOp (Name &x:1 Load) Add (Name &y:0 Load)) Mod (Constant i2 None))) Load) (list (comprehension (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &w:0 Load))) nil) nil i0))))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &h:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &w:0 Load))) nil) (/seq (If (Compare (BinOp (BinOp (Name &i:0 Load) Add (Name &j:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzM1XQ== None))) (list (keyword s_end (Constant s_ None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_. None))) (list (keyword s_end (Constant s_ None)))))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (Constant i151 None)) None) (While (Constant i1 None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Tuple (list (_starred_content (Name &h:0 Load)) (_starred_content (Name &w:0 Load))) Load) (list Eq) (list (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load))) (/seq Break) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (BinOp (BinOp (Name &i:0 Load) Mod (Constant i2 None)) Add (Name &w:0 Load)) None)) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &h:0 Load) (list Eq Eq) (list (Name &w:0 Load) (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &s:0 Store)) (BinOp (Constant s-WzM1LCA0Nl0= None) Mult (BinOp (BinOp (Name &w:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None))) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &h:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &s:0 Load) (_slice_slice (Slice (Name &a:0 Load) (BinOp (Name &w:0 Load) Add (Name &a:0 Load)) None)) Load))) nil)) (AugAssign (Name &a:0 Store) BitXor (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &chess:0 (arguments nil (list (arg &h:1 None None) (arg &w:1 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (BinOp (Name &h:1 Load) Add (Name &w:1 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant s-WzM1XQ== None))) (/seq)) (Return (Constant s_. None))) nil None None) (While (Constant True None) (/seq (/splice (fn_1 &W:0 &H:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &H:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &W:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &chess:0 Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &j:0 Load))) nil))) (list (keyword s_end (Constant s_ None)))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &fact:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i1 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i2 None))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &fact:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (BinOp\n              (Name &i:0 Load)\n              Mult\n              (Subscript (Name &fact:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n            )\n            Mod\n            (Name &M:0 Load)\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Subscript (Name &fact:0 Load) (_slice_content (Name &n:0 Load)) Load)\n                  Sub\n                  (Call\n                    (Name g_pow Load)\n                    (list\n                      (_starred_content (Constant i2 None))\n                      (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                      (_starred_content (Name &M:0 Load))\n                    )\n                    nil\n                  )\n                )\n                Add\n                (Name &M:0 Load)\n              )\n              Mod\n              (Name &M:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &BIG:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (BinOp (Constant f1000000000.0 None) Add (Constant i7 None))))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &memo:0 Store)) (Dict nil nil) None)\n    (FunctionDef\n      &factorial:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &x:1 Load) (list NotIn) (list (Name &memo:0 Load)))\n          (/seq\n            (Assign (list (Name &i:1 Store)) (Constant i1 None) None)\n            (For\n              (Name &k:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Name &x:1 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (AugAssign (Name &i:1 Store) Mult (Name &k:1 Load))\n                (AugAssign (Name &i:1 Store) Mod (Name &BIG:0 Load))\n              )\n              (/seq)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &memo:0 Load) (_slice_content (Name &x:1 Load)) Store))\n              (Name &i:1 Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Subscript (Name &memo:0 Load) (_slice_content (Name &x:1 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &u:0 Store))\n      (BinOp\n        (Call (Name &factorial:0 Load) (list (_starred_content (Name &n:0 Load))) nil)\n        Sub\n        (Call\n          (Name g_pow Load)\n          (list\n            (_starred_content (Constant i2 None))\n            (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            (_starred_content (Name &BIG:0 Load))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (AugAssign (Name &u:0 Store) Mod (Name &BIG:0 Load))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &u:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &rem:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &res:0 Store))\n          (BinOp (BinOp (Name &res:0 Load) Mult (Name &i:0 Load)) Mod (Name &mod:0 Load))\n          None\n        )\n        (Assign\n          (list (Name &rem:0 Store))\n          (BinOp (BinOp (Name &rem:0 Load) Mult (Constant i2 None)) Mod (Name &mod:0 Load))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp (BinOp (BinOp (Name &res:0 Load) Sub (Name &rem:0 Load)) Add (Name &mod:0 Load)) Mod (Name &mod:0 Load))\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq)\n    )\n    (Assign\n      (list (Name &fact:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i1000003 None))\n      None\n    )\n    (Assign (list (Subscript (Name &fact:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None)\n    (Assign (list (Subscript (Name &fact:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (Constant i1000001 None)))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &fact:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &fact:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n              Mult\n              (Name &i:0 Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Subscript (Name &fact:0 Load) (_slice_content (Name &n:0 Load)) Load) None)\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp\n        (Name &ans:0 Load)\n        Sub\n        (Call\n          (Name g_pow Load)\n          (list\n            (_starred_content (Constant i2 None))\n            (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            (_starred_content (Name &mod:0 Load))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Mod (Name &mod:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (FunctionDef\n      &factorial:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &dp:1 Store))\n          (ListComp\n            (Constant i1 None)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store))\n              (BinOp\n                (BinOp\n                  (BinOp (Name &i:1 Load) Mod (Name &mod:0 Load))\n                  Mult\n                  (BinOp\n                    (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n                    Mod\n                    (Name &mod:0 Load)\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &dp:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &circular:0\n      (arguments nil (list (arg &n:2 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i3 None))) (/seq (Return (Constant i2 None))) (/seq))\n        (Assign (list (Name &multiplier:2 Store)) (Constant i1 None) None)\n        (Assign (list (Name &sum:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &i:2 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &fact:2 Store))\n          (Call (Name &factorial:0 Load) (list (_starred_content (Name &n:2 Load))) nil)\n          None\n        )\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &x:2 Store))\n              (BinOp (BinOp (Name &n:2 Load) Sub (Constant i2 None)) Sub (Name &i:2 Load))\n              None\n            )\n            (Assign\n              (list (Name &y:2 Store))\n              (BinOp\n                (Subscript\n                  (Name &fact:2 Load)\n                  (_slice_content (BinOp (BinOp (Name &n:2 Load) Sub (Constant i1 None)) Sub (Name &i:2 Load)))\n                  Load\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &i:2 Store) Add (Constant i1 None))\n            (Assign\n              (list (Name &z:2 Store))\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp (Name &x:2 Load) Mod (Name &mod:0 Load))\n                    Mult\n                    (BinOp (Name &y:2 Load) Mod (Name &mod:0 Load))\n                  )\n                  Mult\n                  (BinOp (Name &multiplier:2 Load) Mod (Name &mod:0 Load))\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &multiplier:2 Store))\n              (BinOp (BinOp (Name &multiplier:2 Load) Mult (Constant i2 None)) Mod (Name &mod:0 Load))\n              None\n            )\n            (Assign\n              (list (Name &sum:2 Store))\n              (BinOp\n                (BinOp\n                  (BinOp (Name &sum:2 Load) Mod (Name &mod:0 Load))\n                  Add\n                  (BinOp (Name &z:2 Load) Mod (Name &mod:0 Load))\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (If (Compare (Name &x:2 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))\n          )\n          (/seq)\n        )\n        (Return (Name &sum:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &circular:0 Load) (list (_starred_content (Name &t:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &fast_pow:0\n      (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &y:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq))\n        (Assign\n          (list (Name &p:1 Store))\n          (Call\n            (Name &fast_pow:0 Load)\n            (list\n              (_starred_content (Name &x:1 Load))\n              (_starred_content (BinOp (Name &y:1 Load) FloorDiv (Constant i2 None)))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &p:1 Store))\n          (BinOp (BinOp (Name &p:1 Load) Mult (Name &p:1 Load)) Mod (Constant i1000000007 None))\n          None\n        )\n        (If\n          (BinOp (Name &y:1 Load) Mod (Constant i2 None))\n          (/seq\n            (Assign\n              (list (Name &p:1 Store))\n              (BinOp (BinOp (Name &p:1 Load) Mult (Name &x:1 Load)) Mod (Constant i1000000007 None))\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &p:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &fact:0\n      (arguments nil (list (arg &n:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:2 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &res:2 Store))\n              (BinOp (BinOp (Name &res:2 Load) Mult (Name &i:2 Load)) Mod (Constant i1000000007 None))\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &res:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Call (Name &fact:0 Load) (list (_starred_content (Name &n:0 Load))) nil)\n                  Add\n                  (Constant i1000000007 None)\n                )\n                Sub\n                (Call\n                  (Name &fast_pow:0 Load)\n                  (list\n                    (_starred_content (Constant i2 None))\n                    (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              Mod\n              (Constant i1000000007 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA3NywgMTExLCAxMTAsIDMyLCA2NSwgMTE3LCAxMDMsIDMyLCA0OSwgNDgsIDMyLCA0OCwgNDgsIDU4LCA0OCwgNTEsIDU4LCA1MywgNDksIDMyLCA1MCwgNDgsIDUwLCA0OCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDY1LCAxMTAsIDExNiwgMTA0LCAxMTEsIDExMCwgMTIxLCAxMF0=\n        None\n      )\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &base:0 Store)) (Constant i1 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &sub:0 Store))\n      (BinOp (Constant i2 None) Pow (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &base:0 Store))\n          (BinOp (BinOp (Name &base:0 Load) Mult (Name &i:0 Load)) Mod (Name &mod:0 Load))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp (BinOp (Name &base:0 Load) Sub (Name &sub:0 Load)) Add (Name &mod:0 Load))\n              Mod\n              (Name &mod:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &m:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &fact:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &result:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &t:0 Store)) (Name &n:0 Load) None)\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (Assign\n          (list (Name &result:0 Store))\n          (BinOp (BinOp (Name &result:0 Load) Mult (Name &t:0 Load)) Mod (Name &m:0 Load))\n          None\n        )\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &fact:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &m:0 Load) Add (Name &result:0 Load))\n                      Sub\n                      (BinOp\n                        (BinOp (Constant i2 None) Pow (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                        Mod\n                        (Name &m:0 Load)\n                      )\n                    )\n                    Mod\n                    (Name &m:0 Load)\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &modulo:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &factorial:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &twopower:0 Store)) (Constant i1 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &twopower:0 Store))\n          (BinOp (BinOp (Name &twopower:0 Load) Mult (Constant i2 None)) Mod (Name &modulo:0 Load))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &factorial:0 Store))\n          (BinOp (BinOp (Name &factorial:0 Load) Mult (Name &i:0 Load)) Mod (Name &modulo:0 Load))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp (BinOp (Name &factorial:0 Load) Sub (Name &twopower:0 Load)) Mod (Name &modulo:0 Load))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &MOD:0 Store)) (Constant i1000000007 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (AugAssign (Name &ans:0 Store) Mult (Name &i:0 Load))\n        (AugAssign (Name &ans:0 Store) Mod (Name &MOD:0 Load))\n      )\n      (/seq)\n      None\n    )\n    (AugAssign\n      (Name &ans:0 Store)\n      Sub\n      (Call\n        (Name g_pow Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n    )\n    (AugAssign (Name &ans:0 Store) Mod (Name &MOD:0 Load))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (fn_1 &M:0) (Assign (list (Name &fact:0 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &fact:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Name &i:0 Load) Mult (Subscript (Name &fact:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) Mod (Name &M:0 Load)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Subscript (Name &fact:0 Load) (_slice_content (Name &n:0 Load)) Load) Sub (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (_starred_content (Name &M:0 Load))) nil)) Add (Name &M:0 Load)) Mod (Name &M:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (Assign (list (Name &BIG:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Constant f1000000000.0 None) Add (Constant i7 None)))) nil) None) (Assign (list (Name &memo:0 Store)) (Dict nil nil) None) (FunctionDef &factorial:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:1 Load) (list NotIn) (list (Name &memo:0 Load))) (/seq (Assign (list (Name &i:1 Store)) (Constant i1 None) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &x:1 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &i:1 Store) Mult (Name &k:1 Load)) (AugAssign (Name &i:1 Store) Mod (Name &BIG:0 Load))) (/seq) None) (Assign (list (Subscript (Name &memo:0 Load) (_slice_content (Name &x:1 Load)) Store)) (Name &i:1 Load) None)) (/seq)) (Return (Subscript (Name &memo:0 Load) (_slice_content (Name &x:1 Load)) Load))) nil None None) (Assign (list (Name &u:0 Store)) (BinOp (Call (Name &factorial:0 Load) (list (_starred_content (Name &n:0 Load))) nil) Sub (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (_starred_content (Name &BIG:0 Load))) nil)) None) (AugAssign (Name &u:0 Store) Mod (Name &BIG:0 Load)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &u:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (fn_1 &mod:0) (Assign (list (Name &res:0 Store)) (Constant i1 None) None) (Assign (list (Name &rem:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &res:0 Store)) (BinOp (BinOp (Name &res:0 Load) Mult (Name &i:0 Load)) Mod (Name &mod:0 Load)) None) (Assign (list (Name &rem:0 Store)) (BinOp (BinOp (Name &rem:0 Load) Mult (Constant i2 None)) Mod (Name &mod:0 Load)) None)) (/seq) None) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (BinOp (Name &res:0 Load) Sub (Name &rem:0 Load)) Add (Name &mod:0 Load)) Mod (Name &mod:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (If (BoolOp Or (list (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (Assign (list (Name &fact:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i1000003 None)) None) (Assign (list (Subscript (Name &fact:0 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &fact:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Constant i1000001 None))) nil) (/seq (Assign (list (Subscript (Name &fact:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Subscript (Name &fact:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) Mult (Name &i:0 Load)) Mod (Name &mod:0 Load)) None)) (/seq) None) (Assign (list (Name &ans:0 Store)) (Subscript (Name &fact:0 Load) (_slice_content (Name &n:0 Load)) Load) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Sub (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) (_starred_content (Name &mod:0 Load))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Mod (Name &mod:0 Load)))) nil))) nil)",
      "(Module (/seq (fn_1 &mod:0) (FunctionDef &factorial:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (ListComp (Constant i1 None) (list (comprehension (Name &x:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (BinOp (BinOp (Name &i:1 Load) Mod (Name &mod:0 Load)) Mult (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Mod (Name &mod:0 Load))) Mod (Name &mod:0 Load)) None)) (/seq) None) (Return (Name &dp:1 Load))) nil None None) (FunctionDef &circular:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i3 None))) (/seq (Return (Constant i2 None))) (/seq)) (Assign (list (Name &multiplier:2 Store)) (Constant i1 None) None) (Assign (list (Name &sum:2 Store)) (Constant i0 None) None) (Assign (list (Name &i:2 Store)) (Constant i0 None) None) (Assign (list (Name &fact:2 Store)) (Call (Name &factorial:0 Load) (list (_starred_content (Name &n:2 Load))) nil) None) (While (Constant True None) (/seq (Assign (list (Name &x:2 Store)) (BinOp (BinOp (Name &n:2 Load) Sub (Constant i2 None)) Sub (Name &i:2 Load)) None) (Assign (list (Name &y:2 Store)) (BinOp (Subscript (Name &fact:2 Load) (_slice_content (BinOp (BinOp (Name &n:2 Load) Sub (Constant i1 None)) Sub (Name &i:2 Load))) Load) Mod (Name &mod:0 Load)) None) (AugAssign (Name &i:2 Store) Add (Constant i1 None)) (Assign (list (Name &z:2 Store)) (BinOp (BinOp (BinOp (BinOp (Name &x:2 Load) Mod (Name &mod:0 Load)) Mult (BinOp (Name &y:2 Load) Mod (Name &mod:0 Load))) Mult (BinOp (Name &multiplier:2 Load) Mod (Name &mod:0 Load))) Mod (Name &mod:0 Load)) None) (Assign (list (Name &multiplier:2 Store)) (BinOp (BinOp (Name &multiplier:2 Load) Mult (Constant i2 None)) Mod (Name &mod:0 Load)) None) (Assign (list (Name &sum:2 Store)) (BinOp (BinOp (BinOp (Name &sum:2 Load) Mod (Name &mod:0 Load)) Add (BinOp (Name &z:2 Load) Mod (Name &mod:0 Load))) Mod (Name &mod:0 Load)) None) (If (Compare (Name &x:2 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))) (/seq)) (Return (Name &sum:2 Load))) nil None None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &circular:0 Load) (list (_starred_content (Name &t:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (FunctionDef &fast_pow:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &y:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq)) (Assign (list (Name &p:1 Store)) (Call (Name &fast_pow:0 Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (BinOp (Name &y:1 Load) FloorDiv (Constant i2 None)))) nil) None) (Assign (list (Name &p:1 Store)) (BinOp (BinOp (Name &p:1 Load) Mult (Name &p:1 Load)) Mod (Constant i1000000007 None)) None) (If (BinOp (Name &y:1 Load) Mod (Constant i2 None)) (/seq (Assign (list (Name &p:1 Store)) (BinOp (BinOp (Name &p:1 Load) Mult (Name &x:1 Load)) Mod (Constant i1000000007 None)) None)) (/seq)) (Return (Name &p:1 Load))) nil None None) (FunctionDef &fact:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:2 Store)) (Constant i1 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &res:2 Store)) (BinOp (BinOp (Name &res:2 Load) Mult (Name &i:2 Load)) Mod (Constant i1000000007 None)) None)) (/seq) None) (Return (Name &res:2 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Call (Name &fact:0 Load) (list (_starred_content (Name &n:0 Load))) nil) Add (Constant i1000000007 None)) Sub (Call (Name &fast_pow:0 Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) Mod (Constant i1000000007 None)))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA3NywgMTExLCAxMTAsIDMyLCA2NSwgMTE3LCAxMDMsIDMyLCA0OSwgNDgsIDMyLCA0OCwgNDgsIDU4LCA0OCwgNTEsIDU4LCA1MywgNDksIDMyLCA1MCwgNDgsIDUwLCA0OCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDY1LCAxMTAsIDExNiwgMTA0LCAxMTEsIDExMCwgMTIxLCAxMF0= None)) (fn_1 &mod:0) (Assign (list (Name &base:0 Store)) (Constant i1 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &sub:0 Store)) (BinOp (Constant i2 None) Pow (BinOp (Name &n:0 Load) Sub (Constant i1 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &base:0 Store)) (BinOp (BinOp (Name &base:0 Load) Mult (Name &i:0 Load)) Mod (Name &mod:0 Load)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &base:0 Load) Sub (Name &sub:0 Load)) Add (Name &mod:0 Load)) Mod (Name &mod:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (fn_1 &m:0) (Assign (list (Name &fact:0 Store)) (Constant i1 None) None) (Assign (list (Name &result:0 Store)) (Constant i1 None) None) (Assign (list (Name &t:0 Store)) (Name &n:0 Load) None) (While (Name &t:0 Load) (/seq (Assign (list (Name &result:0 Store)) (BinOp (BinOp (Name &result:0 Load) Mult (Name &t:0 Load)) Mod (Name &m:0 Load)) None) (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (AugAssign (Name &fact:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &m:0 Load) Add (Name &result:0 Load)) Sub (BinOp (BinOp (Constant i2 None) Pow (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Mod (Name &m:0 Load))) Mod (Name &m:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (fn_1 &modulo:0) (Assign (list (Name &factorial:0 Store)) (Constant i1 None) None) (Assign (list (Name &twopower:0 Store)) (Constant i1 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &twopower:0 Store)) (BinOp (BinOp (Name &twopower:0 Load) Mult (Constant i2 None)) Mod (Name &modulo:0 Load)) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &factorial:0 Store)) (BinOp (BinOp (Name &factorial:0 Load) Mult (Name &i:0 Load)) Mod (Name &modulo:0 Load)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Name &factorial:0 Load) Sub (Name &twopower:0 Load)) Mod (Name &modulo:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &MOD:0 Store)) (Constant i1000000007 None) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &ans:0 Store) Mult (Name &i:0 Load)) (AugAssign (Name &ans:0 Store) Mod (Name &MOD:0 Load))) (/seq) None) (AugAssign (Name &ans:0 Store) Sub (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) (AugAssign (Name &ans:0 Store) Mod (Name &MOD:0 Load)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &MAXN:0 Store))\n      (BinOp\n        (BinOp (Constant i5 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n        Add\n        (Constant i100 None)\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil))\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Name &a:0 Load))\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Add (Constant i2 None)) None)\n    (Assign (list (Name &arr:0 Store)) (List nil Load) None)\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_append Load)\n        (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)))\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_append Load)\n        (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)))\n        nil\n      )\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i2 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n      (/seq\n        (Assign (list (Name &ln:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n        (Assign\n          (list (Name &l1:0 Store))\n          (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n          None\n        )\n        (Assign\n          (list (Name &l0:0 Store))\n          (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n          None\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &l1:0 Load) (list LtE) (list (Name &l0:0 Load)))\n              (Compare (Name &l1:0 Load) (list LtE) (list (Name &ln:0 Load)))\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (Name &ans:0 Load)\n                Add\n                (Call\n                  (Name g_min Load)\n                  (list (_starred_content (Name &l0:0 Load)) (_starred_content (Name &ln:0 Load)))\n                  nil\n                )\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &arr:0 Load) s_pop Load) nil nil))\n            (Assign\n              (list (Name &l1:0 Store))\n              (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n              None\n            )\n            (Assign\n              (list (Name &l0:0 Store))\n              (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Name &ln:0 Load))) nil))\n        (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)\n      )\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content\n                (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n              )\n              (_starred_content\n                (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &list:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &stack:0 Store)) (List nil Load) None)\n    (Assign (list (Name &score:0 Store)) (Constant i0 None) None)\n    (Expr\n      (Call\n        (Attribute (Name &stack:0 Load) s_append Load)\n        (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Constant i0 None)) Load)))\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &list:0 Load))) nil))\n        )\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &stack:0 Load))) nil)\n                (list Gt)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                (list LtE)\n                (list\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                      (_starred_content\n                        (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &score:0 Store))\n              (BinOp\n                (Name &score:0 Load)\n                Add\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                    (_starred_content\n                      (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &stack:0 Load) s_pop Load) nil nil))\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &stack:0 Load) s_append Load)\n            (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &stack:0 Load))) nil) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &score:0 Store))\n          (BinOp\n            (Name &score:0 Load)\n            Add\n            (Call\n              (Name g_min Load)\n              (list\n                (_starred_content\n                  (Subscript (Name &stack:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                )\n                (_starred_content\n                  (Subscript (Name &stack:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              nil\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &cards:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &score:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &preIndexes:0 Store)) (List nil Load) None)\n    (Assign (list (Name &nextIndexes:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &isChosen:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (Assign (list (Name &chosens:0 Store)) (List nil Load) None)\n    (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil))\n    (Expr\n      (Call\n        (Attribute (Name &preIndexes:0 Load) s_append Load)\n        (list (_starred_content (UnaryOp USub (Constant i1 None))))\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list LtE)\n                (list\n                  (Subscript (Name &cards:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                )\n              )\n              (Compare\n                (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list LtE)\n                (list\n                  (Subscript (Name &cards:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                )\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &chosens:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Tuple\n                      (list\n                        (_starred_content\n                          (UnaryOp USub (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                        )\n                        (_starred_content (Name &i:0 Load))\n                      )\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (Assign\n              (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &preIndexes:0 Load) s_append Load)\n            (list (_starred_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &nextIndexes:0 Load) s_append Load)\n            (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &preIndexes:0 Load) s_append Load)\n        (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))))\n        nil\n      )\n    )\n    (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (Name &n:0 Load))) nil))\n    (While\n      (Compare\n        (Call (Name g_len Load) (list (_starred_content (Name &chosens:0 Load))) nil)\n        (list NotEq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Assign (list (Name &chosen:0 Store)) (Call (Attribute (Name &chosens:0 Load) s_pop Load) nil nil) None)\n        (Assign\n          (list (Name &preChosen:0 Store))\n          (Subscript\n            (Name &preIndexes:0 Load)\n            (_slice_content (Subscript (Name &chosen:0 Load) (_slice_content (Constant i1 None)) Load))\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &nextChosen:0 Store))\n          (Subscript\n            (Name &nextIndexes:0 Load)\n            (_slice_content (Subscript (Name &chosen:0 Load) (_slice_content (Constant i1 None)) Load))\n            Load\n          )\n          None\n        )\n        (AugAssign\n          (Name &score:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load))\n              (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load))\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Store))\n          (Name &nextChosen:0 Load)\n          None\n        )\n        (Assign\n          (list (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Store))\n          (Name &preChosen:0 Load)\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &preChosen:0 Load) (list NotEq) (list (Constant i0 None)))\n              (Compare\n                (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                (list NotEq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (Compare\n                (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                (list NotEq)\n                (list (Name &n:0 Load))\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (_slice_content\n                          (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                        )\n                        Load\n                      )\n                    )\n                  )\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (_slice_content\n                          (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                        )\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &isChosen:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &preChosen:0 Load)) Store))\n                      (Constant i1 None)\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &chosens:0 Load) s_append Load)\n                        (list\n                          (_starred_content\n                            (Tuple\n                              (list\n                                (_starred_content\n                                  (UnaryOp\n                                    USub\n                                    (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)\n                                  )\n                                )\n                                (_starred_content (Name &preChosen:0 Load))\n                              )\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &nextChosen:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n              (Compare\n                (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                (list NotEq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (Compare\n                (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                (list NotEq)\n                (list (Name &n:0 Load))\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (_slice_content\n                          (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                        )\n                        Load\n                      )\n                    )\n                  )\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (_slice_content\n                          (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                        )\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &isChosen:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &nextChosen:0 Load)) Store))\n                      (Constant i1 None)\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &chosens:0 Load) s_append Load)\n                        (list\n                          (_starred_content\n                            (Tuple\n                              (list\n                                (_starred_content\n                                  (UnaryOp\n                                    USub\n                                    (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)\n                                  )\n                                )\n                                (_starred_content (Name &nextChosen:0 Load))\n                              )\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &tempNode:0 Store))\n      (Subscript (Name &nextIndexes:0 Load) (_slice_content (Constant i0 None)) Load)\n      None\n    )\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &tempNode:0 Load) (list NotEq) (list (Name &n:0 Load)))\n          (Compare (Name &tempNode:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        )\n      )\n      (/seq\n        (AugAssign\n          (Name &score:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &cards:0 Load)\n                  (_slice_content (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load))\n                  Load\n                )\n              )\n              (_starred_content\n                (Subscript\n                  (Name &cards:0 Load)\n                  (_slice_content (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load))\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Name &tempNode:0 Store))\n          (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load)\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &s:0 Store))\n            (_starred_content (Name &a:0 Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_input Load) nil nil))\n          (_starred_content (List nil Load))\n          (_starred_content (Constant i0 None))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                (list Gt)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                    )\n                    (_starred_content (Name &i:0 Load))\n                  )\n                  nil\n                )\n                (list GtE)\n                (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &i:0 Load))\n                  (_starred_content\n                    (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Delete (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Del)))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &a:0 Load)\n              Add\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &s:0 Load)\n                      (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &maxScore:0\n      (arguments nil (list (arg &list:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &score:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &stack:1 Store)) (List nil Load) None)\n        (Expr\n          (Call\n            (Attribute (Name &stack:1 Load) s_append Load)\n            (list (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Constant i0 None)) Load)))\n            nil\n          )\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &list:1 Load))) nil))\n            )\n            nil\n          )\n          (/seq\n            (While\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Call (Name g_len Load) (list (_starred_content (Name &stack:1 Load))) nil)\n                    (list Gt)\n                    (list (Constant i1 None))\n                  )\n                  (Compare\n                    (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    (list LtE)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list\n                          (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                          (_starred_content\n                            (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &score:1 Store))\n                  (BinOp\n                    (Name &score:1 Load)\n                    Add\n                    (Call\n                      (Name g_min Load)\n                      (list\n                        (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                        (_starred_content\n                          (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Expr (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil))\n              )\n              (/seq)\n            )\n            (Expr\n              (Call\n                (Attribute (Name &stack:1 Load) s_append Load)\n                (list (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Name &i:1 Load)) Load)))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content\n                (BinOp\n                  (Call (Name g_len Load) (list (_starred_content (Name &stack:1 Load))) nil)\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &score:1 Store))\n              (BinOp\n                (Name &score:1 Load)\n                Add\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (Subscript\n                        (Name &stack:1 Load)\n                        (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))\n                        Load\n                      )\n                    )\n                    (_starred_content\n                      (Subscript\n                        (Name &stack:1 Load)\n                        (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                        Load\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &score:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name &maxScore:0 Load) (list (_starred_content (Name &l:0 Load))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                (list Gt)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                    )\n                    (_starred_content (Name &i:0 Load))\n                  )\n                  nil\n                )\n                (list GtE)\n                (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &i:0 Load))\n                  (_starred_content\n                    (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Delete (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Del)))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &a:0 Load)\n              Add\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &s:0 Load)\n                      (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                (list Gt)\n                (list (Constant i1 None))\n              )\n              (Compare\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                    )\n                    (_starred_content (Name &i:0 Load))\n                  )\n                  nil\n                )\n                (list GtE)\n                (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &i:0 Load))\n                  (_starred_content\n                    (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Delete (list (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Del)))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (_starred_content (Name &i:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &a:0 Load)\n              Add\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &s:0 Load)\n                      (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (For (Name %2 Store) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content #0)) nil) (/seq (While (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Gt) (list (Constant i1 None))) (Compare (Call (Name g_min Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)) (_starred_content (Name %2 Load))) nil) (list GtE) (list (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))))) (/seq (AugAssign (Name %3 Store) Add (Call (Name g_min Load) (list (_starred_content (Name %2 Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil)) (Delete (list (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Del)))) (/seq)) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %2 Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name %3 Load) Add (Call (Name g_sum Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None)) Load))) nil)))) nil)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &MAXN:0 Store)) (BinOp (BinOp (Constant i5 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i100 None)) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil)) (Assign (list (Name &a:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Name &a:0 Load)) None) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Add (Constant i2 None)) None) (Assign (list (Name &arr:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) (Assign (list (Name &i:0 Store)) (Constant i2 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (/seq (Assign (list (Name &ln:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Name &l1:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &l0:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) (While (BoolOp And (list (Compare (Name &l1:0 Load) (list LtE) (list (Name &l0:0 Load))) (Compare (Name &l1:0 Load) (list LtE) (list (Name &ln:0 Load))))) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Add (Call (Name g_min Load) (list (_starred_content (Name &l0:0 Load)) (_starred_content (Name &ln:0 Load))) nil)) None) (Expr (Call (Attribute (Name &arr:0 Load) s_pop Load) nil nil)) (Assign (list (Name &l1:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &l0:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None)) (/seq)) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Name &ln:0 Load))) nil)) (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (AugAssign (Name &ans:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &list:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &stack:0 Store)) (List nil Load) None) (Assign (list (Name &score:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &stack:0 Load) s_append Load) (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &list:0 Load))) nil))) nil) (/seq (While (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &stack:0 Load))) nil) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list LtE) (list (Call (Name g_min Load) (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil))))) (/seq (Assign (list (Name &score:0 Store)) (BinOp (Name &score:0 Load) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil)) None) (Expr (Call (Attribute (Name &stack:0 Load) s_pop Load) nil nil))) (/seq)) (Expr (Call (Attribute (Name &stack:0 Load) s_append Load) (list (_starred_content (Subscript (Name &list:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &stack:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &score:0 Store)) (BinOp (Name &score:0 Load) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &stack:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &stack:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) nil)) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cards:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &score:0 Store)) (Constant i0 None) None) (Assign (list (Name &preIndexes:0 Store)) (List nil Load) None) (Assign (list (Name &nextIndexes:0 Store)) (List nil Load) None) (Assign (list (Name &isChosen:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &chosens:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load))) (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))))) (/seq (Expr (Call (Attribute (Name &chosens:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Name &i:0 Load))) Load))) nil)) (Assign (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)) (/seq)) (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil)) (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (Name &n:0 Load))) nil)) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &chosens:0 Load))) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &chosen:0 Store)) (Call (Attribute (Name &chosens:0 Load) s_pop Load) nil nil) None) (Assign (list (Name &preChosen:0 Store)) (Subscript (Name &preIndexes:0 Load) (_slice_content (Subscript (Name &chosen:0 Load) (_slice_content (Constant i1 None)) Load)) Load) None) (Assign (list (Name &nextChosen:0 Store)) (Subscript (Name &nextIndexes:0 Load) (_slice_content (Subscript (Name &chosen:0 Load) (_slice_content (Constant i1 None)) Load)) Load) None) (AugAssign (Name &score:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)) (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load))) nil)) (Assign (list (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Store)) (Name &nextChosen:0 Load) None) (Assign (list (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Store)) (Name &preChosen:0 Load) None) (If (BoolOp And (list (Compare (Name &preChosen:0 Load) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load) (list NotEq) (list (Name &n:0 Load))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)) Load))) (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)) Load))))) (/seq (If (Compare (Subscript (Name &isChosen:0 Load) (_slice_content (Name &preChosen:0 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &preChosen:0 Load)) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &chosens:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load))) (_starred_content (Name &preChosen:0 Load))) Load))) nil))) (/seq))) (/seq))) (/seq)) (If (BoolOp And (list (Compare (Name &nextChosen:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load) (list NotEq) (list (Name &n:0 Load))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)) Load))) (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load)) Load))))) (/seq (If (Compare (Subscript (Name &isChosen:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &nextChosen:0 Load)) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &chosens:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load))) (_starred_content (Name &nextChosen:0 Load))) Load))) nil))) (/seq))) (/seq))) (/seq))) (/seq)) (Assign (list (Name &tempNode:0 Store)) (Subscript (Name &nextIndexes:0 Load) (_slice_content (Constant i0 None)) Load) None) (While (BoolOp And (list (Compare (Name &tempNode:0 Load) (list NotEq) (list (Name &n:0 Load))) (Compare (Name &tempNode:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))) (/seq (AugAssign (Name &score:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load)) Load)) (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load)) Load))) nil)) (Assign (list (Name &tempNode:0 Store)) (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store)) (_starred_content (Name &a:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_input Load) nil nil)) (_starred_content (List nil Load)) (_starred_content (Constant i0 None))) Load) None) (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) &s:0 &i:0 &a:0))) nil)",
      "(Module (/seq (FunctionDef &maxScore:0 (arguments nil (list (arg &list:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &list:1 Load))) nil))) nil) (/seq (While (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &stack:1 Load))) nil) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list LtE) (list (Call (Name g_min Load) (list (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil))))) (/seq (Assign (list (Name &score:1 Store)) (BinOp (Name &score:1 Load) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil)) None) (Expr (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil))) (/seq)) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Subscript (Name &list:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &stack:1 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &score:1 Store)) (BinOp (Name &score:1 Load) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &stack:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &stack:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) nil)) None)) (/seq) None) (Return (Name &score:1 Load))) nil None None) (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &maxScore:0 Load) (list (_starred_content (Name &l:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &s:0 &i:0 &a:0))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &s:0 &i:0 &a:0))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &hp_y:0 Store))\n            (_starred_content (Name &at_y:0 Store))\n            (_starred_content (Name &df_y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &hp_m:0 Store))\n            (_starred_content (Name &at_m:0 Store))\n            (_starred_content (Name &df_m:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &cst_hp:0 Store))\n            (_starred_content (Name &cst_at:0 Store))\n            (_starred_content (Name &cst_df:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant f2e+18 None) None)\n    (For\n      (Name &ati:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i201 None))) nil)\n      (/seq\n        (For\n          (Name &dfi:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Constant i201 None))) nil)\n          (/seq\n            (If\n              (Compare (BinOp (Name &ati:0 Load) Add (Name &at_y:0 Load)) (list Gt) (list (Name &df_m:0 Load)))\n              (/seq\n                (Assign\n                  (list (Name &k:0 Store))\n                  (BinOp\n                    (Name &hp_m:0 Load)\n                    FloorDiv\n                    (BinOp (BinOp (Name &at_y:0 Load) Add (Name &ati:0 Load)) Sub (Name &df_m:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare\n                    (BinOp\n                      (Name &hp_m:0 Load)\n                      Mod\n                      (BinOp (BinOp (Name &at_y:0 Load) Add (Name &ati:0 Load)) Sub (Name &df_m:0 Load))\n                    )\n                    (list NotEq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n                (Assign\n                  (list (Name &t:0 Store))\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (_starred_content (Constant i0 None))\n                      (_starred_content\n                        (BinOp\n                          (BinOp\n                            (BinOp\n                              (Name &k:0 Load)\n                              Mult\n                              (BinOp (BinOp (Name &at_m:0 Load) Sub (Name &df_y:0 Load)) Sub (Name &dfi:0 Load))\n                            )\n                            Sub\n                            (Name &hp_y:0 Load)\n                          )\n                          Add\n                          (Constant i1 None)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &cost:0 Store))\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &cst_hp:0 Load) Mult (Name &t:0 Load))\n                      Add\n                      (BinOp (Name &cst_df:0 Load) Mult (Name &dfi:0 Load))\n                    )\n                    Add\n                    (BinOp (Name &cst_at:0 Load) Mult (Name &ati:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (Call\n                    (Name g_min Load)\n                    (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &cost:0 Load)))\n                    nil\n                  )\n                  None\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (_starred_content (Name g_int Load))\n            (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &yH:0 Store))\n            (_starred_content (Name &yA:0 Store))\n            (_starred_content (Name &yD:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &mH:0 Store))\n            (_starred_content (Name &mA:0 Store))\n            (_starred_content (Name &mD:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &h:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (Assign (list (Name &Q:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None)\n    (For\n      (Name &A:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (Constant i0 None))\n                (_starred_content (BinOp (BinOp (Name &mD:0 Load) Sub (Name &yA:0 Load)) Add (Constant i1 None)))\n              )\n              nil\n            )\n          )\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (BinOp (BinOp (Name &mH:0 Load) Add (Name &mD:0 Load)) Sub (Name &yA:0 Load)))\n                )\n                nil\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (For\n          (Name &D:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (_starred_content (Constant i0 None))\n                      (_starred_content (BinOp (Name &mA:0 Load) Sub (Name &yD:0 Load)))\n                    )\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &H:0 Store))\n              (BinOp\n                (Name &yH:0 Load)\n                Sub\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (BinOp (BinOp (Name &mH:0 Load) Add (Name &yA:0 Load)) Add (Name &A:0 Load))\n                        Sub\n                        (Name &mD:0 Load)\n                      )\n                      Sub\n                      (Constant i1 None)\n                    )\n                    FloorDiv\n                    (BinOp (BinOp (Name &yA:0 Load) Add (Name &A:0 Load)) Sub (Name &mD:0 Load))\n                  )\n                  Mult\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (_starred_content (Constant i0 None))\n                      (_starred_content (BinOp (BinOp (Name &mA:0 Load) Sub (Name &yD:0 Load)) Sub (Name &D:0 Load)))\n                    )\n                    nil\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &Q:0 Store))\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &A:0 Load) Mult (Name &a:0 Load))\n                        Add\n                        (BinOp (Name &D:0 Load) Mult (Name &d:0 Load))\n                      )\n                      Add\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (_starred_content (Constant i0 None))\n                          (_starred_content\n                            (BinOp (Name &h:0 Load) Mult (BinOp (Constant i1 None) Sub (Name &H:0 Load)))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (_starred_content (Name &Q:0 Load))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &Q:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_ceil None)) i0)\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &hy:0 Store))\n            (_starred_content (Name &ay:0 Store))\n            (_starred_content (Name &dy:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &hm:0 Store))\n            (_starred_content (Name &am:0 Store))\n            (_starred_content (Name &dm:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &hp:0 Store))\n            (_starred_content (Name &ap:0 Store))\n            (_starred_content (Name &dp:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &time:0\n      (arguments nil (list (arg &ay:1 None None) (arg &hm:1 None None) (arg &dm:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &ay:1 Load) (list LtE) (list (Name &dm:1 Load)))\n            (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n            (Call\n              (Name g_ceil Load)\n              (list (_starred_content (BinOp (Name &hm:1 Load) Div (BinOp (Name &ay:1 Load) Sub (Name &dm:1 Load)))))\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &health_need:0\n      (arguments nil (list (arg &t:2 None None) (arg &dy:2 None None) (arg &am:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &dy:2 Load) (list GtE) (list (Name &am:2 Load)))\n            (Constant i0 None)\n            (BinOp (BinOp (Name &t:2 Load) Mult (BinOp (Name &am:2 Load) Sub (Name &dy:2 Load))) Add (Constant i1 None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &min_p:0 Store))\n      (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Name &ay:0 Load))\n          (_starred_content (BinOp (Constant i200 None) Add (Constant i1 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (Call\n            (Name &time:0 Load)\n            (list\n              (_starred_content (Name &a:0 Load))\n              (_starred_content (Name &hm:0 Load))\n              (_starred_content (Name &dm:0 Load))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (Name &t:0 Load)\n            (list Eq)\n            (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))\n          )\n          (/seq Continue)\n          (/seq)\n        )\n        (For\n          (Name &d:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Name &dy:0 Load))\n              (_starred_content (BinOp (Constant i100 None) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &h:0 Store))\n              (Call\n                (Name &health_need:0 Load)\n                (list\n                  (_starred_content (Name &t:0 Load))\n                  (_starred_content (Name &d:0 Load))\n                  (_starred_content (Name &am:0 Load))\n                )\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &a_p:0 Store))\n              (BinOp (BinOp (Name &a:0 Load) Sub (Name &ay:0 Load)) Mult (Name &ap:0 Load))\n              None\n            )\n            (Assign\n              (list (Name &d_p:0 Store))\n              (BinOp (BinOp (Name &d:0 Load) Sub (Name &dy:0 Load)) Mult (Name &dp:0 Load))\n              None\n            )\n            (Assign\n              (list (Name &h_p:0 Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (_starred_content (Constant i0 None))\n                    (_starred_content (BinOp (Name &h:0 Load) Sub (Name &hy:0 Load)))\n                  )\n                  nil\n                )\n                Mult\n                (Name &hp:0 Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &total:0 Store))\n              (BinOp (BinOp (Name &a_p:0 Load) Add (Name &d_p:0 Load)) Add (Name &h_p:0 Load))\n              None\n            )\n            (If\n              (Compare (Name &total:0 Load) (list Lt) (list (Name &min_p:0 Load)))\n              (/seq (Assign (list (Name &min_p:0 Store)) (Name &total:0 Load) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &min_p:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &H_y:0 Store))\n            (_starred_content (Name &A_y:0 Store))\n            (_starred_content (Name &D_y:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &H_m:0 Store))\n            (_starred_content (Name &A_m:0 Store))\n            (_starred_content (Name &D_m:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &h:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None)\n    (For\n      (Name &A_buy:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content (Constant i0 None))\n                  (_starred_content (BinOp (BinOp (Name &H_m:0 Load) Add (Name &D_m:0 Load)) Sub (Name &A_y:0 Load)))\n                )\n                nil\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (For\n          (Name &D_buy:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (_starred_content (Constant i0 None))\n                      (_starred_content (BinOp (Name &A_m:0 Load) Sub (Name &D_y:0 Load)))\n                    )\n                    nil\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &damage:0 Store))\n              (BinOp (BinOp (Name &A_y:0 Load) Add (Name &A_buy:0 Load)) Sub (Name &D_m:0 Load))\n              None\n            )\n            (Assign\n              (list (Name &cost:0 Store))\n              (BinOp\n                (BinOp (Name &A_buy:0 Load) Mult (Name &a:0 Load))\n                Add\n                (BinOp (Name &D_buy:0 Load) Mult (Name &d:0 Load))\n              )\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &damage:0 Load) (list Gt) (list (Constant i0 None)))\n                  (Compare (Name &cost:0 Load) (list Lt) (list (Name &ans:0 Load)))\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &time:0 Store))\n                  (BinOp\n                    (BinOp (BinOp (Name &H_m:0 Load) Add (Name &damage:0 Load)) Sub (Constant i1 None))\n                    FloorDiv\n                    (Name &damage:0 Load)\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &H_left:0 Store))\n                  (BinOp\n                    (Name &H_y:0 Load)\n                    Sub\n                    (BinOp\n                      (Name &time:0 Load)\n                      Mult\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (_starred_content (Constant i0 None))\n                          (_starred_content\n                            (BinOp (BinOp (Name &A_m:0 Load) Sub (Name &D_y:0 Load)) Sub (Name &D_buy:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &H_left:0 Load) (list LtE) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &cost:0 Store)\n                      Add\n                      (BinOp (Name &h:0 Load) Mult (BinOp (Constant i1 None) Sub (Name &H_left:0 Load)))\n                    )\n                  )\n                  (/seq)\n                )\n                (If\n                  (Compare (Name &cost:0 Load) (list Lt) (list (Name &ans:0 Load)))\n                  (/seq (Assign (list (Name &ans:0 Store)) (Name &cost:0 Load) None))\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &df_y:0 &at_y:0 &hp_y:0) (fn_1 &df_m:0 &at_m:0 &hp_m:0) (fn_1 &cst_df:0 &cst_at:0 &cst_hp:0) (Assign (list (Name &ans:0 Store)) (Constant f2e+18 None) None) (For (Name &ati:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i201 None))) nil) (/seq (For (Name &dfi:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i201 None))) nil) (/seq (If (Compare (BinOp (Name &ati:0 Load) Add (Name &at_y:0 Load)) (list Gt) (list (Name &df_m:0 Load))) (/seq (Assign (list (Name &k:0 Store)) (BinOp (Name &hp_m:0 Load) FloorDiv (BinOp (BinOp (Name &at_y:0 Load) Add (Name &ati:0 Load)) Sub (Name &df_m:0 Load))) None) (If (Compare (BinOp (Name &hp_m:0 Load) Mod (BinOp (BinOp (Name &at_y:0 Load) Add (Name &ati:0 Load)) Sub (Name &df_m:0 Load))) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &t:0 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (BinOp (Name &k:0 Load) Mult (BinOp (BinOp (Name &at_m:0 Load) Sub (Name &df_y:0 Load)) Sub (Name &dfi:0 Load))) Sub (Name &hp_y:0 Load)) Add (Constant i1 None)))) nil) None) (Assign (list (Name &cost:0 Store)) (BinOp (BinOp (BinOp (Name &cst_hp:0 Load) Mult (Name &t:0 Load)) Add (BinOp (Name &cst_df:0 Load) Mult (Name &dfi:0 Load))) Add (BinOp (Name &cst_at:0 Load) Mult (Name &ati:0 Load))) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &cost:0 Load))) nil) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &R:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &yH:0 Store)) (_starred_content (Name &yA:0 Store)) (_starred_content (Name &yD:0 Store))) Store)) (Call (Name &R:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &mH:0 Store)) (_starred_content (Name &mA:0 Store)) (_starred_content (Name &mD:0 Store))) Store)) (Call (Name &R:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &h:0 Store)) (_starred_content (Name &a:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name &R:0 Load) nil nil) None) (Assign (list (Name &Q:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None) (For (Name &A:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &mD:0 Load) Sub (Name &yA:0 Load)) Add (Constant i1 None)))) nil)) (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &mH:0 Load) Add (Name &mD:0 Load)) Sub (Name &yA:0 Load)))) nil) Add (Constant i1 None)))) nil) (/seq (For (Name &D:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &mA:0 Load) Sub (Name &yD:0 Load)))) nil) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &H:0 Store)) (BinOp (Name &yH:0 Load) Sub (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Name &mH:0 Load) Add (Name &yA:0 Load)) Add (Name &A:0 Load)) Sub (Name &mD:0 Load)) Sub (Constant i1 None)) FloorDiv (BinOp (BinOp (Name &yA:0 Load) Add (Name &A:0 Load)) Sub (Name &mD:0 Load))) Mult (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &mA:0 Load) Sub (Name &yD:0 Load)) Sub (Name &D:0 Load)))) nil))) None) (Assign (list (Name &Q:0 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &A:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &D:0 Load) Mult (Name &d:0 Load))) Add (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &h:0 Load) Mult (BinOp (Constant i1 None) Sub (Name &H:0 Load))))) nil))) (_starred_content (Name &Q:0 Load))) nil) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &Q:0 Load))) nil))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (fn_1 &dy:0 &ay:0 &hy:0) (fn_1 &dm:0 &am:0 &hm:0) (fn_1 &dp:0 &ap:0 &hp:0) (FunctionDef &time:0 (arguments nil (list (arg &ay:1 None None) (arg &hm:1 None None) (arg &dm:1 None None)) None nil nil None nil) (/seq (Return (IfExp (Compare (Name &ay:1 Load) (list LtE) (list (Name &dm:1 Load))) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) (Call (Name g_ceil Load) (list (_starred_content (BinOp (Name &hm:1 Load) Div (BinOp (Name &ay:1 Load) Sub (Name &dm:1 Load))))) nil)))) nil None None) (FunctionDef &health_need:0 (arguments nil (list (arg &t:2 None None) (arg &dy:2 None None) (arg &am:2 None None)) None nil nil None nil) (/seq (Return (IfExp (Compare (Name &dy:2 Load) (list GtE) (list (Name &am:2 Load))) (Constant i0 None) (BinOp (BinOp (Name &t:2 Load) Mult (BinOp (Name &am:2 Load) Sub (Name &dy:2 Load))) Add (Constant i1 None))))) nil None None) (Assign (list (Name &min_p:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &a:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &ay:0 Load)) (_starred_content (BinOp (Constant i200 None) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &t:0 Store)) (Call (Name &time:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &hm:0 Load)) (_starred_content (Name &dm:0 Load))) nil) None) (If (Compare (Name &t:0 Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq Continue) (/seq)) (For (Name &d:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &dy:0 Load)) (_starred_content (BinOp (Constant i100 None) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &h:0 Store)) (Call (Name &health_need:0 Load) (list (_starred_content (Name &t:0 Load)) (_starred_content (Name &d:0 Load)) (_starred_content (Name &am:0 Load))) nil) None) (Assign (list (Name &a_p:0 Store)) (BinOp (BinOp (Name &a:0 Load) Sub (Name &ay:0 Load)) Mult (Name &ap:0 Load)) None) (Assign (list (Name &d_p:0 Store)) (BinOp (BinOp (Name &d:0 Load) Sub (Name &dy:0 Load)) Mult (Name &dp:0 Load)) None) (Assign (list (Name &h_p:0 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &h:0 Load) Sub (Name &hy:0 Load)))) nil) Mult (Name &hp:0 Load)) None) (Assign (list (Name &total:0 Store)) (BinOp (BinOp (Name &a_p:0 Load) Add (Name &d_p:0 Load)) Add (Name &h_p:0 Load)) None) (If (Compare (Name &total:0 Load) (list Lt) (list (Name &min_p:0 Load))) (/seq (Assign (list (Name &min_p:0 Store)) (Name &total:0 Load) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &min_p:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 &D_y:0 &A_y:0 &H_y:0) (fn_1 &D_m:0 &A_m:0 &H_m:0) (fn_1 &d:0 &a:0 &h:0) (Assign (list (Name &ans:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None) (For (Name &A_buy:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &H_m:0 Load) Add (Name &D_m:0 Load)) Sub (Name &A_y:0 Load)))) nil) Add (Constant i1 None)))) nil) (/seq (For (Name &D_buy:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &A_m:0 Load) Sub (Name &D_y:0 Load)))) nil) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &damage:0 Store)) (BinOp (BinOp (Name &A_y:0 Load) Add (Name &A_buy:0 Load)) Sub (Name &D_m:0 Load)) None) (Assign (list (Name &cost:0 Store)) (BinOp (BinOp (Name &A_buy:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &D_buy:0 Load) Mult (Name &d:0 Load))) None) (If (BoolOp And (list (Compare (Name &damage:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &cost:0 Load) (list Lt) (list (Name &ans:0 Load))))) (/seq (Assign (list (Name &time:0 Store)) (BinOp (BinOp (BinOp (Name &H_m:0 Load) Add (Name &damage:0 Load)) Sub (Constant i1 None)) FloorDiv (Name &damage:0 Load)) None) (Assign (list (Name &H_left:0 Store)) (BinOp (Name &H_y:0 Load) Sub (BinOp (Name &time:0 Load) Mult (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (BinOp (Name &A_m:0 Load) Sub (Name &D_y:0 Load)) Sub (Name &D_buy:0 Load)))) nil))) None) (If (Compare (Name &H_left:0 Load) (list LtE) (list (Constant i0 None))) (/seq (AugAssign (Name &cost:0 Store) Add (BinOp (Name &h:0 Load) Mult (BinOp (Constant i1 None) Sub (Name &H_left:0 Load))))) (/seq)) (If (Compare (Name &cost:0 Load) (list Lt) (list (Name &ans:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &cost:0 Load) None)) (/seq))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call\n            (Attribute (Name &a:0 Load) s_count Load)\n            (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &t:0 Store)\n          Add\n          (BinOp (Name &cnt:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Name &cnt:0 Load)))\n        )\n        (AugAssign (Name &n:0 Store) Sub (Name &cnt:0 Load))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) Sub (Constant i1 None))\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None))\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &x:0 Store)\n      (Name &a:0 Load)\n      (/seq (AugAssign (Subscript (Name &b:0 Load) (_slice_content (Name &x:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                  (_starred_content (Constant i10 None))\n                )\n                nil\n              )\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (BinOp (Name &x:0 Load) Mult (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &genres:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &genre_frequencies:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &genre:0 Store)\n      (Name &genres:0 Load)\n      (/seq\n        (AugAssign\n          (Subscript (Name &genre_frequencies:0 Load) (_slice_content (Name &genre:0 Load)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &all_pairs:0 Store))\n      (BinOp (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign (list (Name &bad_pairs:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &freq:0 Store)\n      (Name &genre_frequencies:0 Load)\n      (/seq\n        (AugAssign\n          (Name &bad_pairs:0 Store)\n          Add\n          (BinOp\n            (BinOp (Name &freq:0 Load) Mult (BinOp (Name &freq:0 Load) Sub (Constant i1 None)))\n            FloorDiv\n            (Constant i2 None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (BinOp (Name &all_pairs:0 Load) Sub (Name &bad_pairs:0 Load))))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &count:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &m:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (For\n      (Name &genre:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (AugAssign (Subscript (Name &count:0 Load) (_slice_content (Name &genre:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &ways:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &ways:0 Store)\n              Add\n              (BinOp\n                (Subscript (Name &count:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                Mult\n                (Subscript (Name &count:0 Load) (_slice_content (Name &j:0 Load)) Load)\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ways:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &cnt:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      (/seq\n        (Assign\n          (list (Name &num:0 Store))\n          (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Constant i1 None))\n          None\n        )\n        (AugAssign (Subscript (Name &cnt:0 Load) (_slice_content (Name &num:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (Name &ans:0 Load)\n                Add\n                (BinOp\n                  (Subscript (Name &cnt:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Mult\n                  (Subscript (Name &cnt:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &genres:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &m:0 Load))\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &x:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (AugAssign\n          (Subscript (Name &genres:0 Load) (_slice_content (BinOp (Name &x:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &genres:0 Load)\n      (/seq\n        (Assign\n          (list (Name &cnt:0 Store))\n          (BinOp (Name &cnt:0 Load) Add (BinOp (Name &x:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Name &x:0 Load))))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (_starred_content (BinOp (Name &cnt:0 Load) FloorDiv (Constant i2 None)))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n              (_starred_content (Name &m:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (Call\n                  (Attribute (Name &a:0 Load) s_count Load)\n                  (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n                Mult\n                (Call\n                  (Attribute (Name &a:0 Load) s_count Load)\n                  (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n                  nil\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &p:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Name &p:0 Load)\n            (list Eq)\n            (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (BinOp (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) Mult (Name &k:0 Load))\n                )\n                (AugAssign (Name &n:0 Store) Sub (Name &k:0 Load))\n                (Assign (list (Name &k:0 Store)) (Constant i1 None) None)\n              )\n              (/seq)\n            )\n          )\n        )\n        (Assign (list (Name &p:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &count:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &m:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &x:0 Store)\n      (Name &a:0 Load)\n      (/seq (AugAssign (Subscript (Name &count:0 Load) (_slice_content (Name &x:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &count:0 Load)\n      (/seq\n        (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) Mult (Name &x:0 Load)))\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) FloorDiv (Constant i2 None)))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &all_m:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &all_n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Div (Constant i2 None))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &all_m:0 Store))\n          (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &j:0 Load))) nil)\n          None\n        )\n        (If\n          (Compare (Name &all_m:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (AugAssign\n              (Name &all_n:0 Store)\n              Sub\n              (Call\n                (Name g_int Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp\n                        (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &j:0 Load))) nil)\n                        Mult\n                        (BinOp\n                          (Call\n                            (Attribute (Name &a:0 Load) s_count Load)\n                            (list (_starred_content (Name &j:0 Load)))\n                            nil\n                          )\n                          Sub\n                          (Constant i1 None)\n                        )\n                      )\n                      Div\n                      (Constant i2 None)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &all_n:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil) None) (AugAssign (Name &t:0 Store) Add (BinOp (Name &cnt:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Name &cnt:0 Load)))) (AugAssign (Name &n:0 Store) Sub (Name &cnt:0 Load))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &a:0 Store)) (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) Sub (Constant i1 None)) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None)) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (AugAssign (Subscript (Name &b:0 Load) (_slice_content (Name &x:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Constant i10 None))) nil) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Name &x:0 Load) Mult (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load)))) (/seq) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &genres:0)) (Assign (list (Name &genre_frequencies:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &genre:0 Store) (Name &genres:0 Load) (/seq (AugAssign (Subscript (Name &genre_frequencies:0 Load) (_slice_content (Name &genre:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &all_pairs:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None)) None) (Assign (list (Name &bad_pairs:0 Store)) (Constant i0 None) None) (For (Name &freq:0 Store) (Name &genre_frequencies:0 Load) (/seq (AugAssign (Name &bad_pairs:0 Store) Add (BinOp (BinOp (Name &freq:0 Load) Mult (BinOp (Name &freq:0 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &all_pairs:0 Load) Sub (Name &bad_pairs:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &a:0)) (Assign (list (Name &count:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) None) (For (Name &genre:0 Store) (Name &a:0 Load) (/seq (AugAssign (Subscript (Name &count:0 Load) (_slice_content (Name &genre:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &ways:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &m:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &ways:0 Store) Add (BinOp (Subscript (Name &count:0 Load) (_slice_content (Name &i:0 Load)) Load) Mult (Subscript (Name &count:0 Load) (_slice_content (Name &j:0 Load)) Load)))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ways:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &cnt:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &x:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (For (Name &x:0 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (/seq (Assign (list (Name &num:0 Store)) (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil) Sub (Constant i1 None)) None) (AugAssign (Subscript (Name &cnt:0 Load) (_slice_content (Name &num:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load))) nil) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Add (BinOp (Subscript (Name &cnt:0 Load) (_slice_content (Name &i:0 Load)) Load) Mult (Subscript (Name &cnt:0 Load) (_slice_content (Name &j:0 Load)) Load))) None)) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &a:0)) (Assign (list (Name &genres:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &m:0 Load)) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (AugAssign (Subscript (Name &genres:0 Load) (_slice_content (BinOp (Name &x:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None) (For (Name &x:0 Store) (Name &genres:0 Load) (/seq (Assign (list (Name &cnt:0 Store)) (BinOp (Name &cnt:0 Load) Add (BinOp (Name &x:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)))) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &cnt:0 Load) FloorDiv (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (/splice (fn_1 &m:0 &n:0 &a:0)) (Assign (list (Name &b:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &m:0 Load))) nil) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) Mult (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil)))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &m:0 &n:0 &a:0)) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &p:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &p:0 Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) Mult (Name &k:0 Load))) (AugAssign (Name &n:0 Store) Sub (Name &k:0 Load)) (Assign (list (Name &k:0 Store)) (Constant i1 None) None)) (/seq)))) (Assign (list (Name &p:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &count:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (AugAssign (Subscript (Name &count:0 Load) (_slice_content (Name &x:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &x:0 Store) (Name &count:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) Mult (Name &x:0 Load)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) FloorDiv (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (/splice (fn_1 &m:0 &n:0 &a:0)) (Assign (list (Name &all_m:0 Store)) (Constant i0 None) None) (Assign (list (Name &all_n:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Div (Constant i2 None)))) nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &all_m:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &j:0 Load))) nil) None) (If (Compare (Name &all_m:0 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &all_n:0 Store) Sub (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &j:0 Load))) nil) Mult (BinOp (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &j:0 Load))) nil) Sub (Constant i1 None))) Div (Constant i2 None)))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &all_n:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i5 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (If\n      (Compare\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list Eq)\n        (list (Constant i1 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i5 None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Constant i25 None))) nil)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil))) nil)",
      "(Module\n  (/seq\n    (Assign (list (Name &i:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_25 None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) (list (_starred_content (Constant s_25 None))) nil) None)\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_25 None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare (Name &x:0 Load) (list Gt) (list (Constant i1 None)))\n              (Call\n                (Name g_pow Load)\n                (list\n                  (_starred_content (Constant i5 None))\n                  (_starred_content (Name &x:0 Load))\n                  (_starred_content\n                    (Call\n                      (Name g_pow Load)\n                      (list (_starred_content (Constant i10 None)) (_starred_content (Constant i2 None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              (Constant i5 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_math (list (alias g_sqrt None) (alias g_floor None)) i0)\n    (Assign (list (Name &inp:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &read:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &i:1 Store)) (Call (Name &inp:0 Load) nil nil) None)\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_25 None))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &solve:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (If (Compare #0 (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i5 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil)))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (fn_1 (Name &n:0 Load)))) nil)",
      "(Module (fn_1 (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Constant i25 None))) nil))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &i:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_25 None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) (list (_starred_content (Constant s_25 None))) nil) None)) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_25 None))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i25 None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &x:0 Load) (list Gt) (list (Constant i1 None))) (Call (Name g_pow Load) (list (_starred_content (Constant i5 None)) (_starred_content (Name &x:0 Load)) (_starred_content (Call (Name g_pow Load) (list (_starred_content (Constant i10 None)) (_starred_content (Constant i2 None))) nil))) nil) (Constant i5 None)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_math (list (alias g_sqrt None) (alias g_floor None)) i0) (Assign (list (Name &inp:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &read:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &i:1 Store)) (Call (Name &inp:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_25 None))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &solve:0 Load) nil nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (FunctionDef\n      &fact:0\n      (arguments nil (list (arg &a:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Name &a:1 Load))\n              (_starred_content (Constant i0 None))\n              (_starred_content (UnaryOp USub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq (Assign (list (Name &ans:1 Store)) (BinOp (Name &ans:1 Load) Add (Name &i:1 Load)) None))\n          (/seq)\n          None\n        )\n        (Return (Name &ans:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil)\n      None\n    )\n    (If\n      (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &d:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (Call\n                (Name &fact:0 Load)\n                (list (_starred_content (BinOp (Name &d:0 Load) FloorDiv (Constant i2 None))))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Mult (Constant i2 None)) None)\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n          )\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (Call\n                (Name &fact:0 Load)\n                (list (_starred_content (BinOp (Name &d:0 Load) FloorDiv (Constant i2 None))))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &b:0 Store))\n              (Call\n                (Name &fact:0 Load)\n                (list\n                  (_starred_content (BinOp (BinOp (Name &d:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None)))\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) nil)\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &x:0 Load) Sub (Name &y:0 Load)))) nil)\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (BinOp (Name &d:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign (list (Name &r:0 Store)) (BinOp (Name &c:0 Load) Mult (BinOp (Name &c:0 Load) Add (Constant i1 None))) None)\n    (If\n      (Compare (BinOp (Name &d:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Name &r:0 Load)\n                  Add\n                  (BinOp (BinOp (Name &d:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &curA:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &curB:0 Store)) (Constant i1 None) None)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content\n            (Call (Name g_min Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil)\n          )\n          (_starred_content\n            (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil)\n          )\n        )\n        Load\n      )\n      None\n    )\n    (While\n      (Compare (Name &A:0 Load) (list NotEq) (list (Name &B:0 Load)))\n      (/seq\n        (AugAssign (Name &A:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &res:0 Store) Add (Name &curA:0 Load))\n        (AugAssign (Name &curA:0 Store) Add (Constant i1 None))\n        (If (Compare (Name &A:0 Load) (list Eq) (list (Name &B:0 Load))) (/seq Break) (/seq))\n        (AugAssign (Name &B:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &res:0 Store) Add (Name &curB:0 Load))\n        (AugAssign (Name &curB:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &mid:0 Store))\n      (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &mid:0 Load) Sub (Name &a:0 Load)))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &mid:0 Load) Sub (Name &b:0 Load)))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp (Name &a:0 Load) Mult (BinOp (Name &a:0 Load) Add (Constant i1 None)))\n                FloorDiv\n                (Constant i2 None)\n              )\n              Add\n              (BinOp\n                (BinOp (Name &b:0 Load) Mult (BinOp (Name &b:0 Load) Add (Constant i1 None)))\n                FloorDiv\n                (Constant i2 None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &res:0 Store))\n      (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &fin1:0 Store))\n      (BinOp\n        (BinOp\n          (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &a:0 Load)))) nil)\n          Mult\n          (BinOp\n            (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &a:0 Load)))) nil)\n            Add\n            (Constant i1 None)\n          )\n        )\n        FloorDiv\n        (Constant i2 None)\n      )\n      None\n    )\n    (Assign\n      (list (Name &fin2:0 Store))\n      (BinOp\n        (BinOp\n          (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &b:0 Load)))) nil)\n          Mult\n          (BinOp\n            (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &b:0 Load)))) nil)\n            Add\n            (Constant i1 None)\n          )\n        )\n        FloorDiv\n        (Constant i2 None)\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &fin1:0 Load) Add (Name &fin2:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &diff:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil)\n      None\n    )\n    (Assign (list (Name &odd:0 Store)) (Constant False None) None)\n    (If\n      (Compare (BinOp (Name &diff:0 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None)))\n      (/seq (Assign (list (Name &odd:0 Store)) (Constant True None) None))\n      (/seq)\n    )\n    (Assign (list (Name &diff:0 Store)) (BinOp (Name &diff:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign\n      (list (Name &first:0 Store))\n      (BinOp\n        (BinOp (Name &diff:0 Load) Mult (BinOp (Name &diff:0 Load) Add (Constant i1 None)))\n        FloorDiv\n        (Constant i2 None)\n      )\n      None\n    )\n    (If\n      (Name &odd:0 Load)\n      (/seq\n        (AugAssign (Name &diff:0 Store) Add (Constant i1 None))\n        (Assign\n          (list (Name &second:0 Store))\n          (BinOp\n            (BinOp (Name &diff:0 Load) Mult (BinOp (Name &diff:0 Load) Add (Constant i1 None)))\n            FloorDiv\n            (Constant i2 None)\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (BinOp (Name &first:0 Load) Add (Name &second:0 Load))))\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &first:0 Load) Mult (Constant i2 None)))) nil)\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &boy1:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &boy2:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &distance:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &boy1:0 Load) Sub (Name &boy2:0 Load)))) nil)\n      None\n    )\n    (Assign (list (Name &remainder:0 Store)) (BinOp (Name &distance:0 Load) Mod (Constant i2 None)) None)\n    (If\n      (Compare (Name &remainder:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &distance1:0 Store))\n          (BinOp (BinOp (Name &distance:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None))\n          None\n        )\n        (Assign (list (Name &distance2added:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &mySum:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &distance1:0 Load)))\n            nil\n          )\n          (/seq (AugAssign (Name &mySum:0 Store) Add (Name &i:0 Load)))\n          (/seq)\n          None\n        )\n        (Assign (list (Name &totalSum:0 Store)) (BinOp (Name &mySum:0 Load) Mult (Constant i2 None)) None)\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &totalSum:0 Load))) nil))\n      )\n      (/seq\n        (If\n          (Compare (Name &remainder:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Name &distance1:0 Store))\n              (BinOp (BinOp (Name &distance:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None))\n              None\n            )\n            (Assign (list (Name &distance2added:0 Store)) (Constant i1 None) None)\n            (Assign (list (Name &mySum:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:0 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Name &distance1:0 Load)))\n                nil\n              )\n              (/seq (AugAssign (Name &mySum:0 Store) Add (Name &i:0 Load)))\n              (/seq)\n              None\n            )\n            (Assign\n              (list (Name &totalSum:0 Store))\n              (BinOp (BinOp (Name &mySum:0 Load) Mult (Constant i2 None)) Add (Name &distance1:0 Load))\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &totalSum:0 Load))) nil))\n          )\n          (/seq)\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &m:0 Store))\n      (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &s1:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &m:0 Load)))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s2:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &b:0 Load) Sub (Name &m:0 Load)))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s1:0 Store))\n      (BinOp\n        (BinOp (Name &s1:0 Load) Mult (BinOp (Name &s1:0 Load) Add (Constant i1 None)))\n        FloorDiv\n        (Constant i2 None)\n      )\n      None\n    )\n    (Assign\n      (list (Name &s2:0 Store))\n      (BinOp\n        (BinOp (Name &s2:0 Load) Mult (BinOp (Name &s2:0 Load) Add (Constant i1 None)))\n        FloorDiv\n        (Constant i2 None)\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Name g_int Load) (list (_starred_content (BinOp (Name &s1:0 Load) Add (Name &s2:0 Load)))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil)\n      None\n    )\n    (Assign (list (Name &ma:0 Store)) (BinOp (Name &l:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign (list (Name &mb:0 Store)) (BinOp (Name &l:0 Load) Sub (Name &ma:0 Load)) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &ma:0 Load) Mult (BinOp (Name &ma:0 Load) Add (Constant i1 None)))\n                      Div\n                      (Constant i2 None)\n                    )\n                    Add\n                    (BinOp\n                      (BinOp (Name &mb:0 Load) Mult (BinOp (Name &mb:0 Load) Add (Constant i1 None)))\n                      Div\n                      (Constant i2 None)\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_re None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_decimal None)))\n    (Import (list (alias g_bisect None)))\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &dist:0 Store))\n      (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil)\n      None\n    )\n    (Assign (list (Name &aDist:0 Store)) (BinOp (Name &dist:0 Load) FloorDiv (Constant i2 None)) None)\n    (Assign (list (Name &bDist:0 Store)) (BinOp (Name &dist:0 Load) Sub (Name &aDist:0 Load)) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp (Name &aDist:0 Load) Mult (BinOp (Name &aDist:0 Load) Add (Constant i1 None)))\n                FloorDiv\n                (Constant i2 None)\n              )\n              Add\n              (BinOp\n                (BinOp (Name &bDist:0 Load) Mult (BinOp (Name &bDist:0 Load) Add (Constant i1 None)))\n                FloorDiv\n                (Constant i2 None)\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Name %2 Load)))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &a:0 &b:0 &d:0 (FunctionDef &fact:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name &ans:1 Store)) (BinOp (Name &ans:1 Load) Add (Name &i:1 Load)) None)) (/seq) None) (Return (Name &ans:1 Load))) nil None None))) (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_1 None))) nil))) (/seq (If (Compare (BinOp (Name &d:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &a:0 Store)) (Call (Name &fact:0 Load) (list (_starred_content (BinOp (Name &d:0 Load) FloorDiv (Constant i2 None)))) nil) None) (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Mult (Constant i2 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq (Assign (list (Name &a:0 Store)) (Call (Name &fact:0 Load) (list (_starred_content (BinOp (Name &d:0 Load) FloorDiv (Constant i2 None)))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name &fact:0 Load) (list (_starred_content (BinOp (BinOp (Name &d:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) nil))))))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &y:0 &d:0 /nothing)) (Assign (list (Name &c:0 Store)) (BinOp (Name &d:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &c:0 Load) Mult (BinOp (Name &c:0 Load) Add (Constant i1 None))) None) (If (Compare (BinOp (Name &d:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (BinOp (BinOp (Name &d:0 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) Load) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &curA:0 Store)) (Constant i1 None) None) (Assign (list (Name &curB:0 Store)) (Constant i1 None) None) (Assign (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil))) Load) None) (While (Compare (Name &A:0 Load) (list NotEq) (list (Name &B:0 Load))) (/seq (AugAssign (Name &A:0 Store) Add (Constant i1 None)) (AugAssign (Name &res:0 Store) Add (Name &curA:0 Load)) (AugAssign (Name &curA:0 Store) Add (Constant i1 None)) (If (Compare (Name &A:0 Load) (list Eq) (list (Name &B:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &B:0 Store) Sub (Constant i1 None)) (AugAssign (Name &res:0 Store) Add (Name &curB:0 Load)) (AugAssign (Name &curB:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &a:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &mid:0 Load) Sub (Name &a:0 Load)))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &mid:0 Load) Sub (Name &b:0 Load)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (BinOp (Name &a:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None)) Add (BinOp (BinOp (Name &b:0 Load) Mult (BinOp (Name &b:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None))))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &res:0 Store)) (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &fin1:0 Store)) (BinOp (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &a:0 Load)))) nil) Mult (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &a:0 Load)))) nil) Add (Constant i1 None))) FloorDiv (Constant i2 None)) None) (Assign (list (Name &fin2:0 Store)) (BinOp (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &b:0 Load)))) nil) Mult (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &res:0 Load) Sub (Name &b:0 Load)))) nil) Add (Constant i1 None))) FloorDiv (Constant i2 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &fin1:0 Load) Add (Name &fin2:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &a:0 &b:0 &diff:0 /nothing)) (Assign (list (Name &odd:0 Store)) (Constant False None) None) (If (Compare (BinOp (Name &diff:0 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &odd:0 Store)) (Constant True None) None)) (/seq)) (Assign (list (Name &diff:0 Store)) (BinOp (Name &diff:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &first:0 Store)) (BinOp (BinOp (Name &diff:0 Load) Mult (BinOp (Name &diff:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None)) None) (If (Name &odd:0 Load) (/seq (AugAssign (Name &diff:0 Store) Add (Constant i1 None)) (Assign (list (Name &second:0 Store)) (BinOp (BinOp (Name &diff:0 Load) Mult (BinOp (Name &diff:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &first:0 Load) Add (Name &second:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &first:0 Load) Mult (Constant i2 None)))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 &boy1:0 &boy2:0 &distance:0 /nothing)) (Assign (list (Name &remainder:0 Store)) (BinOp (Name &distance:0 Load) Mod (Constant i2 None)) None) (If (Compare (Name &remainder:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &distance1:0 Store)) (BinOp (BinOp (Name &distance:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)) None) (Assign (list (Name &distance2added:0 Store)) (Constant i0 None) None) (Assign (list (Name &mySum:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &distance1:0 Load))) nil) (/seq (AugAssign (Name &mySum:0 Store) Add (Name &i:0 Load))) (/seq) None) (Assign (list (Name &totalSum:0 Store)) (BinOp (Name &mySum:0 Load) Mult (Constant i2 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &totalSum:0 Load))) nil))) (/seq (If (Compare (Name &remainder:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &distance1:0 Store)) (BinOp (BinOp (Name &distance:0 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)) None) (Assign (list (Name &distance2added:0 Store)) (Constant i1 None) None) (Assign (list (Name &mySum:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &distance1:0 Load))) nil) (/seq (AugAssign (Name &mySum:0 Store) Add (Name &i:0 Load))) (/seq) None) (Assign (list (Name &totalSum:0 Store)) (BinOp (BinOp (Name &mySum:0 Load) Mult (Constant i2 None)) Add (Name &distance1:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &totalSum:0 Load))) nil))) (/seq))))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &s1:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &m:0 Load)))) nil) None) (Assign (list (Name &s2:0 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &b:0 Load) Sub (Name &m:0 Load)))) nil) None) (Assign (list (Name &s1:0 Store)) (BinOp (BinOp (Name &s1:0 Load) Mult (BinOp (Name &s1:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None)) None) (Assign (list (Name &s2:0 Store)) (BinOp (BinOp (Name &s2:0 Load) Mult (BinOp (Name &s2:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Name &s1:0 Load) Add (Name &s2:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &a:0 &b:0 &l:0 /nothing)) (Assign (list (Name &ma:0 Store)) (BinOp (Name &l:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &mb:0 Store)) (BinOp (Name &l:0 Load) Sub (Name &ma:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &ma:0 Load) Mult (BinOp (Name &ma:0 Load) Add (Constant i1 None))) Div (Constant i2 None)) Add (BinOp (BinOp (Name &mb:0 Load) Mult (BinOp (Name &mb:0 Load) Add (Constant i1 None))) Div (Constant i2 None))))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_re None))) (Import (list (alias g_math None))) (Import (list (alias g_decimal None))) (Import (list (alias g_bisect None))) (/splice (fn_1 &a:0 &b:0 &dist:0 /nothing)) (Assign (list (Name &aDist:0 Store)) (BinOp (Name &dist:0 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &bDist:0 Store)) (BinOp (Name &dist:0 Load) Sub (Name &aDist:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &aDist:0 Load) Mult (BinOp (Name &aDist:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None)) Add (BinOp (BinOp (Name &bDist:0 Load) Mult (BinOp (Name &bDist:0 Load) Add (Constant i1 None))) FloorDiv (Constant i2 None))))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_re None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_decimal None)))\n    (Import (list (alias g_bisect None)))\n    (FunctionDef\n      &read:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &read:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &ps:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content (Constant i1 None))\n                (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &nadd:0 Store)) (Constant i10 None) None)\n    (For\n      (Name &x:0 Store)\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil)\n              (list\n                (comprehension\n                  (Name &_:2 Store)\n                  (Call (Attribute (Call (Name &read:0 Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &ps:0 Load) (_slice_content (BinOp (Name &x:0 Load) Sub (Constant i1 None))) Store))\n          (Name &nadd:0 Load)\n          None\n        )\n        (AugAssign (Name &nadd:0 Store) Add (Constant i10 None))\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &nadd:0 Store)) (Constant i15 None) None)\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &p:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &ps:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &p:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &ps:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Name &nadd:0 Load)\n              None\n            )\n            (AugAssign (Name &nadd:0 Store) Add (Constant i10 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &swapped:0 Store)) (Constant True None) None)\n    (Assign (list (Name &swapsA:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &workps:0 Store)) (Subscript (Name &ps:0 Load) (_slice_slice (Slice None None None)) Load) None)\n    (While\n      (Name &swapped:0 Load)\n      (/seq\n        (Assign (list (Name &swapped:0 Store)) (Constant False None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Gt)\n                (list\n                  (Subscript\n                    (Name &workps:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &tmp:0 Store))\n                  (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                  (Subscript\n                    (Name &workps:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                  None\n                )\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &workps:0 Load)\n                      (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Name &tmp:0 Load)\n                  None\n                )\n                (AugAssign (Name &swapsA:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &swapped:0 Store)) (Constant True None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n    )\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &p:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &ps:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (BinOp (Name &p:0 Load) Mod (Constant i10 None)) (list Eq) (list (Constant i5 None)))\n          (/seq\n            (AugAssign (Subscript (Name &ps:0 Load) (_slice_content (Name &i:0 Load)) Store) Sub (Constant i10 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &swapped:0 Store)) (Constant True None) None)\n    (Assign (list (Name &swapsB:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &workps:0 Store)) (Subscript (Name &ps:0 Load) (_slice_slice (Slice None None None)) Load) None)\n    (While\n      (Name &swapped:0 Load)\n      (/seq\n        (Assign (list (Name &swapped:0 Store)) (Constant False None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Gt)\n                (list\n                  (Subscript\n                    (Name &workps:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &tmp:0 Store))\n                  (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                  (Subscript\n                    (Name &workps:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                  None\n                )\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &workps:0 Load)\n                      (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                      Store\n                    )\n                  )\n                  (Name &tmp:0 Load)\n                  None\n                )\n                (AugAssign (Name &swapsB:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &swapped:0 Store)) (Constant True None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &swapsA:0 Load)) (_starred_content (Name &swapsB:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &numbers:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &numbers:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &allWhite:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &allBlack:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &numbers:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &allWhite:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &numbers:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    Sub\n                    (BinOp (Constant i2 None) Mult (Name &i:0 Load))\n                  )\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign\n          (Name &allBlack:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &numbers:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    Sub\n                    (BinOp (Constant i2 None) Mult (Name &i:0 Load))\n                  )\n                  Sub\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &allWhite:0 Load)) (_starred_content (Name &allBlack:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &lst:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &sum_odd:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &sum_even:0 Store)) (Constant i0 None) None)\n    (Expr (Call (Attribute (Name &lst:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))) nil)\n      (/seq\n        (AugAssign\n          (Name &sum_odd:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Sub\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None))\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))) nil)\n      (/seq\n        (AugAssign\n          (Name &sum_even:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Sub\n                  (BinOp (Constant i2 None) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &sum_odd:0 Load)) (_starred_content (Name &sum_even:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Call\n                      (Name g_sum Load)\n                      (list\n                        (_starred_content\n                          (GeneratorExp\n                            (Call\n                              (Name g_abs Load)\n                              (list (_starred_content (BinOp (Name &i:2 Load) Sub (Name &x:2 Load))))\n                              nil\n                            )\n                            (list\n                              (comprehension\n                                (Tuple\n                                  (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &x:2 Store)))\n                                  Store\n                                )\n                                (Call\n                                  (Name g_zip Load)\n                                  (list\n                                    (_starred_content\n                                      (Call\n                                        (Name g_range Load)\n                                        (list\n                                          (_starred_content (Name &s:1 Load))\n                                          (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                          (_starred_content (Constant i2 None))\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    (_starred_content (Name &l:0 Load))\n                                  )\n                                  nil\n                                )\n                                nil\n                                i0\n                              )\n                            )\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    (list\n                      (comprehension\n                        (Name &s:1 Store)\n                        (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &p:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute\n                          (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                          s_split\n                          Load\n                        )\n                        nil\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &chess:1 Store))\n          (ListComp\n            (IfExp\n              (Compare (BinOp (Name &i:2 Load) Add (Constant i1 None)) (list In) (list (Name &p:1 Load)))\n              (Constant i1 None)\n              (Constant i0 None)\n            )\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &res:1 Store)) (BinOp (Name &n:1 Load) Mult (Name &n:1 Load)) None)\n        (Assign\n          (list (Name &first:1 Store))\n          (Subscript (Name &chess:1 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (For\n          (Name &j:1 Store)\n          (List\n            (list\n              (_starred_content (Name &chess:1 Load))\n              (_starred_content\n                (Subscript (Name &chess:1 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n              )\n            )\n            Load\n          )\n          (/seq\n            (Assign (list (Name &tmp:1 Store)) (Constant i0 None) None)\n            (Assign\n              (list\n                (Tuple (list (_starred_content (Name &piece:1 Store)) (_starred_content (Name &free:1 Store))) Store)\n              )\n              (Tuple (list (_starred_content (List nil Load)) (_starred_content (List nil Load))) Load)\n              None\n            )\n            (For\n              (Name &i:1 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (BinOp (Name &i:1 Load) Mod (Constant i2 None))\n                      (Compare\n                        (Name &first:1 Load)\n                        (list Eq)\n                        (list (Subscript (Name &j:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                      )\n                    )\n                  )\n                  (/seq Continue)\n                  (/seq\n                    (If\n                      (BinOp (Name &i:1 Load) Mod (Constant i2 None))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Attribute (Name &free:1 Load) s_append Load)\n                            (list (_starred_content (Name &i:1 Load)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare\n                            (Name &first:1 Load)\n                            (list Eq)\n                            (list (Subscript (Name &j:1 Load) (_slice_content (Name &i:1 Load)) Load))\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Attribute (Name &piece:1 Load) s_append Load)\n                                (list (_starred_content (Name &i:1 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq)\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (For\n              (Name &i:1 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &free:1 Load))) nil)))\n                nil\n              )\n              (/seq\n                (AugAssign\n                  (Name &tmp:1 Store)\n                  Add\n                  (Call\n                    (Name g_abs Load)\n                    (list\n                      (_starred_content\n                        (BinOp\n                          (Subscript (Name &free:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                          Sub\n                          (Subscript (Name &piece:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign\n              (list (Name &res:1 Store))\n              (Call\n                (Name g_min Load)\n                (list (_starred_content (Name &tmp:1 Load)) (_starred_content (Name &res:1 Load)))\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:1 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &piece:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans1:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ans2:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &piece:0 Store))\n      (Call (Name g_sorted Load) (list (_starred_content (Name &piece:0 Load))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &piece:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &ans1:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Subscript (Name &piece:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                  Sub\n                  (BinOp (Name &i:0 Load) Mult (Constant i2 None))\n                )\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign\n          (Name &ans2:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (BinOp (Subscript (Name &piece:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None))\n                  Sub\n                  (BinOp (BinOp (Name &i:0 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &ans1:0 Load)) (_starred_content (Name &ans2:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &s1:0 Store)) (_starred_content (Name &s2:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (AugAssign\n          (Name &s1:0 Store)\n          Add\n          (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)))) nil)\n        )\n        (AugAssign\n          (Name &s2:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Constant i1 None)) Sub (Name &i:0 Load))))\n            nil\n          )\n        )\n        (AugAssign (Name &x:0 Store) Add (Constant i2 None))\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &s1:0 Load)) (_starred_content (Name &s2:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &chess:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &chess:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &steps1:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &steps2:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Name &N:0 Load))\n          (_starred_content (Constant i1 None))\n          (_starred_content (UnaryOp USub (Constant i2 None)))\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &steps1:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript\n                    (Name &chess:0 Load)\n                    (_slice_content\n                      (BinOp\n                        (Call\n                          (Name g_int Load)\n                          (list (_starred_content (BinOp (Name &i:0 Load) Div (Constant i2 None))))\n                          nil\n                        )\n                        Sub\n                        (Constant i1 None)\n                      )\n                    )\n                    Load\n                  )\n                  Sub\n                  (Name &i:0 Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))\n          (_starred_content (Constant i0 None))\n          (_starred_content (UnaryOp USub (Constant i2 None)))\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &steps2:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript\n                    (Name &chess:0 Load)\n                    (_slice_content (BinOp (Name &i:0 Load) FloorDiv (Constant i2 None)))\n                    Load\n                  )\n                  Sub\n                  (Name &i:0 Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &steps1:0 Load)) (_starred_content (Name &steps2:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &l1:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Subscript (Name &l:0 Load) (_slice_content (Name &c:0 Load)) Load)\n          None\n        )\n        (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n          (_starred_content (Constant i2 None))\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &s:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp (Name &i:0 Load) Sub (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &l1:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Sub (Constant i1 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Name &n:0 Load))\n          (_starred_content (Constant i0 None))\n          (_starred_content (UnaryOp USub (Constant i2 None)))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store))\n          (Subscript (Name &l:0 Load) (_slice_content (Name &c:0 Load)) Load)\n          None\n        )\n        (AugAssign (Name &c:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &s1:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Name &n:0 Load))\n          (_starred_content (Constant i0 None))\n          (_starred_content (UnaryOp USub (Constant i2 None)))\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &s1:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp (Name &i:0 Load) Sub (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Name g_min Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &s1:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &sum1:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &j:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &k:0 Store)) (Constant i2 None) None)\n    (Assign (list (Name &sum2:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil)))\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &sum1:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp (Name &j:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign\n          (Name &sum2:0 Store)\n          Add\n          (Call\n            (Name g_abs Load)\n            (list\n              (_starred_content\n                (BinOp (Name &k:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign (Name &j:0 Store) Add (Constant i2 None))\n        (AugAssign (Name &k:0 Store) Add (Constant i2 None))\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list (_starred_content (Name &sum1:0 Load)) (_starred_content (Name &sum2:0 Load)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_re None))) (Import (list (alias g_math None))) (Import (list (alias g_decimal None))) (Import (list (alias g_bisect None))) (FunctionDef &read:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &read:0 Load) nil nil))) nil) None) (Assign (list (Name &ps:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &nadd:0 Store)) (Constant i10 None) None) (For (Name &x:0 Store) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil) (list (comprehension (Name &_:2 Store) (Call (Attribute (Call (Name &read:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil) (/seq (Assign (list (Subscript (Name &ps:0 Load) (_slice_content (BinOp (Name &x:0 Load) Sub (Constant i1 None))) Store)) (Name &nadd:0 Load) None) (AugAssign (Name &nadd:0 Store) Add (Constant i10 None))) (/seq) None) (Assign (list (Name &nadd:0 Store)) (Constant i15 None) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &p:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &ps:0 Load))) nil) (/seq (If (Compare (Name &p:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &ps:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Name &nadd:0 Load) None) (AugAssign (Name &nadd:0 Store) Add (Constant i10 None))) (/seq))) (/seq) None) (Assign (list (Name &swapped:0 Store)) (Constant True None) None) (Assign (list (Name &swapsA:0 Store)) (Constant i0 None) None) (Assign (list (Name &workps:0 Store)) (Subscript (Name &ps:0 Load) (_slice_slice (Slice None None None)) Load) None) (While (Name &swapped:0 Load) (/seq (Assign (list (Name &swapped:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Subscript (Name &workps:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Name &tmp:0 Store)) (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Subscript (Name &workps:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &workps:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)) (Name &tmp:0 Load) None) (AugAssign (Name &swapsA:0 Store) Add (Constant i1 None)) (Assign (list (Name &swapped:0 Store)) (Constant True None) None)) (/seq))) (/seq) None)) (/seq)) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &p:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &ps:0 Load))) nil) (/seq (If (Compare (BinOp (Name &p:0 Load) Mod (Constant i10 None)) (list Eq) (list (Constant i5 None))) (/seq (AugAssign (Subscript (Name &ps:0 Load) (_slice_content (Name &i:0 Load)) Store) Sub (Constant i10 None))) (/seq))) (/seq) None) (Assign (list (Name &swapped:0 Store)) (Constant True None) None) (Assign (list (Name &swapsB:0 Store)) (Constant i0 None) None) (Assign (list (Name &workps:0 Store)) (Subscript (Name &ps:0 Load) (_slice_slice (Slice None None None)) Load) None) (While (Name &swapped:0 Load) (/seq (Assign (list (Name &swapped:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Subscript (Name &workps:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Name &tmp:0 Store)) (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Subscript (Name &workps:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Subscript (Name &workps:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &workps:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store)) (Name &tmp:0 Load) None) (AugAssign (Name &swapsB:0 Store) Add (Constant i1 None)) (Assign (list (Name &swapped:0 Store)) (Constant True None) None)) (/seq))) (/seq) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &swapsA:0 Load)) (_starred_content (Name &swapsB:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &numbers:0)) (Expr (Call (Attribute (Name &numbers:0 Load) s_sort Load) nil nil)) (Assign (list (Name &allWhite:0 Store)) (Constant i0 None) None) (Assign (list (Name &allBlack:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &numbers:0 Load))) nil))) nil) (/seq (AugAssign (Name &allWhite:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &numbers:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Sub (Constant i1 None)))) nil)) (AugAssign (Name &allBlack:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &numbers:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (BinOp (Constant i2 None) Mult (Name &i:0 Load))) Sub (Constant i2 None)))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &allWhite:0 Load)) (_starred_content (Name &allBlack:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &lst:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &sum_odd:0 Store)) (Constant i0 None) None) (Assign (list (Name &sum_even:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &lst:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))) nil) (/seq (AugAssign (Name &sum_odd:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (BinOp (BinOp (Constant i2 None) Mult (Name &i:0 Load)) Add (Constant i1 None))))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)))) nil) (/seq (AugAssign (Name &sum_even:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &lst:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (BinOp (Constant i2 None) Mult (BinOp (Name &i:0 Load) Add (Constant i1 None)))))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &sum_odd:0 Load)) (_starred_content (Name &sum_even:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (GeneratorExp (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:2 Load) Sub (Name &x:2 Load)))) nil) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &x:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &s:1 Load)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil)) (_starred_content (Name &l:0 Load))) nil) nil i0))))) nil) (list (comprehension (Name &s:1 Store) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) nil i0))))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) &n:1 &p:1)) (Assign (list (Name &chess:1 Store)) (ListComp (IfExp (Compare (BinOp (Name &i:2 Load) Add (Constant i1 None)) (list In) (list (Name &p:1 Load))) (Constant i1 None) (Constant i0 None)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &res:1 Store)) (BinOp (Name &n:1 Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &first:1 Store)) (Subscript (Name &chess:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &j:1 Store) (List (list (_starred_content (Name &chess:1 Load)) (_starred_content (Subscript (Name &chess:1 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load))) Load) (/seq (Assign (list (Name &tmp:1 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (_starred_content (Name &piece:1 Store)) (_starred_content (Name &free:1 Store))) Store)) (Tuple (list (_starred_content (List nil Load)) (_starred_content (List nil Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (BoolOp And (list (BinOp (Name &i:1 Load) Mod (Constant i2 None)) (Compare (Name &first:1 Load) (list Eq) (list (Subscript (Name &j:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq Continue) (/seq (If (BinOp (Name &i:1 Load) Mod (Constant i2 None)) (/seq (Expr (Call (Attribute (Name &free:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq (If (Compare (Name &first:1 Load) (list Eq) (list (Subscript (Name &j:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (Expr (Call (Attribute (Name &piece:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq))))))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &free:1 Load))) nil))) nil) (/seq (AugAssign (Name &tmp:1 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &free:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &piece:1 Load) (_slice_content (Name &i:1 Load)) Load)))) nil))) (/seq) None) (Assign (list (Name &res:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &tmp:1 Load)) (_starred_content (Name &res:1 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:1 Load))) nil))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &piece:0)) (Assign (list (Name &ans1:0 Store)) (Constant i0 None) None) (Assign (list (Name &ans2:0 Store)) (Constant i0 None) None) (Assign (list (Name &piece:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &piece:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &piece:0 Load))) nil))) nil) (/seq (AugAssign (Name &ans1:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &piece:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)) Sub (BinOp (Name &i:0 Load) Mult (Constant i2 None))))) nil)) (AugAssign (Name &ans2:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &piece:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Constant i1 None)) Sub (BinOp (BinOp (Name &i:0 Load) Mult (Constant i2 None)) Add (Constant i1 None))))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &ans1:0 Load)) (_starred_content (Name &ans2:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &l:0)) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Assign (list (Tuple (list (_starred_content (Name &s1:0 Store)) (_starred_content (Name &s2:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &x:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (AugAssign (Name &s1:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)))) nil)) (AugAssign (Name &s2:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Constant i1 None)) Sub (Name &i:0 Load)))) nil)) (AugAssign (Name &x:0 Store) Add (Constant i2 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &s1:0 Load)) (_starred_content (Name &s2:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &N:0 &chess:0)) (Expr (Call (Attribute (Name &chess:0 Load) s_sort Load) nil nil)) (Assign (list (Name &steps1:0 Store)) (Constant i0 None) None) (Assign (list (Name &steps2:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i2 None)))) nil) (/seq (AugAssign (Name &steps1:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &chess:0 Load) (_slice_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name &i:0 Load) Div (Constant i2 None)))) nil) Sub (Constant i1 None))) Load) Sub (Name &i:0 Load)))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i2 None)))) nil) (/seq (AugAssign (Name &steps2:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &chess:0 Load) (_slice_content (BinOp (Name &i:0 Load) FloorDiv (Constant i2 None))) Load) Sub (Name &i:0 Load)))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &steps1:0 Load)) (_starred_content (Name &steps2:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Assign (list (Name &l1:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Subscript (Name &l:0 Load) (_slice_content (Name &c:0 Load)) Load) None) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (AugAssign (Name &s:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) (/seq) None) (Assign (list (Name &l1:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &c:0 Store)) (BinOp (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) Sub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i2 None)))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Subscript (Name &l:0 Load) (_slice_content (Name &c:0 Load)) Load) None) (AugAssign (Name &c:0 Store) Sub (Constant i1 None))) (/seq) None) (Assign (list (Name &s1:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i2 None)))) nil) (/seq (AugAssign (Name &s1:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Name &s1:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &arr:0)) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil nil)) (Assign (list (Name &sum1:0 Store)) (Constant i0 None) None) (Assign (list (Name &j:0 Store)) (Constant i1 None) None) (Assign (list (Name &k:0 Store)) (Constant i2 None) None) (Assign (list (Name &sum2:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil) (/seq (AugAssign (Name &sum1:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &j:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil)) (AugAssign (Name &sum2:0 Store) Add (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &k:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil)) (AugAssign (Name &j:0 Store) Add (Constant i2 None)) (AugAssign (Name &k:0 Store) Add (Constant i2 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &sum1:0 Load)) (_starred_content (Name &sum2:0 Load))) nil))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (_starred_content (Name &A:0 Load)))\n        (list (keyword s_reverse (Constant True None)))\n      )\n      None\n    )\n    (Assign\n      (list (Name &prime:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &eratos:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant True None))) Load)\n        Mult\n        (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &D:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i2 None))\n          (_starred_content\n            (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (If\n          (UnaryOp Not (Subscript (Name &eratos:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          (/seq Continue)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Name &i:0 Load))\n                  (_starred_content\n                    (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))\n                  )\n                  (_starred_content (Name &i:0 Load))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (UnaryOp Not (Subscript (Name &D:0 Load) (_slice_content (Name &j:0 Load)) Load))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &D:0 Load) (_slice_content (Name &j:0 Load)) Store))\n                      (Name &i:0 Load)\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n                (If\n                  (Compare (Name &j:0 Load) (list NotEq) (list (Name &i:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &eratos:0 Load) (_slice_content (Name &j:0 Load)) Store))\n                      (Constant False None)\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (While\n          (Compare (Name &a:0 Load) (list NotEq) (list (Constant i1 None)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &D:0 Load) (_slice_content (Name &a:0 Load)) Load) None)\n            (While\n              (Compare (BinOp (Name &a:0 Load) Mod (Name &x:0 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &a:0 Store) FloorDiv (Name &x:0 Load)))\n              (/seq)\n            )\n            (AugAssign (Subscript (Name &prime:0 Load) (_slice_content (Name &x:0 Load)) Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_max Load) (list (_starred_content (Name &prime:0 Load))) nil)\n        (list LtE)\n        (list (Constant i1 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_max Load) (list (_starred_content (Name &prime:0 Load))) nil)\n            (list NotEq)\n            (list (Name &N:0 Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant\n                      s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                      None\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None)))\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &G:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (Assign\n          (list (Name &G:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_gcd Load)\n            (list (_starred_content (Name &G:0 Load)) (_starred_content (Name &a:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &G:0 Load) (list NotEq) (list (Constant i1 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n      )\n      (/seq)\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i5 None))\n      None\n    )\n    (Assign (list (Name &B:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list In) (list (Name &B:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &B:0 Load) (_slice_content (Name &a:0 Load)) Store))\n              (BinOp (Subscript (Name &B:0 Load) (_slice_content (Name &a:0 Load)) Load) Add (Constant i1 None))\n              None\n            )\n          )\n          (/seq\n            (Assign (list (Subscript (Name &B:0 Load) (_slice_content (Name &a:0 Load)) Store)) (Constant i1 None) None)\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &M:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Name &M:0 Load))\n              (_starred_content (Name &i:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &j:0 Load) (list In) (list (Name &B:0 Load)))\n              (/seq\n                (AugAssign (Name &cnt:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (Name &j:0 Load)) Load))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant\n                      s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                      None\n                    )\n                  )\n                )\n                nil\n              )\n            )\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Constant\n              s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n              None\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (If\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &As:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &maxA:0 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i6 None))\n          None\n        )\n        (Assign\n          (list (Name &c:0 Store))\n          (BinOp\n            (List (list (_starred_content (Constant i0 None))) Load)\n            Mult\n            (BinOp (Name &maxA:0 Load) Add (Constant i1 None))\n          )\n          None\n        )\n        (For\n          (Name &A:0 Store)\n          (Name &As:0 Load)\n          (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Name &A:0 Load)) Store) Add (Constant i1 None)))\n          (/seq)\n          None\n        )\n        (Assign (list (Name &isPrime:0 Store)) (Constant True None) None)\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content (BinOp (Name &maxA:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &cnt:0 Store))\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (Subscript (Name &c:0 Load) (_slice_slice (Slice (Name &i:0 Load) None (Name &i:0 Load))) Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &cnt:0 Load) (list Eq) (list (Name &N:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n            (If\n              (Compare (Name &cnt:0 Load) (list GtE) (list (Constant i2 None)))\n              (/seq (Assign (list (Name &isPrime:0 Store)) (Constant False None) None))\n              (/seq)\n            )\n          )\n          (/seq\n            (If\n              (Name &isPrime:0 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Constant\n                          s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                          None\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Constant\n                          s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                          None\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (Lambda\n        (arguments nil (list (arg &p:1 None None)) None nil nil None nil)\n        (Call\n          (Name g_exit Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript\n                        (List\n                          (list\n                            (_starred_content (Constant s_pairwise None))\n                            (_starred_content (Constant s_setwise None))\n                            (_starred_content (Constant s_not None))\n                          )\n                          Load\n                        )\n                        (_slice_content (Name &p:1 Load))\n                        Load\n                      )\n                      Add\n                      (Constant s-WzMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list\n        (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_starred (Starred (Name &l:0 Store) Store))) Store)\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute\n                (Call\n                  (Attribute (Call (Name g_open Load) (list (_starred_content (Constant i0 None))) nil) s_read Load)\n                  nil\n                  nil\n                )\n                s_split\n                Load\n              )\n              nil\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (ImportFrom s_math (list (alias &*:0 None)) i0)\n    (Assign (list (Name &g:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (For\n      (Name &x:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (Assign\n          (list (Name &g:0 Store))\n          (Call (Name g_gcd Load) (list (_starred_content (Name &g:0 Load)) (_starred_content (Name &x:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &g:0 Load) (list Gt) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Constant i2 None))) nil)))\n      (/seq)\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &M:0 Load))\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (Assign (list (Subscript (Name &C:0 Load) (_slice_content (Name &x:0 Load)) Store)) (Constant i1 None) None)\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &M:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (GeneratorExp\n                    (Subscript (Name &C:0 Load) (_slice_content (Name &j:2 Load)) Load)\n                    (list\n                      (comprehension\n                        (Name &j:2 Store)\n                        (Call\n                          (Name g_range Load)\n                          (list\n                            (_starred_content (Name &i:0 Load))\n                            (_starred_content (Name &M:0 Load))\n                            (_starred_content (Name &i:0 Load))\n                          )\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (list Gt)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Constant i1 None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_functools (list (alias g_reduce None)) i0)\n    (ImportFrom s_math (list (alias g_gcd None)) i0)\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (BinOp (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load))) nil) Add (Constant i1 None))\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &c:0 Load))\n      None\n    )\n    (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &A:0 Load)\n      (/seq (AugAssign (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &c:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Name &i:0 Load))\n              (_starred_content (Name &c:0 Load))\n              (_starred_content (Name &i:0 Load))\n            )\n            nil\n          )\n          (/seq (AugAssign (Name &cnt:0 Store) Add (Subscript (Name &C:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq (Assign (list (Name &f:0 Store)) (Constant i0 None) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &f:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call\n              (Name g_reduce Load)\n              (list (_starred_content (Name g_gcd Load)) (_starred_content (Name &A:0 Load)))\n              nil\n            )\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant\n                      s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                      None\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:3 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &u:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &u:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i2 None))\n        Add\n        (BinOp\n          (List (list (_starred_content (Constant i1 None))) Load)\n          Mult\n          (BinOp (Name &u:0 Load) Sub (Constant i2 None))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (BinOp (Name &a:1 Load) Mod (Name &b:1 Load))\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &b:1 Load))\n                  (_starred_content (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)))\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &b:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Constant i4 None) None)\n    (While\n      (Compare (Name &n:0 Load) (list Lt) (list (Name &u:0 Load)))\n      (/seq\n        (Assign (list (Subscript (Name &D:0 Load) (_slice_content (Name &n:0 Load)) Store)) (Constant i0 None) None)\n        (AugAssign (Name &n:0 Store) Add (Constant i2 None))\n      )\n      (/seq)\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i3 None) None)\n    (While\n      (Compare (BinOp (Name &i:0 Load) Mult (Name &i:0 Load)) (list Lt) (list (Name &u:0 Load)))\n      (/seq\n        (If\n          (Subscript (Name &D:0 Load) (_slice_content (Name &i:0 Load)) Load)\n          (/seq\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &i:0 Load) Mult (Constant i2 None)) None)\n            (While\n              (Compare (Name &n:0 Load) (list Lt) (list (Name &u:0 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &D:0 Load) (_slice_content (Name &n:0 Load)) Store))\n                  (Constant i0 None)\n                  None\n                )\n                (AugAssign (Name &n:0 Store) Add (Name &i:0 Load))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (AugAssign (Name &i:0 Store) Add (Constant i2 None))\n      )\n      (/seq)\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq (AugAssign (Subscript (Name &C:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (ListComp\n        (Name &x:2 Load)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i2 None)) (_starred_content (Name &u:0 Load)))\n              nil\n            )\n            (list\n              (Compare\n                (Subscript (Name &D:0 Load) (_slice_content (Name &x:2 Load)) Load)\n                (list Eq)\n                (list (Constant i1 None))\n              )\n            )\n            i0\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call\n              (Name g_sum Load)\n              (list\n                (_starred_content\n                  (Subscript (Name &C:0 Load) (_slice_slice (Slice (Name &i:0 Load) None (Name &i:0 Load))) Load)\n                )\n              )\n              nil\n            )\n            (list Gt)\n            (list (Constant i1 None))\n          )\n          (/seq Break)\n          (/seq)\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (Assign\n          (list (Name &c:0 Store))\n          (Call (Name &gcd:0 Load) (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) nil)\n          None\n        )\n        (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Constant\n              s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n              None\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &maxA:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load))) nil) None)\n    (Assign\n      (list (Name &pn:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &maxA:0 Load) Add (Constant i1 None)))) nil)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Constant i2 None) None)\n    (While\n      (Compare (BinOp (Name &n:0 Load) Mult (Name &n:0 Load)) (list LtE) (list (Name &maxA:0 Load)))\n      (/seq\n        (If\n          (Compare\n            (Name &n:0 Load)\n            (list Eq)\n            (list (Subscript (Name &pn:0 Load) (_slice_content (Name &n:0 Load)) Load))\n          )\n          (/seq\n            (For\n              (Name &m:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Name &n:0 Load))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &pn:0 Load))) nil))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &pn:0 Load) (_slice_content (Name &m:0 Load)) Load)\n                    (list Eq)\n                    (list (Name &m:0 Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &pn:0 Load) (_slice_content (Name &m:0 Load)) Store))\n                      (Name &n:0 Load)\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n        )\n        (AugAssign (Name &n:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_set Load) nil nil) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (Assign (list (Name &st:0 Store)) (Call (Name g_set Load) nil nil) None)\n        (While\n          (Compare (Name &a:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &st:0 Load) s_add Load)\n                (list (_starred_content (Subscript (Name &pn:0 Load) (_slice_content (Name &a:0 Load)) Load)))\n                nil\n              )\n            )\n            (AugAssign (Name &a:0 Store) FloorDiv (Subscript (Name &pn:0 Load) (_slice_content (Name &a:0 Load)) Load))\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp\n            Not\n            (Call (Attribute (Name &s:0 Load) s_isdisjoint Load) (list (_starred_content (Name &st:0 Load))) nil)\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (AugAssign (Name &s:0 Store) BitOr (Name &st:0 Load))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      None\n    )\n    (ImportFrom s_math (list (alias &gcd:0 None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name &gcd:0 Load)\n        (list\n          (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load))\n          (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load))\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Subscript (Name &A:0 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name &gcd:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (ImportFrom s_math (list (alias g_gcd None)) i0)\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &N:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &A:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &all:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &a:1 Store)\n          (Name &A:1 Load)\n          (/seq\n            (Assign\n              (list (Name &all:1 Store))\n              (Call\n                (Name g_gcd Load)\n                (list (_starred_content (Name &all:1 Load)) (_starred_content (Name &a:1 Load)))\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &all:1 Load) (list NotEq) (list (Constant i1 None)))\n          (/seq (Return (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)))\n          (/seq)\n        )\n        (Assign (list (Name &M:1 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None)\n        (Assign\n          (list (Name &B:1 Store))\n          (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil)\n          None\n        )\n        (For\n          (Name &a:1 Store)\n          (Name &A:1 Load)\n          (/seq (AugAssign (Subscript (Name &B:1 Load) (_slice_content (Name &a:1 Load)) Store) Add (Constant i1 None)))\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content (BinOp (Name &M:1 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None)\n            (For\n              (Name &j:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Name &i:1 Load))\n                  (_starred_content (Name &M:1 Load))\n                  (_starred_content (Name &i:1 Load))\n                )\n                nil\n              )\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Subscript (Name &B:1 Load) (_slice_content (Name &j:1 Load)) Load))\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &cnt:1 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Return\n                  (Constant\n                    s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                    None\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return\n          (Constant\n            s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n            None\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) nil nil))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Import (list (alias &copy:0 None)))\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &MAX_A:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))\n      None\n    )\n    (Assign\n      (list (Name &histogram:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &MAX_A:0 Load))\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &histogram:0 Load)\n            (_slice_content (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil))\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &divider:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i2 None)) (_starred_content (Name &MAX_A:0 Load)))\n        nil\n      )\n      (/seq\n        (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &counted:0 Store)\n          (Subscript\n            (Name &histogram:0 Load)\n            (_slice_slice (Slice (Name &divider:0 Load) None (Name &divider:0 Load)))\n            Load\n          )\n          (/seq (AugAssign (Name &count:0 Store) Add (Name &counted:0 Load)))\n          (/seq)\n          None\n        )\n        (If (Compare (Name &count:0 Load) (list Gt) (list (Constant i1 None))) (/seq Break) (/seq))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      None\n    )\n    (ImportFrom s_math (list (alias &gcd:0 None)) i0)\n    (Assign\n      (list (Name &g:0 Store))\n      (Call\n        (Name &gcd:0 Load)\n        (list\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n          (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare (Name &g:0 Load) (list Eq) (list (Constant i1 None)))\n                  (Constant\n                    s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                    None\n                  )\n                  (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &g:0 Store))\n          (Call\n            (Name &gcd:0 Load)\n            (list\n              (_starred_content (Name &g:0 Load))\n              (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &g:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant\n                  s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                  None\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_functools (list (alias g_reduce None)) i0)\n    (ImportFrom s_math (list (alias g_gcd None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &aa:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ma:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &aa:0 Load))) nil) None)\n    (Assign\n      (list (Name &cnt:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &ma:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &aa:0 Load)\n      (/seq (AugAssign (Subscript (Name &cnt:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Call (Name g_reduce Load) (list (_starred_content (Name g_gcd Load)) (_starred_content (Name &aa:0 Load))) nil)\n        (list NotEq)\n        (list (Constant i1 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Call\n            (Name g_all Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Compare\n                    (Call\n                      (Name g_sum Load)\n                      (list\n                        (_starred_content\n                          (Subscript\n                            (Name &cnt:0 Load)\n                            (_slice_slice (Slice (Name &i:1 Load) None (Name &i:1 Load)))\n                            Load\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    (list LtE)\n                    (list (Constant i1 None))\n                  )\n                  (list\n                    (comprehension\n                      (Name &i:1 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list (_starred_content (Constant i2 None)) (_starred_content (Name &ma:0 Load)))\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant\n                      s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0=\n                      None\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Constant\n                      s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ==\n                      None\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &N:0 &A:0)) (Assign (list (Name &A:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &A:0 Load))) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &prime:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))) None) (Assign (list (Name &eratos:0 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) None) (Assign (list (Name &D:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &D:0 Load) (_slice_content (Constant i1 None)) Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None)))) nil) (/seq (If (UnaryOp Not (Subscript (Name &eratos:0 Load) (_slice_content (Name &i:0 Load)) Load)) (/seq Continue) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (BinOp (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) (_starred_content (Name &i:0 Load))) nil) (/seq (If (UnaryOp Not (Subscript (Name &D:0 Load) (_slice_content (Name &j:0 Load)) Load)) (/seq (Assign (list (Subscript (Name &D:0 Load) (_slice_content (Name &j:0 Load)) Store)) (Name &i:0 Load) None)) (/seq)) (If (Compare (Name &j:0 Load) (list NotEq) (list (Name &i:0 Load))) (/seq (Assign (list (Subscript (Name &eratos:0 Load) (_slice_content (Name &j:0 Load)) Store)) (Constant False None) None)) (/seq))) (/seq) None)))) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (While (Compare (Name &a:0 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &D:0 Load) (_slice_content (Name &a:0 Load)) Load) None) (While (Compare (BinOp (Name &a:0 Load) Mod (Name &x:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &a:0 Store) FloorDiv (Name &x:0 Load))) (/seq)) (AugAssign (Subscript (Name &prime:0 Load) (_slice_content (Name &x:0 Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Call (Name g_max Load) (list (_starred_content (Name &prime:0 Load))) nil) (list LtE) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))) (/seq (If (Compare (Call (Name g_max Load) (list (_starred_content (Name &prime:0 Load))) nil) (list NotEq) (list (Name &N:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None) (alias g_math None))) (/splice (fn_1 &N:0 &A:0)) (Assign (list (Name &G:0 Store)) (Constant i0 None) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (Assign (list (Name &G:0 Store)) (Call (Attribute (Name g_math Load) s_gcd Load) (list (_starred_content (Name &G:0 Load)) (_starred_content (Name &a:0 Load))) nil) None)) (/seq) None) (If (Compare (Name &G:0 Load) (list NotEq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (Assign (list (Name &M:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i5 None)) None) (Assign (list (Name &B:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (Compare (Name &a:0 Load) (list In) (list (Name &B:0 Load))) (/seq (Assign (list (Subscript (Name &B:0 Load) (_slice_content (Name &a:0 Load)) Store)) (BinOp (Subscript (Name &B:0 Load) (_slice_content (Name &a:0 Load)) Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &B:0 Load) (_slice_content (Name &a:0 Load)) Store)) (Constant i1 None) None)))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &M:0 Load))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &i:0 Load))) nil) (/seq (If (Compare (Name &j:0 Load) (list In) (list (Name &B:0 Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (Name &j:0 Load)) Load))) (/seq))) (/seq) None) (If (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))) nil)",
      "(Module (/seq (If (Constant True None) (/seq (/splice (fn_1 &N:0 &As:0)) (Assign (list (Name &maxA:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i6 None)) None) (Assign (list (Name &c:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &maxA:0 Load) Add (Constant i1 None))) None) (For (Name &A:0 Store) (Name &As:0 Load) (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Name &A:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &isPrime:0 Store)) (Constant True None) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &maxA:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &c:0 Load) (_slice_slice (Slice (Name &i:0 Load) None (Name &i:0 Load))) Load))) nil) None) (If (Compare (Name &cnt:0 Load) (list Eq) (list (Name &N:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (Compare (Name &cnt:0 Load) (list GtE) (list (Constant i2 None))) (/seq (Assign (list (Name &isPrime:0 Store)) (Constant False None) None)) (/seq))) (/seq (If (Name &isPrime:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))))) None)) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &M:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None)) None) (Assign (list (Name &f:0 Store)) (Lambda (arguments nil (list (arg &p:1 None None)) None nil nil None nil) (Call (Name g_exit Load) (list (_starred_content (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (List (list (_starred_content (Constant s_pairwise None)) (_starred_content (Constant s_setwise None)) (_starred_content (Constant s_not None))) Load) (_slice_content (Name &p:1 Load)) Load) Add (Constant s-WzMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)))) nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_starred (Starred (Name &l:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_open Load) (list (_starred_content (Constant i0 None))) nil) s_read Load) nil nil) s_split Load) nil nil))) nil) None) (ImportFrom s_math (list (alias &*:0 None)) i0) (Assign (list (Name &g:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &x:0 Store) (Name &l:0 Load) (/seq (Assign (list (Name &g:0 Store)) (Call (Name g_gcd Load) (list (_starred_content (Name &g:0 Load)) (_starred_content (Name &x:0 Load))) nil) None)) (/seq) None) (If (Compare (Name &g:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Constant i2 None))) nil))) (/seq)) (Assign (list (Name &C:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &M:0 Load)) None) (For (Name &x:0 Store) (Name &l:0 Load) (/seq (Assign (list (Subscript (Name &C:0 Load) (_slice_content (Name &x:0 Load)) Store)) (Constant i1 None) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &M:0 Load))) nil) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Subscript (Name &C:0 Load) (_slice_content (Name &j:2 Load)) Load) (list (comprehension (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &i:0 Load))) nil) nil i0))))) nil) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Constant i1 None))) nil))) (/seq))) (/seq) None) (Expr (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil))) nil)",
      "(Module (/seq (ImportFrom s_functools (list (alias g_reduce None)) i0) (ImportFrom s_math (list (alias g_gcd None)) i0) (/splice (fn_1 &N:0 &A:0)) (Assign (list (Name &c:0 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load))) nil) Add (Constant i1 None)) None) (Assign (list (Name &C:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &c:0 Load)) None) (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Name &A:0 Load) (/seq (AugAssign (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &c:0 Load))) nil) (/seq (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &c:0 Load)) (_starred_content (Name &i:0 Load))) nil) (/seq (AugAssign (Name &cnt:0 Store) Add (Subscript (Name &C:0 Load) (_slice_content (Name &j:0 Load)) Load))) (/seq) None) (If (Compare (Name &cnt:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &f:0 Store)) (Constant i0 None) None)) (/seq))) (/seq) None) (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))) (/seq (If (Compare (Call (Name g_reduce Load) (list (_starred_content (Name g_gcd Load)) (_starred_content (Name &A:0 Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &u:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None)) None) (Assign (list (Name &C:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &u:0 Load)) None) (Assign (list (Name &D:0 Store)) (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i2 None)) Add (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (Name &u:0 Load) Sub (Constant i2 None)))) None) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (While (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)))) Load) None)) (/seq)) (Return (Name &b:1 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Constant i4 None) None) (While (Compare (Name &n:0 Load) (list Lt) (list (Name &u:0 Load))) (/seq (Assign (list (Subscript (Name &D:0 Load) (_slice_content (Name &n:0 Load)) Store)) (Constant i0 None) None) (AugAssign (Name &n:0 Store) Add (Constant i2 None))) (/seq)) (Assign (list (Name &i:0 Store)) (Constant i3 None) None) (While (Compare (BinOp (Name &i:0 Load) Mult (Name &i:0 Load)) (list Lt) (list (Name &u:0 Load))) (/seq (If (Subscript (Name &D:0 Load) (_slice_content (Name &i:0 Load)) Load) (/seq (Assign (list (Name &n:0 Store)) (BinOp (Name &i:0 Load) Mult (Constant i2 None)) None) (While (Compare (Name &n:0 Load) (list Lt) (list (Name &u:0 Load))) (/seq (Assign (list (Subscript (Name &D:0 Load) (_slice_content (Name &n:0 Load)) Store)) (Constant i0 None) None) (AugAssign (Name &n:0 Store) Add (Name &i:0 Load))) (/seq))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i2 None))) (/seq)) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (AugAssign (Subscript (Name &C:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (ListComp (Name &x:2 Load) (list (comprehension (Name &x:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &u:0 Load))) nil) (list (Compare (Subscript (Name &D:0 Load) (_slice_content (Name &x:2 Load)) Load) (list Eq) (list (Constant i1 None)))) i0))) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &C:0 Load) (_slice_slice (Slice (Name &i:0 Load) None (Name &i:0 Load))) Load))) nil) (list Gt) (list (Constant i1 None))) (/seq Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) None) (Assign (list (Name &c:0 Store)) (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (Assign (list (Name &c:0 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &a:0 Load))) nil) None) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &maxA:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &A:0 Load))) nil) None) (Assign (list (Name &pn:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Name &maxA:0 Load) Add (Constant i1 None)))) nil))) nil) None) (Assign (list (Name &n:0 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &n:0 Load) Mult (Name &n:0 Load)) (list LtE) (list (Name &maxA:0 Load))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Subscript (Name &pn:0 Load) (_slice_content (Name &n:0 Load)) Load))) (/seq (For (Name &m:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &pn:0 Load))) nil)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &pn:0 Load) (_slice_content (Name &m:0 Load)) Load) (list Eq) (list (Name &m:0 Load))) (/seq (Assign (list (Subscript (Name &pn:0 Load) (_slice_content (Name &m:0 Load)) Store)) (Name &n:0 Load) None)) (/seq))) (/seq) None)) (/seq)) (AugAssign (Name &n:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &s:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (Assign (list (Name &st:0 Store)) (Call (Name g_set Load) nil nil) None) (While (Compare (Name &a:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &st:0 Load) s_add Load) (list (_starred_content (Subscript (Name &pn:0 Load) (_slice_content (Name &a:0 Load)) Load))) nil)) (AugAssign (Name &a:0 Store) FloorDiv (Subscript (Name &pn:0 Load) (_slice_content (Name &a:0 Load)) Load))) (/seq)) (If (UnaryOp Not (Call (Attribute (Name &s:0 Load) s_isdisjoint Load) (list (_starred_content (Name &st:0 Load))) nil)) (/seq Break) (/seq)) (AugAssign (Name &s:0 Store) BitOr (Name &st:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) None) (ImportFrom s_math (list (alias &gcd:0 None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (For (Name &a:0 Store) (Subscript (Name &A:0 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load) (/seq (Assign (list (Name &n:0 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil) None)) (/seq) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (ImportFrom s_math (list (alias g_gcd None)) i0) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 &N:1 &A:1)) (Assign (list (Name &all:1 Store)) (Constant i0 None) None) (For (Name &a:1 Store) (Name &A:1 Load) (/seq (Assign (list (Name &all:1 Store)) (Call (Name g_gcd Load) (list (_starred_content (Name &all:1 Load)) (_starred_content (Name &a:1 Load))) nil) None)) (/seq) None) (If (Compare (Name &all:1 Load) (list NotEq) (list (Constant i1 None))) (/seq (Return (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) (/seq)) (Assign (list (Name &M:1 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None) (Assign (list (Name &B:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &a:1 Store) (Name &A:1 Load) (/seq (AugAssign (Subscript (Name &B:1 Load) (_slice_content (Name &a:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &M:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &M:1 Load)) (_starred_content (Name &i:1 Load))) nil) (/seq (AugAssign (Name &cnt:1 Store) Add (Subscript (Name &B:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq) None) (If (Compare (Name &cnt:1 Load) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) (/seq))) (/seq) None) (Return (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) nil nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Import (list (alias &copy:0 None))) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &MAX_A:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None)) None) (Assign (list (Name &histogram:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &MAX_A:0 Load)) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (AugAssign (Subscript (Name &histogram:0 Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &divider:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &MAX_A:0 Load))) nil) (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &counted:0 Store) (Subscript (Name &histogram:0 Load) (_slice_slice (Slice (Name &divider:0 Load) None (Name &divider:0 Load))) Load) (/seq (AugAssign (Name &count:0 Store) Add (Name &counted:0 Load))) (/seq) None) (If (Compare (Name &count:0 Load) (list Gt) (list (Constant i1 None))) (/seq Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) None) (ImportFrom s_math (list (alias &gcd:0 None)) i0) (Assign (list (Name &g:0 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &g:0 Load) (list Eq) (list (Constant i1 None))) (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None) (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None)))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &g:0 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Name &g:0 Load)) (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (If (Compare (Name &g:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))))) nil)",
      "(Module (/seq (ImportFrom s_functools (list (alias g_reduce None)) i0) (ImportFrom s_math (list (alias g_gcd None)) i0) (/splice (fn_1 &n:0 &aa:0)) (Assign (list (Name &ma:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &aa:0 Load))) nil) None) (Assign (list (Name &cnt:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &ma:0 Load) Add (Constant i1 None))) None) (For (Name &a:0 Store) (Name &aa:0 Load) (/seq (AugAssign (Subscript (Name &cnt:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Call (Name g_reduce Load) (list (_starred_content (Name g_gcd Load)) (_starred_content (Name &aa:0 Load))) nil) (list NotEq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMCwgMTExLCAxMTYsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))) (/seq (If (Call (Name g_all Load) (list (_starred_content (ListComp (Compare (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &cnt:0 Load) (_slice_slice (Slice (Name &i:1 Load) None (Name &i:1 Load))) Load))) nil) (list LtE) (list (Constant i1 None))) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &ma:0 Load))) nil) nil i0))))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExMiwgOTcsIDEwNSwgMTE0LCAxMTksIDEwNSwgMTE1LCAxMDEsIDMyLCA5OSwgMTExLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMV0= None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNSwgMTAxLCAxMTYsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDk5LCAxMTEsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxXQ== None))) nil))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &R:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (_starred_content (BinOp (Name &R:0 Load) Mult (Constant f6.2831853 None)))) nil)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              Mult\n              (Constant f6.283 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              Mult\n              (Constant f6.283184 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (Call (Name g_float Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                Mult\n                (Constant i2 None)\n              )\n              Mult\n              (Constant f3.14 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &r:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant f6.283 None) Mult (Name &r:0 Load)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (BinOp (BinOp (Name &N:0 Load) Mult (Constant i2 None)) Mult (Constant f3.1415 None))))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (Call (Name g_float Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                Mult\n                (Constant i2 None)\n              )\n              Mult\n              (Constant f3.1415926 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Mult (Constant f6.283 None)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp (Constant f3.14 None) Mult (Constant i2 None))\n              Mult\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &r:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp (Constant f3.141 None) Mult (Constant i2 None))\n              Mult\n              (Call (Name g_int Load) (list (_starred_content (Name &r:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp #1 Mult #0))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 (Constant f6.2831853 None) (Name &R:0 Load) &R:0) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) Mult (Constant f6.283 None)))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) Mult (Constant f6.283184 None)))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Call (Name g_float Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) Mult (Constant i2 None)) Mult (Constant f3.14 None)))) nil))) nil)",
      "(Module (fn_1 (Name &r:0 Load) (Constant f6.283 None) &r:0) nil)",
      "(Module (fn_1 (Constant f3.1415 None) (BinOp (Name &N:0 Load) Mult (Constant i2 None)) &N:0) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Call (Name g_float Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) Mult (Constant i2 None)) Mult (Constant f3.1415926 None)))) nil))) nil)",
      "(Module (fn_1 (Constant f6.283 None) (Name &a:0 Load) &a:0) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant f3.14 None) Mult (Constant i2 None)) Mult (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &r:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Constant f3.141 None) Mult (Constant i2 None)) Mult (Call (Name g_int Load) (list (_starred_content (Name &r:0 Load))) nil)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Subscript\n        (Call\n          (Name g_sorted Load)\n          (list (_starred_content (Name &a:0 Load)))\n          (list (keyword s_reverse (Constant True None)))\n        )\n        (_slice_slice (Slice (Constant i0 None) (Constant i2 None) None))\n        Load\n      )\n      None\n    )\n    (For\n      (Name &A:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare (Name &A:0 Load) (list Eq) (list (Name &b:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &A:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n          (_starred_content (List nil Load))\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &A:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &B:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &A:0 Load))) nil) None)\n    (For\n      (Name &x:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare\n                    (Name &x:0 Load)\n                    (list Eq)\n                    (list\n                      (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load)\n                    )\n                  )\n                  (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i2 None))) Load)\n                  (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare\n                    (Name &i:0 Load)\n                    (list NotEq)\n                    (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                  )\n                  (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                  (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_starred (Starred (Name &a:0 Store) Store))) Store)\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Name g_open Load) (list (_starred_content (Constant i0 None))) nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Subscript\n                  (Name &b:0 Load)\n                  (_slice_content\n                    (BinOp\n                      (Compare\n                        (Name &i:0 Load)\n                        (list Lt)\n                        (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                      )\n                      Sub\n                      (Constant i2 None)\n                    )\n                  )\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &t:0 Load))) nil) None)\n    (Assign\n      (list (Name &m2:0 Store))\n      (Subscript\n        (Call (Name g_sorted Load) (list (_starred_content (Name &t:0 Load))) nil)\n        (_slice_content (UnaryOp USub (Constant i2 None)))\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &t:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &m:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m2:0 Load))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ls:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare\n                    (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list NotEq)\n                    (list (Subscript (Name &ls:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                  )\n                  (Subscript (Name &ls:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                  (Subscript (Name &ls:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &l:0 Load))) nil) None)\n    (Assign\n      (list (Name &b:0 Store))\n      (Subscript\n        (Call (Name g_sorted Load) (list (_starred_content (Name &l:0 Load))) nil)\n        (_slice_content (UnaryOp USub (Constant i2 None)))\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp (Compare (Name &i:0 Load) (list Eq) (list (Name &a:0 Load))) (Name &b:0 Load) (Name &a:0 Load))\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                )\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &B:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &A:0 Load))) nil) None)\n    (Assign\n      (list (Name &one:0 Store))\n      (Subscript (Name &B:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n      None\n    )\n    (Assign\n      (list (Name &two:0 Store))\n      (Subscript (Name &B:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare (Name &i:0 Load) (list NotEq) (list (Name &one:0 Load)))\n                  (Name &one:0 Load)\n                  (Name &two:0 Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare\n                    (Name &i:0 Load)\n                    (list Eq)\n                    (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                  )\n                  (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                  (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign\n      (list (Name &m:0 Store))\n      (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n      None\n    )\n    (Assign\n      (list (Name &mm:0 Store))\n      (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Name &m:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &mm:0 Load))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %4 Store)) (Call #0 (list (_starred_content (Name %3 Load))) nil) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Subscript (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) (list (keyword s_reverse (Constant True None)))) (_slice_slice (Slice (Constant i0 None) (Constant i2 None) None)) Load) None) (For (Name &A:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &A:0 Load) (list Eq) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &A:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (List nil Load))) Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &A:0 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil))) (/seq) None) (Assign (list (Name &B:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &A:0 Load))) nil) None) (For (Name &x:0 Store) (Name &A:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &x:0 Load) (list Eq) (list (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load))) (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i2 None))) Load) (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_sorted Load) &n:0 &_:1 &a:0 &b:0)) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &i:0 Load) (list NotEq) (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_starred (Starred (Name &a:0 Store) Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Name g_open Load) (list (_starred_content (Constant i0 None))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Sub (Constant i2 None))) Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_max Load) &n:0 &i:1 &t:0 &m:0)) (Assign (list (Name &m2:0 Store)) (Subscript (Call (Name g_sorted Load) (list (_starred_content (Name &t:0 Load))) nil) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) (For (Name &i:0 Store) (Name &t:0 Load) (/seq (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &m:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m2:0 Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_sorted Load) &n:0 &_:1 &l:0 &ls:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &ls:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Subscript (Name &ls:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (Subscript (Name &ls:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_max Load) &n:0 &i:1 &l:0 &a:0)) (Assign (list (Name &b:0 Store)) (Subscript (Call (Name g_sorted Load) (list (_starred_content (Name &l:0 Load))) nil) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &i:0 Load) (list Eq) (list (Name &a:0 Load))) (Name &b:0 Load) (Name &a:0 Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) None) (Assign (list (Name &B:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &A:0 Load))) nil) None) (Assign (list (Name &one:0 Store)) (Subscript (Name &B:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &two:0 Store)) (Subscript (Name &B:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) (For (Name &i:0 Store) (Name &A:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &i:0 Load) (list NotEq) (list (Name &one:0 Load))) (Name &one:0 Load) (Name &two:0 Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_sorted Load) &n:0 &i:1 &a:0 &b:0)) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &i:0 Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))) nil))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Name g_sorted Load) &n:0 &_:1 &a:0 &b:0)) (Assign (list (Name &m:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &mm:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Name &m:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &mm:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &m:0 Load))) nil))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n                  )\n                  (_starred_content\n                    (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n                  )\n                )\n                nil\n              )\n              Mult\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &hoge:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant i2 None)\n              Mult\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Attribute (Name &hoge:0 Load) s_count Load)\n                      (list (_starred_content (Constant s_1 None)))\n                      nil\n                    )\n                  )\n                  (_starred_content\n                    (Call\n                      (Attribute (Name &hoge:0 Load) s_count Load)\n                      (list (_starred_content (Constant s_0 None)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &l:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &l:0 Load)\n              Sub\n              (Call\n                (Name g_abs Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n                      Sub\n                      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &ans:0 Store))\n      (Call\n        (Name g_min Load)\n        (list\n          (_starred_content\n            (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n          )\n          (_starred_content\n            (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Mult (Constant i2 None)))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil)\n              Sub\n              (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant i2 None)\n              Mult\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n                  )\n                  (_starred_content\n                    (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant i2 None)\n              Mult\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Attribute (Call (Name g_input Load) nil nil) s_count Load))\n                        (_starred_content (Constant s_01 None))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content\n                    (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n                  )\n                  (_starred_content\n                    (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n                  )\n                )\n                nil\n              )\n              Mult\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name g_min Load)\n                (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)))\n                nil\n              )\n              Mult\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &z:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant i2 None)\n              Mult\n              (Call\n                (Name g_min Load)\n                (list\n                  (_starred_content (Name &z:0 Load))\n                  (_starred_content\n                    (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Name &z:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Call (Name g_min Load) (list (_starred_content (Call (Attribute (Name %1 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)) (_starred_content (Call (Attribute (Name %1 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))) nil)))) nil)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil)) (_starred_content (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil))) nil) Mult (Constant i2 None)))) nil))) nil)",
      "(Module (fn_1 &hoge:0) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &l:0 Load) Sub (Call (Name g_abs Load) (list (_starred_content (BinOp (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil) Sub (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)) (_starred_content (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Mult (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil) Sub (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil)))) nil))) nil)",
      "(Module (fn_1 &s:0) nil)",
      "(Module (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Call (Name g_min Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Attribute (Call (Name g_input Load) nil nil) s_count Load)) (_starred_content (Constant s_01 None))) nil))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil)) (_starred_content (Call (Attribute (Name &S:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil))) nil) Mult (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_1 None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil) Mult (Constant i2 None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &z:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_0 None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Call (Name g_min Load) (list (_starred_content (Name &z:0 Load)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Sub (Name &z:0 Load)))) nil)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If (Compare (Name &x:0 Load) (list Lt) (list (Name &i:0 Load))) (/seq Break) (/seq))\n        (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &x:0 Store) Sub (Name &i:0 Load))\n      )\n      (/seq\n        (If\n          (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq (AugAssign (Name &ans:0 Store) Sub (Constant i1 None)))\n          (/seq)\n        )\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &tmp:0 Store)) (Name &x:0 Load) None)\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (Compare (Name &x:0 Load) (list GtE) (list (Name &a:0 Load)))\n          (/seq\n            (AugAssign (Name &x:0 Store) Sub (Name &a:0 Load))\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Name &tmp:0 Load)\n        (list Gt)\n        (list (Call (Name g_sum Load) (list (_starred_content (Name &A:0 Load))) nil))\n      )\n      (/seq (AugAssign (Name &ans:0 Store) Sub (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &s:0 Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            (list LtE)\n            (list (Name &x:0 Load))\n          )\n          (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (AugAssign (Name &s:0 Store) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &s:0 Load) (list Lt) (list (Name &x:0 Load)))\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Sub (Constant i1 None)))) nil)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store) (Name &chk:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare (Name &x:0 Load) (list GtE) (list (Name &i:0 Load)))\n          (/seq\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n            (AugAssign (Name &x:0 Store) Sub (Name &i:0 Load))\n          )\n          (/seq (Assign (list (Name &x:0 Store)) (Constant i0 None) None))\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call\n            (Name g_max Load)\n            (list\n              (_starred_content (Constant i0 None))\n              (_starred_content (BinOp (Name &ans:0 Load) Sub (Constant i1 None)))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &y:0 Store)) (_starred_content (Name &i:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n      None\n    )\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &y:0 Load) (list Lt) (list (Name &x:0 Load)))\n          (Compare (Name &i:0 Load) (list Lt) (list (Name &N:0 Load)))\n        )\n      )\n      (/seq\n        (AugAssign (Name &y:0 Store) Add (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n        (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &y:0 Load) (list Gt) (list (Name &x:0 Load)))\n          (BoolOp\n            And\n            (list\n              (Compare (Name &y:0 Load) (list Lt) (list (Name &x:0 Load)))\n              (Compare (Name &i:0 Load) (list Eq) (list (Name &N:0 Load)))\n            )\n          )\n        )\n      )\n      (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &d:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &c:0 Load)\n      (/seq\n        (AugAssign (Name &b:0 Store) Sub (Name &i:0 Load))\n        (AugAssign (Name &d:0 Store) Add (Constant i1 None))\n        (If (Compare (Name &b:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq (AugAssign (Name &d:0 Store) Sub (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &v:0 Store)) (_starred_content (Name &c:0 Store))) Store))\n      (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &a:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &x:0 Load) (list GtE) (list (Name &j:0 Load)))\n          (/seq\n            (AugAssign (Name &x:0 Store) Sub (Name &j:0 Load))\n            (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n                  (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))\n                )\n              )\n              (/seq (AugAssign (Name &c:0 Store) Sub (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &nin:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &ryo:0 Store)) (Name &x:0 Load) None)\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (Compare\n            (Name &ryo:0 Load)\n            (list GtE)\n            (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          )\n          (/seq\n            (Assign\n              (list (Name &ryo:0 Store))\n              (BinOp (Name &ryo:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              None\n            )\n            (AugAssign (Name &nin:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Name &ryo:0 Load)\n        (list Eq)\n        (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load))\n      )\n      (/seq (AugAssign (Name &nin:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &nin:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (BinOp (Name &x:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n          None\n        )\n        (If\n          (Compare (Name &x:0 Load) (list GtE) (list (Constant i0 None)))\n          (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare\n        (Name &x:0 Load)\n        (list Eq)\n        (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n      )\n      (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (Compare (BinOp (Name &X:0 Load) Sub (Name &a:0 Load)) (list Lt) (list (Constant i0 None)))\n          (/seq Break)\n          (/seq)\n        )\n        (AugAssign (Name &X:0 Store) Sub (Name &a:0 Load))\n        (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n      )\n      (/seq (If (Name &X:0 Load) (/seq (AugAssign (Name &ans:0 Store) Sub (Constant i1 None))) (/seq)))\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) ?1 (Expr (Call (Attribute (Name %3 Load) s_sort Load) nil nil)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &x:0 &n:0 &a:0 /nothing /nothing)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &x:0 Load) (list Lt) (list (Name &i:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (AugAssign (Name &x:0 Store) Sub (Name &i:0 Load))) (/seq (If (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &ans:0 Store) Sub (Constant i1 None))) (/seq))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &N:0 &A:0 (Assign (list (Name &tmp:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None))) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (Compare (Name &x:0 Load) (list GtE) (list (Name &a:0 Load))) (/seq (AugAssign (Name &x:0 Store) Sub (Name &a:0 Load)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &tmp:0 Load) (list Gt) (list (Call (Name g_sum Load) (list (_starred_content (Name &A:0 Load))) nil))) (/seq (AugAssign (Name &ans:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &n:0 &a:0 /nothing /nothing)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (BinOp (Name &s:0 Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) (list LtE) (list (Name &x:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &s:0 Store) Add (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq) None) (If (Compare (Name &s:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) Sub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ans:0 Store) (Name &chk:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &x:0 Load) (list GtE) (list (Name &i:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (AugAssign (Name &x:0 Store) Sub (Name &i:0 Load))) (/seq (Assign (list (Name &x:0 Store)) (Constant i0 None) None)))) (/seq) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &ans:0 Load) Sub (Constant i1 None)))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &N:0 &A:0 /nothing /nothing)) (Assign (list (Tuple (list (_starred_content (Name &y:0 Store)) (_starred_content (Name &i:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (While (BoolOp And (list (Compare (Name &y:0 Load) (list Lt) (list (Name &x:0 Load))) (Compare (Name &i:0 Load) (list Lt) (list (Name &N:0 Load))))) (/seq (AugAssign (Name &y:0 Store) Add (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp Or (list (Compare (Name &y:0 Load) (list Gt) (list (Name &x:0 Load))) (BoolOp And (list (Compare (Name &y:0 Load) (list Lt) (list (Name &x:0 Load))) (Compare (Name &i:0 Load) (list Eq) (list (Name &N:0 Load))))))) (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &b:0 &a:0 &c:0 /nothing /nothing)) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &c:0 Load) (/seq (AugAssign (Name &b:0 Store) Sub (Name &i:0 Load)) (AugAssign (Name &d:0 Store) Add (Constant i1 None)) (If (Compare (Name &b:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))) (/seq) None) (If (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &d:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &v:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &j:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &a:0 Load))) nil) (/seq (If (Compare (Name &x:0 Load) (list GtE) (list (Name &j:0 Load))) (/seq (AugAssign (Name &x:0 Store) Sub (Name &j:0 Load)) (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (If (BoolOp And (list (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))))) (/seq (AugAssign (Name &c:0 Store) Sub (Constant i1 None))) (/seq))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &nin:0 Store)) (Constant i0 None) None) (Assign (list (Name &ryo:0 Store)) (Name &x:0 Load) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Name &ryo:0 Load) (list GtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &ryo:0 Store)) (BinOp (Name &ryo:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) None) (AugAssign (Name &nin:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &ryo:0 Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &N:0 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name &nin:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &nin:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &x:0 &n:0 &a:0 /nothing /nothing)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &x:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 &X:0 &N:0 &A:0 /nothing /nothing)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (Compare (BinOp (Name &X:0 Load) Sub (Name &a:0 Load)) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (AugAssign (Name &X:0 Store) Sub (Name &a:0 Load)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq (If (Name &X:0 Load) (/seq (AugAssign (Name &ans:0 Store) Sub (Constant i1 None))) (/seq))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &c:0 Load) (list Gt) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &n:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list GtE) (list (Name &n:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &c:0 Load) (list LtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare (Name &c:0 Load) (list LtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &x:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load)\n              (_slice_content\n                (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list GtE) (list (Name &x:0 Load)))\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &A:0 Store))\n            (_starred_content (Name &B:0 Store))\n            (_starred_content (Name &C:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare (BinOp (Name &A:0 Load) Add (Name &B:0 Load)) (list GtE) (list (Name &C:0 Load)))\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n            (_starred_content (Name &c:0 Store))\n          )\n          Store\n        )\n      )\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list GtE) (list (Name &c:0 Load)))\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &A:0 Store))\n            (_starred_content (Name &B:0 Store))\n            (_starred_content (Name &C:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load)\n              (_slice_content\n                (Compare (BinOp (Name &A:0 Load) Add (Name &B:0 Load)) (list GtE) (list (Name &C:0 Load)))\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &A:0 Store))\n            (_starred_content (Name &B:0 Store))\n            (_starred_content (Name &C:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &C:0 Load) (list Gt) (list (BinOp (Name &A:0 Load) Add (Name &B:0 Load))))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &A:0 Store))\n            (_starred_content (Name &B:0 Store))\n            (_starred_content (Name &C:0 Store))\n          )\n          Store\n        )\n      )\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (IfExp\n        (Compare (BinOp (Name &A:0 Load) Add (Name &B:0 Load)) (list GtE) (list (Name &C:0 Load)))\n        (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)\n        (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &c:0 &b:0 &a:0) (If (Compare (Name &c:0 Load) (list Gt) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))))) nil)",
      "(Module (/seq (fn_1 &n:0 &b:0 &a:0) (If (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list GtE) (list (Name &n:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (fn_1 &c:0 &b:0 &a:0) (If (Compare (Name &c:0 Load) (list LtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (fn_1 &c:0 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &c:0 Load) (list LtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (fn_1 &x:0 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load) (_slice_content (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list GtE) (list (Name &x:0 Load)))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &A:0 Store)) (_starred_content (Name &B:0 Store)) (_starred_content (Name &C:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Name &A:0 Load) Add (Name &B:0 Load)) (list GtE) (list (Name &C:0 Load))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list GtE) (list (Name &c:0 Load))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (fn_1 &C:0 &B:0 &A:0) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load) (_slice_content (Compare (BinOp (Name &A:0 Load) Add (Name &B:0 Load)) (list GtE) (list (Name &C:0 Load)))) Load))) nil))) nil)",
      "(Module (/seq (fn_1 &C:0 &B:0 &A:0) (If (Compare (Name &C:0 Load) (list Gt) (list (BinOp (Name &A:0 Load) Add (Name &B:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))))) nil)",
      "(Module (/seq (fn_1 &C:0 &B:0 &A:0) (Expr (IfExp (Compare (BinOp (Name &A:0 Load) Add (Name &B:0 Load)) (list GtE) (list (Name &C:0 Load))) (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil) (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &r:0 Store)) (Attribute (Name g_str Load) s_replace Load) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Subscript\n              (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load)\n              (_slice_content\n                (Compare\n                  (Name &s:0 Load)\n                  (list Eq)\n                  (list\n                    (Call\n                      (Attribute (Constant s_ None) s_join Load)\n                      (list\n                        (_starred_content\n                          (Call\n                            (Name g_reversed Load)\n                            (list\n                              (_starred_content\n                                (Call\n                                  (Name &r:0 Load)\n                                  (list\n                                    (_starred_content\n                                      (Call\n                                        (Name &r:0 Load)\n                                        (list\n                                          (_starred_content\n                                            (Call\n                                              (Name &r:0 Load)\n                                              (list\n                                                (_starred_content\n                                                  (Call\n                                                    (Name &r:0 Load)\n                                                    (list\n                                                      (_starred_content\n                                                        (Call\n                                                          (Name &r:0 Load)\n                                                          (list\n                                                            (_starred_content\n                                                              (Call\n                                                                (Name &r:0 Load)\n                                                                (list\n                                                                  (_starred_content\n                                                                    (Call\n                                                                      (Name &r:0 Load)\n                                                                      (list\n                                                                        (_starred_content\n                                                                          (Call\n                                                                            (Name &r:0 Load)\n                                                                            (list\n                                                                              (_starred_content (Name &s:0 Load))\n                                                                              (_starred_content (Constant s_b None))\n                                                                              (_starred_content (Constant s_0 None))\n                                                                            )\n                                                                            nil\n                                                                          )\n                                                                        )\n                                                                        (_starred_content (Constant s_d None))\n                                                                        (_starred_content (Constant s_1 None))\n                                                                      )\n                                                                      nil\n                                                                    )\n                                                                  )\n                                                                  (_starred_content (Constant s_p None))\n                                                                  (_starred_content (Constant s_2 None))\n                                                                )\n                                                                nil\n                                                              )\n                                                            )\n                                                            (_starred_content (Constant s_q None))\n                                                            (_starred_content (Constant s_3 None))\n                                                          )\n                                                          nil\n                                                        )\n                                                      )\n                                                      (_starred_content (Constant s_0 None))\n                                                      (_starred_content (Constant s_d None))\n                                                    )\n                                                    nil\n                                                  )\n                                                )\n                                                (_starred_content (Constant s_1 None))\n                                                (_starred_content (Constant s_b None))\n                                              )\n                                              nil\n                                            )\n                                          )\n                                          (_starred_content (Constant s_2 None))\n                                          (_starred_content (Constant s_q None))\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    (_starred_content (Constant s_3 None))\n                                    (_starred_content (Constant s_p None))\n                                  )\n                                  nil\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n              Load\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &D:0 Store))\n      (Dict\n        (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None))\n        (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Attribute (Constant s_ None) s_join Load)\n        (list\n          (_starred_content\n            (ListComp\n              (Subscript (Name &D:0 Load) (_slice_content (Name &s:1 Load)) Load)\n              (list (comprehension (Name &s:1 Store) (Name &S:0 Load) nil i0))\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare\n        (Subscript (Name &X:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n        (list Eq)\n        (list (Name &S:0 Load))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &b:0 Store)) (Constant s_b None) None)\n    (Assign (list (Name &d:0 Store)) (Constant s_d None) None)\n    (Assign (list (Name &p:0 Store)) (Constant s_p None) None)\n    (Assign (list (Name &q:0 Store)) (Constant s_q None) None)\n    (Assign\n      (list (Name &m:0 Store))\n      (List\n        (list\n          (_starred_content (Tuple (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load))\n          (_starred_content (Tuple (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) Load))\n          (_starred_content (Tuple (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load))\n          (_starred_content (Tuple (list (_starred_content (Name &q:0 Load)) (_starred_content (Name &p:0 Load))) Load))\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant s_Yes None) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Mod (Constant i2 None))\n        (list Eq)\n        (list (Constant i1 None))\n      )\n      (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n      (/seq\n        (Assign\n          (list (Name &A:0 Store))\n          (Subscript\n            (Name &s:0 Load)\n            (_slice_slice\n              (Slice\n                None\n                (BinOp\n                  (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                  FloorDiv\n                  (Constant i2 None)\n                )\n                None\n              )\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &B:0 Store))\n          (Subscript\n            (Name &s:0 Load)\n            (_slice_slice\n              (Slice\n                (BinOp\n                  (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                  FloorDiv\n                  (Constant i2 None)\n                )\n                None\n                None\n              )\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &B:0 Store))\n          (Subscript (Name &B:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)\n                  FloorDiv\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Tuple\n                  (list\n                    (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                    (_starred_content (Subscript (Name &B:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  )\n                  Load\n                )\n                (list In)\n                (list (Name &m:0 Load))\n              )\n              (/seq Continue)\n              (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n    (If\n      (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n      (/seq\n        (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_b None))\n                  )\n                  (UnaryOp\n                    Not\n                    (Compare\n                      (Subscript\n                        (Name &s:0 Load)\n                        (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load)))\n                        Load\n                      )\n                      (list Eq)\n                      (list (Constant s_d None))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_d None))\n                  )\n                  (UnaryOp\n                    Not\n                    (Compare\n                      (Subscript\n                        (Name &s:0 Load)\n                        (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n                        Load\n                      )\n                      (list Eq)\n                      (list (Constant s_b None))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_p None))\n                  )\n                  (UnaryOp\n                    Not\n                    (Compare\n                      (Subscript\n                        (Name &s:0 Load)\n                        (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load)))\n                        Load\n                      )\n                      (list Eq)\n                      (list (Constant s_q None))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_q None))\n                  )\n                  (UnaryOp\n                    Not\n                    (Compare\n                      (Subscript\n                        (Name &s:0 Load)\n                        (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n                        Load\n                      )\n                      (list Eq)\n                      (list (Constant s_p None))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n      None\n    )\n    (For\n      (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &k:0 Store))) Store)\n      (Call (Name g_enumerate Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &k:0 Load) (list Eq) (list (Constant s_b None)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Constant s_d None)\n              None\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &k:0 Load) (list Eq) (list (Constant s_d None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                  (Constant s_b None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &k:0 Load) (list Eq) (list (Constant s_p None)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                      (Constant s_q None)\n                      None\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &k:0 Load) (list Eq) (list (Constant s_q None)))\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store))\n                          (Constant s_p None)\n                          None\n                        )\n                      )\n                      (/seq)\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &s:0 Load) (list Eq) (list (Name &t:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &t:0 Store))\n      (Subscript\n        (Call\n          (Attribute (Name &s:0 Load) s_translate Load)\n          (list\n            (_starred_content\n              (Call\n                (Attribute (Name g_str Load) s_maketrans Load)\n                (list\n                  (_starred_content\n                    (Dict\n                      (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None))\n                      (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n        Load\n      )\n      None\n    )\n    (If\n      (Compare (Name &s:0 Load) (list Eq) (list (Name &t:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (Compare\n                (Name &s:0 Load)\n                (list Eq)\n                (list\n                  (Call\n                    (Attribute (Constant s_ None) s_join Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content\n                              (Lambda\n                                (arguments nil (list (arg &c:1 None None)) None nil nil None nil)\n                                (Subscript\n                                  (Dict\n                                    (list\n                                      (Constant s_b None)\n                                      (Constant s_d None)\n                                      (Constant s_p None)\n                                      (Constant s_q None)\n                                    )\n                                    (list\n                                      (Constant s_d None)\n                                      (Constant s_b None)\n                                      (Constant s_q None)\n                                      (Constant s_p None)\n                                    )\n                                  )\n                                  (_slice_content (Name &c:1 Load))\n                                  Load\n                                )\n                              )\n                            )\n                            (_starred_content\n                              (Call (Name g_reversed Load) (list (_starred_content (Name &s:0 Load))) nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &ans:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n          (_starred_content (Constant s_Yes None))\n        )\n        Load\n      )\n      None\n    )\n    (If\n      (Compare (BinOp (Name &x:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n      (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &x:0 Load) FloorDiv (Constant i2 None)))) nil)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_b None))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &s:0 Load)\n                      (_slice_content (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n                      Load\n                    )\n                    (list NotEq)\n                    (list (Constant s_d None))\n                  )\n                )\n              )\n              (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                        (list Eq)\n                        (list (Constant s_d None))\n                      )\n                      (Compare\n                        (Subscript\n                          (Name &s:0 Load)\n                          (_slice_content (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n                          Load\n                        )\n                        (list NotEq)\n                        (list (Constant s_b None))\n                      )\n                    )\n                  )\n                  (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n                  (/seq\n                    (If\n                      (BoolOp\n                        And\n                        (list\n                          (Compare\n                            (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                            (list Eq)\n                            (list (Constant s_p None))\n                          )\n                          (Compare\n                            (Subscript\n                              (Name &s:0 Load)\n                              (_slice_content\n                                (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))\n                              )\n                              Load\n                            )\n                            (list NotEq)\n                            (list (Constant s_q None))\n                          )\n                        )\n                      )\n                      (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n                      (/seq\n                        (If\n                          (BoolOp\n                            And\n                            (list\n                              (Compare\n                                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                                (list Eq)\n                                (list (Constant s_q None))\n                              )\n                              (Compare\n                                (Subscript\n                                  (Name &s:0 Load)\n                                  (_slice_content\n                                    (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))\n                                  )\n                                  Load\n                                )\n                                (list NotEq)\n                                (list (Constant s_p None))\n                              )\n                            )\n                          )\n                          (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None))\n                          (/seq)\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &rev:1 Store))\n          (Dict\n            (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None))\n            (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))\n          )\n          None\n        )\n        (Assign (list (Name &S:1 Store)) (Call (Name g_input Load) nil nil) None)\n        (If\n          (Compare\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil) Mod (Constant i2 None))\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Return None))\n          (/seq)\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil)\n                  FloorDiv\n                  (Constant i2 None)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &S:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                (list NotEq)\n                (list\n                  (Subscript\n                    (Name &rev:1 Load)\n                    (_slice_content\n                      (Subscript\n                        (Name &S:1 Load)\n                        (_slice_content\n                          (BinOp\n                            (BinOp\n                              (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil)\n                              Sub\n                              (Constant i1 None)\n                            )\n                            Sub\n                            (Name &i:1 Load)\n                          )\n                        )\n                        Load\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Return None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &li:0 Store))\n      (List\n        (list\n          (_starred_content (Constant s_b None))\n          (_starred_content (Constant s_p None))\n          (_starred_content (Constant s_q None))\n          (_starred_content (Constant s_d None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Attribute (Name &li:0 Load) s_index Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (BinOp (Constant i3 None) Sub (Name &i:2 Load))\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Subscript (Name &a:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If (Compare #0 (list Eq) (list (Name %1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &r:0 Store)) (Attribute (Name g_str Load) s_replace Load) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Constant s_No None)) (_starred_content (Constant s_Yes None))) Load) (_slice_content (Compare (Name &s:0 Load) (list Eq) (list (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Name g_reversed Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Call (Name &r:0 Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Constant s_b None)) (_starred_content (Constant s_0 None))) nil)) (_starred_content (Constant s_d None)) (_starred_content (Constant s_1 None))) nil)) (_starred_content (Constant s_p None)) (_starred_content (Constant s_2 None))) nil)) (_starred_content (Constant s_q None)) (_starred_content (Constant s_3 None))) nil)) (_starred_content (Constant s_0 None)) (_starred_content (Constant s_d None))) nil)) (_starred_content (Constant s_1 None)) (_starred_content (Constant s_b None))) nil)) (_starred_content (Constant s_2 None)) (_starred_content (Constant s_q None))) nil)) (_starred_content (Constant s_3 None)) (_starred_content (Constant s_p None))) nil))) nil))) nil)))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &D:0 Store)) (Dict (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None)) (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))) None) (Assign (list (Name &X:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (ListComp (Subscript (Name &D:0 Load) (_slice_content (Name &s:1 Load)) Load) (list (comprehension (Name &s:1 Store) (Name &S:0 Load) nil i0))))) nil) None) (fn_1 (Subscript (Name &X:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) &S:0)) nil)",
      "(Module (/seq (Assign (list (Name &b:0 Store)) (Constant s_b None) None) (Assign (list (Name &d:0 Store)) (Constant s_d None) None) (Assign (list (Name &p:0 Store)) (Constant s_p None) None) (Assign (list (Name &q:0 Store)) (Constant s_q None) None) (Assign (list (Name &m:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &d:0 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &b:0 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &q:0 Load)) (_starred_content (Name &p:0 Load))) Load))) Load) None) (Assign (list (Name &ans:0 Store)) (Constant s_Yes None) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)) (/seq (Assign (list (Name &A:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) FloorDiv (Constant i2 None)) None)) Load) None) (Assign (list (Name &B:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) FloorDiv (Constant i2 None)) None None)) Load) None) (Assign (list (Name &B:0 Store)) (Subscript (Name &B:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) FloorDiv (Constant i2 None)))) nil) (/seq (If (Compare (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &B:0 Load) (_slice_content (Name &i:0 Load)) Load))) Load) (list In) (list (Name &m:0 Load))) (/seq Continue) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)))) (/seq) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil) None) (If (Compare (BinOp (Name &n:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))) (/seq (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_b None))) (UnaryOp Not (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load))) Load) (list Eq) (list (Constant s_d None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_d None))) (UnaryOp Not (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Load) (list Eq) (list (Constant s_b None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_p None))) (UnaryOp Not (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load))) Load) (list Eq) (list (Constant s_q None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_q None))) (UnaryOp Not (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Load) (list Eq) (list (Constant s_p None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &k:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (If (Compare (Name &k:0 Load) (list Eq) (list (Constant s_b None))) (/seq (Assign (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant s_d None) None)) (/seq (If (Compare (Name &k:0 Load) (list Eq) (list (Constant s_d None))) (/seq (Assign (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant s_b None) None)) (/seq (If (Compare (Name &k:0 Load) (list Eq) (list (Constant s_p None))) (/seq (Assign (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant s_q None) None)) (/seq (If (Compare (Name &k:0 Load) (list Eq) (list (Constant s_q None))) (/seq (Assign (list (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant s_p None) None)) (/seq))))))))) (/seq) None) (fn_1 (Name &s:0 Load) &t:0)) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &t:0 Store)) (Subscript (Call (Attribute (Name &s:0 Load) s_translate Load) (list (_starred_content (Call (Attribute (Name g_str Load) s_maketrans Load) (list (_starred_content (Dict (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None)) (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))))) nil))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (fn_1 (Name &s:0 Load) &t:0)) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &s:0 Load) (list Eq) (list (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Lambda (arguments nil (list (arg &c:1 None None)) None nil nil None nil) (Subscript (Dict (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None)) (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))) (_slice_content (Name &c:1 Load)) Load))) (_starred_content (Call (Name g_reversed Load) (list (_starred_content (Name &s:0 Load))) nil))) nil))) nil))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &ans:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)) (_starred_content (Constant s_Yes None))) Load) None) (If (Compare (BinOp (Name &x:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &x:0 Load) FloorDiv (Constant i2 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_b None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Load) (list NotEq) (list (Constant s_d None))))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_d None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Load) (list NotEq) (list (Constant s_b None))))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_p None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Load) (list NotEq) (list (Constant s_q None))))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_q None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (BinOp (Name &x:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Load) (list NotEq) (list (Constant s_p None))))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_No None) None)) (/seq))))))))) (/seq) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &rev:1 Store)) (Dict (list (Constant s_b None) (Constant s_d None) (Constant s_p None) (Constant s_q None)) (list (Constant s_d None) (Constant s_b None) (Constant s_q None) (Constant s_p None))) None) (Assign (list (Name &S:1 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Return None)) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil) FloorDiv (Constant i2 None)))) nil) (/seq (If (Compare (Subscript (Name &S:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Subscript (Name &rev:1 Load) (_slice_content (Subscript (Name &S:1 Load) (_slice_content (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &S:1 Load))) nil) Sub (Constant i1 None)) Sub (Name &i:1 Load))) Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) (Return None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &li:0 Store)) (List (list (_starred_content (Constant s_b None)) (_starred_content (Constant s_p None)) (_starred_content (Constant s_q None)) (_starred_content (Constant s_d None))) Load) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Attribute (Name &li:0 Load) s_index Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (BinOp (Constant i3 None) Sub (Name &i:2 Load)) (list (comprehension (Name &i:2 Store) (Subscript (Name &a:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) nil i0))) None) (fn_1 (Name &a:0 Load) &b:0)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzY2LCAzMiwgNDUsIDMyLCA3NywgMTIxLCAxMTUsIDExNiwgMTAxLCAxMTQsIDEwNSwgMTExLCAxMTcsIDExNSwgMzIsIDc2LCAxMDUsIDEwMywgMTA0LCAxMTZd\n        None\n      )\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (GeneratorExp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &MysteriousLight:0\n      (arguments nil (list (arg &tmp:1 None None) (arg &rem:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Name &rem:1 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &tmp:1 Store)) (_starred_content (Name &rem:1 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &rem:1 Load))\n                  (_starred_content (BinOp (Name &tmp:1 Load) Mod (Name &rem:1 Load)))\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &tmp:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant i3 None)\n              Mult\n              (BinOp\n                (Name &N:0 Load)\n                Sub\n                (Call\n                  (Name &MysteriousLight:0 Load)\n                  (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &X:0 Load)))\n                  nil\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &ai:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call (Name &ai:0 Load) nil nil)\n      None\n    )\n    (ImportFrom s_fractions (list (alias &gcd:0 None)) i0)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant i3 None)\n              Mult\n              (BinOp\n                (Name &n:0 Load)\n                Sub\n                (Call\n                  (Name &gcd:0 Load)\n                  (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &x:0 Load)))\n                  nil\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Name &n:0 Load) None)\n    (Assign (list (Name &e:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None)\n    (While\n      (Compare (Name &e:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &x:0 Load) Mod (Name &e:0 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (BinOp\n                  (BinOp (Name &x:0 Load) FloorDiv (Name &e:0 Load))\n                  Mult\n                  (BinOp (Name &e:0 Load) Mult (Constant i2 None))\n                )\n                Sub\n                (Name &e:0 Load)\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (BinOp (BinOp (Name &x:0 Load) FloorDiv (Name &e:0 Load)) Mult (Name &e:0 Load))\n                Mult\n                (Constant i2 None)\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &e:0 Store))) Store))\n          (Tuple\n            (list (_starred_content (Name &e:0 Load)) (_starred_content (BinOp (Name &x:0 Load) Mod (Name &e:0 Load))))\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list2d:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (List (list (_starred_content (Name &c:1 Load))) Load) Mult (Name &b:1 Load))\n            (list\n              (comprehension\n                (Name &i:7 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &a:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list3d:0\n      (arguments\n        nil\n        (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (BinOp (List (list (_starred_content (Name &d:2 Load))) Load) Mult (Name &c:2 Load))\n              (list\n                (comprehension\n                  (Name &j:10 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &b:2 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            (list\n              (comprehension\n                (Name &i:8 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &a:2 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list4d:0\n      (arguments\n        nil\n        (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None) (arg &e:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (ListComp\n                (BinOp (List (list (_starred_content (Name &e:3 Load))) Load) Mult (Name &d:3 Load))\n                (list\n                  (comprehension\n                    (Name &j:13 Store)\n                    (Call (Name g_range Load) (list (_starred_content (Name &c:3 Load))) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              (list\n                (comprehension\n                  (Name &j:11 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &b:3 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            (list\n              (comprehension\n                (Name &i:9 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &a:3 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &x:4 None None) (arg &y:4 None None)) None nil nil None (list (Constant i1 None)))\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (UnaryOp USub (BinOp (UnaryOp USub (Name &x:4 Load)) FloorDiv (Name &y:4 Load)))))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &INT:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MAP:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LIST:0\n      (arguments nil (list (arg &N:5 None None)) None nil nil None (list (Constant None None)))\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &N:5 Load) (list Is) (list (Constant None None)))\n            (Call (Name g_list Load) (list (_starred_content (Call (Name &MAP:0 Load) nil nil))) nil)\n            (ListComp\n              (Call (Name &INT:0 Load) nil nil)\n              (list\n                (comprehension\n                  (Name &i:12 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &N:5 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &Yes:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &No:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &YES:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &NO:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i9 None))))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &INF:0 Store))\n      (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (Call (Name &MAP:0 Load) nil nil)\n      None\n    )\n    (FunctionDef\n      &rec:0\n      (arguments nil (list (arg &a:6 None None) (arg &b:6 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &b:6 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (UnaryOp USub (Name &a:6 Load))))\n          (/seq)\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:6 Store)) (_starred_content (Name &b:6 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list (_starred_content (Name &a:6 Load)) (_starred_content (Name &b:6 Load)))\n                  nil\n                )\n              )\n              (_starred_content\n                (Call\n                  (Name g_max Load)\n                  (list (_starred_content (Name &a:6 Load)) (_starred_content (Name &b:6 Load)))\n                  nil\n                )\n              )\n            )\n            Load\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (Name &a:6 Load) Mult (Constant i2 None))\n              Mult\n              (BinOp (Name &b:6 Load) FloorDiv (Name &a:6 Load))\n            )\n            Add\n            (Call\n              (Name &rec:0 Load)\n              (list\n                (_starred_content (Name &a:6 Load))\n                (_starred_content (BinOp (Name &b:6 Load) Mod (Name &a:6 Load)))\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Name &N:0 Load)\n              Add\n              (Call\n                (Name &rec:0 Load)\n                (list\n                  (_starred_content (Name &X:0 Load))\n                  (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))\n                )\n                nil\n              )\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &a:1 Load) (list Lt) (list (Name &b:1 Load)))\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store))\n              (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &a:1 Load))) (/seq))\n        (Assign (list (Name &c:1 Store)) (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)) None)\n        (Return\n          (Call (Name &gcd:0 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load))) nil)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (List (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list\n                (_starred_content\n                  (BinOp\n                    (Constant i3 None)\n                    Mult\n                    (BinOp\n                      (Name &N:0 Load)\n                      Sub\n                      (Call\n                        (Name &gcd:0 Load)\n                        (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &X:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &calc:0\n      (arguments nil (list (arg &N:1 None None) (arg &X:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (BinOp (Name &N:1 Load) Mod (Name &X:1 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (BinOp (Constant i3 None) Mult (Name &N:1 Load))))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp (Constant i3 None) Mult (Name &X:1 Load))\n                  Mult\n                  (Call (Name g_int Load) (list (_starred_content (BinOp (Name &N:1 Load) Div (Name &X:1 Load)))) nil)\n                )\n                Add\n                (Call\n                  (Name &calc:0 Load)\n                  (list\n                    (_starred_content (Name &X:1 Load))\n                    (_starred_content\n                      (BinOp\n                        (Name &N:1 Load)\n                        Sub\n                        (BinOp\n                          (Name &X:1 Load)\n                          Mult\n                          (Call\n                            (Name g_int Load)\n                            (list (_starred_content (BinOp (Name &N:1 Load) Div (Name &X:1 Load))))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_min Load)\n        (list (_starred_content (Name &X:0 Load)) (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load))))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (Call\n        (Name &calc:0 Load)\n        (list (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load))) (_starred_content (Name &X:0 Load)))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Constant s-WzM3LCAxMTVd None)\n              Mod\n              (Call (Name g_str Load) (list (_starred_content (Name &ans:0 Load))) nil)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &rec:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &mx:1 Store))\n          (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &mn:1 Store))\n          (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)\n          None\n        )\n        (If\n          (Compare (BinOp (Name &mx:1 Load) Mod (Name &mn:1 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp (Constant i2 None) Mult (BinOp (Name &mx:1 Load) FloorDiv (Name &mn:1 Load)))\n                  Sub\n                  (Constant i1 None)\n                )\n                Mult\n                (Name &mn:1 Load)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (Constant i2 None) Mult (Name &mn:1 Load))\n              Mult\n              (BinOp (Name &mx:1 Load) FloorDiv (Name &mn:1 Load))\n            )\n            Add\n            (Call\n              (Name &rec:0 Load)\n              (list\n                (_starred_content (Name &mn:1 Load))\n                (_starred_content (BinOp (Name &mx:1 Load) Mod (Name &mn:1 Load)))\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (Call\n                (Name &rec:0 Load)\n                (list\n                  (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))\n                  (_starred_content (Name &X:0 Load))\n                )\n                nil\n              )\n              Add\n              (Name &N:0 Load)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &INF:0 Store))\n      (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LI_:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) Sub (Constant i1 None))\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LF:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_float Load) (list (_starred_content (Name &x:4 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:4 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LS:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_split\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &II:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &SI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_input Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &x:1 Store))) Store))\n          (Call (Name &LI:0 Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &a:1 Store))) Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (List\n                  (list\n                    (_starred_content (Name &x:1 Load))\n                    (_starred_content (BinOp (Name &n:1 Load) Sub (Name &x:1 Load)))\n                  )\n                  Load\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (BinOp (Name &a:1 Load) Add (Name &b:1 Load)) None)\n        (While\n          (Name &b:1 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &q:1 Store)) (_starred_content (Name &mod:1 Store))) Store))\n              (Call\n                (Name g_divmod Load)\n                (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)))\n                nil\n              )\n              None\n            )\n            (AugAssign\n              (Name &ans:1 Store)\n              Add\n              (BinOp\n                (BinOp (BinOp (Constant i2 None) Mult (Name &q:1 Load)) Sub (UnaryOp Not (Name &mod:1 Load)))\n                Mult\n                (Name &b:1 Load)\n              )\n            )\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store))\n              (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &mod:1 Load))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &ans:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Constant s-WzIxNDYyLCAzNjc5Nl0= None))\n    (Assign\n      (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call\n              (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n              (list (_starred_content (Constant s-WzMyXQ== None)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Constant s-WzIxODM5LCAzODk4OF0= None))\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &l:1 Store))\n          (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &s:1 Store))\n          (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)\n          None\n        )\n        (If\n          (Compare (Name &s:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (UnaryOp USub (Name &l:1 Load))))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp (BinOp (Name &l:1 Load) FloorDiv (Name &s:1 Load)) Mult (Name &s:1 Load))\n                  Mult\n                  (Constant i2 None)\n                )\n                Add\n                (Call\n                  (Name &f:0 Load)\n                  (list\n                    (_starred_content (BinOp (Name &l:1 Load) Mod (Name &s:1 Load)))\n                    (_starred_content (Name &s:1 Load))\n                  )\n                  nil\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (Name &n:0 Load)\n        Add\n        (Call\n          (Name &f:0 Load)\n          (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &x:0 Load))) (_starred_content (Name &x:0 Load)))\n          nil\n        )\n      )\n      None\n    )\n    (Expr (Constant s-WzIwOTg2LCAyMTE0N10= None))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Name &N:0 Load) None)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content\n            (Call\n              (Name g_max Load)\n              (list\n                (_starred_content (Name &X:0 Load))\n                (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))\n              )\n              nil\n            )\n          )\n          (_starred_content\n            (Call\n              (Name g_min Load)\n              (list\n                (_starred_content (Name &X:0 Load))\n                (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))\n              )\n              nil\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (While\n      (Name &b:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &q:0 Store)) (_starred_content (Name &r:0 Store))) Store))\n          (Call (Name g_divmod Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n          None\n        )\n        (If\n          (Compare (Name &r:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (Name &b:0 Load)\n                Mult\n                (BinOp (BinOp (Constant i2 None) Mult (Name &q:0 Load)) Sub (Constant i1 None))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp (BinOp (Name &b:0 Load) Mult (Constant i2 None)) Mult (Name &q:0 Load))\n            )\n          )\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Tuple\n            (list\n              (_starred_content\n                (Call\n                  (Name g_max Load)\n                  (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &r:0 Load)))\n                  nil\n                )\n              )\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &r:0 Load)))\n                  nil\n                )\n              )\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name %2 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Expr (Constant s-WzY2LCAzMiwgNDUsIDMyLCA3NywgMTIxLCAxMTUsIDExNiwgMTAxLCAxMTQsIDEwNSwgMTExLCAxMTcsIDExNSwgMzIsIDc2LCAxMDUsIDEwMywgMTA0LCAxMTZd None)) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store)) (GeneratorExp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (FunctionDef &MysteriousLight:0 (arguments nil (list (arg &tmp:1 None None) (arg &rem:1 None None)) None nil nil None nil) (/seq (While (Name &rem:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &tmp:1 Store)) (_starred_content (Name &rem:1 Store))) Store)) (Tuple (list (_starred_content (Name &rem:1 Load)) (_starred_content (BinOp (Name &tmp:1 Load) Mod (Name &rem:1 Load)))) Load) None)) (/seq)) (Return (Name &tmp:1 Load))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i3 None) Mult (BinOp (Name &N:0 Load) Sub (Call (Name &MysteriousLight:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &X:0 Load))) nil))))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &ai:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name &ai:0 Load) nil nil) None) (ImportFrom s_fractions (list (alias &gcd:0 None)) i0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant i3 None) Mult (BinOp (Name &n:0 Load) Sub (Call (Name &gcd:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &x:0 Load))) nil))))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &e:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (While (Compare (Name &e:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &x:0 Load) Mod (Name &e:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (BinOp (Name &x:0 Load) FloorDiv (Name &e:0 Load)) Mult (BinOp (Name &e:0 Load) Mult (Constant i2 None))) Sub (Name &e:0 Load)))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (BinOp (Name &x:0 Load) FloorDiv (Name &e:0 Load)) Mult (Name &e:0 Load)) Mult (Constant i2 None))))) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &e:0 Store))) Store)) (Tuple (list (_starred_content (Name &e:0 Load)) (_starred_content (BinOp (Name &x:0 Load) Mod (Name &e:0 Load)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &list2d:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Return (ListComp (BinOp (List (list (_starred_content (Name &c:1 Load))) Load) Mult (Name &b:1 Load)) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &a:1 Load))) nil) nil i0))))) nil None None) (FunctionDef &list3d:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (BinOp (List (list (_starred_content (Name &d:2 Load))) Load) Mult (Name &c:2 Load)) (list (comprehension (Name &j:10 Store) (Call (Name g_range Load) (list (_starred_content (Name &b:2 Load))) nil) nil i0))) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (_starred_content (Name &a:2 Load))) nil) nil i0))))) nil None None) (FunctionDef &list4d:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None) (arg &e:3 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (ListComp (BinOp (List (list (_starred_content (Name &e:3 Load))) Load) Mult (Name &d:3 Load)) (list (comprehension (Name &j:13 Store) (Call (Name g_range Load) (list (_starred_content (Name &c:3 Load))) nil) nil i0))) (list (comprehension (Name &j:11 Store) (Call (Name g_range Load) (list (_starred_content (Name &b:3 Load))) nil) nil i0))) (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (_starred_content (Name &a:3 Load))) nil) nil i0))))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &x:4 None None) (arg &y:4 None None)) None nil nil None (list (Constant i1 None))) (/seq (Return (Call (Name g_int Load) (list (_starred_content (UnaryOp USub (BinOp (UnaryOp USub (Name &x:4 Load)) FloorDiv (Name &y:4 Load))))) nil))) nil None None) (FunctionDef &INT:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &MAP:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &LIST:0 (arguments nil (list (arg &N:5 None None)) None nil nil None (list (Constant None None))) (/seq (Return (IfExp (Compare (Name &N:5 Load) (list Is) (list (Constant None None))) (Call (Name g_list Load) (list (_starred_content (Call (Name &MAP:0 Load) nil nil))) nil) (ListComp (Call (Name &INT:0 Load) nil nil) (list (comprehension (Name &i:12 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:5 Load))) nil) nil i0)))))) nil None None) (FunctionDef &Yes:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) nil None None) (FunctionDef &No:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))) nil None None) (FunctionDef &YES:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil None None) (FunctionDef &NO:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) nil None None) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i9 None)))) nil)) (/splice (fn_1 &INF:0 &MOD:0)) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store)) (Call (Name &MAP:0 Load) nil nil) None) (FunctionDef &rec:0 (arguments nil (list (arg &a:6 None None) (arg &b:6 None None)) None nil nil None nil) (/seq (If (Compare (Name &b:6 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (UnaryOp USub (Name &a:6 Load)))) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &a:6 Store)) (_starred_content (Name &b:6 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &a:6 Load)) (_starred_content (Name &b:6 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &a:6 Load)) (_starred_content (Name &b:6 Load))) nil))) Load) None) (Return (BinOp (BinOp (BinOp (Name &a:6 Load) Mult (Constant i2 None)) Mult (BinOp (Name &b:6 Load) FloorDiv (Name &a:6 Load))) Add (Call (Name &rec:0 Load) (list (_starred_content (Name &a:6 Load)) (_starred_content (BinOp (Name &b:6 Load) Mod (Name &a:6 Load)))) nil)))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Call (Name &rec:0 Load) (list (_starred_content (Name &X:0 Load)) (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))) nil)))) nil))) nil)",
      "(Module (/seq (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load) None)) (/seq)) (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &a:1 Load))) (/seq)) (Assign (list (Name &c:1 Store)) (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)) None) (Return (Call (Name &gcd:0 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load))) nil))) nil None None) (Assign (list (List (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Constant i3 None) Mult (BinOp (Name &N:0 Load) Sub (Call (Name &gcd:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &X:0 Load))) nil))))) nil))) nil))) nil)",
      "(Module (/seq (FunctionDef &calc:0 (arguments nil (list (arg &N:1 None None) (arg &X:1 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (Name &N:1 Load) Mod (Name &X:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (Constant i3 None) Mult (Name &N:1 Load)))) (/seq (Return (BinOp (BinOp (BinOp (Constant i3 None) Mult (Name &X:1 Load)) Mult (Call (Name g_int Load) (list (_starred_content (BinOp (Name &N:1 Load) Div (Name &X:1 Load)))) nil)) Add (Call (Name &calc:0 Load) (list (_starred_content (Name &X:1 Load)) (_starred_content (BinOp (Name &N:1 Load) Sub (BinOp (Name &X:1 Load) Mult (Call (Name g_int Load) (list (_starred_content (BinOp (Name &N:1 Load) Div (Name &X:1 Load)))) nil))))) nil)))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &X:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &X:0 Load)) (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))) nil) None) (Assign (list (Name &ans:0 Store)) (Call (Name &calc:0 Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load))) (_starred_content (Name &X:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCAxMTVd None) Mod (Call (Name g_str Load) (list (_starred_content (Name &ans:0 Load))) nil)))) nil))) nil)",
      "(Module (/seq (FunctionDef &rec:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &mx:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (Assign (list (Name &mn:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (If (Compare (BinOp (Name &mx:1 Load) Mod (Name &mn:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (BinOp (Constant i2 None) Mult (BinOp (Name &mx:1 Load) FloorDiv (Name &mn:1 Load))) Sub (Constant i1 None)) Mult (Name &mn:1 Load)))) (/seq)) (Return (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name &mn:1 Load)) Mult (BinOp (Name &mx:1 Load) FloorDiv (Name &mn:1 Load))) Add (Call (Name &rec:0 Load) (list (_starred_content (Name &mn:1 Load)) (_starred_content (BinOp (Name &mx:1 Load) Mod (Name &mn:1 Load)))) nil)))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name &rec:0 Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load))) (_starred_content (Name &X:0 Load))) nil) Add (Name &N:0 Load)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (/splice (fn_1 &INF:0 &MOD:0)) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LI_:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) Sub (Constant i1 None)) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LF:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_float Load) (list (_starred_content (Name &x:4 Load))) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LS:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil None None) (FunctionDef &II:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &SI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_input Load) nil nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &x:1 Store))) Store)) (Call (Name &LI:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &b:1 Store)) (_starred_content (Name &a:1 Store))) Store)) (Call (Name g_sorted Load) (list (_starred_content (List (list (_starred_content (Name &x:1 Load)) (_starred_content (BinOp (Name &n:1 Load) Sub (Name &x:1 Load)))) Load))) nil) None) (Assign (list (Name &ans:1 Store)) (BinOp (Name &a:1 Load) Add (Name &b:1 Load)) None) (While (Name &b:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &q:1 Store)) (_starred_content (Name &mod:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (AugAssign (Name &ans:1 Store) Add (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name &q:1 Load)) Sub (UnaryOp Not (Name &mod:1 Load))) Mult (Name &b:1 Load))) (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &mod:1 Load))) Load) None)) (/seq)) (Return (Name &ans:1 Load))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzIxNDYyLCAzNjc5Nl0= None)) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))) None) (Expr (Constant s-WzIxODM5LCAzODk4OF0= None)) (FunctionDef &f:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (Assign (list (Name &s:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (If (Compare (Name &s:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (UnaryOp USub (Name &l:1 Load)))) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Name &l:1 Load) FloorDiv (Name &s:1 Load)) Mult (Name &s:1 Load)) Mult (Constant i2 None)) Add (Call (Name &f:0 Load) (list (_starred_content (BinOp (Name &l:1 Load) Mod (Name &s:1 Load))) (_starred_content (Name &s:1 Load))) nil)))))) nil None None) (Assign (list (Name &d:0 Store)) (BinOp (Name &n:0 Load) Add (Call (Name &f:0 Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Name &x:0 Load))) (_starred_content (Name &x:0 Load))) nil)) None) (Expr (Constant s-WzIwOTg2LCAyMTE0N10= None)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &X:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Name &N:0 Load) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &X:0 Load)) (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))) nil)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &X:0 Load)) (_starred_content (BinOp (Name &N:0 Load) Sub (Name &X:0 Load)))) nil))) Load) None) (While (Name &b:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &q:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil) None) (If (Compare (Name &r:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Name &b:0 Load) Mult (BinOp (BinOp (Constant i2 None) Mult (Name &q:0 Load)) Sub (Constant i1 None))))) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &b:0 Load) Mult (Constant i2 None)) Mult (Name &q:0 Load))))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &r:0 Load))) nil)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &r:0 Load))) nil))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_operator None)))\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &target:0 Store))\n          (ListComp\n            (List\n              (list\n                (_starred_starred\n                  (Starred\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Name g_int Load))\n                        (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                      )\n                      nil\n                    )\n                    Load\n                  )\n                )\n              )\n              Load\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (BinOp\n                  (List (list (_starred_content (Constant i0 None))) Load)\n                  Mult\n                  (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store))\n          (Call (Name g_min Load) (list (_starred_content (Name &target:0 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (SetComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (BinOp\n                  (List (list (_starred_content (Constant i0 None))) Load)\n                  Mult\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &m:0 Store))\n          (BinOp\n            (BinOp\n              (Subscript\n                (Call (Name g_max Load) (list (_starred_content (Name &b:0 Load))) nil)\n                (_slice_content (Constant i0 None))\n                Load\n              )\n              Sub\n              (Subscript\n                (Call (Name g_max Load) (list (_starred_content (Name &target:0 Load))) nil)\n                (_slice_content (Constant i0 None))\n                Load\n              )\n            )\n            Add\n            (Name &s:0 Load)\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (If (Compare (Name &x:0 Load) (list Gt) (list (Name &m:0 Load))) (/seq Continue) (/seq))\n            (For\n              (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n              (Name &target:0 Load)\n              (/seq\n                (If\n                  (Compare\n                    (Tuple\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &u:0 Load)) Sub (Name &s:0 Load)))\n                        (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &v:0 Load)) Sub (Name &t:0 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:0 Load))\n                  )\n                  (/seq Break)\n                  (/seq)\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (BinOp (Name &x:0 Load) Sub (Name &s:0 Load)))\n                      (_starred_content (BinOp (Name &y:0 Load) Sub (Name &t:0 Load)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &e:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &a:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (List\n                    (list\n                      (_starred_starred\n                        (Starred\n                          (Call\n                            (Name g_map Load)\n                            (list\n                              (_starred_content (Name g_int Load))\n                              (_starred_content\n                                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                              )\n                            )\n                            nil\n                          )\n                          Load\n                        )\n                      )\n                    )\n                    Load\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:3 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:1 Load))) nil))\n                        )\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:1 Store)) (_starred_content (Name &t:1 Store))) Store))\n          (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &b:1 Store))\n          (SetComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content\n                      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)\n          (Name &b:1 Load)\n          (/seq\n            (For\n              (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store))) Store)\n              (Subscript (Name &a:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n              (/seq\n                (If\n                  (Compare\n                    (Tuple\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &x:1 Load) Add (Name &u:1 Load)) Sub (Name &s:1 Load)))\n                        (_starred_content (BinOp (BinOp (Name &y:1 Load) Add (Name &v:1 Load)) Sub (Name &t:1 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:1 Load))\n                  )\n                  (/seq Break)\n                  (/seq)\n                )\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (BinOp (Name &x:1 Load) Sub (Name &s:1 Load)))\n                      (_starred_content (BinOp (Name &y:1 Load) Sub (Name &t:1 Load)))\n                    )\n                    nil\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Name &e:0 Load))) nil)))\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:1 Store)\n                      (BinOp\n                        (List (list (_starred_content (Constant i0 None))) Load)\n                        Mult\n                        (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                  (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:2 Store)\n                      (BinOp\n                        (List (list (_starred_content (Constant i0 None))) Load)\n                        Mult\n                        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n                  (Subscript (Name &x:4 Load) (_slice_content (Constant i0 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Name &s:0 Load)\n                      Sub\n                      (Subscript\n                        (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                    )\n                  )\n                  (_starred_content\n                    (BinOp\n                      (Name &t:0 Load)\n                      Sub\n                      (Subscript\n                        (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (UnaryOp\n                Not\n                (BinOp\n                  (Call\n                    (Name g_set Load)\n                    (list\n                      (_starred_content\n                        (GeneratorExp\n                          (Tuple\n                            (list\n                              (_starred_content (BinOp (Name &u:5 Load) Add (Name &x:0 Load)))\n                              (_starred_content (BinOp (Name &v:5 Load) Add (Name &y:0 Load)))\n                            )\n                            Load\n                          )\n                          (list\n                            (comprehension\n                              (Tuple\n                                (list (_starred_content (Name &u:5 Store)) (_starred_content (Name &v:5 Store)))\n                                Store\n                              )\n                              (Name &a:0 Load)\n                              nil\n                              i0\n                            )\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Sub\n                  (Call (Name g_set Load) (list (_starred_content (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load)))\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &check:0\n      (arguments nil (list (arg &dx:1 None None) (arg &dy:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &f:1 Store)) (Constant True None) None)\n        (For\n          (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)\n          (Name &goal:0 Load)\n          (/seq\n            (If\n              (Compare\n                (Tuple\n                  (list\n                    (_starred_content (BinOp (Name &x:1 Load) Add (Name &dx:1 Load)))\n                    (_starred_content (BinOp (Name &y:1 Load) Add (Name &dy:1 Load)))\n                  )\n                  Load\n                )\n                (list NotIn)\n                (list (Name &tbl:0 Load))\n              )\n              (/seq (Assign (list (Name &f:1 Store)) (Constant False None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &f:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &m:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &m:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &goal:0 Store))\n                (_starred_content (Name &star:0 Store))\n                (_starred_content (Name &tbl:0 Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (List nil Load))\n              (_starred_content (List nil Load))\n              (_starred_content (Dict nil nil))\n            )\n            Load\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &goal:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_tuple Load)\n                      (list\n                        (_starred_content\n                          (Call\n                            (Name g_map Load)\n                            (list\n                              (_starred_content (Name g_int Load))\n                              (_starred_content\n                                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &star:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Name &tbl:0 Load)\n                  (_slice_tuple (Tuple (list (_slice_content (Name &x:0 Load)) (_slice_content (Name &y:0 Load))) Load))\n                  Store\n                )\n              )\n              (Constant i1 None)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)\n          (Name &star:0 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &dx:0 Store)) (_starred_content (Name &dy:0 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Name &x:0 Load)\n                      Sub\n                      (Subscript\n                        (Subscript (Name &goal:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i0 None))\n                        Load\n                      )\n                    )\n                  )\n                  (_starred_content\n                    (BinOp\n                      (Name &y:0 Load)\n                      Sub\n                      (Subscript\n                        (Subscript (Name &goal:0 Load) (_slice_content (Constant i0 None)) Load)\n                        (_slice_content (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Call\n                (Name &check:0 Load)\n                (list (_starred_content (Name &dx:0 Load)) (_starred_content (Name &dy:0 Load)))\n                nil\n              )\n              (/seq Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &dx:0 Load)) (_starred_content (Name &dy:0 Load)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &e:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &a:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:3 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:1 Load))) nil))\n                        )\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:1 Store)) (_starred_content (Name &t:1 Store))) Store))\n          (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &b:1 Store))\n          (SetComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content\n                      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)\n          (Name &b:1 Load)\n          (/seq\n            (For\n              (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store))) Store)\n              (Subscript (Name &a:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n              (/seq\n                (If\n                  (Compare\n                    (Tuple\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &x:1 Load) Add (Name &u:1 Load)) Sub (Name &s:1 Load)))\n                        (_starred_content (BinOp (BinOp (Name &y:1 Load) Add (Name &v:1 Load)) Sub (Name &t:1 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:1 Load))\n                  )\n                  (/seq Break)\n                  (/seq)\n                )\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (BinOp (Name &x:1 Load) Sub (Name &s:1 Load)))\n                      (_starred_content (BinOp (Name &y:1 Load) Sub (Name &t:1 Load)))\n                    )\n                    nil\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Name &e:0 Load))) nil)))\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:2 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil))\n                        )\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store))\n          (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (SetComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content\n                      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n            (For\n              (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n              (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n              (/seq\n                (If\n                  (Compare\n                    (Tuple\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &u:0 Load)) Sub (Name &s:0 Load)))\n                        (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &v:0 Load)) Sub (Name &t:0 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:0 Load))\n                  )\n                  (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (BinOp (Name &x:0 Load) Sub (Name &s:0 Load)))\n                      (_starred_content (BinOp (Name &y:0 Load) Sub (Name &t:0 Load)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:2 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil))\n                        )\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store))\n          (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (SetComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content\n                      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n            (For\n              (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n              (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n              (/seq\n                (If\n                  (Compare\n                    (Tuple\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &u:0 Load)) Sub (Name &s:0 Load)))\n                        (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &v:0 Load)) Sub (Name &t:0 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:0 Load))\n                  )\n                  (/seq (Assign (list (Name &f:0 Store)) (Constant i0 None) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Name &f:0 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (BinOp (Name &x:0 Load) Sub (Name &s:0 Load)))\n                      (_starred_content (BinOp (Name &y:0 Load) Sub (Name &t:0 Load)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (ListComp\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (BinOp\n                  (List (list (_starred_content (Constant i0 None))) Load)\n                  Mult\n                  (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (ListComp\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:2 Store)\n                (BinOp\n                  (List (list (_starred_content (Constant i0 None))) Load)\n                  Mult\n                  (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              None\n            )\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (BinOp (Name &s:0 Load) Sub (Name &u:0 Load)))\n                  (_starred_content (BinOp (Name &t:0 Load) Sub (Name &v:0 Load)))\n                )\n                Load\n              )\n              None\n            )\n            (For\n              (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n              (Name &a:0 Load)\n              (/seq\n                (If\n                  (Compare\n                    (List\n                      (list\n                        (_starred_content (BinOp (Name &u:0 Load) Add (Name &x:0 Load)))\n                        (_starred_content (BinOp (Name &v:0 Load) Add (Name &y:0 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:0 Load))\n                  )\n                  (/seq Break)\n                  (/seq)\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load)))\n                    nil\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:2 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil))\n                        )\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store))\n          (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (ListComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content\n                      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n            (For\n              (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n              (Subscript (Name &a:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n              (/seq\n                (If\n                  (Compare\n                    (Tuple\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &u:0 Load)) Sub (Name &s:0 Load)))\n                        (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &v:0 Load)) Sub (Name &t:0 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:0 Load))\n                  )\n                  (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (BinOp (Name &x:0 Load) Sub (Name &s:0 Load)))\n                      (_starred_content (BinOp (Name &y:0 Load) Sub (Name &t:0 Load)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &e:0 Store)\n      (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:1 Store)\n                      (BinOp\n                        (List (list (_starred_content (Constant i0 None))) Load)\n                        Mult\n                        (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                  (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:2 Store)\n                      (BinOp\n                        (List (list (_starred_content (Constant i0 None))) Load)\n                        Mult\n                        (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n                  (Subscript (Name &x:4 Load) (_slice_content (Constant i0 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store)\n          (Name &b:0 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              None\n            )\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (BinOp (Name &s:0 Load) Sub (Name &u:0 Load)))\n                  (_starred_content (BinOp (Name &t:0 Load) Sub (Name &v:0 Load)))\n                )\n                Load\n              )\n              None\n            )\n            (For\n              (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)\n              (Name &a:0 Load)\n              (/seq\n                (If\n                  (Compare\n                    (List\n                      (list\n                        (_starred_content (BinOp (Name &u:0 Load) Add (Name &x:0 Load)))\n                        (_starred_content (BinOp (Name &v:0 Load) Add (Name &y:0 Load)))\n                      )\n                      Load\n                    )\n                    (list NotIn)\n                    (list (Name &b:0 Load))\n                  )\n                  (/seq Break)\n                  (/seq)\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load)))\n                    nil\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (For (Name %1 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (GeneratorExp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name %1 Load))) nil))) nil) nil i0))))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name %6 Store)) #0 None) (For (Tuple (list (_starred_content (Name %11 Store)) (_starred_content (Name %9 Store))) Store) (Name %6 Load) (/seq (Assign (list (Name %7 Store)) #1 None) (For (Tuple (list (_starred_content (Name %10 Store)) (_starred_content (Name %8 Store))) Store) (Subscript (Name %3 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Tuple (list (_starred_content (BinOp (BinOp (Name %11 Load) Add (Name %10 Load)) Sub (Name %5 Load))) (_starred_content (BinOp (BinOp (Name %9 Load) Add (Name %8 Load)) Sub (Name %4 Load)))) Load) (list NotIn) (list (Name %6 Load))) (/seq (Assign (list (Name %7 Store)) #2 None) Break) (/seq))) (/seq) None) (If #3 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name %11 Load) Sub (Name %5 Load))) (_starred_content (BinOp (Name %9 Load) Sub (Name %4 Load)))) nil)) Break) (/seq))) (/seq) None)) (/seq) None))",
        "sym_arity": 11,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 4,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_operator None))) (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Assign (list (Name &target:0 Store)) (ListComp (List (list (_starred_starred (Starred (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) Load))) Load) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store)) (Call (Name g_min Load) (list (_starred_content (Name &target:0 Load))) nil) None) (Assign (list (Name &b:0 Store)) (SetComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) nil i0))) None) (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Subscript (Call (Name g_max Load) (list (_starred_content (Name &b:0 Load))) nil) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Call (Name g_max Load) (list (_starred_content (Name &target:0 Load))) nil) (_slice_content (Constant i0 None)) Load)) Add (Name &s:0 Load)) None) (For (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store) (Name &b:0 Load) (/seq (If (Compare (Name &x:0 Load) (list Gt) (list (Name &m:0 Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store) (Name &target:0 Load) (/seq (If (Compare (Tuple (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &u:0 Load)) Sub (Name &s:0 Load))) (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &v:0 Load)) Sub (Name &t:0 Load)))) Load) (list NotIn) (list (Name &b:0 Load))) (/seq Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &x:0 Load) Sub (Name &s:0 Load))) (_starred_content (BinOp (Name &y:0 Load) Sub (Name &t:0 Load)))) nil)) Break) None)) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &e:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (_starred_content (GeneratorExp (List (list (_starred_starred (Starred (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) Load))) Load) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:1 Load))) nil))) nil) nil i0))))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &s:1 Store)) (_starred_content (Name &t:1 Store))) Store)) (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &b:1 Store)) (SetComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store) (Name &b:1 Load) (/seq (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Subscript (Name &a:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Tuple (list (_starred_content (BinOp (BinOp (Name &x:1 Load) Add (Name &u:1 Load)) Sub (Name &s:1 Load))) (_starred_content (BinOp (BinOp (Name &y:1 Load) Add (Name &v:1 Load)) Sub (Name &t:1 Load)))) Load) (list NotIn) (list (Name &b:1 Load))) (/seq Break) (/seq))) (/seq (Return (Call (Name g_print Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Name &s:1 Load))) (_starred_content (BinOp (Name &y:1 Load) Sub (Name &t:1 Load)))) nil))) None)) (/seq) None)) nil None None) (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Name &e:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)) nil i0))))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load))))) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) nil i0))))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Subscript (Name &x:4 Load) (_slice_content (Constant i0 None)) Load))))) None) (For (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store) (Name &b:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &s:0 Load) Sub (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Name &t:0 Load) Sub (Subscript (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load)))) Load) None) (If (UnaryOp Not (BinOp (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Tuple (list (_starred_content (BinOp (Name &u:5 Load) Add (Name &x:0 Load))) (_starred_content (BinOp (Name &v:5 Load) Add (Name &y:0 Load)))) Load) (list (comprehension (Tuple (list (_starred_content (Name &u:5 Store)) (_starred_content (Name &v:5 Store))) Store) (Name &a:0 Load) nil i0))))) nil) Sub (Call (Name g_set Load) (list (_starred_content (Name &b:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &check:0 (arguments nil (list (arg &dx:1 None None) (arg &dy:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f:1 Store)) (Constant True None) None) (For (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store) (Name &goal:0 Load) (/seq (If (Compare (Tuple (list (_starred_content (BinOp (Name &x:1 Load) Add (Name &dx:1 Load))) (_starred_content (BinOp (Name &y:1 Load) Add (Name &dy:1 Load)))) Load) (list NotIn) (list (Name &tbl:0 Load))) (/seq (Assign (list (Name &f:1 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (Return (Name &f:1 Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &m:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &goal:0 Store)) (_starred_content (Name &star:0 Store)) (_starred_content (Name &tbl:0 Store))) Store)) (Tuple (list (_starred_content (List nil Load)) (_starred_content (List nil Load)) (_starred_content (Dict nil nil))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &goal:0 Load) s_append Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &star:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load))) nil)) (Assign (list (Subscript (Name &tbl:0 Load) (_slice_tuple (Tuple (list (_slice_content (Name &x:0 Load)) (_slice_content (Name &y:0 Load))) Load)) Store)) (Constant i1 None) None)) (/seq) None) (For (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store) (Name &star:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &dx:0 Store)) (_starred_content (Name &dy:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &x:0 Load) Sub (Subscript (Subscript (Name &goal:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Name &y:0 Load) Sub (Subscript (Subscript (Name &goal:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load)))) Load) None) (If (Call (Name &check:0 Load) (list (_starred_content (Name &dx:0 Load)) (_starred_content (Name &dy:0 Load))) nil) (/seq Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &dx:0 Load)) (_starred_content (Name &dy:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &e:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (_starred_content (GeneratorExp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &e:1 Load))) nil))) nil) nil i0))))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &s:1 Store)) (_starred_content (Name &t:1 Store))) Store)) (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &b:1 Store)) (SetComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store) (Name &b:1 Load) (/seq (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Subscript (Name &a:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Tuple (list (_starred_content (BinOp (BinOp (Name &x:1 Load) Add (Name &u:1 Load)) Sub (Name &s:1 Load))) (_starred_content (BinOp (BinOp (Name &y:1 Load) Add (Name &v:1 Load)) Sub (Name &t:1 Load)))) Load) (list NotIn) (list (Name &b:1 Load))) (/seq Break) (/seq))) (/seq (Return (Call (Name g_print Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Name &s:1 Load))) (_starred_content (BinOp (Name &y:1 Load) Sub (Name &t:1 Load)))) nil))) None)) (/seq) None)) nil None None) (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Expr (Call (Name &f:0 Load) (list (_starred_content (Name &e:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (fn_1 (SetComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) (Constant True None) (Constant False None) (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None))) &e:0 &_:2 &a:0 &t:0 &s:0 &b:0 &flag:0 &v:0 &y:0 &u:0 &x:0) nil)",
      "(Module (fn_1 (SetComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) (Constant i1 None) (Constant i0 None) (Name &f:0 Load) &e:0 &_:2 &a:0 &t:0 &s:0 &b:0 &f:0 &v:0 &y:0 &u:0 &x:0) nil)",
      "(Module (/seq (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) nil i0))) None) (For (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store) (Name &b:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &s:0 Load) Sub (Name &u:0 Load))) (_starred_content (BinOp (Name &t:0 Load) Sub (Name &v:0 Load)))) Load) None) (For (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store) (Name &a:0 Load) (/seq (If (Compare (List (list (_starred_content (BinOp (Name &u:0 Load) Add (Name &x:0 Load))) (_starred_content (BinOp (Name &v:0 Load) Add (Name &y:0 Load)))) Load) (list NotIn) (list (Name &b:0 Load))) (/seq Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil))) None)) (/seq) None)) (/seq) None)) nil)",
      "(Module (fn_1 (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) nil i0))) (Constant True None) (Constant False None) (Compare (Name &flag:0 Load) (list Eq) (list (Constant True None))) &e:0 &_:2 &a:0 &t:0 &s:0 &b:0 &flag:0 &v:0 &y:0 &u:0 &x:0) nil)",
      "(Module (/seq (For (Name &e:0 Store) (Call (Name g_iter Load) (list (_starred_content (Name g_input Load)) (_starred_content (Constant s_0 None))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Name &e:0 Load))) nil)) nil i0))))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load))))) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:2 Store) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) nil i0))))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Subscript (Name &x:4 Load) (_slice_content (Constant i0 None)) Load))))) None) (For (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &t:0 Store))) Store) (Name &b:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &s:0 Load) Sub (Name &u:0 Load))) (_starred_content (BinOp (Name &t:0 Load) Sub (Name &v:0 Load)))) Load) None) (For (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store) (Name &a:0 Load) (/seq (If (Compare (List (list (_starred_content (BinOp (Name &u:0 Load) Add (Name &x:0 Load))) (_starred_content (BinOp (Name &v:0 Load) Add (Name &y:0 Load)))) Load) (list NotIn) (list (Name &b:0 Load))) (/seq Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil))) None)) (/seq) None)) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &z:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:1 Store)\n                      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &total:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n          (Name &z:0 Load)\n          (/seq\n            (AugAssign (Name &total:0 Store) Add (Name &a:0 Load))\n            (If\n              (Compare (Name &total:0 Load) (list Gt) (list (Name &b:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break)\n              (/seq)\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_exit None)) i0)\n    (ImportFrom s_functools (list (alias g_reduce None)) i0)\n    (ImportFrom s_operator (list (alias g_add None)) i0)\n    (FunctionDef\n      &f:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (UnaryOp Not (Name &n:0 Load)) (/seq (Expr (Call (Name g_exit Load) nil nil))) (/seq))\n        (Assign (list (Name &islands:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &islands:0 Load) s_append Load)\n                (list (_starred_content (Call (Name &f:0 Load) nil nil)))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &islands:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load)\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &weight:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &weight:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &islands:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content (Constant i0 None))\n                Load\n              )\n            )\n            (If\n              (Compare\n                (Name &weight:0 Load)\n                (list Gt)\n                (list\n                  (Subscript\n                    (Subscript (Name &islands:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                    (_slice_content (Constant i1 None))\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n                (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &a:0 Store))\n          (ListComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content\n                        (Call\n                          (Name g_reversed Load)\n                          (list\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &_:1 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n        (Assign (list (Name &w:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)\n          (Name &a:0 Load)\n          (/seq\n            (AugAssign (Name &w:0 Store) Add (Name &y:0 Load))\n            (If\n              (Compare (Name &x:0 Load) (list Lt) (list (Name &w:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break)\n              (/seq)\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &z:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:1 Store)\n                      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &cnt:0 Store) (Name &total:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n          (Name &z:0 Load)\n          (/seq\n            (AugAssign (Name &total:0 Store) Add (Name &a:0 Load))\n            (If (Compare (Name &total:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq Break) (/seq))\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (IfExp\n                  (Compare (Name &cnt:0 Load) (list Eq) (list (Name &n:0 Load)))\n                  (Constant s_Yes None)\n                  (Constant s_No None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &lst:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_list Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:1 Store)\n                      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &acc:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &w:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n          (Name &lst:0 Load)\n          (/seq\n            (AugAssign (Name &acc:0 Store) Add (Name &w:0 Load))\n            (If\n              (Compare (Name &acc:0 Load) (list Gt) (list (Name &b:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break)\n              (/seq)\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &sky:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq (Return (Subscript (Name &x:1 Load) (_slice_content (Constant i1 None)) Load)))\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &arr:0 Store))\n          (ListComp\n            (List nil Load)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &sumh:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (_starred_content (Name g_int Load))\n                        (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil (list (keyword s_key (Name &sky:0 Load)))))\n        (Assign (list (Name &res:0 Store)) (Constant True None) None)\n        (For\n          (Name &e:0 Store)\n          (Name &arr:0 Load)\n          (/seq\n            (AugAssign (Name &sumh:0 Store) Add (Subscript (Name &e:0 Load) (_slice_content (Constant i0 None)) Load))\n            (If\n              (Compare\n                (Name &sumh:0 Load)\n                (list Gt)\n                (list (Subscript (Name &e:0 Load) (_slice_content (Constant i1 None)) Load))\n              )\n              (/seq (Assign (list (Name &res:0 Store)) (Constant False None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &res:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &P:0 Store))\n          (ListComp\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &P:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                  (Tuple\n                    (list\n                      (_starred_content\n                        (UnaryOp USub (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load))\n                      )\n                      (_starred_content (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load))\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Name &su:0 Store))\n          (Call\n            (Name g_sum Load)\n            (list\n              (_starred_content\n                (GeneratorExp\n                  (Name &w:2 Load)\n                  (list\n                    (comprehension\n                      (Tuple (list (_starred_content (Name &w:2 Store)) (_starred_content (Name &s:2 Store))) Store)\n                      (Name &P:0 Load)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &w:0 Store)) (_starred_content (Name &s:0 Store))) Store)\n          (Name &P:0 Load)\n          (/seq\n            (If\n              (Compare (Name &s:0 Load) (list Lt) (list (Name &su:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break)\n              (/seq)\n            )\n            (AugAssign (Name &su:0 Store) Sub (Name &w:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          None\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &z:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (_starred_content\n                (ListComp\n                  (Call\n                    (Name g_tuple Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list\n                            (_starred_content (Name g_int Load))\n                            (_starred_content\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  (list\n                    (comprehension\n                      (Name &_:1 Store)\n                      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &cnt:0 Store) (Name &total:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n          (Name &z:0 Load)\n          (/seq\n            (AugAssign (Name &total:0 Store) Add (Name &a:0 Load))\n            (If\n              (Compare (Name &total:0 Load) (list Gt) (list (Name &b:0 Load)))\n              (/seq (Assign (list (Name &cnt:0 Store)) (Constant i1 None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (IfExp (Name &cnt:0 Load) (Constant s_No None) (Constant s_Yes None))))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &bridges:0 Store)) (List nil Load) None)\n        (For\n          (Name &_:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &bridges:0 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Tuple (list (_starred_content (Name &t:0 Load)) (_starred_content (Name &b:0 Load))) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &bridges:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                  (Subscript (Name &x:1 Load) (_slice_content (Constant i1 None)) Load)\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n        (Assign (list (Name &sumt:0 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &b:0 Store))) Store)\n          (Name &bridges:0 Load)\n          (/seq\n            (AugAssign (Name &sumt:0 Store) Add (Name &t:0 Load))\n            (If\n              (Compare (Name &sumt:0 Load) (list Gt) (list (Name &b:0 Load)))\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &flag:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign\n          (list (Name &tbl:0 Store))\n          (ListComp\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &tbl:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Tuple\n                    (list\n                      (_starred_content (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load))\n                      (_starred_content (Subscript (Name &x:2 Load) (_slice_content (Constant i0 None)) Load))\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &f:0 Store))) Store))\n          (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant True None))) Load)\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &v:0 Store)) (_starred_content (Name &w:0 Store))) Store)\n          (Name &tbl:0 Load)\n          (/seq\n            (AugAssign (Name &s:0 Store) Add (Name &v:0 Load))\n            (If\n              (Compare (Name &s:0 Load) (list Gt) (list (Name &w:0 Load)))\n              (/seq (Assign (list (Name &f:0 Store)) (Constant False None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (IfExp (Name &f:0 Load) (Constant s_Yes None) (Constant s_No None))))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name %4 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Call #1 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))))) (list (keyword s_key (Lambda (arguments nil (list (arg %2 None None)) None nil nil None nil) (Subscript (Name %2 Load) (_slice_content #0) Load))))) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 (Constant i1 None) (Name g_tuple Load) &n:0 &x:2 &_:1 &z:0)) (Assign (list (Name &total:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &z:0 Load) (/seq (AugAssign (Name &total:0 Store) Add (Name &a:0 Load)) (If (Compare (Name &total:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) None)) (/seq))) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias g_exit None)) i0) (ImportFrom s_functools (list (alias g_reduce None)) i0) (ImportFrom s_operator (list (alias g_add None)) i0) (FunctionDef &f:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (UnaryOp Not (Name &n:0 Load)) (/seq (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &islands:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &islands:0 Load) s_append Load) (list (_starred_content (Call (Name &f:0 Load) nil nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &islands:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load)))))) (Assign (list (Name &weight:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &weight:0 Store) Add (Subscript (Subscript (Name &islands:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i0 None)) Load)) (If (Compare (Name &weight:0 Load) (list Gt) (list (Subscript (Subscript (Name &islands:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Name g_reversed Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &w:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store) (Name &a:0 Load) (/seq (AugAssign (Name &w:0 Store) Add (Name &y:0 Load)) (If (Compare (Name &x:0 Load) (list Lt) (list (Name &w:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) None)) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 (Constant i1 None) (Name g_tuple Load) &n:0 &x:2 &_:1 &z:0)) (Assign (list (Name &cnt:0 Store) (Name &total:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &z:0 Load) (/seq (AugAssign (Name &total:0 Store) Add (Name &a:0 Load)) (If (Compare (Name &total:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &cnt:0 Load) (list Eq) (list (Name &n:0 Load))) (Constant s_Yes None) (Constant s_No None)))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 (UnaryOp USub (Constant i1 None)) (Name g_list Load) &n:0 &x:2 &_:1 &lst:0)) (Assign (list (Name &acc:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &w:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &lst:0 Load) (/seq (AugAssign (Name &acc:0 Store) Add (Name &w:0 Load)) (If (Compare (Name &acc:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) None)) (/seq))) nil)",
      "(Module (/seq (FunctionDef &sky:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (Return (Subscript (Name &x:1 Load) (_slice_content (Constant i1 None)) Load))) nil None None) (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &arr:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &sumh:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil (list (keyword s_key (Name &sky:0 Load))))) (Assign (list (Name &res:0 Store)) (Constant True None) None) (For (Name &e:0 Store) (Name &arr:0 Load) (/seq (AugAssign (Name &sumh:0 Store) Add (Subscript (Name &e:0 Load) (_slice_content (Constant i0 None)) Load)) (If (Compare (Name &sumh:0 Load) (list Gt) (list (Subscript (Name &e:0 Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name &res:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Name &res:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) (/seq))) nil)",
      "(Module (/seq (While (Constant i1 None) (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &P:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &P:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load))) (_starred_content (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load))) Load)))))) (Assign (list (Name &su:0 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Name &w:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &w:2 Store)) (_starred_content (Name &s:2 Store))) Store) (Name &P:0 Load) nil i0))))) nil) None) (For (Tuple (list (_starred_content (Name &w:0 Store)) (_starred_content (Name &s:0 Store))) Store) (Name &P:0 Load) (/seq (If (Compare (Name &s:0 Load) (list Lt) (list (Name &su:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)) Break) (/seq)) (AugAssign (Name &su:0 Store) Sub (Name &w:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) None)) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (/splice (fn_1 (Constant i1 None) (Name g_tuple Load) &n:0 &x:2 &_:1 &z:0)) (Assign (list (Name &cnt:0 Store) (Name &total:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &z:0 Load) (/seq (AugAssign (Name &total:0 Store) Add (Name &a:0 Load)) (If (Compare (Name &total:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Assign (list (Name &cnt:0 Store)) (Constant i1 None) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Name &cnt:0 Load) (Constant s_No None) (Constant s_Yes None)))) nil))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &bridges:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &bridges:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &t:0 Load)) (_starred_content (Name &b:0 Load))) Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &bridges:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Subscript (Name &x:1 Load) (_slice_content (Constant i1 None)) Load)))))) (Assign (list (Name &flag:0 Store)) (Constant True None) None) (Assign (list (Name &sumt:0 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &t:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &bridges:0 Load) (/seq (AugAssign (Name &sumt:0 Store) Add (Name &t:0 Load)) (If (Compare (Name &sumt:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Assign (list (Name &flag:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Name &flag:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) (/seq))) nil)",
      "(Module (/seq (While (Constant True None) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &tbl:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &tbl:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Tuple (list (_starred_content (Subscript (Name &x:2 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &x:2 Load) (_slice_content (Constant i0 None)) Load))) Load)))))) (Assign (list (Tuple (list (_starred_content (Name &s:0 Store)) (_starred_content (Name &f:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant True None))) Load) None) (For (Tuple (list (_starred_content (Name &v:0 Store)) (_starred_content (Name &w:0 Store))) Store) (Name &tbl:0 Load) (/seq (AugAssign (Name &s:0 Store) Add (Name &v:0 Load)) (If (Compare (Name &s:0 Load) (list Gt) (list (Name &w:0 Load))) (/seq (Assign (list (Name &f:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Name &f:0 Load) (Constant s_Yes None) (Constant s_No None)))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &N:0 Store))\n                (_starred_content (Name &K:0 Store))\n                (_starred_content (Name &S:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &comb:0 Store)\n          (Call\n            (Attribute (Name g_itertools Load) s_combinations Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content (Constant i1 None))\n                    (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              (_starred_content (Name &K:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_sum Load) (list (_starred_content (Name &comb:0 Load))) nil)\n                (list Eq)\n                (list (Name &S:0 Load))\n              )\n              (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias g_combinations None)) i0)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &n:0 Store))\n                (_starred_content (Name &k:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content\n                (Call\n                  (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                  (list (_starred_content (Constant s-WzMyXQ== None)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_sum Load)\n                  (list\n                    (_starred_content\n                      (ListComp\n                        (IfExp\n                          (Compare\n                            (Call (Name g_sum Load) (list (_starred_content (Name &t:1 Load))) nil)\n                            (list Eq)\n                            (list (Name &s:0 Load))\n                          )\n                          (Constant i1 None)\n                          (Constant i0 None)\n                        )\n                        (list\n                          (comprehension\n                            (Name &t:1 Store)\n                            (Call\n                              (Name g_combinations Load)\n                              (list\n                                (_starred_content\n                                  (Call\n                                    (Name g_range Load)\n                                    (list\n                                      (_starred_content (Constant i1 None))\n                                      (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                    )\n                                    nil\n                                  )\n                                )\n                                (_starred_content (Name &k:0 Load))\n                              )\n                              nil\n                            )\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import\n      (list\n        (alias g_math None)\n        (alias g_string None)\n        (alias g_itertools None)\n        (alias g_fractions None)\n        (alias g_heapq None)\n        (alias g_collections None)\n        (alias g_re None)\n        (alias g_array None)\n        (alias g_bisect None)\n        (alias g_sys None)\n        (alias g_random None)\n        (alias g_time None)\n        (alias g_copy None)\n        (alias g_functools None)\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i7 None))))\n        nil\n      )\n    )\n    (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None)\n    (Assign\n      (list (Name &eps:0 Store))\n      (BinOp (Constant f1.0 None) Div (BinOp (Constant i10 None) Pow (Constant i10 None)))\n      None\n    )\n    (Assign (list (Name &mod:0 Store)) (Constant i998244353 None) None)\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LI_:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil) Sub (Constant i1 None))\n            (list\n              (comprehension\n                (Name &x:4 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LF:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_float Load) (list (_starred_content (Name &x:5 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:5 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LS:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_split\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &I:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &F:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_float Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &S:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_input Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &pf:0\n      (arguments nil (list (arg &s:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &s:1 Load)))\n            (list (keyword s_flush (Constant True None)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &rr:2 Store)) (List nil Load) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &n:2 Store))\n                    (_starred_content (Name &k:2 Store))\n                    (_starred_content (Name &s:2 Store))\n                  )\n                  Store\n                )\n              )\n              (Call (Name &LI:0 Load) nil nil)\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &s:2 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq Break)\n              (/seq)\n            )\n            (Assign\n              (list (Name &d:2 Store))\n              (Call\n                (Attribute (Name g_collections Load) s_defaultdict Load)\n                (list (_starred_content (Name g_int Load)))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Name &d:2 Load)\n                  (_slice_tuple\n                    (Tuple (list (_slice_content (Constant i0 None)) (_slice_content (Constant i0 None))) Load)\n                  )\n                  Store\n                )\n              )\n              (Constant i1 None)\n              None\n            )\n            (For\n              (Name &i:2 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (For\n                  (Tuple (list (_starred_content (Name &kk:2 Store)) (_starred_content (Name &vv:2 Store))) Store)\n                  (Call\n                    (Name g_list Load)\n                    (list (_starred_content (Call (Attribute (Name &d:2 Load) s_items Load) nil nil)))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (BoolOp\n                        Or\n                        (list\n                          (Compare\n                            (Subscript (Name &kk:2 Load) (_slice_content (Constant i0 None)) Load)\n                            (list Eq)\n                            (list (Name &k:2 Load))\n                          )\n                          (Compare\n                            (BinOp\n                              (Subscript (Name &kk:2 Load) (_slice_content (Constant i1 None)) Load)\n                              Add\n                              (Name &i:2 Load)\n                            )\n                            (list Gt)\n                            (list (Name &s:2 Load))\n                          )\n                        )\n                      )\n                      (/seq Continue)\n                      (/seq)\n                    )\n                    (AugAssign\n                      (Subscript\n                        (Name &d:2 Load)\n                        (_slice_tuple\n                          (Tuple\n                            (list\n                              (_slice_content\n                                (BinOp\n                                  (Subscript (Name &kk:2 Load) (_slice_content (Constant i0 None)) Load)\n                                  Add\n                                  (Constant i1 None)\n                                )\n                              )\n                              (_slice_content\n                                (BinOp\n                                  (Subscript (Name &kk:2 Load) (_slice_content (Constant i1 None)) Load)\n                                  Add\n                                  (Name &i:2 Load)\n                                )\n                              )\n                            )\n                            Load\n                          )\n                        )\n                        Store\n                      )\n                      Add\n                      (Name &vv:2 Load)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &rr:2 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (Subscript\n                      (Name &d:2 Load)\n                      (_slice_tuple\n                        (Tuple (list (_slice_content (Name &k:2 Load)) (_slice_content (Name &s:2 Load))) Load)\n                      )\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return\n          (Call\n            (Attribute (Constant s-WzEwXQ== None) s_join Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list (_starred_content (Name g_str Load)) (_starred_content (Name &rr:2 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &N:0 Store))\n                (_starred_content (Name &K:0 Store))\n                (_starred_content (Name &S:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &N:0 Load) (list Eq Eq Eq) (list (Name &K:0 Load) (Name &S:0 Load) (Constant i0 None)))\n          (/seq Break)\n          (/seq)\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &l:0 Store)\n          (Call\n            (Attribute (Name g_itertools Load) s_combinations Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content (Constant i1 None))\n                    (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              (_starred_content (Name &K:0 Load))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil)\n                (list Eq)\n                (list (Name &S:0 Load))\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &memo:0 Store)) (Dict nil nil) None)\n    (FunctionDef\n      &dfs:0\n      (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &S:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &key:1 Store))\n          (Tuple\n            (list\n              (_starred_content (Name &N:1 Load))\n              (_starred_content (Name &K:1 Load))\n              (_starred_content (Name &S:1 Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &key:1 Load) (list In) (list (Name &memo:0 Load)))\n          (/seq (Return (Subscript (Name &memo:0 Load) (_slice_content (Name &key:1 Load)) Load)))\n          (/seq)\n        )\n        (If\n          (Compare (Name &N:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (Compare (Name &S:1 Load) (list Eq Eq) (list (Name &K:1 Load) (Constant i0 None)))))\n          (/seq)\n        )\n        (Assign\n          (list (Name &r:1 Store))\n          (Call\n            (Name &dfs:0 Load)\n            (list\n              (_starred_content (BinOp (Name &N:1 Load) Sub (Constant i1 None)))\n              (_starred_content (Name &K:1 Load))\n              (_starred_content (Name &S:1 Load))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &S:1 Load) (list GtE) (list (Name &N:1 Load)))\n          (/seq\n            (AugAssign\n              (Name &r:1 Store)\n              Add\n              (Call\n                (Name &dfs:0 Load)\n                (list\n                  (_starred_content (BinOp (Name &N:1 Load) Sub (Constant i1 None)))\n                  (_starred_content (BinOp (Name &K:1 Load) Sub (Constant i1 None)))\n                  (_starred_content (BinOp (Name &S:1 Load) Sub (Name &N:1 Load)))\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Subscript (Name &memo:0 Load) (_slice_content (Name &key:1 Load)) Store)) (Name &r:1 Load) None)\n        (Return (Name &r:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &N:0 Store))\n                (_starred_content (Name &K:0 Store))\n                (_starred_content (Name &S:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Expr\n          (Call\n            (Attribute (Name &ans:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &dfs:0 Load)\n                  (list\n                    (_starred_content (Name &N:0 Load))\n                    (_starred_content (Name &K:0 Load))\n                    (_starred_content (Name &S:0 Load))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_starred (Starred (Name &ans:0 Load) Load)))\n        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &rec:0\n      (arguments\n        nil\n        (list (arg &n:1 None None) (arg &u:1 None None) (arg &k:1 None None) (arg &s:1 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &k:1 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &u:1 Load) (list Lt LtE) (list (Name &s:1 Load) (Name &n:1 Load)))\n              (/seq (Return (Constant i1 None)))\n              (/seq (Return (Constant i0 None)))\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Name &ret:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (BinOp (Name &u:1 Load) Add (Constant i1 None)))\n              (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &k:1 Load)) Add (Constant i2 None)))\n            )\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &ret:1 Store)\n              Add\n              (Call\n                (Name &rec:0 Load)\n                (list\n                  (_starred_content (Name &n:1 Load))\n                  (_starred_content (Name &i:1 Load))\n                  (_starred_content (BinOp (Name &k:1 Load) Sub (Constant i1 None)))\n                  (_starred_content (BinOp (Name &s:1 Load) Sub (Name &i:1 Load)))\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &ret:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &n:0 Store))\n                (_starred_content (Name &k:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &n:0 Load) (list Eq Eq Eq) (list (Name &k:0 Load) (Name &s:0 Load) (Constant i0 None)))\n          (/seq Break)\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &rec:0 Load)\n                  (list\n                    (_starred_content (Name &n:0 Load))\n                    (_starred_content (Constant i0 None))\n                    (_starred_content (Name &k:0 Load))\n                    (_starred_content (Name &s:0 Load))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &n:0 Store))\n                (_starred_content (Name &k:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp (BinOp (Name &n:0 Load) Add (Name &k:0 Load)) Add (Name &s:0 Load))\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Attribute (Name g_itertools Load) s_combinations Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_range Load)\n                  (list\n                    (_starred_content (Constant i1 None))\n                    (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              (_starred_content (Name &k:0 Load))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &e:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_sum Load) (list (_starred_content (Name &e:0 Load))) nil)\n                (list NotEq)\n                (list (Name &s:0 Load))\n              )\n              (/seq Continue)\n              (/seq)\n            )\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &N:0 Store))\n                (_starred_content (Name &K:0 Store))\n                (_starred_content (Name &S:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (UnaryOp Not (Name &N:0 Load)) (/seq Break) (/seq))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_sum Load)\n                  (list\n                    (_starred_content\n                      (GeneratorExp\n                        (Compare\n                          (Call (Name g_sum Load) (list (_starred_content (Name &l:1 Load))) nil)\n                          (list Eq)\n                          (list (Name &S:0 Load))\n                        )\n                        (list\n                          (comprehension\n                            (Name &l:1 Store)\n                            (Call\n                              (Attribute (Name g_itertools Load) s_combinations Load)\n                              (list\n                                (_starred_content\n                                  (Call\n                                    (Name g_range Load)\n                                    (list\n                                      (_starred_content (Constant i1 None))\n                                      (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n                                    )\n                                    nil\n                                  )\n                                )\n                                (_starred_content (Name &K:0 Load))\n                              )\n                              nil\n                            )\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (While\n      (Constant i1 None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &n:0 Store))\n                (_starred_content (Name &k:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_sum Load)\n                  (list\n                    (_starred_content\n                      (ListComp\n                        (IfExp\n                          (Compare\n                            (Call (Name g_sum Load) (list (_starred_content (Name &i:1 Load))) nil)\n                            (list Eq)\n                            (list (Name &s:0 Load))\n                          )\n                          (Constant i1 None)\n                          (Constant i0 None)\n                        )\n                        (list\n                          (comprehension\n                            (Name &i:1 Store)\n                            (Call\n                              (Attribute (Name g_itertools Load) s_combinations Load)\n                              (list\n                                (_starred_content\n                                  (Call\n                                    (Name g_range Load)\n                                    (list\n                                      (_starred_content (Constant i1 None))\n                                      (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                    )\n                                    nil\n                                  )\n                                )\n                                (_starred_content (Name &k:0 Load))\n                              )\n                              nil\n                            )\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_itertools (list (alias s_combinations g_c)) i0)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &n:0 Store))\n                (_starred_content (Name &k:0 Store))\n                (_starred_content (Name &s:0 Store))\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_sum Load)\n                  (list\n                    (_starred_content\n                      (GeneratorExp\n                        (Constant i1 None)\n                        (list\n                          (comprehension\n                            (Name &l:1 Store)\n                            (Call\n                              (Name g_list Load)\n                              (list\n                                (_starred_content\n                                  (Call\n                                    (Name g_c Load)\n                                    (list\n                                      (_starred_content\n                                        (Call\n                                          (Name g_range Load)\n                                          (list\n                                            (_starred_content (Constant i1 None))\n                                            (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n                                          )\n                                          nil\n                                        )\n                                      )\n                                      (_starred_content (Name &k:0 Load))\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                              nil\n                            )\n                            (list\n                              (Compare\n                                (Call (Name g_sum Load) (list (_starred_content (Name &l:1 Load))) nil)\n                                (list Eq)\n                                (list (Name &s:0 Load))\n                              )\n                            )\n                            i0\n                          )\n                        )\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If #0 (/seq Break) (/seq)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_itertools None))) (While (Constant True None) (/seq (/splice (fn_1 (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) &S:0 &K:0 &N:0)) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &comb:0 Store) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &K:0 Load))) nil) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (Name &comb:0 Load))) nil) (list Eq) (list (Name &S:0 Load))) (/seq (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (ImportFrom s_itertools (list (alias g_combinations None)) i0) (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (If (BoolOp And (list (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &s:0 Load) (list Eq) (list (Constant i0 None))))) (/seq Break) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (ListComp (IfExp (Compare (Call (Name g_sum Load) (list (_starred_content (Name &t:1 Load))) nil) (list Eq) (list (Name &s:0 Load))) (Constant i1 None) (Constant i0 None)) (list (comprehension (Name &t:1 Store) (Call (Name g_combinations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &k:0 Load))) nil) nil i0))))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None) (alias g_string None) (alias g_itertools None) (alias g_fractions None) (alias g_heapq None) (alias g_collections None) (alias g_re None) (alias g_array None) (alias g_bisect None) (alias g_sys None) (alias g_random None) (alias g_time None) (alias g_copy None) (alias g_functools None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i7 None)))) nil)) (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None) (Assign (list (Name &eps:0 Store)) (BinOp (Constant f1.0 None) Div (BinOp (Constant i10 None) Pow (Constant i10 None))) None) (Assign (list (Name &mod:0 Store)) (Constant i998244353 None) None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LI_:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil) Sub (Constant i1 None)) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LF:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_float Load) (list (_starred_content (Name &x:5 Load))) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LS:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil None None) (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &F:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_float Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &S:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_input Load) nil nil))) nil None None) (FunctionDef &pf:0 (arguments nil (list (arg &s:1 None None)) None nil nil None nil) (/seq (Return (Call (Name g_print Load) (list (_starred_content (Name &s:1 Load))) (list (keyword s_flush (Constant True None)))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &rr:2 Store)) (List nil Load) None) (While (Constant True None) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store)) (_starred_content (Name &s:2 Store))) Store)) (Call (Name &LI:0 Load) nil nil) None) (If (BoolOp And (list (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &s:2 Load) (list Eq) (list (Constant i0 None))))) (/seq Break) (/seq)) (Assign (list (Name &d:2 Store)) (Call (Attribute (Name g_collections Load) s_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Subscript (Name &d:2 Load) (_slice_tuple (Tuple (list (_slice_content (Constant i0 None)) (_slice_content (Constant i0 None))) Load)) Store)) (Constant i1 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) (/seq (For (Tuple (list (_starred_content (Name &kk:2 Store)) (_starred_content (Name &vv:2 Store))) Store) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Name &d:2 Load) s_items Load) nil nil))) nil) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &kk:2 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Name &k:2 Load))) (Compare (BinOp (Subscript (Name &kk:2 Load) (_slice_content (Constant i1 None)) Load) Add (Name &i:2 Load)) (list Gt) (list (Name &s:2 Load))))) (/seq Continue) (/seq)) (AugAssign (Subscript (Name &d:2 Load) (_slice_tuple (Tuple (list (_slice_content (BinOp (Subscript (Name &kk:2 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) (_slice_content (BinOp (Subscript (Name &kk:2 Load) (_slice_content (Constant i1 None)) Load) Add (Name &i:2 Load)))) Load)) Store) Add (Name &vv:2 Load))) (/seq) None)) (/seq) None) (Expr (Call (Attribute (Name &rr:2 Load) s_append Load) (list (_starred_content (Subscript (Name &d:2 Load) (_slice_tuple (Tuple (list (_slice_content (Name &k:2 Load)) (_slice_content (Name &s:2 Load))) Load)) Load))) nil))) (/seq)) (Return (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &rr:2 Load))) nil))) nil))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (While (Constant True None) (/seq (/splice (fn_1 (Compare (Name &N:0 Load) (list Eq Eq Eq) (list (Name &K:0 Load) (Name &S:0 Load) (Constant i0 None))) &S:0 &K:0 &N:0)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &l:0 Store) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &K:0 Load))) nil) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (Name &l:0 Load))) nil) (list Eq) (list (Name &S:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &memo:0 Store)) (Dict nil nil) None) (FunctionDef &dfs:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &S:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &key:1 Store)) (Tuple (list (_starred_content (Name &N:1 Load)) (_starred_content (Name &K:1 Load)) (_starred_content (Name &S:1 Load))) Load) None) (If (Compare (Name &key:1 Load) (list In) (list (Name &memo:0 Load))) (/seq (Return (Subscript (Name &memo:0 Load) (_slice_content (Name &key:1 Load)) Load))) (/seq)) (If (Compare (Name &N:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Compare (Name &S:1 Load) (list Eq Eq) (list (Name &K:1 Load) (Constant i0 None))))) (/seq)) (Assign (list (Name &r:1 Store)) (Call (Name &dfs:0 Load) (list (_starred_content (BinOp (Name &N:1 Load) Sub (Constant i1 None))) (_starred_content (Name &K:1 Load)) (_starred_content (Name &S:1 Load))) nil) None) (If (Compare (Name &S:1 Load) (list GtE) (list (Name &N:1 Load))) (/seq (AugAssign (Name &r:1 Store) Add (Call (Name &dfs:0 Load) (list (_starred_content (BinOp (Name &N:1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &K:1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &S:1 Load) Sub (Name &N:1 Load)))) nil))) (/seq)) (Assign (list (Subscript (Name &memo:0 Load) (_slice_content (Name &key:1 Load)) Store)) (Name &r:1 Load) None) (Return (Name &r:1 Load))) nil None None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (While (Constant i1 None) (/seq (/splice (fn_1 (Compare (Name &N:0 Load) (list Eq) (list (Constant i0 None))) &S:0 &K:0 &N:0)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (_starred_content (Call (Name &dfs:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &S:0 Load))) nil))) nil))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &ans:0 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
      "(Module (/seq (FunctionDef &rec:0 (arguments nil (list (arg &n:1 None None) (arg &u:1 None None) (arg &k:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &u:1 Load) (list Lt LtE) (list (Name &s:1 Load) (Name &n:1 Load))) (/seq (Return (Constant i1 None))) (/seq (Return (Constant i0 None))))) (/seq)) (Assign (list (Name &ret:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &u:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &k:1 Load)) Add (Constant i2 None)))) nil) (/seq (AugAssign (Name &ret:1 Store) Add (Call (Name &rec:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &i:1 Load)) (_starred_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &s:1 Load) Sub (Name &i:1 Load)))) nil))) (/seq) None) (Return (Name &ret:1 Load))) nil None None) (While (Constant True None) (/seq (/splice (fn_1 (Compare (Name &n:0 Load) (list Eq Eq Eq) (list (Name &k:0 Load) (Name &s:0 Load) (Constant i0 None))) &s:0 &k:0 &n:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &rec:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (While (Constant True None) (/seq (/splice (fn_1 (Compare (BinOp (BinOp (Name &n:0 Load) Add (Name &k:0 Load)) Add (Name &s:0 Load)) (list Eq) (list (Constant i0 None))) &s:0 &k:0 &n:0)) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &k:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &e:0 Store) (Name &a:0 Load) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (Name &e:0 Load))) nil) (list NotEq) (list (Name &s:0 Load))) (/seq Continue) (/seq)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (While (Constant True None) (/seq (/splice (fn_1 (UnaryOp Not (Name &N:0 Load)) &S:0 &K:0 &N:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Compare (Call (Name g_sum Load) (list (_starred_content (Name &l:1 Load))) nil) (list Eq) (list (Name &S:0 Load))) (list (comprehension (Name &l:1 Store) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &K:0 Load))) nil) nil i0))))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_itertools None))) (While (Constant i1 None) (/seq (/splice (fn_1 (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) &s:0 &k:0 &n:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (ListComp (IfExp (Compare (Call (Name g_sum Load) (list (_starred_content (Name &i:1 Load))) nil) (list Eq) (list (Name &s:0 Load))) (Constant i1 None) (Constant i0 None)) (list (comprehension (Name &i:1 Store) (Call (Attribute (Name g_itertools Load) s_combinations Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &k:0 Load))) nil) nil i0))))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (ImportFrom s_itertools (list (alias s_combinations g_c)) i0) (While (Constant True None) (/seq (/splice (fn_1 (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) &s:0 &k:0 &n:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Constant i1 None) (list (comprehension (Name &l:1 Store) (Call (Name g_list Load) (list (_starred_content (Call (Name g_c Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)) (_starred_content (Name &k:0 Load))) nil))) nil) (list (Compare (Call (Name g_sum Load) (list (_starred_content (Name &l:1 Load))) nil) (list Eq) (list (Name &s:0 Load)))) i0))))) nil))) nil))) (/seq))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &N:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &S:1 Store)) (Call (Name g_input Load) nil nil) None)\n        (Try\n          (/seq\n            (Assign\n              (list (Name &ans:1 Store))\n              (BinOp\n                (Call (Attribute (Name &S:1 Load) s_index Load) (list (_starred_content (Constant s_xx None))) nil)\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))\n          )\n          (list\n            (ExceptHandler\n              None\n              None\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &N:1 Load))) nil)))\n            )\n          )\n          (/seq)\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_x None))\n              )\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                (list Eq)\n                (list (Constant s_x None))\n              )\n            )\n          )\n          (/seq (Assign (list (Name &n:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &kizetu:0 Store)) (Constant False None) None)\n    (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &s:0 Store)\n      (Name &S:0 Load)\n      (/seq\n        (If\n          (Compare (Name &s:0 Load) (list Eq) (list (Constant s_x None)))\n          (/seq (AugAssign (Name &kizetu:0 Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Name &kizetu:0 Store)) (Constant i0 None) None))\n        )\n        (If\n          (Compare (Name &kizetu:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil)) Break)\n          (/seq)\n        )\n        (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil) None)\n    (Assign (list (Name &S_list:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &S:0 Load))) nil) None)\n    (Assign (list (Name &flg:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (If\n          (Compare (Name &flg:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &S_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_x None))\n              )\n              (/seq (Assign (list (Name &flg:0 Store)) (Constant i1 None) None))\n              (/seq)\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &S_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_o None))\n              )\n              (/seq (Assign (list (Name &flg:0 Store)) (Constant i0 None) None))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &S_list:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_x None))\n                  )\n                  (/seq (Assign (list (Name &flg:0 Store)) (Constant i2 None) None) Break)\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n      (/seq\n        (If\n          (Compare (Name &flg:0 Load) (list Lt) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &i:0 Store)) (Name &N:0 Load) None))\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n        (Assign (list (Name &pre:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None)\n        (For\n          (Name &t:0 Store)\n          (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &pre:0 Load) (list Eq) (list (Constant s_x None)))\n                  (Compare (Name &t:0 Load) (list Eq) (list (Constant s_x None)))\n                )\n              )\n              (/seq Break)\n              (/seq)\n            )\n            (Assign (list (Name &pre:0 Store)) (Name &t:0 Load) None)\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &ans:0 Store)) (Name &N:0 Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &S:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Eq)\n                (list (Constant s_x None))\n              )\n              (Compare\n                (Subscript (Name &S:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                (list Eq)\n                (list (Constant s_x None))\n              )\n            )\n          )\n          (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n      (/seq\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                    (list Eq)\n                    (list (Constant s_x None))\n                  )\n                  (Compare\n                    (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s_x None))\n                  )\n                )\n              )\n              (/seq Break)\n              (/seq)\n            )\n            (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &last_s:0 Store)) (Constant s_o None) None)\n    (For\n      (Name &s:0 Store)\n      (Name &S:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &last_s:0 Load) (list Eq) (list (Constant s_x None)))\n              (Compare (Name &s:0 Load) (list Eq) (list (Constant s_x None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n            (Expr (Call (Attribute (Name g_sys Load) s_exit Load) nil nil))\n          )\n          (/seq)\n        )\n        (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n        (Assign (list (Name &last_s:0 Store)) (Name &s:0 Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &f:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &a:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &x:0 Store)\n      (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)\n      (/seq\n        (If (Compare (Name &f:0 Load) (list Eq Eq) (list (Name &x:0 Load) (Constant s_x None))) (/seq Break) (/seq))\n        (AugAssign (Name &a:0 Store) Add (Constant i1 None))\n        (Assign (list (Name &f:0 Store)) (Name &x:0 Load) None)\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &N:0 Load))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &S:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n            (list Eq Eq)\n            (list (Subscript (Name &S:0 Load) (_slice_content (Name &i:0 Load)) Load) (Constant s_x None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &N:0 Load))) nil)))\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_input Load) nil nil) None) ?0 (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp #0 Sub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Load) (list Eq) (list (Constant s_x None))) (Compare (Subscript (Name %1 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load) (list Eq) (list (Constant s_x None))))) (/seq (Assign (list (Name %3 Store)) (BinOp (Name %2 Load) Add (Constant i1 None)) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %3 Load))) nil)))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [
          "S"
        ],
        "choice_arity": 1,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &N:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:1 Store)) (Call (Name g_input Load) nil nil) None) (Try (/seq (Assign (list (Name &ans:1 Store)) (BinOp (Call (Attribute (Name &S:1 Load) s_index Load) (list (_starred_content (Constant s_xx None))) nil) Add (Constant i1 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))) (list (ExceptHandler None None (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &N:1 Load))) nil))))) (/seq) (/seq))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Name &n:0 Load) &s:0 &i:0 &n:0 /nothing))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &kizetu:0 Store)) (Constant False None) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (For (Name &s:0 Store) (Name &S:0 Load) (/seq (If (Compare (Name &s:0 Load) (list Eq) (list (Constant s_x None))) (/seq (AugAssign (Name &kizetu:0 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &kizetu:0 Store)) (Constant i0 None) None))) (If (Compare (Name &kizetu:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &cnt:0 Load))) nil)) Break) (/seq)) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &S:0 Load))) nil))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil) None) (Assign (list (Name &S_list:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &S:0 Load))) nil) None) (Assign (list (Name &flg:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (If (Compare (Name &flg:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &S_list:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_x None))) (/seq (Assign (list (Name &flg:0 Store)) (Constant i1 None) None)) (/seq))) (/seq (If (Compare (Subscript (Name &S_list:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_o None))) (/seq (Assign (list (Name &flg:0 Store)) (Constant i0 None) None)) (/seq (If (Compare (Subscript (Name &S_list:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_x None))) (/seq (Assign (list (Name &flg:0 Store)) (Constant i2 None) None) Break) (/seq))))))) (/seq) None) (If (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) (/seq (If (Compare (Name &flg:0 Load) (list Lt) (list (Constant i2 None))) (/seq (Assign (list (Name &i:0 Store)) (Name &N:0 Load) None)) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (Assign (list (Name &pre:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &t:0 Store) (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (BoolOp And (list (Compare (Name &pre:0 Load) (list Eq) (list (Constant s_x None))) (Compare (Name &t:0 Load) (list Eq) (list (Constant s_x None))))) (/seq Break) (/seq)) (Assign (list (Name &pre:0 Store)) (Name &t:0 Load) None) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 (Name &N:0 Load) &S:0 &i:0 &ans:0 (Assign (list (Name &ans:0 Store)) (Name &N:0 Load) None)))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (list Eq) (list (Constant s_x None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_x None))))) (/seq Break) (/seq)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &last_s:0 Store)) (Constant s_o None) None) (For (Name &s:0 Store) (Name &S:0 Load) (/seq (If (BoolOp And (list (Compare (Name &last_s:0 Load) (list Eq) (list (Constant s_x None))) (Compare (Name &s:0 Load) (list Eq) (list (Constant s_x None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil)) (Expr (Call (Attribute (Name g_sys Load) s_exit Load) nil nil))) (/seq)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None)) (Assign (list (Name &last_s:0 Store)) (Name &s:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &f:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &a:0 Store)) (Constant i1 None) None) (For (Name &x:0 Store) (Subscript (Name &s:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Name &f:0 Load) (list Eq Eq) (list (Name &x:0 Load) (Constant s_x None))) (/seq Break) (/seq)) (AugAssign (Name &a:0 Store) Add (Constant i1 None)) (Assign (list (Name &f:0 Store)) (Name &x:0 Load) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &S:0 Store)) (Call (Name g_input Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &N:0 Load))) nil) (/seq (If (Compare (Subscript (Name &S:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (list Eq Eq) (list (Subscript (Name &S:0 Load) (_slice_content (Name &i:0 Load)) Load) (Constant s_x None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &N:0 Load))) nil))) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (Compare\n        (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n        (list Eq)\n        (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (ListComp\n              (BinOp\n                (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)\n                Sub\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:1 Load)) Load)\n              )\n              (list\n                (comprehension\n                  (Name &i:1 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n                    nil\n                  )\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (_starred_content\n            (ListComp\n              (BinOp\n                (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load)\n                Sub\n                (Subscript (Name &b:0 Load) (_slice_content (Name &i:2 Load)) Load)\n              )\n              (list\n                (comprehension\n                  (Name &i:2 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n                    nil\n                  )\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp And (list (Name &f:0 Load) (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))))\n              (Constant s_YES None)\n              (Constant s_NO None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &Diff1:0 Store))\n      (ListComp\n        (BinOp\n          (Subscript (Name &A:0 Load) (_slice_content (Name &i:1 Load)) Load)\n          Sub\n          (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &Diff2:0 Store))\n      (ListComp\n        (BinOp\n          (Subscript (Name &B:0 Load) (_slice_content (Name &i:2 Load)) Load)\n          Sub\n          (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &Diff1:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &Diff2:0 Load) s_sort Load) nil nil))\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &B:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (Compare\n            (Subscript (Name &B:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n            (list Eq)\n            (list (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (Compare (Name &Diff1:0 Load) (list Eq) (list (Name &Diff2:0 Load)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cd:0 Store)) (List nil Load) None)\n    (Assign (list (Name &td:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &cd:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  Sub\n                  (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (BinOp (Call (Name g_len Load) (list (_starred_content (Name &t:0 Load))) nil) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &td:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &t:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  Sub\n                  (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &cd:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &td:0 Load) s_sort Load) nil nil))\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n            (list Eq)\n            (list (Subscript (Name &t:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (Compare (Name &cd:0 Load) (list Eq) (list (Name &td:0 Load)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &get:0\n      (arguments nil (list (arg &l:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:1 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                  Sub\n                  (Subscript (Name &l:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n                )\n                (list In)\n                (list (Name &res:1 Load))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Name &res:1 Load)\n                    (_slice_content\n                      (BinOp\n                        (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                        Sub\n                        (Subscript\n                          (Name &l:1 Load)\n                          (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))\n                          Load\n                        )\n                      )\n                    )\n                    Store\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &res:1 Load)\n                      (_slice_content\n                        (BinOp\n                          (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                          Sub\n                          (Subscript\n                            (Name &l:1 Load)\n                            (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))\n                            Load\n                          )\n                        )\n                      )\n                      Store\n                    )\n                  )\n                  (Constant i1 None)\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &res:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil)\n              (list\n                (comprehension\n                  (Name &_:2 Store)\n                  (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Name &_:3 Load))) nil)\n              (list\n                (comprehension\n                  (Name &_:3 Store)\n                  (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &ma:0 Store)) (_starred_content (Name &mb:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &a:0 Load))) nil))\n          (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &b:0 Load))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &ma:0 Load) (list Eq) (list (Name &mb:0 Load)))\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))\n                  )\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    (list Eq)\n                    (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                  )\n                )\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (List nil Load) None)\n    (Assign (list (Name &y:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &x:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  Sub\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &y:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load)\n                  Sub\n                  (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &y:0 Load) s_sort Load) nil nil))\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load)))\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (Compare\n            (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n            (list Eq)\n            (list (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &mp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name &mp:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_list Load) (list (_starred_content (Call (Name &mp:0 Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name g_abs Load)\n          (list\n            (_starred_content\n              (BinOp\n                (Subscript (Name &c:0 Load) (_slice_content (Name &i:1 Load)) Load)\n                Sub\n                (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Call\n          (Name g_abs Load)\n          (list\n            (_starred_content\n              (BinOp\n                (Subscript (Name &t:0 Load) (_slice_content (Name &i:2 Load)) Load)\n                Sub\n                (Subscript (Name &t:0 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load)\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil)\n            (list Eq)\n            (list (Call (Name g_sorted Load) (list (_starred_content (Name &b:0 Load))) nil))\n          )\n          (Compare\n            (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias s_defaultdict g_dd)) i0)\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &nn:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &li:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lm:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &nn:0 Load) nil nil) None)\n    (Assign (list (Name &Gs:0 Store)) (Call (Name &lm:0 Load) nil nil) None)\n    (Assign (list (Name &As:0 Store)) (Call (Name &lm:0 Load) nil nil) None)\n    (Assign\n      (list (Name &diffsG:0 Store))\n      (ListComp\n        (BinOp\n          (Subscript (Name &Gs:0 Load) (_slice_content (Name &i:1 Load)) Load)\n          Sub\n          (Subscript (Name &Gs:0 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &diffsA:0 Store))\n      (ListComp\n        (BinOp\n          (Subscript (Name &As:0 Load) (_slice_content (Name &i:2 Load)) Load)\n          Sub\n          (Subscript (Name &As:0 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &diffsG:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &diffsA:0 Load) s_sort Load) nil nil))\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare\n            (Subscript (Name &Gs:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list Eq)\n            (list (Subscript (Name &As:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (Compare (Name &diffsG:0 Load) (list Eq) (list (Name &diffsA:0 Load)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c_diffs:0 Store))\n      (ListComp\n        (BinOp\n          (Subscript (Name &c:0 Load) (_slice_content (Name &i:1 Load)) Load)\n          Sub\n          (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &t_diffs:0 Store))\n      (ListComp\n        (BinOp\n          (Subscript (Name &t:0 Load) (_slice_content (Name &i:2 Load)) Load)\n          Sub\n          (Subscript (Name &t:0 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)\n        )\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call\n              (Name g_range Load)\n              (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))\n                  )\n                  (Compare\n                    (Subscript (Name &c:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    (list Eq)\n                    (list (Subscript (Name &t:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                  )\n                  (Compare\n                    (Call (Name g_sorted Load) (list (_starred_content (Name &c_diffs:0 Load))) nil)\n                    (list Eq)\n                    (list (Call (Name g_sorted Load) (list (_starred_content (Name &t_diffs:0 Load))) nil))\n                  )\n                )\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &get:0\n      (arguments nil (list (arg &l:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:1 Store)) (List nil Load) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &res:1 Load) s_append Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                      Sub\n                      (Subscript (Name &l:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Attribute (Name &res:1 Load) s_sort Load) nil nil))\n        (Return (Name &res:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &n:0 Store))\n            (_starred_content (Name &a:0 Store))\n            (_starred_content (Name &b:0 Store))\n          )\n          Store\n        )\n      )\n      (Tuple\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil)\n              (list\n                (comprehension\n                  (Name &_:2 Store)\n                  (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n          (_starred_content\n            (ListComp\n              (Call (Name g_int Load) (list (_starred_content (Name &_:3 Load))) nil)\n              (list\n                (comprehension\n                  (Name &_:3 Store)\n                  (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &ma:0 Store)) (_starred_content (Name &mb:0 Store))) Store))\n      (Tuple\n        (list\n          (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &a:0 Load))) nil))\n          (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &b:0 Load))) nil))\n        )\n        Load\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (IfExp\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &ma:0 Load) (list Eq) (list (Name &mb:0 Load)))\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                    (list Eq)\n                    (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))\n                  )\n                  (Compare\n                    (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                    (list Eq)\n                    (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n                  )\n                )\n              )\n              (Constant s_Yes None)\n              (Constant s_No None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgMTE3LCAxMTAsIDMyLCA3OSwgOTksIDExNiwgMzIsIDMyLCA1MiwgMzIsIDQ4LCA1NCwgNTgsIDUzLCA1MywgNTgsIDQ4LCA0OSwgMzIsIDUwLCA0OCwgNTAsIDQ4LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgNjgsIDk3LCAxMTQsIDEwNywgMzIsIDgzLCAxMTEsIDExNywgMTA4LCAxMF0=\n        None\n      )\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &dpx:0 Store)) (List nil Load) None)\n    (Assign (list (Name &dpy:0 Store)) (List nil Load) None)\n    (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare\n            (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n            (list NotEq)\n            (list (Subscript (Name &y:0 Load) (_slice_content (Constant i0 None)) Load))\n          )\n          (Compare\n            (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n            (list NotEq)\n            (list (Subscript (Name &y:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n          )\n        )\n      )\n      (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None))\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &dpx:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Sub\n                  (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &dpy:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Subscript (Name &y:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Sub\n                  (Subscript (Name &y:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &dpx:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &dpy:0 Load) s_sort Load) nil nil))\n    (If\n      (Compare (Name &dpx:0 Load) (list NotEq) (list (Name &dpy:0 Load)))\n      (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None))\n      (/seq)\n    )\n    (If\n      (Name &flag:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 &a:0 &b:0)) (Assign (list (Name &f:0 Store)) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (BinOp (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:1 Load)) Load)) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) nil i0))))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (BinOp (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &b:0 Load) (_slice_content (Name &i:2 Load)) Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Name &f:0 Load) (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))))) (Constant s_YES None) (Constant s_NO None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 &A:0 &B:0)) (Assign (list (Name &Diff1:0 Store)) (ListComp (BinOp (Subscript (Name &A:0 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &A:0 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &Diff2:0 Store)) (ListComp (BinOp (Subscript (Name &B:0 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Subscript (Name &B:0 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &Diff1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &Diff2:0 Load) s_sort Load) nil nil)) (If (BoolOp And (list (Compare (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &B:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &B:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Compare (Name &Diff1:0 Load) (list Eq) (list (Name &Diff2:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (/splice (fn_1 &c:0 &t:0)) (Assign (list (Name &cd:0 Store)) (List nil Load) None) (Assign (list (Name &td:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &cd:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &t:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &td:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &t:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &t:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &cd:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &td:0 Load) s_sort Load) nil nil)) (If (BoolOp And (list (Compare (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &c:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &t:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Compare (Name &cd:0 Load) (list Eq) (list (Name &td:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (FunctionDef &get:0 (arguments nil (list (arg &l:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (BinOp (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &l:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (list In) (list (Name &res:1 Load))) (/seq (AugAssign (Subscript (Name &res:1 Load) (_slice_content (BinOp (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &l:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &res:1 Load) (_slice_content (BinOp (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &l:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) Store)) (Constant i1 None) None)))) (/seq) None) (Return (Name &res:1 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil) (list (comprehension (Name &_:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0)))) (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:3 Load))) nil) (list (comprehension (Name &_:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &ma:0 Store)) (_starred_content (Name &mb:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &a:0 Load))) nil)) (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &b:0 Load))) nil))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &ma:0 Load) (list Eq) (list (Name &mb:0 Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 &a:0 &b:0)) (Assign (list (Name &x:0 Store)) (List nil Load) None) (Assign (list (Name &y:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &x:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &y:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &y:0 Load) s_sort Load) nil nil)) (If (BoolOp And (list (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (FunctionDef &mp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &mp:0 Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &mp:0 Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &c:0 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &t:0 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Subscript (Name &t:0 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load)))) nil) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) nil i0))) None) (If (BoolOp And (list (Compare (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) (list Eq) (list (Call (Name g_sorted Load) (list (_starred_content (Name &b:0 Load))) nil))) (Compare (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias s_defaultdict g_dd)) i0) (Import (list (alias g_math None))) (FunctionDef &nn:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &li:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &mi:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &lm:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &nn:0 Load) nil nil) None) (Assign (list (Name &Gs:0 Store)) (Call (Name &lm:0 Load) nil nil) None) (Assign (list (Name &As:0 Store)) (Call (Name &lm:0 Load) nil nil) None) (Assign (list (Name &diffsG:0 Store)) (ListComp (BinOp (Subscript (Name &Gs:0 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &Gs:0 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &diffsA:0 Store)) (ListComp (BinOp (Subscript (Name &As:0 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Subscript (Name &As:0 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &diffsG:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &diffsA:0 Load) s_sort Load) nil nil)) (If (BoolOp And (list (Compare (Subscript (Name &Gs:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &As:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Name &diffsG:0 Load) (list Eq) (list (Name &diffsA:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_1 &c:0 &t:0)) (Assign (list (Name &c_diffs:0 Store)) (ListComp (BinOp (Subscript (Name &c:0 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &c:0 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &t_diffs:0 Store)) (ListComp (BinOp (Subscript (Name &t:0 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Subscript (Name &t:0 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &t:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &c:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &t:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Compare (Call (Name g_sorted Load) (list (_starred_content (Name &c_diffs:0 Load))) nil) (list Eq) (list (Call (Name g_sorted Load) (list (_starred_content (Name &t_diffs:0 Load))) nil))))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (FunctionDef &get:0 (arguments nil (list (arg &l:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &res:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &l:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &res:1 Load) s_sort Load) nil nil)) (Return (Name &res:1 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:2 Load))) nil) (list (comprehension (Name &_:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0)))) (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:3 Load))) nil) (list (comprehension (Name &_:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &ma:0 Store)) (_starred_content (Name &mb:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &a:0 Load))) nil)) (_starred_content (Call (Name &get:0 Load) (list (_starred_content (Name &b:0 Load))) nil))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &ma:0 Load) (list Eq) (list (Name &mb:0 Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))))) (Constant s_Yes None) (Constant s_No None)))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgMTE3LCAxMTAsIDMyLCA3OSwgOTksIDExNiwgMzIsIDMyLCA1MiwgMzIsIDQ4LCA1NCwgNTgsIDUzLCA1MywgNTgsIDQ4LCA0OSwgMzIsIDUwLCA0OCwgNTAsIDQ4LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgNjgsIDk3LCAxMTQsIDEwNywgMzIsIDgzLCAxMTEsIDExNywgMTA4LCAxMF0= None)) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil))) nil) None) (/splice (fn_1 &x:0 &y:0)) (Assign (list (Name &dpx:0 Store)) (List nil Load) None) (Assign (list (Name &dpy:0 Store)) (List nil Load) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (If (BoolOp Or (list (Compare (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) (list NotEq) (list (Subscript (Name &y:0 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) (list NotEq) (list (Subscript (Name &y:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &dpx:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)))) nil)) (Expr (Call (Attribute (Name &dpy:0 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &y:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &y:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &dpx:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &dpy:0 Load) s_sort Load) nil nil)) (If (Compare (Name &dpx:0 Load) (list NotEq) (list (Name &dpy:0 Load))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq)) (If (Name &flag:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &tests:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &length:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &tests:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_input Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &s:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &streak1:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &streak2:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                (list Eq)\n                (list (Constant s-WzYwXQ== None))\n              )\n              (/seq (AugAssign (Name &streak1:1 Store) Add (Constant i1 None)))\n              (/seq Break)\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Name &s:1 Load)\n                  (_slice_content (BinOp (UnaryOp USub (Name &i:1 Load)) Sub (Constant i1 None)))\n                  Load\n                )\n                (list Eq)\n                (list (Constant s-WzYyXQ== None))\n              )\n              (/seq (AugAssign (Name &streak2:1 Store) Add (Constant i1 None)))\n              (/seq Break)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return\n          (Call\n            (Name g_min Load)\n            (list (_starred_content (Name &streak1:1 Load)) (_starred_content (Name &streak2:1 Load)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &res:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content\n                  (Lambda\n                    (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                    (Call\n                      (Name g_str Load)\n                      (list\n                        (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &x:2 Load))) nil))\n                      )\n                      nil\n                    )\n                  )\n                )\n                (_starred_content (Name &tests:0 Load))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Name &res:0 Load))) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &Tests:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &n:0 Load)))) nil)\n      (/seq\n        (If\n          (Compare (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_input Load) nil nil)) Continue)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &Tests:0 Load) s_append Load)\n                (list (_starred_content (Call (Name g_input Load) nil nil)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &max_left:0 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None)\n        (Assign (list (Name &max_right:0 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_len Load)\n                  (list (_starred_content (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  (_slice_content (Name &j:0 Load))\n                  Load\n                )\n                (list Eq)\n                (list (Constant s-WzYyXQ== None))\n              )\n              (/seq (Assign (list (Name &max_left:0 Store)) (Name &j:0 Load) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_len Load)\n                  (list (_starred_content (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript\n                  (Subscript\n                    (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None))))\n                    Load\n                  )\n                  (_slice_content (Name &j:0 Load))\n                  Load\n                )\n                (list Eq)\n                (list (Constant s-WzYwXQ== None))\n              )\n              (/seq (Assign (list (Name &max_right:0 Store)) (Name &j:0 Load) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list (_starred_content (Name &max_left:0 Load)) (_starred_content (Name &max_right:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &s:0 Store))\n          (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &s:0 Load))) nil) None)\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq\n            (Assign\n              (list (Name &st:0 Store))\n              (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)\n              None\n            )\n            (Assign\n              (list (Name &en:0 Store))\n              (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n              None\n            )\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &st:0 Load) (list Eq) (list (Constant s-WzYyXQ== None)))\n                  (Compare (Name &en:0 Load) (list Eq) (list (Constant s-WzYwXQ== None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n              (/seq\n                (If\n                  (Compare (Constant s-WzYyXQ== None) (list In) (list (Name &s:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Name &c1:0 Store))\n                      (Call\n                        (Attribute (Name &s:0 Load) s_index Load)\n                        (list (_starred_content (Constant s-WzYyXQ== None)))\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n                (If\n                  (Compare (Constant s-WzYwXQ== None) (list In) (list (Name &s:0 Load)))\n                  (/seq\n                    (Expr (Call (Attribute (Name &s:0 Load) s_reverse Load) nil nil))\n                    (Assign\n                      (list (Name &c2:0 Store))\n                      (Call\n                        (Attribute (Name &s:0 Load) s_index Load)\n                        (list (_starred_content (Constant s-WzYwXQ== None)))\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  (/seq)\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_min Load)\n                          (list (_starred_content (Name &c1:0 Load)) (_starred_content (Name &c2:0 Load)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign\n          (list (Name &s2:0 Store))\n          (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n          None\n        )\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (If\n          (Compare (Constant s-WzYyXQ== None) (list In) (list (Name &s:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYyXQ== None))) nil)\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Constant s-WzYwXQ== None) (list In) (list (Name &s:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &b:0 Store))\n              (Call (Attribute (Name &s2:0 Load) s_index Load) (list (_starred_content (Constant s-WzYwXQ== None))) nil)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &cnt:0\n      (arguments nil (list (arg &s:1 None None) (arg &i:1 None None) (arg &j:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load)\n                (list Eq)\n                (list (Constant s-WzYyXQ== None))\n              )\n              (Compare\n                (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load)\n                (list Eq)\n                (list (Constant s-WzYwXQ== None))\n              )\n            )\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Name &cnt:0 Load)\n                  (list\n                    (_starred_content (Name &s:1 Load))\n                    (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                    (_starred_content (BinOp (Name &j:1 Load) Sub (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &T:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &T:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &N:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name &cnt:0 Load)\n                  (list\n                    (_starred_content (Name &s:0 Load))\n                    (_starred_content (Constant i0 None))\n                    (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign (list (Name &l:0 Store)) (Constant i0 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &l:0 Load) (list Lt) (list (Name &n:0 Load)))\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &l:0 Load)) Load)\n                (list NotEq)\n                (list (Constant s-WzYyXQ== None))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &l:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &r:0 Load) (list GtE) (list (Constant i0 None)))\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &r:0 Load)) Load)\n                (list NotEq)\n                (list (Constant s-WzYwXQ== None))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &r:0 Store) Sub (Constant i1 None)))\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_min Load)\n                        (list\n                          (_starred_content (Name &l:0 Load))\n                          (_starred_content\n                            (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &r:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Expr (Call (Name g_input Load) nil nil))\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign (list (Name &cl:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &c:0 Store)\n          (Name &s:0 Load)\n          (/seq\n            (If (Compare (Name &c:0 Load) (list Eq) (list (Constant s-WzYyXQ== None))) (/seq Break) (/seq))\n            (AugAssign (Name &cl:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &cr:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &c:0 Store)\n          (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n          (/seq\n            (If (Compare (Name &c:0 Load) (list Eq) (list (Constant s-WzYwXQ== None))) (/seq Break) (/seq))\n            (AugAssign (Name &cr:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_min Load)\n                  (list (_starred_content (Name &cl:0 Load)) (_starred_content (Name &cr:0 Load)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &t:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &s:0 Store))\n          (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &x:0 Store) (Name &y:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (If\n          (Compare (Constant s-WzYyXQ== None) (list In) (list (Name &s:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYyXQ== None))) nil)\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Constant s-WzYwXQ== None) (list In) (list (Name &s:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &y:0 Store))\n              (Call\n                (Attribute\n                  (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n                  s_index\n                  Load\n                )\n                (list (_starred_content (Constant s-WzYwXQ== None)))\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &x:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n              (Compare (Name &y:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_min Load)\n                      (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &fastio:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Import (list (alias &sys:1 None)))\n        (ImportFrom s_io (list (alias &StringIO:1 None)) i0)\n        (ImportFrom s_atexit (list (alias &register:1 None)) i0)\n        (Global (list s_input))\n        (Assign\n          (list (Attribute (Name &sys:1 Load) s_stdin Store))\n          (Call\n            (Name &StringIO:1 Load)\n            (list (_starred_content (Call (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_read Load) nil nil)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name g_input Store))\n          (Lambda\n            (arguments nil nil None nil nil None nil)\n            (Call\n              (Attribute\n                (Call (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_readline Load) nil nil)\n                s_rstrip\n                Load\n              )\n              (list (_starred_content (Constant s-WzEzLCAxMF0= None)))\n              nil\n            )\n          )\n          None\n        )\n        (Assign (list (Attribute (Name &sys:1 Load) s_stdout Store)) (Call (Name &StringIO:1 Load) nil nil) None)\n        (Expr\n          (Call\n            (Name &register:1 Load)\n            (list\n              (_starred_content\n                (Lambda\n                  (arguments nil nil None nil nil None nil)\n                  (Call\n                    (Attribute (Attribute (Name &sys:1 Load) s___stdout__ Load) s_write Load)\n                    (list\n                      (_starred_content\n                        (Call (Attribute (Attribute (Name &sys:1 Load) s_stdout Load) s_getvalue Load) nil nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &fastio:0 Load) nil nil))\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &I:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Tuple (list (_starred_content (Name &t:0 Store))) Store)) (Call (Name &I:0 Load) nil nil) None)\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign (list (Tuple (list (_starred_content (Name &n:0 Store))) Store)) (Call (Name &I:0 Load) nil nil) None)\n        (Assign (list (Name &l:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None)\n        (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzYyXQ== None))\n              )\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                (list Eq)\n                (list (Constant s-WzYwXQ== None))\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))\n          (/seq\n            (Assign\n              (list (Name &m:0 Store))\n              (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)\n              None\n            )\n            (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n            (While\n              (Compare\n                (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list NotEq)\n                (list (Constant s-WzYwXQ== None))\n              )\n              (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None)))\n              (/seq)\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_min Load)\n                      (list\n                        (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n                        (_starred_content\n                          (Call\n                            (Attribute (Name &s:0 Load) s_index Load)\n                            (list (_starred_content (Constant s-WzYyXQ== None)))\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &array:0 Store)) (Call (Name g_input Load) nil nil) None)\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &dele:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &cool:0 Store)) (Constant i1 None) None)\n        (Assign (list (Name &done:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &one:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &two:0 Store)) (Constant i0 None) None)\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load)\n                (list Eq)\n                (list (Constant s-WzYyXQ== None))\n              )\n              (Compare\n                (Subscript (Name &array:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                (list Eq)\n                (list (Constant s-WzYwXQ== None))\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &dele:0 Load))) nil)))\n          (/seq\n            (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n            (While\n              (Compare\n                (Name &i:0 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil))\n              )\n              (/seq\n                (While\n                  (Compare\n                    (Subscript (Name &array:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s-WzYwXQ== None))\n                  )\n                  (/seq\n                    (AugAssign (Name &one:0 Store) Add (Constant i1 None))\n                    (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq)\n                )\n                Break\n              )\n              (/seq)\n            )\n            (Assign\n              (list (Name &i:0 Store))\n              (BinOp (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil) Sub (Constant i1 None))\n              None\n            )\n            (While\n              (Compare (Name &i:0 Load) (list Gt) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (While\n                  (Compare\n                    (Subscript (Name &array:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant s-WzYyXQ== None))\n                  )\n                  (/seq\n                    (AugAssign (Name &two:0 Store) Add (Constant i1 None))\n                    (AugAssign (Name &i:0 Store) Sub (Constant i1 None))\n                  )\n                  (/seq)\n                )\n                Break\n              )\n              (/seq)\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Name g_min Load)\n                      (list (_starred_content (Name &two:0 Load)) (_starred_content (Name &one:0 Load)))\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &t:0) (Assign (list (Name &tests:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (fn_1 &length:0) (Expr (Call (Attribute (Name &tests:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) (/seq) None) (FunctionDef &solve:0 (arguments nil (list (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &streak1:1 Store)) (Constant i0 None) None) (Assign (list (Name &streak2:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant s-WzYwXQ== None))) (/seq (AugAssign (Name &streak1:1 Store) Add (Constant i1 None))) (/seq Break))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &s:1 Load) (_slice_content (BinOp (UnaryOp USub (Name &i:1 Load)) Sub (Constant i1 None))) Load) (list Eq) (list (Constant s-WzYyXQ== None))) (/seq (AugAssign (Name &streak2:1 Store) Add (Constant i1 None))) (/seq Break))) (/seq) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &streak1:1 Load)) (_starred_content (Name &streak2:1 Load))) nil))) nil None None) (Assign (list (Name &res:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Call (Name g_str Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &x:2 Load))) nil))) nil))) (_starred_content (Name &tests:0 Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Name &res:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (fn_1 &n:0) (Assign (list (Name &Tests:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &n:0 Load)))) nil) (/seq (If (Compare (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_input Load) nil nil)) Continue) (/seq (Expr (Call (Attribute (Name &Tests:0 Load) s_append Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &max_left:0 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None) (Assign (list (Name &max_right:0 Store)) (BinOp (Constant i10 None) Pow (Constant i6 None)) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil) (/seq (If (Compare (Subscript (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (list Eq) (list (Constant s-WzYyXQ== None))) (/seq (Assign (list (Name &max_left:0 Store)) (Name &j:0 Load) None) Break) (/seq))) (/seq) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil) (/seq (If (Compare (Subscript (Subscript (Subscript (Name &Tests:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) (_slice_content (Name &j:0 Load)) Load) (list Eq) (list (Constant s-WzYwXQ== None))) (/seq (Assign (list (Name &max_right:0 Store)) (Name &j:0 Load) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &max_left:0 Load)) (_starred_content (Name &max_right:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &n:0) (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Name &s:0 Load))) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &st:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &en:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (If (BoolOp Or (list (Compare (Name &st:0 Load) (list Eq) (list (Constant s-WzYyXQ== None))) (Compare (Name &en:0 Load) (list Eq) (list (Constant s-WzYwXQ== None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Constant s-WzYyXQ== None) (list In) (list (Name &s:0 Load))) (/seq (Assign (list (Name &c1:0 Store)) (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYyXQ== None))) nil) None)) (/seq)) (If (Compare (Constant s-WzYwXQ== None) (list In) (list (Name &s:0 Load))) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_reverse Load) nil nil)) (Assign (list (Name &c2:0 Store)) (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYwXQ== None))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &c1:0 Load)) (_starred_content (Name &c2:0 Load))) nil))) nil))))))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &t:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (fn_1 &n:0) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s2:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (If (Compare (Constant s-WzYyXQ== None) (list In) (list (Name &s:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYyXQ== None))) nil) None)) (/seq)) (If (Compare (Constant s-WzYwXQ== None) (list In) (list (Name &s:0 Load))) (/seq (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &s2:0 Load) s_index Load) (list (_starred_content (Constant s-WzYwXQ== None))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &cnt:0 (arguments nil (list (arg &s:1 None None) (arg &i:1 None None) (arg &j:1 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant s-WzYyXQ== None))) (Compare (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Constant s-WzYwXQ== None))))) (/seq (Return (Constant i0 None))) (/seq (Return (BinOp (Constant i1 None) Add (Call (Name &cnt:0 Load) (list (_starred_content (Name &s:1 Load)) (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &j:1 Load) Sub (Constant i1 None)))) nil)))))) nil None None) (fn_1 &T:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &T:0 Load))) nil) (/seq (fn_1 &N:0) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &cnt:0 Load) (list (_starred_content (Name &s:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &t:0) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (fn_1 &n:0) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &l:0 Load) (list Lt) (list (Name &n:0 Load))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &l:0 Load)) Load) (list NotEq) (list (Constant s-WzYyXQ== None))))) (/seq (AugAssign (Name &l:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &r:0 Load) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &r:0 Load)) Load) (list NotEq) (list (Constant s-WzYwXQ== None))))) (/seq (AugAssign (Name &r:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &l:0 Load)) (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &r:0 Load)))) nil)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (fn_1 &t:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &cl:0 Store)) (Constant i0 None) None) (For (Name &c:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant s-WzYyXQ== None))) (/seq Break) (/seq)) (AugAssign (Name &cl:0 Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &cr:0 Store)) (Constant i0 None) None) (For (Name &c:0 Store) (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant s-WzYwXQ== None))) (/seq Break) (/seq)) (AugAssign (Name &cr:0 Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &cl:0 Load)) (_starred_content (Name &cr:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (fn_1 &t:0) (While (Compare (Name &t:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (fn_1 &n:0) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store) (Name &y:0 Store)) (UnaryOp USub (Constant i1 None)) None) (If (Compare (Constant s-WzYyXQ== None) (list In) (list (Name &s:0 Load))) (/seq (Assign (list (Name &x:0 Store)) (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYyXQ== None))) nil) None)) (/seq)) (If (Compare (Constant s-WzYwXQ== None) (list In) (list (Name &s:0 Load))) (/seq (Assign (list (Name &y:0 Store)) (Call (Attribute (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) s_index Load) (list (_starred_content (Constant s-WzYwXQ== None))) nil) None)) (/seq)) (If (BoolOp Or (list (Compare (Name &x:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Name &y:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil))) nil)))) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &fastio:0 (arguments nil nil None nil nil None nil) (/seq (Import (list (alias &sys:1 None))) (ImportFrom s_io (list (alias &StringIO:1 None)) i0) (ImportFrom s_atexit (list (alias &register:1 None)) i0) (Global (list s_input)) (Assign (list (Attribute (Name &sys:1 Load) s_stdin Store)) (Call (Name &StringIO:1 Load) (list (_starred_content (Call (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_read Load) nil nil))) nil) None) (Assign (list (Name g_input Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (_starred_content (Constant s-WzEzLCAxMF0= None))) nil)) None) (Assign (list (Attribute (Name &sys:1 Load) s_stdout Store)) (Call (Name &StringIO:1 Load) nil nil) None) (Expr (Call (Name &register:1 Load) (list (_starred_content (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Attribute (Name &sys:1 Load) s___stdout__ Load) s_write Load) (list (_starred_content (Call (Attribute (Attribute (Name &sys:1 Load) s_stdout Load) s_getvalue Load) nil nil))) nil)))) nil))) nil None None) (Expr (Call (Name &fastio:0 Load) nil nil)) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &I:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (Assign (list (Tuple (list (_starred_content (Name &t:0 Store))) Store)) (Call (Name &I:0 Load) nil nil) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store))) Store)) (Call (Name &I:0 Load) nil nil) None) (Assign (list (Name &l:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (If (BoolOp Or (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzYyXQ== None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Constant s-WzYwXQ== None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &m:0 Store)) (Subscript (Name &s:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) None) (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (While (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Constant s-WzYwXQ== None))) (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) (_starred_content (Call (Attribute (Name &s:0 Load) s_index Load) (list (_starred_content (Constant s-WzYyXQ== None))) nil))) nil))) nil))))) (/seq))) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (fn_1 &n:0) (Assign (list (Name &array:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &dele:0 Store)) (Constant i0 None) None) (Assign (list (Name &cool:0 Store)) (Constant i1 None) None) (Assign (list (Name &done:0 Store)) (Constant i0 None) None) (Assign (list (Name &one:0 Store)) (Constant i0 None) None) (Assign (list (Name &two:0 Store)) (Constant i0 None) None) (If (BoolOp Or (list (Compare (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s-WzYyXQ== None))) (Compare (Subscript (Name &array:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Constant s-WzYwXQ== None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &dele:0 Load))) nil))) (/seq (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil))) (/seq (While (Compare (Subscript (Name &array:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s-WzYwXQ== None))) (/seq (AugAssign (Name &one:0 Store) Add (Constant i1 None)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) Break) (/seq)) (Assign (list (Name &i:0 Store)) (BinOp (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil) Sub (Constant i1 None)) None) (While (Compare (Name &i:0 Load) (list Gt) (list (UnaryOp USub (Constant i1 None)))) (/seq (While (Compare (Subscript (Name &array:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s-WzYyXQ== None))) (/seq (AugAssign (Name &two:0 Store) Add (Constant i1 None)) (AugAssign (Name &i:0 Store) Sub (Constant i1 None))) (/seq)) Break) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &two:0 Load)) (_starred_content (Name &one:0 Load))) nil))) nil))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &maxm:0 Store))\n      (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (FunctionDef\n      &computeGCD:0\n      (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Name &y:1 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &y:1 Load))\n                  (_starred_content (BinOp (Name &x:1 Load) Mod (Name &y:1 Load)))\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &x:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (Name &maxm:0 Load) Sub (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name &computeGCD:0 Load)\n            (list\n              (_starred_content (Name &a:0 Load))\n              (_starred_content\n                (BinOp (Name &maxm:0 Load) Sub (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (Name &maxm:0 Load) Sub (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (BinOp (Name &ans:0 Load) FloorDiv (Name &a:0 Load)))\n          (_starred_content (Name &a:0 Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Name &b:1 Load)\n          (/seq\n            (AugAssign (Name &a:1 Store) Mod (Name &b:1 Load))\n            (Assign\n              (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store))\n              (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &a:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign\n      (list (Name &ost:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (_starred_content\n            (ListComp\n              (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:2 Load)) Load))\n              (list\n                (comprehension\n                  (Name &i:2 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &ost:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &tmp:0 Store))\n          (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &tmp:0 Store))\n              (Call\n                (Name &gcd:0 Load)\n                (list\n                  (_starred_content (Name &tmp:0 Load))\n                  (_starred_content\n                    (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &tmp:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &tmp:0 Load)) (_starred_content (Name &ost:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (_starred_content (Name &ost:0 Load)) (_starred_content (Name &tmp:0 Load)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (BinOp (Name &ost:0 Load) FloorDiv (Name &tmp:0 Load)))\n                  (_starred_content (Name &tmp:0 Load))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)))\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_gcd None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (AugAssign\n          (Name &s:0 Store)\n          Add\n          (BinOp (Name &d:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n        )\n        (Assign\n          (list (Name &k:0 Store))\n          (Call\n            (Name g_gcd Load)\n            (list\n              (_starred_content (Name &k:0 Load))\n              (_starred_content\n                (BinOp (Name &d:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (_starred_content (BinOp (Name &s:0 Load) FloorDiv (Name &k:0 Load))) (_starred_content (Name &k:0 Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &g:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq\n        (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content\n                (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n              )\n            )\n            (list (keyword s_sep (Constant s-WzMyXQ== None)))\n          )\n        )\n      )\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list NotEq)\n                (list (Name &m:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &g:0 Store))\n                  (Call\n                    (Attribute (Name g_math Load) s_gcd Load)\n                    (list\n                      (_starred_content (Name &g:0 Load))\n                      (_starred_content\n                        (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &y:0 Store))\n              (BinOp\n                (Name &y:0 Load)\n                Add\n                (BinOp\n                  (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                  FloorDiv\n                  (Name &g:0 Load)\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Name &y:0 Load)) (_starred_content (Name &g:0 Load)))\n            (list (keyword s_sep (Constant s-WzMyXQ== None)))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &find_gcd:0\n      (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Name &y:1 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))\n              (Tuple\n                (list\n                  (_starred_content (Name &y:1 Load))\n                  (_starred_content (BinOp (Name &x:1 Load) Mod (Name &y:1 Load)))\n                )\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Return (Name &x:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &narr:0 Store)) (List nil Load) None)\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &narr:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (BinOp (Name &m:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n            )\n            nil\n          )\n        )\n        (AugAssign\n          (Name &count:0 Store)\n          Add\n          (BinOp (Name &m:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &n1:0 Store)) (Subscript (Name &narr:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &n2:0 Store)) (Subscript (Name &narr:0 Load) (_slice_content (Constant i1 None)) Load) None)\n    (Assign\n      (list (Name &hcf:0 Store))\n      (Call\n        (Name &find_gcd:0 Load)\n        (list (_starred_content (Name &n1:0 Load)) (_starred_content (Name &n2:0 Load)))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &hcf:0 Store))\n          (Call\n            (Name &find_gcd:0 Load)\n            (list\n              (_starred_content (Name &hcf:0 Load))\n              (_starred_content (Subscript (Name &narr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (BinOp (Name &count:0 Load) FloorDiv (Name &hcf:0 Load)))\n          (_starred_content (Name &hcf:0 Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &maxx:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &summ:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &g:0 Store))\n      (BinOp (Name &maxx:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign (list (Name &l:0 Store)) (BinOp (Name &maxx:0 Load) Sub (Name &i:0 Load)) None)\n        (AugAssign (Name &summ:0 Store) Add (Name &l:0 Load))\n        (Assign\n          (list (Name &g:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_gcd Load)\n            (list (_starred_content (Name &g:0 Load)) (_starred_content (Name &l:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content (BinOp (Name &summ:0 Load) FloorDiv (Name &g:0 Load)))\n          (_starred_content (Name &g:0 Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_functools None)))\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &soma:0\n      (arguments nil (list (arg &v:1 None None) (arg &tam:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &sum:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &x:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &tam:1 Load))) nil)\n          (/seq\n            (Assign\n              (list (Name &sum:1 Store))\n              (BinOp (Name &sum:1 Load) Add (Subscript (Name &v:1 Load) (_slice_content (Name &x:1 Load)) Load))\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &sum:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &tamanho:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &maior:0 Store))\n      (Subscript (Name &v:0 Load) (_slice_content (BinOp (Name &tamanho:0 Load) Sub (Constant i1 None))) Load)\n      None\n    )\n    (Assign\n      (list (Name &yz:0 Store))\n      (BinOp\n        (BinOp (Name &maior:0 Load) Mult (Name &tamanho:0 Load))\n        Sub\n        (Call\n          (Name &soma:0 Load)\n          (list (_starred_content (Name &v:0 Load)) (_starred_content (Name &tamanho:0 Load)))\n          nil\n        )\n      )\n      None\n    )\n    (For\n      (Name &w:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &tamanho:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &v:0 Load) (_slice_content (Name &w:0 Load)) Store))\n          (BinOp (Name &maior:0 Load) Sub (Subscript (Name &v:0 Load) (_slice_content (Name &w:0 Load)) Load))\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (Call\n        (Attribute (Name g_functools Load) s_reduce Load)\n        (list (_starred_content (Attribute (Name g_math Load) s_gcd Load)) (_starred_content (Name &v:0 Load)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &z:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (BinOp (Name &yz:0 Load) Div (Name &y:0 Load)))) nil)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &z:0 Load)) (_starred_content (Name &y:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &a:0 Store))\n      (Tuple\n        (list\n          (_starred_starred\n            (Starred\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n              Load\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))\n      None\n    )\n    (For\n      (Name &x:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_gcd Load)\n            (list (_starred_content (Name &d:0 Load)) (_starred_content (BinOp (Name &m:0 Load) Sub (Name &x:0 Load))))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil) Mult (Name &m:0 Load))\n                Sub\n                (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)\n              )\n              FloorDiv\n              (Name &d:0 Load)\n            )\n          )\n          (_starred_content (Name &d:0 Load))\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &n1:1 None None) (arg &n2:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n2:1 Load) (list Gt) (list (Name &n1:1 Load)))\n          (/seq\n            (Return\n              (Call\n                (Name &gcd:0 Load)\n                (list (_starred_content (Name &n2:1 Load)) (_starred_content (Name &n1:1 Load)))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n        (If (Compare (Name &n2:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &n1:1 Load))) (/seq))\n        (Return\n          (Call\n            (Name &gcd:0 Load)\n            (list\n              (_starred_content (Name &n2:1 Load))\n              (_starred_content (BinOp (Name &n1:1 Load) Mod (Name &n2:1 Load)))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &check:0\n      (arguments nil (list (arg &x:2 None None) (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Name &x:2 Load)\n            (list Lt)\n            (list (Call (Name g_max Load) (list (_starred_content (Name &arr:2 Load))) nil))\n          )\n          (/seq\n            (Return\n              (Tuple\n                (list\n                  (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))\n                  (_starred_content (Constant i0 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &arr:2 Load))) nil) None)\n        (Assign\n          (list (Name &total:2 Store))\n          (Call (Name g_sum Load) (list (_starred_content (Name &arr:2 Load))) nil)\n          None\n        )\n        (Assign (list (Name &g:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Name &arr:2 Load)\n          (/seq\n            (Assign\n              (list (Name &g:2 Store))\n              (Call\n                (Name &gcd:0 Load)\n                (list\n                  (_starred_content (Name &g:2 Load))\n                  (_starred_content (BinOp (Name &x:2 Load) Sub (Name &i:2 Load)))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &y:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Name &arr:2 Load)\n          (/seq\n            (AugAssign\n              (Name &y:2 Store)\n              Add\n              (BinOp (BinOp (Name &x:2 Load) Sub (Name &i:2 Load)) FloorDiv (Name &g:2 Load))\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &total:2 Store))\n          (BinOp (BinOp (Name &n:2 Load) Mult (Name &x:2 Load)) Sub (Name &total:2 Load))\n          None\n        )\n        (If\n          (Compare (BinOp (Name &total:2 Load) Mod (Name &y:2 Load)) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (Tuple\n                (list\n                  (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))\n                  (_starred_content (Constant i0 None))\n                )\n                Load\n              )\n            )\n          )\n          (/seq)\n        )\n        (Return\n          (Tuple\n            (list\n              (_starred_content (Name &y:2 Load))\n              (_starred_content (BinOp (Name &total:2 Load) FloorDiv (Name &y:2 Load)))\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:3 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &arr:3 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &y:3 Store))\n          (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n          None\n        )\n        (Assign (list (Name &z:3 Store)) (Constant i0 None) None)\n        (Assign (list (Name &low:3 Store)) (Constant i0 None) None)\n        (Assign (list (Name &high:3 Store)) (BinOp (Constant i10 None) Pow (Constant i15 None)) None)\n        (While\n          (Compare (Name &low:3 Load) (list LtE) (list (Name &high:3 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:3 Store))\n              (BinOp\n                (Name &low:3 Load)\n                Add\n                (BinOp (BinOp (Name &high:3 Load) Sub (Name &low:3 Load)) FloorDiv (Constant i2 None))\n              )\n              None\n            )\n            (Assign\n              (list (Tuple (list (_starred_content (Name &y1:3 Store)) (_starred_content (Name &z1:3 Store))) Store))\n              (Call\n                (Name &check:0 Load)\n                (list (_starred_content (Name &mid:3 Load)) (_starred_content (Name &arr:3 Load)))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare\n                (Name &y1:3 Load)\n                (list NotEq)\n                (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))\n              )\n              (/seq\n                (If\n                  (Compare (Name &y1:3 Load) (list Lt) (list (Name &y:3 Load)))\n                  (/seq\n                    (Assign (list (Name &y:3 Store)) (Name &y1:3 Load) None)\n                    (Assign (list (Name &z:3 Store)) (Name &z1:3 Load) None)\n                  )\n                  (/seq)\n                )\n                (Assign (list (Name &high:3 Store)) (BinOp (Name &mid:3 Load) Sub (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &low:3 Store)) (BinOp (Name &mid:3 Load) Add (Constant i1 None)) None))\n            )\n          )\n          (/seq)\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &y:3 Load)) (_starred_content (Name &z:3 Load))) nil)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n    (Assign (list (Name &d:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &m:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &d:0 Load) s_append Load)\n                (list (_starred_content (BinOp (Name &m:0 Load) Sub (Name &i:0 Load))))\n                nil\n              )\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &z:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (Assign\n          (list (Name &z:0 Store))\n          (Call\n            (Attribute (Name g_math Load) s_gcd Load)\n            (list (_starred_content (Name &z:0 Load)) (_starred_content (Name &i:0 Load)))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq (AugAssign (Name &y:0 Store) Add (BinOp (Name &i:0 Load) FloorDiv (Name &z:0 Load))))\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load)) (_starred_content (Name &z:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 &n:0 &s:0)) (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil)) (Assign (list (Name &maxm:0 Store)) (Subscript (Name &s:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (FunctionDef &computeGCD:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (While (Name &y:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (Tuple (list (_starred_content (Name &y:1 Load)) (_starred_content (BinOp (Name &x:1 Load) Mod (Name &y:1 Load)))) Load) None)) (/seq)) (Return (Name &x:1 Load))) nil None None) (Assign (list (Name &a:0 Store)) (BinOp (Name &maxm:0 Load) Sub (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name &computeGCD:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (BinOp (Name &maxm:0 Load) Sub (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Name &maxm:0 Load) Sub (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ans:0 Load) FloorDiv (Name &a:0 Load))) (_starred_content (Name &a:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (While (Name &b:1 Load) (/seq (AugAssign (Name &a:1 Store) Mod (Name &b:1 Load)) (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load) None)) (/seq)) (Return (Name &a:1 Load))) nil None None) (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &ost:0 Store)) (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:2 Load)) Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))))) nil) None) (If (Compare (Name &ost:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &tmp:0 Store)) (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &tmp:0 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Name &tmp:0 Load)) (_starred_content (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil) None)) (/seq) None) (If (Compare (Name &tmp:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &tmp:0 Load)) (_starred_content (Name &ost:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &ost:0 Load)) (_starred_content (Name &tmp:0 Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &ost:0 Load) FloorDiv (Name &tmp:0 Load))) (_starred_content (Name &tmp:0 Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) nil))))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_gcd None)) i0) (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &d:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &d:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (Assign (list (Name &k:0 Store)) (Call (Name g_gcd Load) (list (_starred_content (Name &k:0 Load)) (_starred_content (BinOp (Name &d:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) FloorDiv (Name &k:0 Load))) (_starred_content (Name &k:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &g:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)))) (list (keyword s_sep (Constant s-WzMyXQ== None)))))) (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Name &m:0 Load))) (/seq (Assign (list (Name &g:0 Store)) (Call (Attribute (Name g_math Load) s_gcd Load) (list (_starred_content (Name &g:0 Load)) (_starred_content (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Add (BinOp (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)) FloorDiv (Name &g:0 Load))) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load)) (_starred_content (Name &g:0 Load))) (list (keyword s_sep (Constant s-WzMyXQ== None)))))))) nil)",
      "(Module (/seq (FunctionDef &find_gcd:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (While (Name &y:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (Tuple (list (_starred_content (Name &y:1 Load)) (_starred_content (BinOp (Name &x:1 Load) Mod (Name &y:1 Load)))) Load) None)) (/seq)) (Return (Name &x:1 Load))) nil None None) (/splice (fn_1 &n:0 &arr:0)) (Assign (list (Name &narr:0 Store)) (List nil Load) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &narr:0 Load) s_append Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil)) (AugAssign (Name &count:0 Store) Add (BinOp (Name &m:0 Load) Sub (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)))) (/seq) None) (Assign (list (Name &n1:0 Store)) (Subscript (Name &narr:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &n2:0 Store)) (Subscript (Name &narr:0 Load) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name &hcf:0 Store)) (Call (Name &find_gcd:0 Load) (list (_starred_content (Name &n1:0 Load)) (_starred_content (Name &n2:0 Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &hcf:0 Store)) (Call (Name &find_gcd:0 Load) (list (_starred_content (Name &hcf:0 Load)) (_starred_content (Subscript (Name &narr:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &count:0 Load) FloorDiv (Name &hcf:0 Load))) (_starred_content (Name &hcf:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &maxx:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &summ:0 Store)) (Constant i0 None) None) (Assign (list (Name &g:0 Store)) (BinOp (Name &maxx:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &l:0 Store)) (BinOp (Name &maxx:0 Load) Sub (Name &i:0 Load)) None) (AugAssign (Name &summ:0 Store) Add (Name &l:0 Load)) (Assign (list (Name &g:0 Store)) (Call (Attribute (Name g_math Load) s_gcd Load) (list (_starred_content (Name &g:0 Load)) (_starred_content (Name &l:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &summ:0 Load) FloorDiv (Name &g:0 Load))) (_starred_content (Name &g:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_functools None))) (Import (list (alias g_math None))) (FunctionDef &soma:0 (arguments nil (list (arg &v:1 None None) (arg &tam:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &sum:1 Store)) (Constant i0 None) None) (For (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &tam:1 Load))) nil) (/seq (Assign (list (Name &sum:1 Store)) (BinOp (Name &sum:1 Load) Add (Subscript (Name &v:1 Load) (_slice_content (Name &x:1 Load)) Load)) None)) (/seq) None) (Return (Name &sum:1 Load))) nil None None) (Assign (list (Name &tamanho:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &v:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil)) (Assign (list (Name &maior:0 Store)) (Subscript (Name &v:0 Load) (_slice_content (BinOp (Name &tamanho:0 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &yz:0 Store)) (BinOp (BinOp (Name &maior:0 Load) Mult (Name &tamanho:0 Load)) Sub (Call (Name &soma:0 Load) (list (_starred_content (Name &v:0 Load)) (_starred_content (Name &tamanho:0 Load))) nil)) None) (For (Name &w:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &tamanho:0 Load))) nil) (/seq (Assign (list (Subscript (Name &v:0 Load) (_slice_content (Name &w:0 Load)) Store)) (BinOp (Name &maior:0 Load) Sub (Subscript (Name &v:0 Load) (_slice_content (Name &w:0 Load)) Load)) None)) (/seq) None) (Assign (list (Name &y:0 Store)) (Call (Attribute (Name g_functools Load) s_reduce Load) (list (_starred_content (Attribute (Name g_math Load) s_gcd Load)) (_starred_content (Name &v:0 Load))) nil) None) (Assign (list (Name &z:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Name &yz:0 Load) Div (Name &y:0 Load)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &z:0 Load)) (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &a:0 Store)) (Tuple (list (_starred_starred (Starred (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) Load))) Load) None) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &d:0 Store)) (BinOp (Name &m:0 Load) Sub (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_gcd Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (BinOp (Name &m:0 Load) Sub (Name &x:0 Load)))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil) Mult (Name &m:0 Load)) Sub (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil)) FloorDiv (Name &d:0 Load))) (_starred_content (Name &d:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &gcd:0 (arguments nil (list (arg &n1:1 None None) (arg &n2:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n2:1 Load) (list Gt) (list (Name &n1:1 Load))) (/seq (Return (Call (Name &gcd:0 Load) (list (_starred_content (Name &n2:1 Load)) (_starred_content (Name &n1:1 Load))) nil))) (/seq)) (If (Compare (Name &n2:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &n1:1 Load))) (/seq)) (Return (Call (Name &gcd:0 Load) (list (_starred_content (Name &n2:1 Load)) (_starred_content (BinOp (Name &n1:1 Load) Mod (Name &n2:1 Load)))) nil))) nil None None) (FunctionDef &check:0 (arguments nil (list (arg &x:2 None None) (arg &arr:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:2 Load) (list Lt) (list (Call (Name g_max Load) (list (_starred_content (Name &arr:2 Load))) nil))) (/seq (Return (Tuple (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) (_starred_content (Constant i0 None))) Load))) (/seq)) (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &arr:2 Load))) nil) None) (Assign (list (Name &total:2 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &arr:2 Load))) nil) None) (Assign (list (Name &g:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Name &arr:2 Load) (/seq (Assign (list (Name &g:2 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Name &g:2 Load)) (_starred_content (BinOp (Name &x:2 Load) Sub (Name &i:2 Load)))) nil) None)) (/seq) None) (Assign (list (Name &y:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Name &arr:2 Load) (/seq (AugAssign (Name &y:2 Store) Add (BinOp (BinOp (Name &x:2 Load) Sub (Name &i:2 Load)) FloorDiv (Name &g:2 Load)))) (/seq) None) (Assign (list (Name &total:2 Store)) (BinOp (BinOp (Name &n:2 Load) Mult (Name &x:2 Load)) Sub (Name &total:2 Load)) None) (If (Compare (BinOp (Name &total:2 Load) Mod (Name &y:2 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) (_starred_content (Constant i0 None))) Load))) (/seq)) (Return (Tuple (list (_starred_content (Name &y:2 Load)) (_starred_content (BinOp (Name &total:2 Load) FloorDiv (Name &y:2 Load)))) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 &n:3 &arr:3)) (Assign (list (Name &y:3 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &z:3 Store)) (Constant i0 None) None) (Assign (list (Name &low:3 Store)) (Constant i0 None) None) (Assign (list (Name &high:3 Store)) (BinOp (Constant i10 None) Pow (Constant i15 None)) None) (While (Compare (Name &low:3 Load) (list LtE) (list (Name &high:3 Load))) (/seq (Assign (list (Name &mid:3 Store)) (BinOp (Name &low:3 Load) Add (BinOp (BinOp (Name &high:3 Load) Sub (Name &low:3 Load)) FloorDiv (Constant i2 None))) None) (Assign (list (Tuple (list (_starred_content (Name &y1:3 Store)) (_starred_content (Name &z1:3 Store))) Store)) (Call (Name &check:0 Load) (list (_starred_content (Name &mid:3 Load)) (_starred_content (Name &arr:3 Load))) nil) None) (If (Compare (Name &y1:3 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (If (Compare (Name &y1:3 Load) (list Lt) (list (Name &y:3 Load))) (/seq (Assign (list (Name &y:3 Store)) (Name &y1:3 Load) None) (Assign (list (Name &z:3 Store)) (Name &z1:3 Load) None)) (/seq)) (Assign (list (Name &high:3 Store)) (BinOp (Name &mid:3 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &low:3 Store)) (BinOp (Name &mid:3 Load) Add (Constant i1 None)) None)))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:3 Load)) (_starred_content (Name &z:3 Load))) nil))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &d:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &m:0 Load))) (/seq (Expr (Call (Attribute (Name &d:0 Load) s_append Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Name &i:0 Load)))) nil))) (/seq))) (/seq) None) (Assign (list (Name &z:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (Assign (list (Name &z:0 Store)) (Call (Attribute (Name g_math Load) s_gcd Load) (list (_starred_content (Name &z:0 Load)) (_starred_content (Name &i:0 Load))) nil) None)) (/seq) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (AugAssign (Name &y:0 Store) Add (BinOp (Name &i:0 Load) FloorDiv (Name &z:0 Load)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load)) (_starred_content (Name &z:0 Load))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &s_a:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (JoinedStr\n                  (list\n                    (FormattedValue (Call (Name g_len Load) (list (_starred_content (Name &s_a:0 Load))) nil) i-1 None)\n                    (Constant s-WzEwXQ== None)\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &k:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Call\n            (Name g_set Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &s:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_len Load)\n                  (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &l:0 Load))) nil)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &test:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &test:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Call (Name g_set Load) nil nil) None)\n        (For\n          (Name &i:0 Store)\n          (Name &arr:0 Load)\n          (/seq (Expr (Call (Attribute (Name &s:0 Load) s_add Load) (list (_starred_content (Name &i:0 Load))) nil)))\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &A:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &B:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &A:0 Load))) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &B:0 Load))) nil) None)\n        (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign (list (Name &mp:0 Store)) (Call (Name g_set Load) nil nil) None)\n        (Assign\n          (list (Name &arr:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &a:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &a:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &a:0 Store)\n          (Name &arr:0 Load)\n          (/seq (Expr (Call (Attribute (Name &mp:0 Load) s_add Load) (list (_starred_content (Name &a:0 Load))) nil)))\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &mp:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &inf:0 Store)) (Name g_stdin Load) None)\n    (For\n      (Name &qw:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_int Load)\n              (list (_starred_content (Call (Attribute (Name &inf:0 Load) s_readline Load) nil nil)))\n              nil\n            )\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call\n            (Name g_int Load)\n            (list (_starred_content (Call (Attribute (Name &inf:0 Load) s_readline Load) nil nil)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Call (Attribute (Name &inf:0 Load) s_readline Load) nil nil) s_split Load)\n                        (list (_starred_content (Constant s-WzMyXQ== None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_len Load)\n                  (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &arr:0 Load))) nil)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &cin:0 Store)) (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) None)\n    (Assign\n      (list (Name &cin:0 Store))\n      (Call (Attribute (Call (Attribute (Name &cin:0 Load) s_strip Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (_starred_content (Subscript (Name &cin:0 Load) (_slice_content (Constant i0 None)) Load)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &cin1:0 Store))\n          (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &cin2:0 Store))\n          (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil)\n          None\n        )\n        (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Call (Attribute (Name &cin2:0 Load) s_rstrip Load) nil nil) s_split Load)\n                        nil\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &cin1:0 Load))) nil)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list In)\n                (list (Name &d:0 Load))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Name &d:0 Load)\n                    (_slice_content (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                    Store\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &d:0 Load)\n                      (_slice_content (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load))\n                      Store\n                    )\n                  )\n                  (Constant i1 None)\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &d:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                        (list (_starred_content (Constant s-WzMyXQ== None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &arr:0 Load))) nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &m:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &ct:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_len Load)\n                  (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &s_a:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Call (Name g_len Load) (list (_starred_content (Name &s_a:0 Load))) nil) i-1 None) (Constant s-WzEwXQ== None))))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (/splice (fn_1 (Name g_set Load) &k:0 &x:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &x:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &l:0 Load))) nil))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &test:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &test:0 Load))) nil) (/seq (/splice (fn_1 (Name g_list Load) &n:0 &arr:0)) (Assign (list (Name &s:0 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &i:0 Store) (Name &arr:0 Load) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_add Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (/splice (fn_1 (Name g_list Load) &n:0 &A:0)) (Assign (list (Name &B:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &A:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_len Load) (list (_starred_content (Name &B:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &mp:0 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &a:1 Load))) nil) (list (comprehension (Name &a:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (For (Name &a:0 Store) (Name &arr:0 Load) (/seq (Expr (Call (Attribute (Name &mp:0 Load) s_add Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &mp:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None)) i0) (Assign (list (Name &inf:0 Store)) (Name g_stdin Load) None) (For (Name &qw:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name &inf:0 Load) s_readline Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name &inf:0 Load) s_readline Load) nil nil))) nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name &inf:0 Load) s_readline Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &cin:0 Store)) (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) None) (Assign (list (Name &cin:0 Store)) (Call (Attribute (Call (Attribute (Name &cin:0 Load) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &cin:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &cin1:0 Store)) (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) None) (Assign (list (Name &cin2:0 Store)) (Call (Name g_input Load) (list (_starred_content (Constant s_ None))) nil) None) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name &cin2:0 Load) s_rstrip Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &cin1:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d:0 Load) (_slice_content (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)) Store)) (Constant i1 None) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &d:0 Load))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &m:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &arr:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &m:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (For (Name &ct:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (/splice (fn_1 (Name g_list Load) &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n        (While\n          (Constant i1 None)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &x:0 Load) (list LtE) (list (Name &y:0 Load)))\n                  (Compare\n                    (BinOp\n                      (BinOp\n                        (BinOp (Name &x:0 Load) Add (Name &k:0 Load))\n                        Mult\n                        (BinOp (Name &x:0 Load) Add (Name &k:0 Load))\n                      )\n                      Add\n                      (BinOp (Name &y:0 Load) Mult (Name &y:0 Load))\n                    )\n                    (list LtE)\n                    (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &x:0 Store) Add (Name &k:0 Load)))\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &x:0 Load) (list Gt) (list (Name &y:0 Load)))\n                      (Compare\n                        (BinOp\n                          (BinOp\n                            (BinOp (Name &y:0 Load) Add (Name &k:0 Load))\n                            Mult\n                            (BinOp (Name &y:0 Load) Add (Name &k:0 Load))\n                          )\n                          Add\n                          (BinOp (Name &x:0 Load) Mult (Name &x:0 Load))\n                        )\n                        (list LtE)\n                        (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n                      )\n                    )\n                  )\n                  (/seq (AugAssign (Name &y:0 Store) Add (Name &k:0 Load)))\n                  (/seq Break)\n                )\n              )\n            )\n          )\n          (/seq)\n        )\n        (If\n          (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None)))\n    (Import (list (alias g_io None) (alias g_os None)))\n    (ImportFrom s_bisect (list (alias s_bisect_left g_bl) (alias s_bisect_right g_br) (alias g_insort None)) i0)\n    (ImportFrom s_heapq (list (alias g_heapify None) (alias g_heappush None) (alias g_heappop None)) i0)\n    (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None) (alias g_Counter None)) i0)\n    (ImportFrom s_itertools (list (alias g_permutations None) (alias g_combinations None)) i0)\n    (FunctionDef\n      &data:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mdata:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &data:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &outl:0\n      (arguments nil (list (arg &var:1 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call\n                    (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                    (list\n                      (_starred_content\n                        (Call\n                          (Name g_map Load)\n                          (list (_starred_content (Name g_str Load)) (_starred_content (Name &var:1 Load)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                  Add\n                  (Constant s-WzEwXQ== None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &out:0\n      (arguments nil (list (arg &var:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Call (Name g_str Load) (list (_starred_content (Name &var:2 Load))) nil)\n                  Add\n                  (Constant s-WzEwXQ== None)\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (Constant i100000 None)))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &INF:0 Store))\n      (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)\n      None\n    )\n    (Assign (list (Name &mod:0 Store)) (Constant i998244353 None) None)\n    (For\n      (Name &t:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &data:0 Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call (Name &mdata:0 Load) nil nil)\n          None\n        )\n        (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare\n            (BinOp (Constant i2 None) Mult (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Pow (Constant i2 None)))\n            (list LtE)\n            (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n          )\n          (/seq (AugAssign (Name &a:0 Store) Add (Name &k:0 Load)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &a:0 Load) Pow (Constant i2 None))\n              Add\n              (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Pow (Constant i2 None))\n            )\n            (list LtE)\n            (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n          )\n          (/seq (Expr (Call (Name &out:0 Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n          (/seq (Expr (Call (Name &out:0 Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &a0:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content\n                      (Call\n                        (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                        (list (_starred_content (Constant s-WzMyXQ== None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (BinOp (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) Div (BinOp (Name &k:0 Load) Mult (Name &k:0 Load)))\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil) Div (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_pow Load)\n                  (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant f0.5 None)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &b:0 Store)) (Name &a:0 Load) None)\n        (If\n          (Compare\n            (BinOp\n              (BinOp\n                (BinOp (Name &a:0 Load) Add (Constant i1 None))\n                Mult\n                (BinOp (Name &a:0 Load) Add (Constant i1 None))\n              )\n              Add\n              (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            )\n            (list LtE)\n            (list (Name &x:0 Load))\n          )\n          (/seq (AugAssign (Name &a:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp\n                (BinOp (Name &b:0 Load) Add (Constant i1 None))\n                Mult\n                (BinOp (Name &b:0 Load) Add (Constant i1 None))\n              )\n              Add\n              (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))\n            )\n            (list LtE)\n            (list (Name &x:0 Load))\n          )\n          (/seq (AugAssign (Name &b:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (Assign (list (Name &ans:0 Store)) (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) None)\n        (If\n          (Compare (BinOp (Name &ans:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &val:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Name &d:0 Load)\n                  FloorDiv\n                  (BinOp (BinOp (Constant i2 None) Pow (Constant f0.5 None)) Mult (Name &k:0 Load))\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &p:0 Store) (Name &q:0 Store)) (BinOp (Name &val:0 Load) Mult (Name &k:0 Load)) None)\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare\n            (BinOp (BinOp (Name &p:0 Load) Pow (Constant i2 None)) Add (BinOp (Name &q:0 Load) Pow (Constant i2 None)))\n            (list LtE)\n            (list (BinOp (Name &d:0 Load) Pow (Constant i2 None)))\n          )\n          (/seq\n            (If\n              (Compare (Name &p:0 Load) (list NotEq) (list (Name &q:0 Load)))\n              (/seq (AugAssign (Name &q:0 Store) Add (Name &k:0 Load)))\n              (/seq (AugAssign (Name &p:0 Store) Add (Name &k:0 Load)))\n            )\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (If\n          (Compare (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &r:0 Store)) (_starred_content (Name &n:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare\n            (BinOp\n              (BinOp (BinOp (Name &t:0 Load) Add (Name &n:0 Load)) Mult (BinOp (Name &t:0 Load) Add (Name &n:0 Load)))\n              Mult\n              (Constant i2 None)\n            )\n            (list Lt)\n            (list (BinOp (Name &r:0 Load) Mult (Name &r:0 Load)))\n          )\n          (/seq (AugAssign (Name &t:0 Store) Add (Name &n:0 Load)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &t:0 Load) Mult (Name &t:0 Load))\n              Add\n              (BinOp (BinOp (Name &t:0 Load) Add (Name &n:0 Load)) Mult (BinOp (Name &t:0 Load) Add (Name &n:0 Load)))\n            )\n            (list LtE)\n            (list (BinOp (Name &r:0 Load) Mult (Name &r:0 Load)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) None)\n        (Assign (list (Name &p:0 Store)) (BinOp (Name &k:0 Load) Mult (Name &k:0 Load)) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &d:0 Load) Add (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &p:0 Load)) Mult (Name &i:0 Load))\n                  Mult\n                  (Name &i:0 Load)\n                )\n                (list Gt)\n                (list (Name &s:0 Load))\n              )\n              (/seq (Assign (list (Name &r:0 Store)) (Name &i:0 Load) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp (BinOp (Name &r:0 Load) Mult (Name &r:0 Load)) Mult (Name &p:0 Load))\n              Add\n              (BinOp\n                (BinOp\n                  (BinOp (Name &r:0 Load) Sub (Constant i1 None))\n                  Mult\n                  (BinOp (Name &r:0 Load) Sub (Constant i1 None))\n                )\n                Mult\n                (Name &p:0 Load)\n              )\n            )\n            (list LtE)\n            (list (Name &s:0 Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &x:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp\n            (BinOp (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) FloorDiv (Constant i2 None))\n            Pow\n            (Constant f0.5 None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (Name &a:0 Load) Sub (BinOp (Name &a:0 Load) Mod (Name &k:0 Load)))\n          None\n        )\n        (Assign (list (Name &b:0 Store)) (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) None)\n        (If\n          (Compare\n            (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)))\n            (list LtE)\n            (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (BinOp\n                  (Name &d:0 Load)\n                  Div\n                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Constant i2 None))) nil)\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &k:0 Load)) Mult (Name &k:0 Load))\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (BinOp\n            (BinOp\n              (Call\n                (Name g_int Load)\n                (list\n                  (_starred_content\n                    (Call\n                      (Attribute (Name g_math Load) s_sqrt Load)\n                      (list\n                        (_starred_content\n                          (BinOp\n                            (BinOp (Name &d:0 Load) Mult (Name &d:0 Load))\n                            Sub\n                            (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n              FloorDiv\n              (Name &k:0 Load)\n            )\n            Mult\n            (Name &k:0 Load)\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp\n                (BinOp (Name &a:0 Load) FloorDiv (Name &k:0 Load))\n                Add\n                (BinOp (Name &b:0 Load) FloorDiv (Name &k:0 Load))\n              )\n              Mod\n              (Constant i2 None)\n            )\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_io None) (alias g_os None)))\n    (Assign (list (Name &JJJ:0 Store)) (Name &input:0 Load) None)\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Attribute (Call (Name &JJJ:0 Load) nil nil) s_encode Load) nil nil)\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &j:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare\n            (BinOp (BinOp (Constant i2 None) Mult (Name &j:0 Load)) Mult (Name &j:0 Load))\n            (list LtE)\n            (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n          )\n          (/seq (AugAssign (Name &j:0 Store) Add (Name &k:0 Load)))\n          (/seq)\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &j:0 Load) Mult (Name &j:0 Load))\n              Add\n              (BinOp (BinOp (Name &j:0 Load) Sub (Name &k:0 Load)) Mult (BinOp (Name &j:0 Load) Sub (Name &k:0 Load)))\n            )\n            (list Gt)\n            (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &n:0 Store))\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_pow Load)\n                  (list\n                    (_starred_content\n                      (BinOp\n                        (BinOp (Name &d:0 Load) Mult (Name &d:0 Load))\n                        Div\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &k:0 Load)) Mult (Name &k:0 Load))\n                      )\n                    )\n                    (_starred_content (Constant f0.5 None))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (BinOp\n                (BinOp (BinOp (Name &n:0 Load) Add (Constant i1 None)) Mult (Name &k:0 Load))\n                Pow\n                (Constant i2 None)\n              )\n              Add\n              (BinOp (BinOp (Name &n:0 Load) Mult (Name &k:0 Load)) Pow (Constant i2 None))\n            )\n            (list LtE)\n            (list (BinOp (Name &d:0 Load) Pow (Constant i2 None)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (While (Constant i1 None) (/seq (If (BoolOp And (list (Compare (Name &x:0 Load) (list LtE) (list (Name &y:0 Load))) (Compare (BinOp (BinOp (BinOp (Name &x:0 Load) Add (Name &k:0 Load)) Mult (BinOp (Name &x:0 Load) Add (Name &k:0 Load))) Add (BinOp (Name &y:0 Load) Mult (Name &y:0 Load))) (list LtE) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))))) (/seq (AugAssign (Name &x:0 Store) Add (Name &k:0 Load))) (/seq (If (BoolOp And (list (Compare (Name &x:0 Load) (list Gt) (list (Name &y:0 Load))) (Compare (BinOp (BinOp (BinOp (Name &y:0 Load) Add (Name &k:0 Load)) Mult (BinOp (Name &y:0 Load) Add (Name &k:0 Load))) Add (BinOp (Name &x:0 Load) Mult (Name &x:0 Load))) (list LtE) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))))) (/seq (AugAssign (Name &y:0 Store) Add (Name &k:0 Load))) (/seq Break))))) (/seq)) (fn_1 (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load))))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None) (alias g_math None))) (Import (list (alias g_io None) (alias g_os None))) (ImportFrom s_bisect (list (alias s_bisect_left g_bl) (alias s_bisect_right g_br) (alias g_insort None)) i0) (ImportFrom s_heapq (list (alias g_heapify None) (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None) (alias g_Counter None)) i0) (ImportFrom s_itertools (list (alias g_permutations None) (alias g_combinations None)) i0) (FunctionDef &data:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &mdata:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &data:0 Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &outl:0 (arguments nil (list (arg &var:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (_starred_content (BinOp (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &var:1 Load))) nil))) nil) Add (Constant s-WzEwXQ== None)))) nil))) nil None None) (FunctionDef &out:0 (arguments nil (list (arg &var:2 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (_starred_content (BinOp (Call (Name g_str Load) (list (_starred_content (Name &var:2 Load))) nil) Add (Constant s-WzEwXQ== None)))) nil))) nil None None) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (Constant i100000 None))) nil)) (Assign (list (Name &INF:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &mod:0 Store)) (Constant i998244353 None) None) (For (Name &t:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &data:0 Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name &mdata:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Constant i2 None) Mult (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Pow (Constant i2 None))) (list LtE) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))) (/seq (AugAssign (Name &a:0 Store) Add (Name &k:0 Load))) (/seq)) (If (Compare (BinOp (BinOp (Name &a:0 Load) Pow (Constant i2 None)) Add (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Pow (Constant i2 None))) (list LtE) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))) (/seq (Expr (Call (Name &out:0 Load) (list (_starred_content (Constant s_Ashish None))) nil))) (/seq (Expr (Call (Name &out:0 Load) (list (_starred_content (Constant s_Utkarsh None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &a0:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) Div (BinOp (Name &k:0 Load) Mult (Name &k:0 Load))) None) (Assign (list (Name &a:0 Store)) (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:0 Load))) nil) Div (Constant i2 None)) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_pow Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant f0.5 None))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Name &a:0 Load) None) (If (Compare (BinOp (BinOp (BinOp (Name &a:0 Load) Add (Constant i1 None)) Mult (BinOp (Name &a:0 Load) Add (Constant i1 None))) Add (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))) (list LtE) (list (Name &x:0 Load))) (/seq (AugAssign (Name &a:0 Store) Add (Constant i1 None))) (/seq)) (If (Compare (BinOp (BinOp (BinOp (Name &b:0 Load) Add (Constant i1 None)) Mult (BinOp (Name &b:0 Load) Add (Constant i1 None))) Add (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))) (list LtE) (list (Name &x:0 Load))) (/seq (AugAssign (Name &b:0 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &ans:0 Store)) (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) None) (fn_1 (Compare (BinOp (Name &ans:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &val:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Name &d:0 Load) FloorDiv (BinOp (BinOp (Constant i2 None) Pow (Constant f0.5 None)) Mult (Name &k:0 Load))))) nil) None) (Assign (list (Name &p:0 Store) (Name &q:0 Store)) (BinOp (Name &val:0 Load) Mult (Name &k:0 Load)) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Name &p:0 Load) Pow (Constant i2 None)) Add (BinOp (Name &q:0 Load) Pow (Constant i2 None))) (list LtE) (list (BinOp (Name &d:0 Load) Pow (Constant i2 None)))) (/seq (If (Compare (Name &p:0 Load) (list NotEq) (list (Name &q:0 Load))) (/seq (AugAssign (Name &q:0 Store) Add (Name &k:0 Load))) (/seq (AugAssign (Name &p:0 Store) Add (Name &k:0 Load)))) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq)) (fn_1 (Compare (BinOp (Name &i:0 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))))) (/seq) None)) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &r:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &t:0 Load) Add (Name &n:0 Load)) Mult (BinOp (Name &t:0 Load) Add (Name &n:0 Load))) Mult (Constant i2 None)) (list Lt) (list (BinOp (Name &r:0 Load) Mult (Name &r:0 Load)))) (/seq (AugAssign (Name &t:0 Store) Add (Name &n:0 Load))) (/seq)) (If (Compare (BinOp (BinOp (Name &t:0 Load) Mult (Name &t:0 Load)) Add (BinOp (BinOp (Name &t:0 Load) Add (Name &n:0 Load)) Mult (BinOp (Name &t:0 Load) Add (Name &n:0 Load)))) (list LtE) (list (BinOp (Name &r:0 Load) Mult (Name &r:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) None) (Assign (list (Name &p:0 Store)) (BinOp (Name &k:0 Load) Mult (Name &k:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &d:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name &p:0 Load)) Mult (Name &i:0 Load)) Mult (Name &i:0 Load)) (list Gt) (list (Name &s:0 Load))) (/seq (Assign (list (Name &r:0 Store)) (Name &i:0 Load) None) Break) (/seq))) (/seq) None) (If (Compare (BinOp (BinOp (BinOp (Name &r:0 Load) Mult (Name &r:0 Load)) Mult (Name &p:0 Load)) Add (BinOp (BinOp (BinOp (Name &r:0 Load) Sub (Constant i1 None)) Mult (BinOp (Name &r:0 Load) Sub (Constant i1 None))) Mult (Name &p:0 Load))) (list LtE) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &x:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) FloorDiv (Constant i2 None)) Pow (Constant f0.5 None)) None) (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Sub (BinOp (Name &a:0 Load) Mod (Name &k:0 Load))) None) (Assign (list (Name &b:0 Store)) (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) None) (If (Compare (BinOp (BinOp (Name &a:0 Load) Mult (Name &a:0 Load)) Add (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))) (list LtE) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (BinOp (Name &d:0 Load) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Constant i2 None))) nil)))) nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &k:0 Load)) Mult (Name &k:0 Load)) None) (Assign (list (Name &b:0 Store)) (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) Sub (BinOp (Name &a:0 Load) Mult (Name &a:0 Load))))) nil))) nil) FloorDiv (Name &k:0 Load)) Mult (Name &k:0 Load)) None) (fn_1 (Compare (BinOp (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &k:0 Load)) Add (BinOp (Name &b:0 Load) FloorDiv (Name &k:0 Load))) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_io None) (alias g_os None))) (Assign (list (Name &JJJ:0 Store)) (Name &input:0 Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Name &JJJ:0 Load) nil nil) s_encode Load) nil nil)) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &j:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Constant i2 None) Mult (Name &j:0 Load)) Mult (Name &j:0 Load)) (list LtE) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))) (/seq (AugAssign (Name &j:0 Store) Add (Name &k:0 Load))) (/seq)) (fn_1 (Compare (BinOp (BinOp (Name &j:0 Load) Mult (Name &j:0 Load)) Add (BinOp (BinOp (Name &j:0 Load) Sub (Name &k:0 Load)) Mult (BinOp (Name &j:0 Load) Sub (Name &k:0 Load)))) (list Gt) (list (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_pow Load) (list (_starred_content (BinOp (BinOp (Name &d:0 Load) Mult (Name &d:0 Load)) Div (BinOp (BinOp (Constant i2 None) Mult (Name &k:0 Load)) Mult (Name &k:0 Load)))) (_starred_content (Constant f0.5 None))) nil))) nil) None) (If (Compare (BinOp (BinOp (BinOp (BinOp (Name &n:0 Load) Add (Constant i1 None)) Mult (Name &k:0 Load)) Pow (Constant i2 None)) Add (BinOp (BinOp (Name &n:0 Load) Mult (Name &k:0 Load)) Pow (Constant i2 None))) (list LtE) (list (BinOp (Name &d:0 Load) Pow (Constant i2 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Ashish None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Utkarsh None))) nil))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &arr:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &a:0 Store)) (Call (Name &r:0 Load) nil nil) None)\n        (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &row:0 Store))\n      (ListComp\n        (Call (Name g_sum Load) (list (_starred_content (Name &i:1 Load))) nil)\n        (list (comprehension (Name &i:1 Store) (Name &arr:0 Load) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &col:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &c:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &arr:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (_slice_content (Name &i:0 Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Attribute (Name &col:0 Load) s_append Load) (list (_starred_content (Name &c:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &row:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list Lt)\n                (list (Subscript (Name &col:0 Load) (_slice_content (Name &j:0 Load)) Load))\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &total:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &board:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &row:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &board:0 Load) s_append Load) (list (_starred_content (Name &row:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign\n              (list\n                (Tuple (list (_starred_content (Name &row_s:0 Store)) (_starred_content (Name &column:0 Store))) Store)\n              )\n              (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n              None\n            )\n            (For\n              (Name &k:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n              (/seq\n                (AugAssign\n                  (Name &row_s:0 Store)\n                  Add\n                  (Subscript\n                    (Subscript (Name &board:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (Name &k:0 Load))\n                    Load\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (For\n              (Name &l:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n              (/seq\n                (AugAssign\n                  (Name &column:0 Store)\n                  Add\n                  (Subscript\n                    (Subscript (Name &board:0 Load) (_slice_content (Name &l:0 Load)) Load)\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &column:0 Load) (list Gt) (list (Name &row_s:0 Load)))\n              (/seq (AugAssign (Name &total:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &total:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ClassDef\n      &CodeforcesTask157ASolution:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:2 Load) s_result Store)) (Constant s_ None) None)\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Constant i0 None) None)\n            (Assign (list (Attribute (Name &self:2 Load) s_board Store)) (List nil Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read_input:1\n          (arguments nil (list (arg &self:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_n Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n              None\n            )\n            (For\n              (Name &x:3 Store)\n              (Call (Name g_range Load) (list (_starred_content (Attribute (Name &self:3 Load) s_n Load))) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:3 Load) s_board Load) s_append Load)\n                    (list\n                      (_starred_content\n                        (ListComp\n                          (Call (Name g_int Load) (list (_starred_content (Name &y:7 Load))) nil)\n                          (list\n                            (comprehension\n                              (Name &y:7 Store)\n                              (Call\n                                (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                                (list (_starred_content (Constant s-WzMyXQ== None)))\n                                nil\n                              )\n                              nil\n                              i0\n                            )\n                          )\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &process_task:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &hor_sums:4 Store))\n              (ListComp\n                (Call (Name g_sum Load) (list (_starred_content (Name &x:6 Load))) nil)\n                (list (comprehension (Name &x:6 Store) (Attribute (Name &self:4 Load) s_board Load) nil i0))\n              )\n              None\n            )\n            (Assign (list (Name &vert_sums:4 Store)) (List nil Load) None)\n            (For\n              (Name &x:4 Store)\n              (Call (Name g_range Load) (list (_starred_content (Attribute (Name &self:4 Load) s_n Load))) nil)\n              (/seq\n                (Assign (list (Name &ss:4 Store)) (Constant i0 None) None)\n                (For\n                  (Name &y:4 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Attribute (Name &self:4 Load) s_n Load))) nil)\n                  (/seq\n                    (AugAssign\n                      (Name &ss:4 Store)\n                      Add\n                      (Subscript\n                        (Subscript (Attribute (Name &self:4 Load) s_board Load) (_slice_content (Name &y:4 Load)) Load)\n                        (_slice_content (Name &x:4 Load))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &vert_sums:4 Load) s_append Load)\n                    (list (_starred_content (Name &ss:4 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign (list (Name &winning:4 Store)) (Constant i0 None) None)\n            (For\n              (Name &hor:4 Store)\n              (Name &hor_sums:4 Load)\n              (/seq\n                (For\n                  (Name &ver:4 Store)\n                  (Name &vert_sums:4 Load)\n                  (/seq\n                    (If\n                      (Compare (Name &ver:4 Load) (list Gt) (list (Name &hor:4 Load)))\n                      (/seq (AugAssign (Name &winning:4 Store) Add (Constant i1 None)))\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_result Store))\n              (Call (Name g_str Load) (list (_starred_content (Name &winning:4 Load))) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_result:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:5 Load) s_result Load)))\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign (list (Name &Solution:0 Store)) (Call (Name &CodeforcesTask157ASolution:0 Load) nil nil) None)\n        (Expr (Call (Attribute (Name &Solution:0 Load) s_read_input Load) nil nil))\n        (Expr (Call (Attribute (Name &Solution:0 Load) s_process_task Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Attribute (Name &Solution:0 Load) s_get_result Load) nil nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import\n      (list\n        (alias g_math None)\n        (alias g_itertools None)\n        (alias g_fractions None)\n        (alias g_heapq None)\n        (alias g_collections None)\n        (alias g_bisect None)\n        (alias g_sys None)\n        (alias g_queue None)\n        (alias g_copy None)\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i7 None))))\n        nil\n      )\n    )\n    (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dd:0 Store))\n      (List\n        (list\n          (_starred_content\n            (Tuple\n              (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None)))\n              Load\n            )\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple\n              (list (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None))))\n              Load\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &ddn:0 Store))\n      (List\n        (list\n          (_starred_content\n            (Tuple\n              (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None)))\n              Load\n            )\n          )\n          (_starred_content\n            (Tuple\n              (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i1 None)))\n              Load\n            )\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load)\n          )\n          (_starred_content\n            (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)\n          )\n          (_starred_content\n            (Tuple\n              (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None))))\n              Load\n            )\n          )\n          (_starred_content\n            (Tuple\n              (list (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None))))\n              Load\n            )\n          )\n          (_starred_content\n            (Tuple\n              (list\n                (_starred_content (UnaryOp USub (Constant i1 None)))\n                (_starred_content (UnaryOp USub (Constant i1 None)))\n              )\n              Load\n            )\n          )\n        )\n        Load\n      )\n      None\n    )\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &I:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &F:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_float Load)\n            (list\n              (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LS:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_split\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &S:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_input Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name &I:0 Load) nil nil) None)\n        (Assign\n          (list (Name &l:1 Store))\n          (ListComp\n            (Call (Name &LI:0 Load) nil nil)\n            (list\n              (comprehension\n                (Name &_:3 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n          (/seq\n            (For\n              (Name &j:1 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n              (/seq\n                (Assign\n                  (list (Name &yoko:1 Store))\n                  (Call\n                    (Name g_sum Load)\n                    (list (_starred_content (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load)))\n                    nil\n                  )\n                  None\n                )\n                (Assign (list (Name &tate:1 Store)) (Constant i0 None) None)\n                (For\n                  (Name &k:1 Store)\n                  (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil)\n                  (/seq\n                    (AugAssign\n                      (Name &tate:1 Store)\n                      Add\n                      (Subscript\n                        (Subscript (Name &l:1 Load) (_slice_content (Name &k:1 Load)) Load)\n                        (_slice_content (Name &j:1 Load))\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n                (If\n                  (Compare (Name &yoko:1 Load) (list Lt) (list (Name &tate:1 Load)))\n                  (/seq (AugAssign (Name &ans:1 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &ans:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &matrix:0 Store)) (List nil Load) None)\n    (Assign (list (Name &row_sums:0 Store)) (List nil Load) None)\n    (For\n      (Name &r:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &row:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &matrix:0 Load) s_append Load) (list (_starred_content (Name &row:0 Load))) nil))\n        (Expr\n          (Call\n            (Attribute (Name &row_sums:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &row:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &result:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &c:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &col_sum:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &r:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (AugAssign\n              (Name &col_sum:0 Store)\n              Add\n              (Subscript\n                (Subscript (Name &matrix:0 Load) (_slice_content (Name &r:0 Load)) Load)\n                (_slice_content (Name &c:0 Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &row_sum:0 Store)\n          (Name &row_sums:0 Load)\n          (/seq\n            (If\n              (Compare (Name &col_sum:0 Load) (list Gt) (list (Name &row_sum:0 Load)))\n              (/seq (AugAssign (Name &result:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &judge:0\n      (arguments\n        nil\n        (list (arg &i:1 None None) (arg &j:1 None None) (arg &matrix:1 (Name g_list Load) None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &col:1 Store)) (_starred_content (Name &row:1 Store))) Store))\n          (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)\n          None\n        )\n        (Assign\n          (list (Name &row:1 Store))\n          (Call\n            (Name g_sum Load)\n            (list (_starred_content (Subscript (Name &matrix:1 Load) (_slice_content (Name &i:1 Load)) Load)))\n            nil\n          )\n          None\n        )\n        (For\n          (Name &k:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &matrix:1 Load))) nil)))\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Name &col:1 Store)\n              Add\n              (Subscript\n                (Subscript (Name &matrix:1 Load) (_slice_content (Name &k:1 Load)) Load)\n                (_slice_content (Name &j:1 Load))\n                Load\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &col:1 Load) (list Gt) (list (Name &row:1 Load)))\n          (/seq (Return (Constant True None)))\n          (/seq (Return (Constant False None)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &counter:0\n      (arguments nil (list (arg &matrix:2 (Name g_list Load) None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &lenth:2 Store))\n          (Call (Name g_len Load) (list (_starred_content (Name &matrix:2 Load))) nil)\n          None\n        )\n        (Assign (list (Name &count:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &lenth:2 Load))) nil)\n          (/seq\n            (For\n              (Name &j:2 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &lenth:2 Load))) nil)\n              (/seq\n                (If\n                  (Call\n                    (Name &judge:0 Load)\n                    (list\n                      (_starred_content (Name &i:2 Load))\n                      (_starred_content (Name &j:2 Load))\n                      (_starred_content (Name &matrix:2 Load))\n                    )\n                    nil\n                  )\n                  (/seq (AugAssign (Name &count:2 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &count:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &lenth:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &matrix:0 Store))\n          (ListComp\n            (Call\n              (Name g_list Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (_starred_content (Name g_int Load))\n                      (_starred_content\n                        (Call\n                          (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                          (list (_starred_content (Constant s-WzMyXQ== None)))\n                          nil\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list\n              (comprehension\n                (Name &i:3 Store)\n                (Call (Name g_range Load) (list (_starred_content (Name &lenth:0 Load))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (_starred_content (Call (Name &counter:0 Load) (list (_starred_content (Name &matrix:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &b:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Name &b:0 Load))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &zip_a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (_starred_content (Call (Name g_zip Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &rows:0 Store)) (List nil Load) None)\n    (Assign (list (Name &columns:0 Store)) (List nil Load) None)\n    (For\n      (Name &row:0 Store)\n      (Name &a:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &rows:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &row:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &column:0 Store)\n      (Name &zip_a:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &columns:0 Load) s_append Load)\n            (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &column:0 Load))) nil)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &columns:0 Load) (_slice_content (Name &j:0 Load)) Load)\n                (list Gt)\n                (list (Subscript (Name &rows:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n              (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &matrix:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &matrix:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_list Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &num_wining:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &row:0 Store)\n      (Name &matrix:0 Load)\n      (/seq\n        (Assign\n          (list (Name &row_sum:0 Store))\n          (Call (Name g_sum Load) (list (_starred_content (Name &row:0 Load))) nil)\n          None\n        )\n        (For\n          (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &x:0 Store))) Store)\n          (Call\n            (Name g_zip Load)\n            (list\n              (_starred_content (Name &row:0 Load))\n              (_starred_content\n                (Call\n                  (Name g_range Load)\n                  (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &row:0 Load))) nil)))\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &colum_sum:0 Store))\n              (Call\n                (Name g_sum Load)\n                (list\n                  (_starred_content\n                    (ListComp\n                      (Subscript (Name &row:1 Load) (_slice_content (Name &x:0 Load)) Load)\n                      (list (comprehension (Name &row:1 Store) (Name &matrix:0 Load) nil i0))\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &colum_sum:0 Load) (list Gt) (list (Name &row_sum:0 Load)))\n              (/seq (AugAssign (Name &num_wining:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &num_wining:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign (list (Name &k:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &k:0 Load) s_append Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_tuple Load)\n                  (list\n                    (_starred_content\n                      (Call\n                        (Name g_map Load)\n                        (list\n                          (_starred_content (Name g_int Load))\n                          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &k1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (_starred_content (Call (Name g_zip Load) (list (_starred_starred (Starred (Name &k:0 Load) Load))) nil)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (If\n              (Compare\n                (Call\n                  (Name g_sum Load)\n                  (list (_starred_content (Subscript (Name &k1:0 Load) (_slice_content (Name &j:0 Load)) Load)))\n                  nil\n                )\n                (list Gt)\n                (list\n                  (Call\n                    (Name g_sum Load)\n                    (list (_starred_content (Subscript (Name &k:0 Load) (_slice_content (Name &i:0 Load)) Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (_starred_content\n              (Call\n                (Name g_map Load)\n                (list\n                  (_starred_content (Name g_int Load))\n                  (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      (/seq)\n    )\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n          (/seq\n            (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &i1:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n              (/seq\n                (AugAssign\n                  (Name &s:0 Store)\n                  Add\n                  (Subscript\n                    (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (_slice_content (Name &i1:0 Load))\n                    Load\n                  )\n                )\n                (AugAssign\n                  (Name &s:0 Store)\n                  Sub\n                  (Subscript\n                    (Subscript (Name &l:0 Load) (_slice_content (Name &i1:0 Load)) Load)\n                    (_slice_content (Name &j:0 Load))\n                    Load\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &s:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (Assign (list (Name %2 Store)) (List nil Load) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) ?1 (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content #0)) nil))) (/seq) None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [
          "S",
          "S"
        ],
        "choice_arity": 2,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &r:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (Assign (list (Name &arr:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name &r:0 Load) nil nil) None) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq) None) (Assign (list (Name &row:0 Store)) (ListComp (Call (Name g_sum Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Name &arr:0 Load) nil i0))) None) (Assign (list (Name &col:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &c:0 Store) Add (Subscript (Subscript (Name &arr:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Name &i:0 Load)) Load))) (/seq) None) (Expr (Call (Attribute (Name &col:0 Load) s_append Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &row:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Subscript (Name &col:0 Load) (_slice_content (Name &j:0 Load)) Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Name &row:0 Load) &n:0 &board:0 &row:0 &i:0 (Assign (list (Name &total:0 Store)) (Constant i0 None) None) /nothing)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &row_s:0 Store)) (_starred_content (Name &column:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &row_s:0 Store) Add (Subscript (Subscript (Name &board:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &k:0 Load)) Load))) (/seq) None) (For (Name &l:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &column:0 Store) Add (Subscript (Subscript (Name &board:0 Load) (_slice_content (Name &l:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq) None) (If (Compare (Name &column:0 Load) (list Gt) (list (Name &row_s:0 Load))) (/seq (AugAssign (Name &total:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &total:0 Load))) nil))) nil)",
      "(Module (/seq (ClassDef &CodeforcesTask157ASolution:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_result Store)) (Constant s_ None) None) (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Constant i0 None) None) (Assign (list (Attribute (Name &self:2 Load) s_board Store)) (List nil Load) None)) nil None None) (FunctionDef &read_input:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &x:3 Store) (Call (Name g_range Load) (list (_starred_content (Attribute (Name &self:3 Load) s_n Load))) nil) (/seq (Expr (Call (Attribute (Attribute (Name &self:3 Load) s_board Load) s_append Load) (list (_starred_content (ListComp (Call (Name g_int Load) (list (_starred_content (Name &y:7 Load))) nil) (list (comprehension (Name &y:7 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) nil i0))))) nil))) (/seq) None)) nil None None) (FunctionDef &process_task:1 (arguments nil (list (arg &self:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &hor_sums:4 Store)) (ListComp (Call (Name g_sum Load) (list (_starred_content (Name &x:6 Load))) nil) (list (comprehension (Name &x:6 Store) (Attribute (Name &self:4 Load) s_board Load) nil i0))) None) (Assign (list (Name &vert_sums:4 Store)) (List nil Load) None) (For (Name &x:4 Store) (Call (Name g_range Load) (list (_starred_content (Attribute (Name &self:4 Load) s_n Load))) nil) (/seq (Assign (list (Name &ss:4 Store)) (Constant i0 None) None) (For (Name &y:4 Store) (Call (Name g_range Load) (list (_starred_content (Attribute (Name &self:4 Load) s_n Load))) nil) (/seq (AugAssign (Name &ss:4 Store) Add (Subscript (Subscript (Attribute (Name &self:4 Load) s_board Load) (_slice_content (Name &y:4 Load)) Load) (_slice_content (Name &x:4 Load)) Load))) (/seq) None) (Expr (Call (Attribute (Name &vert_sums:4 Load) s_append Load) (list (_starred_content (Name &ss:4 Load))) nil))) (/seq) None) (Assign (list (Name &winning:4 Store)) (Constant i0 None) None) (For (Name &hor:4 Store) (Name &hor_sums:4 Load) (/seq (For (Name &ver:4 Store) (Name &vert_sums:4 Load) (/seq (If (Compare (Name &ver:4 Load) (list Gt) (list (Name &hor:4 Load))) (/seq (AugAssign (Name &winning:4 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Call (Name g_str Load) (list (_starred_content (Name &winning:4 Load))) nil) None)) nil None None) (FunctionDef &get_result:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:5 Load) s_result Load))) nil None None)) nil) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &Solution:0 Store)) (Call (Name &CodeforcesTask157ASolution:0 Load) nil nil) None) (Expr (Call (Attribute (Name &Solution:0 Load) s_read_input Load) nil nil)) (Expr (Call (Attribute (Name &Solution:0 Load) s_process_task Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &Solution:0 Load) s_get_result Load) nil nil))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None) (alias g_itertools None) (alias g_fractions None) (alias g_heapq None) (alias g_collections None) (alias g_bisect None) (alias g_sys None) (alias g_queue None) (alias g_copy None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i7 None)))) nil)) (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &dd:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) Load))) Load) None) (Assign (list (Name &ddn:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) Load))) Load) None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &F:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_float Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &LS:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil None None) (FunctionDef &S:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_input Load) nil nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name &I:0 Load) nil nil) None) (Assign (list (Name &l:1 Store)) (ListComp (Call (Name &LI:0 Load) nil nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &yoko:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &l:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None) (Assign (list (Name &tate:1 Store)) (Constant i0 None) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &tate:1 Store) Add (Subscript (Subscript (Name &l:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load))) (/seq) None) (If (Compare (Name &yoko:1 Load) (list Lt) (list (Name &tate:1 Load))) (/seq (AugAssign (Name &ans:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &ans:1 Load))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &main:0 Load) nil nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sum Load) (list (_starred_content (Name &row:0 Load))) nil) &n:0 &row_sums:0 &row:0 &r:0 (Assign (list (Name &matrix:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &matrix:0 Load) s_append Load) (list (_starred_content (Name &row:0 Load))) nil)))) (Assign (list (Name &result:0 Store)) (Constant i0 None) None) (For (Name &c:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &col_sum:0 Store)) (Constant i0 None) None) (For (Name &r:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &col_sum:0 Store) Add (Subscript (Subscript (Name &matrix:0 Load) (_slice_content (Name &r:0 Load)) Load) (_slice_content (Name &c:0 Load)) Load))) (/seq) None) (For (Name &row_sum:0 Store) (Name &row_sums:0 Load) (/seq (If (Compare (Name &col_sum:0 Load) (list Gt) (list (Name &row_sum:0 Load))) (/seq (AugAssign (Name &result:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &judge:0 (arguments nil (list (arg &i:1 None None) (arg &j:1 None None) (arg &matrix:1 (Name g_list Load) None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &col:1 Store)) (_starred_content (Name &row:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &row:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &matrix:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &matrix:1 Load))) nil))) nil) (/seq (AugAssign (Name &col:1 Store) Add (Subscript (Subscript (Name &matrix:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load))) (/seq) None) (If (Compare (Name &col:1 Load) (list Gt) (list (Name &row:1 Load))) (/seq (Return (Constant True None))) (/seq (Return (Constant False None))))) nil None None) (FunctionDef &counter:0 (arguments nil (list (arg &matrix:2 (Name g_list Load) None)) None nil nil None nil) (/seq (Assign (list (Name &lenth:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &matrix:2 Load))) nil) None) (Assign (list (Name &count:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &lenth:2 Load))) nil) (/seq (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &lenth:2 Load))) nil) (/seq (If (Call (Name &judge:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &j:2 Load)) (_starred_content (Name &matrix:2 Load))) nil) (/seq (AugAssign (Name &count:2 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &count:2 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &lenth:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &matrix:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &lenth:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &counter:0 Load) (list (_starred_content (Name &matrix:0 Load))) nil))) nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 (Name &b:0 Load) &n:0 &a:0 &b:0 &i:0 /nothing /nothing)) (Assign (list (Name &zip_a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_starred (Starred (Name &a:0 Load) Load))) nil))) nil) None) (Assign (list (Name &rows:0 Store)) (List nil Load) None) (Assign (list (Name &columns:0 Store)) (List nil Load) None) (For (Name &row:0 Store) (Name &a:0 Load) (/seq (Expr (Call (Attribute (Name &rows:0 Load) s_append Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &row:0 Load))) nil))) nil))) (/seq) None) (For (Name &column:0 Store) (Name &zip_a:0 Load) (/seq (Expr (Call (Attribute (Name &columns:0 Load) s_append Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &column:0 Load))) nil))) nil))) (/seq) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &columns:0 Load) (_slice_content (Name &j:0 Load)) Load) (list Gt) (list (Subscript (Name &rows:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &matrix:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Expr (Call (Attribute (Name &matrix:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (Assign (list (Name &num_wining:0 Store)) (Constant i0 None) None) (For (Name &row:0 Store) (Name &matrix:0 Load) (/seq (Assign (list (Name &row_sum:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &row:0 Load))) nil) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &x:0 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &row:0 Load)) (_starred_content (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &row:0 Load))) nil))) nil))) nil) (/seq (Assign (list (Name &colum_sum:0 Store)) (Call (Name g_sum Load) (list (_starred_content (ListComp (Subscript (Name &row:1 Load) (_slice_content (Name &x:0 Load)) Load) (list (comprehension (Name &row:1 Store) (Name &matrix:0 Load) nil i0))))) nil) None) (If (Compare (Name &colum_sum:0 Load) (list Gt) (list (Name &row_sum:0 Load))) (/seq (AugAssign (Name &num_wining:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &num_wining:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &k:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &k:0 Load) s_append Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil))) (/seq) None) (Assign (list (Name &k1:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_starred (Starred (Name &k:0 Load) Load))) nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &k1:0 Load) (_slice_content (Name &j:0 Load)) Load))) nil) (list Gt) (list (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &k:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (For (Name &i1:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &s:0 Store) Add (Subscript (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &i1:0 Load)) Load)) (AugAssign (Name &s:0 Store) Sub (Subscript (Subscript (Name &l:0 Load) (_slice_content (Name &i1:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq) None) (If (Compare (Name &s:0 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) nil)"
    ]
  }
]